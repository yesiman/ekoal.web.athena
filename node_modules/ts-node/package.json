{
  "_args": [
    [
      {
        "raw": "ts-node@6.0.3",
        "scope": null,
        "escapedName": "ts-node",
        "name": "ts-node",
        "rawSpec": "6.0.3",
        "spec": "6.0.3",
        "type": "version"
      },
      "/Users/yesi/_dev/__current/ekoal.web.athena"
    ]
  ],
  "_from": "ts-node@6.0.3",
  "_id": "ts-node@6.0.3",
  "_inCache": true,
  "_location": "/ts-node",
  "_nodeVersion": "9.8.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/ts-node_6.0.3_1525615669590_0.9337972605734275"
  },
  "_npmUser": {
    "name": "blakeembrey",
    "email": "hello@blakeembrey.com"
  },
  "_npmVersion": "5.6.0",
  "_phantomChildren": {
    "ansi-styles": "3.2.1",
    "escape-string-regexp": "1.0.5",
    "supports-color": "5.4.0"
  },
  "_requested": {
    "raw": "ts-node@6.0.3",
    "scope": null,
    "escapedName": "ts-node",
    "name": "ts-node",
    "rawSpec": "6.0.3",
    "spec": "6.0.3",
    "type": "version"
  },
  "_requiredBy": [
    "#DEV:/"
  ],
  "_resolved": "https://registry.npmjs.org/ts-node/-/ts-node-6.0.3.tgz",
  "_shasum": "28bf74bcad134fad17f7469dad04638ece03f0f4",
  "_shrinkwrap": null,
  "_spec": "ts-node@6.0.3",
  "_where": "/Users/yesi/_dev/__current/ekoal.web.athena",
  "author": {
    "name": "Blake Embrey",
    "email": "hello@blakeembrey.com",
    "url": "http://blakeembrey.me"
  },
  "bin": {
    "ts-node": "dist/bin.js"
  },
  "bugs": {
    "url": "https://github.com/TypeStrong/ts-node/issues"
  },
  "dependencies": {
    "arrify": "^1.0.0",
    "chalk": "^2.3.0",
    "diff": "^3.1.0",
    "make-error": "^1.1.1",
    "minimist": "^1.2.0",
    "mkdirp": "^0.5.1",
    "source-map-support": "^0.5.3",
    "yn": "^2.0.0"
  },
  "description": "TypeScript execution environment and REPL for node",
  "devDependencies": {
    "@types/arrify": "^1.0.1",
    "@types/chai": "^4.0.4",
    "@types/diff": "^3.2.1",
    "@types/minimist": "^1.2.0",
    "@types/mkdirp": "^0.5.0",
    "@types/mocha": "^5.0.0",
    "@types/node": "^10.0.3",
    "@types/proxyquire": "^1.3.28",
    "@types/react": "^16.0.2",
    "@types/semver": "^5.3.34",
    "@types/source-map-support": "^0.4.0",
    "@types/yn": "github:types/npm-yn#ca75f6c82940fae6a06fb41d2d37a6aa9b4ea8e9",
    "chai": "^4.0.1",
    "istanbul": "^0.4.0",
    "mocha": "^5.0.1",
    "ntypescript": "^1.201507091536.1",
    "proxyquire": "^2.0.0",
    "react": "^16.0.0",
    "rimraf": "^2.5.4",
    "semver": "^5.1.0",
    "tslint": "^5.0.0",
    "tslint-config-standard": "^7.0.0",
    "typescript": "^2.8.1"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-ARaOMNFEPKg2ZuC1qJddFvHxHNFVckR0g9xLxMIoMqSSIkDc8iS4/LoV53EdDWWNq2FGwqcEf0bVVGJIWpsznw==",
    "shasum": "28bf74bcad134fad17f7469dad04638ece03f0f4",
    "tarball": "https://registry.npmjs.org/ts-node/-/ts-node-6.0.3.tgz",
    "fileCount": 15,
    "unpackedSize": 127420,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJa7ww3CRA9TVsSAnZWagAAVI4QAKMa+fJBuUSrvt5OD8F6\nvZtFS4TEftJGjhCpVW4Gxd6r1hXbgpuosfFXxVYOZHJaDhOe8LNOqB9kFH5f\npt3pXIQLw+M2tcPrSpoVan0r/q0He8wReb5hGfKuHNi9BS69UIAuMJ2xdqsL\nbtt8GOKasK+X/eVs/5gbWycc7lPxaz7fFxuP7MIzyFaouBB8pgFSvIHeqwRP\nnuzWWULdKY7AFiRnvhng36/JCkrQgF2mASqryEUuSu/yKal+FqEnsoynNnOk\nzvSgJeNZtuWGWJmin9ulvAxv1lZamPbugvo5BFGYHvyWIM3U4uxwWb64Mjap\n5Eh2Tt7irCgtfFk6+SZWOApJP1KlAPvjkLkof/vdN5oZfwcKe1cnpeJB9BJa\nBhMpiHrbK+WGA709Le6WHn3OZPG+P44dyVBSSorVhBClE7k/Pkaxcq3hQqxu\n5X3+yUaprK9SWEMOZV1C2vQk49jmkMOvOhsCXhffaNdMrMA3s9sNZps9NT6a\nigrbGrj8af6CBLDCT2hzzPI74PK2f4/W01KZdCEQfgkOL1EqfNaWsyyzxaFP\nCmRVxXK8mexu6xSlcl7cWgHOQWKkzDV/Dz10+8iNY5h6Iu9zeZurHjBR1/XK\nXyQjHzPiOuspNmKaltGM4e/C0YaP71sp9cS2M0+hNvUi1nKgGxyi4WhMWQ1Y\nPG3k\r\n=Pj4t\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "engines": {
    "node": ">=4.2.0"
  },
  "files": [
    "dist/",
    "register/",
    "LICENSE"
  ],
  "gitHead": "df41bdb86326d5e6efed150cf99eb24d68991211",
  "homepage": "https://github.com/TypeStrong/ts-node",
  "keywords": [
    "typescript",
    "node",
    "runtime",
    "environment",
    "ts",
    "compiler"
  ],
  "license": "MIT",
  "main": "dist/index.js",
  "maintainers": [
    {
      "name": "blakeembrey",
      "email": "hello@blakeembrey.com"
    }
  ],
  "name": "ts-node",
  "optionalDependencies": {},
  "readme": "# TypeScript Node\n\n[![NPM version][npm-image]][npm-url]\n[![NPM downloads][downloads-image]][downloads-url]\n[![Build status][travis-image]][travis-url]\n[![Test coverage][coveralls-image]][coveralls-url]\n\n> TypeScript execution and REPL for node. **Works with `typescript@>=2.0`**.\n\n## Installation\n\n```sh\nnpm install -g ts-node\nnpm install -g typescript\n```\n\n## Features\n\n* Execute TypeScript files with node\n* Interactive REPL\n* Execute (and print) TypeScript through the CLI\n* Source map support\n* Loads compiler options from `tsconfig.json`\n\n## Usage\n\n```sh\n# Execute a script as `node` + `tsc`.\nts-node script.ts\n\n# Starts a TypeScript REPL.\nts-node\n\n# Execute code with TypeScript.\nts-node -e 'console.log(\"Hello, world!\")'\n\n# Execute, and print, code with TypeScript.\nts-node -p '\"Hello, world!\"'\n\n# Pipe scripts to execute with TypeScript.\necho \"console.log('Hello, world!')\" | ts-node\n```\n\n![TypeScript REPL](https://github.com/TypeStrong/ts-node/raw/master/screenshot.png)\n\n### Programmatic\n\nYou can require `ts-node` and register the loader for future requires by using `require('ts-node').register({ /* options */ })`. You can also use file shortcuts - `node -r ts-node/register` or `node -r ts-node/register/transpile-only` - depending on your preferences.\n\n**Note:** If you need to use advanced node.js CLI arguments (e.g. `--inspect`), use them with `node -r ts-node/register` instead of the `ts-node` CLI.\n\n### Mocha\n\n```sh\nmocha --require ts-node/register --watch-extensions ts,tsx \"test/**/*.{ts,tsx}\" [...args]\n```\n\n**Note:** `--watch-extensions` is only used in `--watch` mode.\n\n### Tape\n\n```sh\nts-node node_modules/tape/bin/tape [...args]\n```\n\n### Gulp\n\n```sh\n# Create a `gulpfile.ts` and run `gulp`.\ngulp\n```\n\n### Visual Studio Code\n\nCreate a new node.js configuration, add `-r ts-node/register` to node args and move the `program` to the `args` list (so VS Code doesn't look for `outFiles`).\n\n```json\n{\n    \"type\": \"node\",\n    \"request\": \"launch\",\n    \"name\": \"Launch Program\",\n    \"runtimeArgs\": [\n        \"-r\",\n        \"ts-node/register\"\n    ],\n    \"args\": [\n        \"${workspaceFolder}/index.ts\"\n    ]\n}\n```\n\n## How It Works\n\n**TypeScript Node** works by registering the TypeScript compiler for `.tsx?` and `.jsx?` extension (when `allowJs == true`). When node.js has an extension registered (via `require.extensions`), it will use the extension internally for module resolution. When an extension is unknown to node.js, it handles the file as `.js` (JavaScript).\n\n**P.S.** This means if you don't register an extension, it is compiled as JavaScript. When `ts-node` is used with `allowJs`, JavaScript files are transpiled using the TypeScript compiler.\n\n## Loading `tsconfig.json`\n\n**Typescript Node** loads `tsconfig.json` automatically. Use `--skip-project` to the loading `tsconfig.json`.\n\n**Tip**: You can use `ts-node` together with [tsconfig-paths](https://www.npmjs.com/package/tsconfig-paths) to load modules according to the `paths` section in `tsconfig.json`.\n\n## Configuration Options\n\nYou can set options by passing them before the script path, via programmatic usage or via environment variables.\n\n```sh\nts-node --compiler ntypescript --project src/tsconfig.json hello-world.ts\n```\n\n### CLI Options\n\nSupports `--print`, `--eval` and `--require` from [node.js CLI options](https://nodejs.org/api/cli.html).\n\n* `--help` Prints help text\n* `--version` Prints version information\n\n### CLI and Programmatic Options\n\n_Environment variable denoted in parentheses._\n\n* `--transpileOnly` Use TypeScript's faster `transpileModule` (`TS_NODE_TRANSPILE_ONLY`)\n* `--cacheDirectory` Configure the output file cache directory (`TS_NODE_CACHE_DIRECTORY`)\n* `-I, --ignore [pattern]` Override the path patterns to skip compilation (`TS_NODE_IGNORE`)\n* `-P, --project [path]` Path to TypeScript JSON project file (`TS_NODE_PROJECT`)\n* `-C, --compiler [name]` Specify a custom TypeScript compiler (`TS_NODE_COMPILER`)\n* `-D, --ignoreDiagnostics [code]` Ignore TypeScript warnings by diagnostic code (`TS_NODE_IGNORE_DIAGNOSTICS`)\n* `-O, --compilerOptions [opts]` JSON object to merge with compiler options (`TS_NODE_COMPILER_OPTIONS`)\n* `--no-cache` Disable the local TypeScript Node cache (`TS_NODE_CACHE`)\n* `--skip-project` Skip project config resolution and loading (`TS_NODE_SKIP_PROJECT`)\n* `--skip-ignore` Skip ignore checks (`TS_NODE_SKIP_IGNORE`)\n\n### Programmatic Only Options\n\n* `transformers` An array of transformers to pass to TypeScript\n* `readFile` Custom TypeScript-compatible file reading function\n* `fileExists` Custom TypeScript-compatible file existence function\n\n## Watching and Restarting\n\n**TypeScript Node** compiles source code via `require()`, watching files and code reloads are out of scope for the project. If you want to restart the `ts-node` process on file change, existing node.js tools such as [nodemon](https://github.com/remy/nodemon), [onchange](https://github.com/Qard/onchange) and [node-dev](https://github.com/fgnass/node-dev) work.\n\nThere's also [`ts-node-dev`](https://github.com/whitecolor/ts-node-dev), a modified version of [`node-dev`](https://github.com/fgnass/node-dev) using `ts-node` for compilation and won't restart the process on file change.\n\n## License\n\nMIT\n\n[npm-image]: https://img.shields.io/npm/v/ts-node.svg?style=flat\n[npm-url]: https://npmjs.org/package/ts-node\n[downloads-image]: https://img.shields.io/npm/dm/ts-node.svg?style=flat\n[downloads-url]: https://npmjs.org/package/ts-node\n[travis-image]: https://img.shields.io/travis/TypeStrong/ts-node.svg?style=flat\n[travis-url]: https://travis-ci.org/TypeStrong/ts-node\n[coveralls-image]: https://img.shields.io/coveralls/TypeStrong/ts-node.svg?style=flat\n[coveralls-url]: https://coveralls.io/r/TypeStrong/ts-node?branch=master\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/TypeStrong/ts-node.git"
  },
  "scripts": {
    "build": "npm run clean && npm run tsc",
    "clean": "rimraf dist",
    "lint": "tslint \"src/**/*.ts\" --project tsconfig.json",
    "prepublish": "npm run build",
    "test": "npm run build && npm run lint && npm run test-cov",
    "test-cov": "istanbul cover node_modules/mocha/bin/_mocha -- \"dist/**/*.spec.js\" -R spec --bail",
    "test-spec": "mocha dist/**/*.spec.js -R spec --bail",
    "tsc": "tsc"
  },
  "types": "dist/index.d.ts",
  "version": "6.0.3"
}
