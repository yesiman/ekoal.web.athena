{
  "version": 3,
  "file": "symbols.js",
  "sources": [
    "ng://@ngxs/store/packages/store/src/symbols.ts"
  ],
  "sourcesContent": [
    "import { InjectionToken } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nexport const ROOT_STATE_TOKEN = new InjectionToken<any>('ROOT_STATE_TOKEN');\nexport const FEATURE_STATE_TOKEN = new InjectionToken<any>('FEATURE_STATE_TOKEN');\nexport const META_KEY = 'NGXS_META';\n\nexport const NGXS_PLUGINS = new InjectionToken('NGXS_PLUGINS');\nexport type NgxsPluginConstructor = new (...args: any[]) => NgxsPlugin;\nexport type NgxsPluginFn = (state: any, mutation: any, next: NgxsNextPluginFn) => any;\n\n/**\n * The NGXS config settings.\n */\nexport class NgxsConfig {\n  /**\n   * Run in development mode. This will add additional debugging features:\n   * - Object.freeze on the state and actions to guarantee immutability\n   * (default: false)\n   */\n  developmentMode: boolean;\n}\n\n/**\n * State context provided to the actions in the state.\n */\nexport interface StateContext<T> {\n  /**\n   * Get the current state.\n   */\n  getState(): T;\n\n  /**\n   * Reset the state to a new value.\n   */\n  setState(val: T);\n\n  /**\n   * Patch the existing state with the provided value.\n   */\n  patchState(val: Partial<T>);\n\n  /**\n   * Dispatch a new action and return the dispatched observable.\n   */\n  dispatch(actions: any | any[]): Observable<void>;\n}\n\nexport type NgxsNextPluginFn = (state: any, mutation: any) => any;\n\n/**\n * Plugin interface\n */\nexport interface NgxsPlugin {\n  /**\n   * Handle the state/action before its submitted to the state handlers.\n   */\n  handle(state: any, action: any, next: NgxsNextPluginFn): any;\n}\n\n/**\n * Options that can be provided to the store.\n */\nexport interface StoreOptions<T> {\n  /**\n   * Name of the state. Required.\n   */\n  name: string;\n\n  /**\n   * Default values for the state. If not provided, uses empty object.\n   */\n  defaults?: T;\n\n  /**\n   * Sub states for the given state.\n   */\n  children?: any[];\n}\n\n/**\n * Actions that can be provided in a action decorator.\n */\nexport interface ActionOptions {\n  /**\n   * Cancel the previous uncompleted observable(s).\n   */\n  cancelUncompleted?: boolean;\n}\n\n/**\n * On init interface\n */\nexport interface NgxsOnInit {\n  ngxsOnInit(ctx?: StateContext<any>): void | any;\n}\n\nexport type NgxsLifeCycle = Partial<NgxsOnInit>;\n"
  ],
  "names": [],
  "mappings": "AAAA,OAAO,EAAE,cAAc,EAAE,MAAM,eAAe,CAAC;AAG/C,MAAM,CAAC,MAAM,gBAAgB,GAAG,IAAI,cAAc,CAAM,kBAAkB,CAAC,CAAC;AAC5E,MAAM,CAAC,MAAM,mBAAmB,GAAG,IAAI,cAAc,CAAM,qBAAqB,CAAC,CAAC;AAClF,MAAM,CAAC,MAAM,QAAQ,GAAG,WAAW,CAAC;AAEpC,MAAM,CAAC,MAAM,YAAY,GAAG,IAAI,cAAc,CAAC,cAAc,CAAC,CAAC;;;;AAO/D,MAAM;CAOL"
}
