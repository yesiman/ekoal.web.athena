!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports,require("@angular/core"),require("rxjs/Observable"),require("rxjs/ReplaySubject"),require("rxjs/operator/first"),require("rxjs/Subject"),require("rxjs/operator/debounceTime"),require("@angular/common")):"function"==typeof define&&define.amd?define(["exports","@angular/core","rxjs/Observable","rxjs/ReplaySubject","rxjs/operator/first","rxjs/Subject","rxjs/operator/debounceTime","@angular/common"],e):e(t.map={},t.ng.core,t.Rx,t.Rx,t.Rx.Observable.prototype,t.Rx,t.Rx.Observable.prototype,t.ng.common)}(this,function(t,e,o,i,n,r,s,a){"use strict";function p(t){return t.replace(/(?:^\w|[A-Z]|\b\w)/g,function(t,e){return 0===e?t.toLowerCase():t.toUpperCase()}).replace(/\s+/g,"")}function c(){return"object"==typeof google&&"object"==typeof google.maps}function u(t,e){return Error(t+": library '"+e+"' is missing, please ensure to include it in a 'libraries' parameter.\n    Example:\n      NguiMapModule.forRoot({\n        apiUrl: 'https://maps.googleapis.com/maps/api/js?libraries="+e+"'\n      })\n  ")}var l=this&&this.__extends||function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var o in e)e.hasOwnProperty(o)&&(t[o]=e[o])};return function(e,o){function i(){this.constructor=e}t(e,o),e.prototype=null===o?Object.create(o):(i.prototype=o.prototype,new i)}}(),g=function(){function t(t,o,i,n){var r=this;this.nguiMapComponent=t,this.mapObjectName=o,this.inputs=i,this.outputs=n,this.initialized$=new e.EventEmitter,this._subscriptions=[],this.nguiMap=this.nguiMapComponent.nguiMap,this.optionBuilder=this.nguiMapComponent.optionBuilder,this.outputs.forEach(function(t){return r[t]=new e.EventEmitter}),this.mapObjectName=o}return t.prototype.ngOnInit=function(){var t=this;this.nguiMapComponent.mapIdledOnce?this.initialize():this.nguiMapComponent.mapReady$.subscribe(function(e){return t.initialize()})},t.prototype.initialize=function(){if(this.objectOptions=this.optionBuilder.googlizeAllInputs(this.inputs,this),"string"==typeof this.objectOptions.position&&delete this.objectOptions.position,"string"==typeof this.objectOptions.center&&delete this.objectOptions.center,this.libraryName){if(!google.maps[this.libraryName])throw u(this.mapObjectName,this.libraryName);this.mapObject=new google.maps[this.libraryName][this.mapObjectName](this.objectOptions)}else this.mapObject=new google.maps[this.mapObjectName](this.objectOptions);this.mapObject.setMap(this.nguiMapComponent.map),this.mapObject.mapObjectName=this.mapObjectName,this.mapObject.nguiMapComponent=this.nguiMapComponent,this.nguiMap.setObjectEvents(this.outputs,this,"mapObject"),this.nguiMapComponent.addToMapObjectGroup(this.mapObjectName,this.mapObject),this.initialized$.emit(this.mapObject)},t.prototype.ngOnChanges=function(t){this.nguiMap.updateGoogleObject(this.mapObject,t)},t.prototype.ngOnDestroy=function(){this._subscriptions.map(function(t){return t.unsubscribe()}),this.nguiMapComponent.removeFromMapObjectGroup(this.mapObjectName,this.mapObject),this.mapObject&&this.nguiMap.clearObjectEvents(this.outputs,this,"mapObject")},t}();g.propDecorators={initialized$:[{type:e.Output}]};var h=function(){function t(){}return t.prototype.googlizeAllInputs=function(t,e){var o=this,i={};return e.options?(i=e.options,this.onlyOptionsGiven(t,e)||console.error('when "options" are used, other options are ignored')):t.forEach(function(t){e[t]!==undefined&&(i[t]=o.googlize(e[t],{key:t}))}),i},t.prototype.googlizeMultiple=function(t,e){e=e||{};for(var o in t){var i=t[o];"string"!=typeof i?e[o]=i:e.doNotConverStringToNumber&&i.match(/^[0-9]+$/)||(e[o]=this.googlize(i,{key:o}))}return e},t.prototype.googlize=function(t,e){e=e||{};var o=t;if("string"==typeof t&&(o="false"!==t&&("0"===t?0:this.getJSONParsed(t,e)||this.getAnyMapObject(t)||this.getAnyMapConstant(t,e)||this.getDateObject(t)||t)),e.key){var i=e.key;o instanceof Array?"bounds"===i?o=new google.maps.LatLngBounds(o[0],o[1]):"icons"===i?o=this.getMapIcons(o):("position"===i||i.match(/^geoFallback/))&&(o=this.getLatLng(o)):o instanceof Object&&("icon"===i?o=this.getMarkerIcon(o):i.match(/ControlOptions$/)&&(o=this.getMapControlOption(o)))}return delete o.doNotConverStringToNumber,delete o.key,o},t.prototype.getLatLng=function(t){var e;return t[0].constructor===Array?e=t.map(function(t){return new google.maps.LatLng(t[0],t[1])}):!isNaN(parseFloat(t[0]))&&isFinite(t[0])&&(e=new google.maps.LatLng(t[0],t[1])),e},t.prototype.getJSONParsed=function(t,e){var o;try{if((o=function(t){if("string"==typeof t)return t.match(/^[\+\-]?[0-9\.]+,[ ]*\ ?[\+\-]?[0-9\.]+$/)&&(t="["+t+"]"),JSON.parse(function(t){try{return t}catch(e){return t.replace(/([\$\w]+)\s*:/g,function(t,e){return'"'+e+'":'}).replace(/'([^']+)'/g,function(t,e){return'"'+e+'"'})}}(t));return t}(t))instanceof Array)o[0].constructor!==Object&&(o=this.getLatLng(o));else if(o===Object(o)){var i=e;i.doNotConverStringToNumber=!0,o=this.googlizeMultiple(o,i)}}catch(n){}return o},t.prototype.getAnyMapObject=function(t){var e;if(t.match(/^[A-Z][a-zA-Z0-9]+\(.*\)$/))try{e=Function("return new google.maps."+t+";")()}catch(o){}return e},t.prototype.getAnyMapConstant=function(t,e){var o;if(t.match(/^([A-Z][a-zA-Z0-9]+)\.([A-Z]+)$/))try{var i=t.match(/^([A-Z][a-zA-Z0-9]+)\.([A-Z]+)$/);o=google.maps[i[1]][i[2]]}catch(r){}else if(t.match(/^[A-Z]+$/))try{var n=e.key.charAt(0).toUpperCase()+e.key.slice(1);o=google.maps[n][t]}catch(r){}return o},t.prototype.getMapControlOption=function(t){var e=t;for(var o in e)if(e[o]){var i=e[o];if("string"==typeof i?i=i.toUpperCase():"mapTypeIds"===o&&(i=i.map(function(t){return t.match(/^[A-Z]+$/)?google.maps.MapTypeId[t.toUpperCase()]:t})),"style"===o){var n=o.replace(/Options$/,"")+"Style";e[o]=google.maps[n][i]}else e[o]="position"===o?google.maps.ControlPosition[i]:i}return e},t.prototype.getDateObject=function(t){var e;if(t.match(/^(\d{4}\-\d\d\-\d\d([tT][\d:\.]*)?)([zZ]|([+\-])(\d\d):?(\d\d))?$/))try{e=new Date(t)}catch(o){}return e},t.prototype.getMapIcons=function(t){return t.map(function(t){return t.icon.path.match(/^[A-Z_]+$/)&&(t.icon.path=google.maps.SymbolPath[t.icon.path]),t})},t.prototype.getMarkerIcon=function(t){var e=t;(""+e.path).match(/^[A-Z_]+$/)&&(e.path=google.maps.SymbolPath[e.path]);for(var o in e){var i=e[o];"anchor"===o||"origin"===o||"labelOrigin"===o?e[o]=new google.maps.Point(i[0],i[1]):"size"!==o&&"scaledSize"!==o||(e[o]=new google.maps.Size(i[0],i[1]))}return e},t.prototype.onlyOptionsGiven=function(t,e){for(var o=0;o<t.length;o++){var i=t[o];if("options"!==i&&"undefined"!=typeof e[i])return!1}return!0},t}();h.decorators=[{type:e.Injectable}],h.ctorParameters=function(){return[]};var m=function(){function t(){}return t.prototype.getCurrentPosition=function(t){return t=t||{timeout:5e3},new o.Observable(function(e){navigator.geolocation?navigator.geolocation.getCurrentPosition(function(t){e.next(t),e.complete()},function(t){return e.error(t)},t):e.error("Browser Geolocation service failed.")})},t}();m.decorators=[{type:e.Injectable}],m.ctorParameters=function(){return[]};var d=new e.InjectionToken("NG_MAP_CONFIG_TOKEN"),f=function(){function t(t){this.config=t,this.api$=n.first.call(new i.ReplaySubject(1)),this.config=this.config||{apiUrl:"https://maps.google.com/maps/api/js"}}return t.prototype.load=function(){},t.prototype.ngOnDestroy=function(){this.api$.complete()},t}(),y=function(t){function e(e,o){var i=t.call(this,o)||this;return i.zone=e,i}return l(e,t),e.prototype.load=function(){var t=this;"undefined"!=typeof window&&(c()?this.api$.next(google.maps):document.querySelector("#ngui-map-api")||(window.nguiMapRef=window.nguiMapRef||[],window.nguiMapRef.push({zone:this.zone,componentFn:function(){return t.api$.next(google.maps)}}),this.addGoogleMapsApi()))},e.prototype.addGoogleMapsApi=function(){window.initNguiMap=window.initNguiMap||function(){window.nguiMapRef.forEach(function(t){t.zone.run(function(){t.componentFn()})}),window.nguiMapRef.splice(0,window.nguiMapRef.length)};var t=document.createElement("script");t.id="ngui-map-api";var e=this.config.apiUrl;e+=-1!==e.indexOf("?")?"&":"?",t.src=e+"callback=initNguiMap",document.querySelector("body").appendChild(t)},e}(f);y.decorators=[{type:e.Injectable}],y.ctorParameters=function(){return[{type:e.NgZone},{type:undefined,decorators:[{type:e.Optional},{type:e.Inject,args:[d]}]}]};var b=function(t){function e(e){return t.call(this,e)||this}return l(e,t),e.prototype.load=function(){var t=this;if("undefined"!=typeof window)if(c())this.api$.next(google.maps);else if(!document.querySelector("#ngui-map-api")){var e=document.createElement("script");e.id="ngui-map-api",e.async=!0,e.onload=function(){return t.api$.next(google.maps)},e.src=this.config.apiUrl,document.querySelector("body").appendChild(e)}},e}(f);b.decorators=[{type:e.Injectable}],b.ctorParameters=function(){return[{type:undefined,decorators:[{type:e.Optional},{type:e.Inject,args:[d]}]}]};var O=function(){function t(t){this.apiLoader=t,this.apiLoaderSubs=[]}return t.prototype.geocode=function(t){var e=this;return new o.Observable(function(o){e.apiLoaderSubs.push(e.apiLoader.api$.subscribe(function(){return e.requestGeocode(t,o)}))})},t.prototype.ngOnDestroy=function(){this.apiLoaderSubs.map(function(t){return t.unsubscribe()})},t.prototype.requestGeocode=function(t,e){(new google.maps.Geocoder).geocode(t,function(t,o){o===google.maps.GeocoderStatus.OK?(e.next(t),e.complete()):e.error(t)})},t}();O.decorators=[{type:e.Injectable}],O.ctorParameters=function(){return[{type:f}]};var v=function(){function t(t,e,o){var i=this;this.geoCoder=t,this.optionBuilder=e,this.zone=o,this.updateGoogleObject=function(t,e){var o,n,r;if(t)for(var s in e)r="set"+s.replace(/^[a-z]/,function(t){return t.toUpperCase()}),n=e[s].currentValue,-1!==["position","center"].indexOf(s)&&"string"==typeof n?function(e){i.geoCoder.geocode({address:n}).subscribe(function(o){"function"==typeof t[e]?t[e](o[0].geometry.location):console.error('Not all options are dynamically updatable according to Googles Maps API V3 documentation.\nPlease check Google Maps API documentation, and use "setOptions" instead.')})}(r):(o=i.optionBuilder.googlize(n),"function"==typeof t[r]?t[r](o):console.error('Not all options are dynamically updatable according to Googles Maps API V3 documentation.\nPlease check Google Maps API documentation, and use "setOptions" instead.'))}}return t.prototype.setObjectEvents=function(t,e,o){var i=this;t.forEach(function(t){var n=i.getEventName(t),r=i.zone;r.runOutsideAngular(function(){e[o].addListener(n,function(o){var i=o||{};i.target=this,r.run(function(){return e[t].emit(i)})})})})},t.prototype.clearObjectEvents=function(t,e,o){var i=this;t.forEach(function(t){var n=i.getEventName(t);i.zone.runOutsideAngular(function(){e[o]&&google.maps.event.clearListeners(e[o],n)})}),e[o]&&(e[o].setMap&&e[o].setMap(null),delete e[o].nguiMapComponent,delete e[o])},t.prototype.getEventName=function(t){return t.replace(/([A-Z])/g,function(t){return"_"+t.toLowerCase()}).replace(/^map_/,"")},t}();v.decorators=[{type:e.Injectable}],v.ctorParameters=function(){return[{type:O},{type:h},{type:e.NgZone}]};var C=["backgroundColor","center","disableDefaultUI","disableDoubleClickZoom","draggable","draggableCursor","draggingCursor","heading","keyboardShortcuts","mapMaker","mapTypeControl","mapTypeId","maxZoom","minZoom","noClear","overviewMapControl","panControl","panControlOptions","rotateControl","scaleControl","scrollwheel","streetView","styles","tilt","zoom","streetViewControl","zoomControl","zoomControlOptions","mapTypeControlOptions","overviewMapControlOptions","rotateControlOptions","scaleControlOptions","streetViewControlOptions","fullscreenControl","fullscreenControlOptions","options","geoFallbackCenter"],j=["bounds_changed","center_changed","click","dblclick","drag","dragend","dragstart","heading_changed","idle","typeid_changed","mousemove","mouseout","mouseover","projection_changed","resize","rightclick","tilesloaded","tile_changed","zoom_changed","mapClick","mapMouseover","mapMouseout","mapMousemove","mapDrag","mapDragend","mapDragstart"],M=function(){function t(t,o,i,n,s,a,p){var c=this;this.optionBuilder=t,this.elementRef=o,this.geolocation=i,this.geoCoder=n,this.nguiMap=s,this.apiLoader=a,this.zone=p,this.mapReady$=new e.EventEmitter,this.mapOptions={},this.inputChanges$=new r.Subject,this.infoWindows={},this.mapIdledOnce=!1,this.initializeMapAfterDisplayed=!1,a.load(),j.forEach(function(t){return c[t]=new e.EventEmitter})}return t.prototype.ngAfterViewInit=function(){var t=this;this.apiLoaderSub=this.apiLoader.api$.subscribe(function(){return t.initializeMap()})},t.prototype.ngAfterViewChecked=function(){this.initializeMapAfterDisplayed&&this.el&&this.el.offsetWidth>0&&this.initializeMap()},t.prototype.ngOnChanges=function(t){this.inputChanges$.next(t)},t.prototype.initializeMap=function(){var t=this;this.el=this.elementRef.nativeElement.querySelector(".google-map"),this.el&&0===this.el.offsetWidth?this.initializeMapAfterDisplayed=!0:(this.initializeMapAfterDisplayed=!1,this.mapOptions=this.optionBuilder.googlizeAllInputs(C,this),this.mapOptions.zoom=this.mapOptions.zoom||15,"string"==typeof this.mapOptions.center&&delete this.mapOptions.center,this.zone.runOutsideAngular(function(){t.map=new google.maps.Map(t.el,t.mapOptions),t.map.mapObjectName="NguiMapComponent",t.mapOptions.center||t.setCenter(),t.nguiMap.setObjectEvents(j,t,"map"),t.map.addListener("idle",function(){t.mapIdledOnce||(t.mapIdledOnce=!0,setTimeout(function(){t.mapReady$.emit(t.map)}))}),s.debounceTime.call(t.inputChanges$,1e3).subscribe(function(e){return t.nguiMap.updateGoogleObject(t.map,e)}),"undefined"!=typeof window&&window.nguiMapRef&&(window.nguiMapRef.map=t.map)}))},t.prototype.setCenter=function(){var t=this;this.center?"string"==typeof this.center&&this.geoCoder.geocode({address:this.center}).subscribe(function(e){t.map.setCenter(e[0].geometry.location)},function(e){t.map.setCenter(t.mapOptions.geoFallbackCenter||new google.maps.LatLng(0,0))}):this.geolocation.getCurrentPosition().subscribe(function(e){var o=new google.maps.LatLng(e.coords.latitude,e.coords.longitude);t.map.setCenter(o)},function(e){console.error("ngui-map: Error finding the current position"),t.map.setCenter(t.mapOptions.geoFallbackCenter||new google.maps.LatLng(0,0))})},t.prototype.openInfoWindow=function(t,e){this.infoWindows[t].open(e)},t.prototype.closeInfoWindow=function(t){this.infoWindows[t]&&this.infoWindows[t].close()},t.prototype.ngOnDestroy=function(){this.inputChanges$.complete(),this.el&&!this.initializeMapAfterDisplayed&&this.nguiMap.clearObjectEvents(j,this,"map"),this.apiLoaderSub&&this.apiLoaderSub.unsubscribe()},t.prototype.addToMapObjectGroup=function(t,e){var o=p(t.toLowerCase())+"s";this.map[o]=this.map[o]||[],this.map[o].push(e)},t.prototype.removeFromMapObjectGroup=function(t,e){var o=p(t.toLowerCase())+"s";if(this.map&&this.map[o]){var i=this.map[o].indexOf(e);i>-1&&this.map[o].splice(i,1)}},t}();M.decorators=[{type:e.Component,args:[{selector:"ngui-map",providers:[v,h,O,m],styles:["\n    ngui-map {display: block; height: 300px;}\n    .google-map {width: 100%; height: 100%}\n  "],inputs:C,outputs:j,encapsulation:e.ViewEncapsulation.None,template:'\n    <div class="google-map"></div>\n    <ng-content></ng-content>\n  '}]}],M.ctorParameters=function(){return[{type:h},{type:e.ElementRef},{type:m},{type:O},{type:v},{type:f},{type:e.NgZone}]},M.propDecorators={mapReady$:[{type:e.Output}]};var w=[],z=[],k=function(t){function e(e){return t.call(this,e,"BicyclingLayer",w,z)||this}return l(e,t),e}(g);k.decorators=[{type:e.Directive,args:[{selector:"ngui-map > bicycling-layer",inputs:w,outputs:z}]}],k.ctorParameters=function(){return[{type:M}]};var E=["content","disableAutoPan","maxWidth","pixelOffset","position","zIndex","options"],P=["closeclick","content_changed","domready","position_changed","zindex_changed"],I=function(){function t(t,o,i){var n=this;this.elementRef=t,this.nguiMap=o,this.nguiMapComponent=i,this.initialized$=new e.EventEmitter,this.objectOptions={},this.inputChanges$=new r.Subject,this.elementRef.nativeElement.style.display="none",P.forEach(function(t){return n[t]=new e.EventEmitter})}return t.prototype.ngOnInit=function(){var t=this;this.nguiMapComponent.mapIdledOnce?this.initialize():this.nguiMapComponent.mapReady$.subscribe(function(e){return t.initialize()})},t.prototype.ngOnChanges=function(t){this.inputChanges$.next(t)},t.prototype.initialize=function(){var t=this;this.objectOptions=this.nguiMapComponent.optionBuilder.googlizeAllInputs(E,this),this.infoWindow=new google.maps.InfoWindow(this.objectOptions),this.infoWindow.mapObjectName="InfoWindow",this.elementRef.nativeElement.id?this.nguiMapComponent.infoWindows[this.elementRef.nativeElement.id]=this:console.error('An InfoWindow must have an id. e.g. id="detail"'),this.nguiMap.setObjectEvents(P,this,"infoWindow"),s.debounceTime.call(this.inputChanges$,1e3).subscribe(function(e){return t.nguiMap.updateGoogleObject(t.infoWindow,e)}),this.nguiMapComponent.addToMapObjectGroup("InfoWindow",this.infoWindow),this.initialized$.emit(this.infoWindow)},t.prototype.open=function(t){this.infoWindow.setContent(this.template.element.nativeElement),this.infoWindow.open(this.nguiMapComponent.map,t)},t.prototype.close=function(){this.infoWindow&&this.infoWindow.close()},t.prototype.ngOnDestroy=function(){this.inputChanges$.complete(),this.infoWindow&&(this.nguiMap.clearObjectEvents(P,this,"infoWindow"),delete this.infoWindow)},t}();I.decorators=[{type:e.Component,args:[{selector:"ngui-map > info-window",inputs:E,outputs:P,template:"<div #template><ng-content></ng-content></div>"}]}],I.ctorParameters=function(){return[{type:e.ElementRef},{type:v},{type:M}]},I.propDecorators={initialized$:[{type:e.Output}],template:[{type:e.ViewChild,args:["template",{read:e.ViewContainerRef}]}]};var L=["animationChanged","click","clickableChanged","cursorChanged","dblclick","drag","dragend","draggableChanged","dragstart","flatChanged","iconChanged","mousedown","mouseout","mouseover","mouseup","positionChanged","rightclick","shapeChanged","titleChanged","visibleChanged","zindexChanged","map_click","map_mouseover","map_mouseout","map_mouseup","map_mousedown","map_drag","map_dragend"],N=function(){function t(t,o,i){var n=this;this.nguiMapComponent=t,this.elementRef=o,this.nguiMap=i,this.initialized$=new e.EventEmitter,this.inputChanges$=new r.Subject,this.elementRef.nativeElement.style.display="none",L.forEach(function(t){return n[t]=new e.EventEmitter})}return t.prototype.ngOnInit=function(){var t=this;this.nguiMapComponent.mapIdledOnce?this.initialize():this.nguiMapComponent.mapReady$.subscribe(function(e){return t.initialize()})},t.prototype.ngOnChanges=function(t){this.inputChanges$.next(t)},t.prototype.ngOnDestroy=function(){this.inputChanges$.complete(),this.nguiMapComponent.removeFromMapObjectGroup("CustomMarker",this.mapObject),this.mapObject&&this.nguiMap.clearObjectEvents(L,this,"mapObject")},t.prototype.initialize=function(){var t=this;this.el=this.elementRef.nativeElement,this.mapObject=function(t,e){return new(function(t){function e(e,o){var i=t.call(this)||this;return i.visible=!0,i.setPosition=function(t){if(i.htmlEl.style.visibility="hidden","Array"===t.constructor.name?i.position=new google.maps.LatLng(t[0],t[1]):"string"==typeof t?(new google.maps.Geocoder).geocode({address:t},function(t,e){e===google.maps.GeocoderStatus.OK&&i.setPosition(t[0].geometry.location)}):t&&"function"==typeof t.lng&&(i.position=t),i.getProjection()&&"function"==typeof i.position.lng){var e=function(){var t=i.getProjection();if(t){var e=t.fromLatLngToDivPixel(i.position),o=Math.round(e.x-i.htmlEl.offsetWidth/2),n=Math.round(e.y-i.htmlEl.offsetHeight/2);i.htmlEl.style.left=o+"px",i.htmlEl.style.top=n+"px",i.htmlEl.style.visibility="visible"}};i.htmlEl.offsetWidth&&i.htmlEl.offsetHeight?e():setTimeout(function(){return e()})}},i.htmlEl=e,i.position=o,i}return l(e,t),e.prototype.onAdd=function(){this.getPanes().overlayMouseTarget.appendChild(this.htmlEl),this.htmlEl.style.position="absolute"},e.prototype.draw=function(){this.setPosition(this.position),this.setZIndex(this.zIndex),this.setVisible(this.visible)},e.prototype.onRemove=function(){},e.prototype.getPosition=function(){return this.position},e.prototype.setZIndex=function(t){t&&(this.zIndex=t),this.htmlEl.style.zIndex=this.zIndex},e.prototype.setVisible=function(t){this.htmlEl.style.display=t?"inline-block":"none",this.visible=t},e}(google.maps.OverlayView))(t,e)}(this.el,this.position),this.mapObject.setMap(this.nguiMapComponent.map),this.nguiMap.setObjectEvents(L,this,"mapObject"),s.debounceTime.call(this.inputChanges$,1e3).subscribe(function(e){return t.nguiMap.updateGoogleObject(t.mapObject,e)}),this.nguiMapComponent.addToMapObjectGroup("CustomMarker",this.mapObject),this.initialized$.emit(this.mapObject)},t}();N.decorators=[{type:e.Component,args:[{selector:"ngui-map > custom-marker",inputs:["position"],outputs:L,template:"\n    <ng-content></ng-content>\n  "}]}],N.ctorParameters=function(){return[{type:M},{type:e.ElementRef},{type:v}]},N.propDecorators={initialized$:[{type:e.Output}]};var R=["center","clickable","draggable","editable","fillColor","fillOpacity","map","radius","strokeColor","strokeOpacity","strokePosition","strokeWeight","visible","zIndex","options","geoFallbackCenter"],A=["centerChanged","click","dblclick","drag","dragend","dragstart","mousedown","mousemove","mouseout","mouseover","mouseup","radiusChanged","rightclick"],D=function(t){function e(e){var o=t.call(this,e,"Circle",R,A)||this;return o.nguiMapComp=e,o.objectOptions={},o}return l(e,t),e.prototype.initialize=function(){t.prototype.initialize.call(this),this.setCenter()},e.prototype.setCenter=function(){var t=this;this.center?"string"==typeof this.center&&this._subscriptions.push(this.nguiMapComp.geoCoder.geocode({address:this.center}).subscribe(function(e){t.mapObject.setCenter(e[0].geometry.location)},function(e){console.error("ngui-map, error in finding location from",t.center),t.mapObject.setCenter(t.objectOptions.geoFallbackCenter||new google.maps.LatLng(0,0))})):this._subscriptions.push(this.nguiMapComp.geolocation.getCurrentPosition().subscribe(function(e){var o=new google.maps.LatLng(e.coords.latitude,e.coords.longitude);t.mapObject.setCenter(o)},function(e){console.error("ngui-map, error in finding the current position"),t.mapObject.setCenter(t.objectOptions.geoFallbackCenter||new google.maps.LatLng(0,0))}))},e}(g);D.decorators=[{type:e.Directive,args:[{selector:"ngui-map>circle, ngui-map>map-circle",inputs:R,outputs:A}]}],D.ctorParameters=function(){return[{type:M}]};var x=["controlPosition","controls","drawingMode","featureFactory","style","geoJson","geoJsonUrl"],_=["addfeature","click","dblclick","mousedown","mouseout","mouseover","mouseup","removefeature","removeproperty","rightclick","setgeometry","setproperty"],$=function(t){function e(e){return t.call(this,e,"Data",x,_)||this}return l(e,t),e.prototype.initialize=function(){this.geoJson?this.nguiMapComponent.map.data.addGeoJson(this.geoJson):this.geoJsonUrl?this.nguiMapComponent.map.data.loadGeoJson(this.geoJsonUrl):(this.objectOptions=this.optionBuilder.googlizeAllInputs(this.inputs,this),this.nguiMapComponent.map.data.add(this.objectOptions)),this.mapObject=this.nguiMapComponent.map.data,this.nguiMap.setObjectEvents(this.outputs,this,"mapObject"),this.nguiMapComponent.addToMapObjectGroup(this.mapObjectName,this.mapObject),this.initialized$.emit(this.mapObject)},e}(g);$.decorators=[{type:e.Directive,args:[{selector:"ngui-map > data-layer",inputs:x,outputs:_}]}],$.ctorParameters=function(){return[{type:M}]};var G=["directions","draggable","hideRouteList","infoWindow","panel","markerOptions","polylineOptions","preserveViewport","routeIndex","suppressBicyclingLayer","suppressInfoWindows","suppressMarkers","suppressPolylines"],S=["directions_changed"],T=function(t){function e(e,o){var i=t.call(this,e,"DirectionsRenderer",G,S)||this;return i.geolocation=o,i}return l(e,t),e.prototype.initialize=function(){this.objectOptions=this.optionBuilder.googlizeAllInputs(this.inputs,this),"string"==typeof this.objectOptions.panel&&(this.objectOptions.panel=document.querySelector(this.objectOptions.panel)),this.directionsService=new google.maps.DirectionsService,this.directionsRenderer=new google.maps.DirectionsRenderer(this.objectOptions),this.directionsRenderer.setMap(this.nguiMapComponent.map),this.showDirections(this.directionsRequest),this.nguiMap.setObjectEvents(this.outputs,this,"directionsRenderer"),this.nguiMapComponent.addToMapObjectGroup(this.mapObjectName,this.mapObject),this.initialized$.emit(this.directionsRenderer)},e.prototype.ngOnChanges=function(t){var e={};for(var o in t)-1!==this.inputs.indexOf(o)&&(e[o]=this.optionBuilder.googlize(t[o].currentValue));t.directionsRequest&&this.directionsRenderer&&this.directionsService&&this.showDirections(this.directionsRequest)},e.prototype.showDirections=function(t){var e=this;this.directionsService.route(t,function(t,o){e.directionsRenderer&&(o===google.maps.DirectionsStatus.OK?e.directionsRenderer.setDirections(t):console.error("Directions request failed due to "+o))})},e.prototype.ngOnDestroy=function(){t.prototype.ngOnDestroy.call(this),this.nguiMap.clearObjectEvents(this.outputs,this,"directionsRenderer")},e}(g);T.decorators=[{type:e.Directive,args:[{selector:"ngui-map > directions-renderer",inputs:G,outputs:S}]}],T.ctorParameters=function(){return[{type:M},{type:m}]},T.propDecorators={directionsRequest:[{type:e.Input,args:["directions-request"]}]};var W=["options","circleOptions","drawingControl","drawingControlOptions","drawingMode","map","markerOptions","polygonOptions","polylineOptions","rectangleOptions"],Z=["circlecomplete","markercomplete","overlaycomplete","polygoncomplete","polylinecomplete","rectanglecomplete"],q=function(t){function e(e){var o=t.call(this,e,"DrawingManager",W,Z)||this;return o.libraryName="drawing",o}return l(e,t),e}(g);q.decorators=[{type:e.Directive,args:[{selector:"ngui-map > drawing-manager",inputs:W,outputs:Z}]}],q.ctorParameters=function(){return[{type:M}]};var B=["url","bounds","clickable","opacity"],F=["click","dblclick"],V=function(t){function e(e){var o=t.call(this,e,"GroundOverlay",B,F)||this;return o.objectOptions={},o}return l(e,t),e.prototype.initialize=function(){this.objectOptions=this.optionBuilder.googlizeAllInputs(["clickable","opacity"],this),this.mapObject=new google.maps.GroundOverlay(this.url,this.bounds,this.objectOptions),this.mapObject.setMap(this.nguiMapComponent.map),this.mapObject.mapObjectName=this.mapObjectName,this.nguiMap.setObjectEvents(this.outputs,this,"mapObject"),this.nguiMapComponent.addToMapObjectGroup(this.mapObjectName,this.mapObject),this.initialized$.emit(this.mapObject)},e}(g);V.decorators=[{type:e.Directive,args:[{selector:"ngui-map > ground-overlay",inputs:B,outputs:F}]}],V.ctorParameters=function(){return[{type:M}]};var U=["data","dissipating","gradient","maxIntensity","opacity","radius","options"],J=[],K=function(t){function e(e){var o=t.call(this,e,"HeatmapLayer",U,J)||this;return o.libraryName="visualization",o}return l(e,t),e}(g);K.decorators=[{type:e.Directive,args:[{selector:"ngui-map > heatmap-layer",inputs:U,outputs:J}]}],K.ctorParameters=function(){return[{type:M}]};var H=["clickable","preserveViewport","screenOverlays","suppressInfoWindows","url","zIndex","options"],Q=["click","defaultviewport_changed","status_changed"],X=function(t){function e(e){return t.call(this,e,"KmlLayer",H,Q)||this}return l(e,t),e}(g);X.decorators=[{type:e.Directive,args:[{selector:"ngui-map > kml-layer",inputs:H,outputs:Q}]}],X.ctorParameters=function(){return[{type:M}]};var Y=["anchorPoint","animation","clickable","cursor","draggable","icon","label","opacity","optimized","place","position","shape","title","visible","zIndex","options","geoFallbackPosition"],tt=["animationChanged","click","clickableChanged","cursorChanged","dblclick","drag","dragend","draggableChanged","dragstart","flatChanged","iconChanged","mousedown","mouseout","mouseover","mouseup","positionChanged","rightclick","shapeChanged","titleChanged","visibleChanged","zindexChanged"],et=function(t){function e(e){var o=t.call(this,e,"Marker",Y,tt)||this;return o.nguiMapComp=e,o.objectOptions={},o}return l(e,t),e.prototype.ngOnInit=function(){var t=this;this.nguiMapComponent.mapIdledOnce?this.initialize():this.nguiMapComponent.mapReady$.subscribe(function(e){return t.initialize()})},e.prototype.initialize=function(){t.prototype.initialize.call(this),this.setPosition()},e.prototype.setPosition=function(){var t=this;this.position?"string"==typeof this.position&&this._subscriptions.push(this.nguiMapComp.geoCoder.geocode({address:this.position}).subscribe(function(e){t.mapObject.setPosition(e[0].geometry.location)},function(e){console.error("ngui-map, error finding the location from",t.position),t.mapObject.setPosition(t.objectOptions.geoFallbackPosition||new google.maps.LatLng(0,0))})):this._subscriptions.push(this.nguiMapComp.geolocation.getCurrentPosition().subscribe(function(e){var o=new google.maps.LatLng(e.coords.latitude,e.coords.longitude);t.mapObject.setPosition(o)},function(e){console.error("ngui-map, error finding the current location"),t.mapObject.setPosition(t.objectOptions.geoFallbackPosition||new google.maps.LatLng(0,0))}))},e}(g);et.decorators=[{type:e.Directive,args:[{selector:"ngui-map > marker",inputs:Y,outputs:tt}]}],et.ctorParameters=function(){return[{type:M}]};var ot=function(){return function(t,o,i){var n=this;this.optionBuilder=t,this.elementRef=o,this.apiLoader=i,this.place_changed=new e.EventEmitter,this.initialized$=new e.EventEmitter,this.initialize=function(){if(n.objectOptions=n.optionBuilder.googlizeAllInputs(["bounds","componentRestrictions","types"],n),!google.maps.places)throw u("PlacesAutoComplete","places");n.autocomplete=new google.maps.places.Autocomplete(n.elementRef.nativeElement,n.objectOptions),n.autocomplete.addListener("place_changed",function(t){n.place_changed.emit(n.autocomplete.getPlace())}),n.initialized$.emit(n.autocomplete)},i.load(),i.api$.subscribe(function(){return n.initialize()})}}();ot.decorators=[{type:e.Directive,args:[{selector:"[places-auto-complete]"}]}],ot.ctorParameters=function(){return[{type:h},{type:e.ElementRef},{type:f}]},ot.propDecorators={bounds:[{type:e.Input,args:["bounds"]}],componentRestrictions:[{type:e.Input,args:["componentRestrictions"]}],types:[{type:e.Input,args:["types"]}],place_changed:[{type:e.Output,args:["place_changed"]}],initialized$:[{type:e.Output}]};var it=["clickable","draggable","editable","fillColor","fillOpacity","geodesic","paths","strokeColor","strokeOpacity","strokePosition","strokeWeight","visible","zIndex","options"],nt=["click","dblclick","drag","dragend","dragstart","mousedown","mousemove","mouseout","mouseover","mouseup","rightclick"],rt=function(t){function e(e){return t.call(this,e,"Polygon",it,nt)||this}return l(e,t),e}(g);rt.decorators=[{type:e.Directive,args:[{selector:"ngui-map>polygon, ngui-map>map-polygon",inputs:it,outputs:nt}]}],rt.ctorParameters=function(){return[{type:M}]};var st=["clickable","draggable","editable","geodesic","icons","path","strokeColor","strokeOpacity","strokeWeight","visible","zIndex","options"],at=["click","dblclick","drag","dragend","dragstart","mousedown","mousemove","mouseout","mouseover","mouseup","rightclick"],pt=function(t){function e(e){return t.call(this,e,"Polyline",st,at)||this}return l(e,t),e}(g);pt.decorators=[{type:e.Directive,args:[{selector:"ngui-map > polyline",inputs:st,outputs:at}]}],pt.ctorParameters=function(){return[{type:M}]};var ct=["selector","options","addressControl","addressControlOptions","clickToGo","disableDefaultUI","disableDoubleClickZoom","enableCloseButton","fullscreenControl","fullscreenControlOptions","imageDateControl","linksControl","motionTracking","motionTrackingControl","panControl","panControlOptions","pano","position","pov","scrollwheel","showRoadLabels","visible","zoomControl","zoomControlOptions"],ut=["closeclick","pano_changed","position_changed","pov_changed","resize","status_changed","visible_changed","zoom_changed"],lt=function(t){function e(e){return t.call(this,e,"StreetViewPanorama",ct,ut)||this}return l(e,t),e.prototype.initialize=function(){this.objectOptions=this.optionBuilder.googlizeAllInputs(this.inputs,this);var t;this.objectOptions.selector?(t=document.querySelector(this.selector),delete this.objectOptions.selector):t=this.nguiMapComponent.el,"string"==typeof this.objectOptions.position&&delete this.objectOptions.position,this.mapObject=new google.maps[this.mapObjectName](t,this.objectOptions),this.mapObject.mapObjectName=this.mapObjectName,this.mapObject.nguiMapComponent=this.nguiMapComponent,this.nguiMap.setObjectEvents(this.outputs,this,"mapObject"),this.nguiMapComponent.addToMapObjectGroup(this.mapObjectName,this.mapObject),this.initialized$.emit(this.mapObject)},e.prototype.ngOnDestroy=function(){this.nguiMapComponent.el&&this.nguiMap.clearObjectEvents(this.outputs,this,"mapObject")},e}(g);lt.decorators=[{type:e.Directive,args:[{selector:"ngui-map > street-view-panorama",inputs:ct,outputs:ut}]}],lt.ctorParameters=function(){return[{type:M}]};var gt=["autoRefresh","options"],ht=[],mt=function(t){function e(e){return t.call(this,e,"TrafficLayer",gt,ht)||this}return l(e,t),e}(g);mt.decorators=[{type:e.Directive,args:[{selector:"ngui-map > traffic-layer",inputs:gt,outputs:ht}]}],mt.ctorParameters=function(){return[{type:M}]};var dt=[],ft=[],yt=function(t){function e(e){return t.call(this,e,"TransitLayer",dt,ft)||this}return l(e,t),e}(g);yt.decorators=[{type:e.Directive,args:[{selector:"ngui-map > transit-layer",inputs:dt,outputs:ft}]}],yt.ctorParameters=function(){return[{type:M}]};var bt=[M,I,et,D,N,rt,I,pt,V,yt,mt,K,k,X,$,lt,ot,T,q],Ot=function(){function t(){}return t.forRoot=function(e){return void 0===e&&(e={}),{ngModule:t,providers:[{provide:d,useValue:e}]}},t}();Ot.decorators=[{type:e.NgModule,args:[{imports:[a.CommonModule],declarations:bt,exports:[bt],providers:[O,m,v,h,{provide:f,useClass:y}]}]}],Ot.ctorParameters=function(){return[]},t.BicyclingLayer=k,t.NavigatorGeolocation=m,t.OptionBuilder=h,t.NG_MAP_CONFIG_TOKEN=d,t.NgMapApiLoader=f,t.NgMapAsyncApiLoader=b,t.NgMapAsyncCallbackApiLoader=y,t.NguiMapComponent=M,t.InfoWindow=I,t.CustomMarker=N,t.Circle=D,t.DataLayer=$,t.DirectionsRenderer=T,t.DrawingManager=q,t.GeoCoder=O,t.GroundOverlay=V,t.HeatmapLayer=K,t.KmlLayer=X,t.Marker=et,t.NguiMap=v,t.PlacesAutoComplete=ot,t.Polygon=rt,t.Polyline=pt,t.StreetViewPanorama=lt,t.TrafficLayer=mt,t.TransitLayer=yt,t.NguiMapModule=Ot,t.ɵa=g,Object.defineProperty(t,"__esModule",{value:!0})});
//# sourceMappingURL=map.umd.min.js.map
