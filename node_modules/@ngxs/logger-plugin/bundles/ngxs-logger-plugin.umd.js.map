{
  "version": 3,
  "file": "ngxs-logger-plugin.umd.js",
  "sources": [
    "ng://@ngxs/logger-plugin/packages/logger-plugin/src/logger.module.ts",
    "ng://@ngxs/logger-plugin/packages/logger-plugin/src/logger.plugin.ts",
    "ng://@ngxs/logger-plugin/packages/logger-plugin/src/internals.ts",
    "ng://@ngxs/logger-plugin/packages/logger-plugin/src/symbols.ts"
  ],
  "sourcesContent": [
    "import { NgModule, ModuleWithProviders, InjectionToken } from '@angular/core';\nimport { NGXS_PLUGINS } from '@ngxs/store';\nimport { NgxsLoggerPluginOptions, NGXS_LOGGER_PLUGIN_OPTIONS } from './symbols';\nimport { NgxsLoggerPlugin } from './logger.plugin';\n\nexport const USER_OPTIONS = new InjectionToken('LOGGER_USER_OPTIONS');\n\nexport function loggerOptionsFactory(options: NgxsLoggerPluginOptions) {\n  const defaultLoggerOptions: NgxsLoggerPluginOptions = {\n    logger: console,\n    collapsed: false,\n    disabled: false\n  };\n\n  return {\n    ...defaultLoggerOptions,\n    ...options\n  };\n}\n\n@NgModule()\nexport class NgxsLoggerPluginModule {\n  static forRoot(options?: NgxsLoggerPluginOptions): ModuleWithProviders {\n    return {\n      ngModule: NgxsLoggerPluginModule,\n      providers: [\n        {\n          provide: NGXS_PLUGINS,\n          useClass: NgxsLoggerPlugin,\n          multi: true\n        },\n        {\n          provide: USER_OPTIONS,\n          useValue: options\n        },\n        {\n          provide: NGXS_LOGGER_PLUGIN_OPTIONS,\n          useFactory: loggerOptionsFactory,\n          deps: [USER_OPTIONS]\n        }\n      ]\n    };\n  }\n}\n",
    "import { Injectable, Inject } from '@angular/core';\nimport { NgxsPlugin, getActionTypeFromInstance } from '@ngxs/store';\n\nimport { NGXS_LOGGER_PLUGIN_OPTIONS, NgxsLoggerPluginOptions } from './symbols';\nimport { pad } from './internals';\nimport { tap } from 'rxjs/operators';\n\n@Injectable()\nexport class NgxsLoggerPlugin implements NgxsPlugin {\n  constructor(@Inject(NGXS_LOGGER_PLUGIN_OPTIONS) private _options: NgxsLoggerPluginOptions) {}\n\n  handle(state, event, next) {\n    if (this._options.disabled) {\n      return next(state, event);\n    }\n\n    const options = this._options || <any>{};\n    const logger = options.logger || console;\n    const actionName = getActionTypeFromInstance(event);\n    const time = new Date();\n\n    // tslint:disable-next-line\n    const formattedTime = ` @ ${pad(time.getHours(), 2)}:${pad(time.getMinutes(), 2)}:${pad(\n      time.getSeconds(),\n      2\n    )}.${pad(time.getMilliseconds(), 3)}`;\n\n    const message = `action ${actionName}${formattedTime}`;\n    const startMessage = options.collapsed ? logger.groupCollapsed : logger.group;\n\n    try {\n      startMessage.call(logger, message);\n    } catch (e) {\n      console.log(message);\n    }\n\n    if (typeof event.payload !== 'undefined') {\n      this.log('payload', 'color: #9E9E9E; font-weight: bold', event.payload);\n    }\n\n    this.log('prev state', 'color: #9E9E9E; font-weight: bold', state);\n\n    return next(state, event).pipe(\n      tap(nextState => {\n        this.log('next state', 'color: #4CAF50; font-weight: bold', nextState);\n        try {\n          logger.groupEnd();\n        } catch (e) {\n          logger.log('—— log end ——');\n        }\n      })\n    );\n  }\n\n  log(title: string, color: string, payload: any) {\n    const options = this._options || <any>{};\n    const logger = options.logger || console;\n\n    if (this.isIE()) {\n      logger.log(title, payload);\n    } else {\n      logger.log('%c ' + title, color, payload);\n    }\n  }\n\n  isIE(): boolean {\n    const ua = typeof window !== 'undefined' && window.navigator.userAgent ? window.navigator.userAgent : '';\n    let ms_ie = false;\n\n    const old_ie = ua.indexOf('MSIE ');\n    const new_ie = ua.indexOf('Trident/');\n\n    if (old_ie > -1 || new_ie > -1) {\n      ms_ie = true;\n    }\n\n    return ms_ie;\n  }\n}\n",
    "export const repeat = (str, times) => new Array(times + 1).join(str);\nexport const pad = (num, maxLength) => repeat('0', maxLength - num.toString().length) + num;\n",
    "import { InjectionToken } from '@angular/core';\n\nexport interface NgxsLoggerPluginOptions {\n  /** Auto expand logged actions  */\n  collapsed?: boolean;\n\n  /** Provide alternate console.log implementation */\n  logger?: any;\n\n  /** Disable the logger. Useful for prod mode. */\n  disabled?: boolean;\n}\n\nexport const NGXS_LOGGER_PLUGIN_OPTIONS = new InjectionToken('NGXS_LOGGER_PLUGIN_OPTIONS');\n"
  ],
  "names": [
    "NGXS_PLUGINS",
    "InjectionToken",
    "tap",
    "getActionTypeFromInstance"
  ],
  "mappings": "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"
}
