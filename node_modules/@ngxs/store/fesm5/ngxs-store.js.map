{
  "version": 3,
  "file": "ngxs-store.js",
  "sources": [
    "ng://@ngxs/store/packages/store/src/selector.ts",
    "ng://@ngxs/store/packages/store/src/memoize.ts",
    "ng://@ngxs/store/packages/store/src/state.ts",
    "ng://@ngxs/store/packages/store/src/action.ts",
    "ng://@ngxs/store/packages/store/src/module.ts",
    "ng://@ngxs/store/packages/store/src/actions.ts",
    "ng://@ngxs/store/packages/store/src/select.ts",
    "ng://@ngxs/store/packages/store/src/store.ts",
    "ng://@ngxs/store/packages/store/src/selector-utils.ts",
    "ng://@ngxs/store/packages/store/src/state-factory.ts",
    "ng://@ngxs/store/packages/store/src/state-context-factory.ts",
    "ng://@ngxs/store/packages/store/src/state-operations.ts",
    "ng://@ngxs/store/packages/store/src/freeze.ts",
    "ng://@ngxs/store/packages/store/src/dispatcher.ts",
    "ng://@ngxs/store/packages/store/src/zone.ts",
    "ng://@ngxs/store/packages/store/src/plugin-manager.ts",
    "ng://@ngxs/store/packages/store/src/state-stream.ts",
    "ng://@ngxs/store/packages/store/src/compose.ts",
    "ng://@ngxs/store/packages/store/src/actions-stream.ts",
    "ng://@ngxs/store/packages/store/src/of-action.ts",
    "ng://@ngxs/store/packages/store/src/utils.ts",
    "ng://@ngxs/store/packages/store/src/internals.ts",
    "ng://@ngxs/store/packages/store/src/symbols.ts"
  ],
  "sourcesContent": [
    "import { memoize } from './memoize';\nimport { getValue } from './utils';\nimport { ensureStoreMetadata, ensureSelectorMetadata } from './internals';\nimport { getSelectorFn } from './selector-utils';\n\n/**\n * Decorator for memoizing a state selector.\n */\nexport function Selector(selectors?: any[]) {\n  return (target: any, key: string, descriptor: PropertyDescriptor) => {\n    const metadata = ensureStoreMetadata(target);\n\n    if (descriptor.value !== null) {\n      const prev = descriptor.value;\n      const wrappedFn = function wrappedSelectorFn(...args) {\n        const returnValue = prev(...args);\n        if (returnValue instanceof Function) {\n          const innerMemoizedFn = memoize.apply(null, [returnValue]);\n          return innerMemoizedFn;\n        }\n        return returnValue;\n      };\n      const memoizedFn = memoize(wrappedFn);\n\n      const fn = state => {\n        const results = [];\n\n        // If we are on a state class, get the metadata path\n        if (metadata && metadata.path) {\n          results.push(getValue(state, metadata.path));\n        }\n\n        // Allow additional selectors if passed\n        if (selectors) {\n          results.push(...selectors.map(a => getSelectorFn(a)(state)));\n        }\n\n        // if the lambda tries to access a something on the\n        // state that doesn't exist, it will throw a TypeError.\n        // since this is quite usual behaviour, we simply return undefined if so.\n        try {\n          return memoizedFn(...results);\n        } catch (ex) {\n          if (ex instanceof TypeError) {\n            return undefined;\n          }\n          throw ex;\n        }\n      };\n\n      const selectorMetaData = ensureSelectorMetadata(memoizedFn);\n      selectorMetaData.originalFn = prev;\n      selectorMetaData.storeMetaData = metadata;\n      selectorMetaData.selectFromAppState = fn;\n\n      return {\n        configurable: true,\n        get() {\n          return memoizedFn;\n        }\n      };\n    } else {\n      throw new Error('Selectors only work on methods');\n    }\n  };\n}\n",
    "function defaultEqualityCheck(a, b) {\n  return a === b;\n}\n\nfunction areArgumentsShallowlyEqual(equalityCheck, prev, next) {\n  if (prev === null || next === null || prev.length !== next.length) {\n    return false;\n  }\n\n  // Do this in a for loop (and not a `forEach` or an `every`) so we can determine equality as fast as possible.\n  const length = prev.length;\n  for (let i = 0; i < length; i++) {\n    if (!equalityCheck(prev[i], next[i])) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * Memoize a function on its last inputs only.\n * Oringinally from: https://github.com/reduxjs/reselect/blob/master/src/index.js\n *\n * @ignore\n */\nexport function memoize(func, equalityCheck = defaultEqualityCheck) {\n  let lastArgs = null;\n  let lastResult = null;\n  // we reference arguments instead of spreading them for performance reasons\n  return <(...args) => any>function memoized() {\n    if (!areArgumentsShallowlyEqual(equalityCheck, lastArgs, arguments)) {\n      // apply arguments instead of spreading for performance.\n      lastResult = func.apply(null, arguments);\n    }\n\n    lastArgs = arguments;\n    return lastResult;\n  };\n}\n",
    "import { ensureStoreMetadata } from './internals';\nimport { StoreOptions, META_KEY } from './symbols';\n\nconst stateNameRegex = new RegExp('^[a-zA-Z0-9]+$');\n\n/**\n * Error message\n * @ignore\n */\nexport const stateNameErrorMessage = name =>\n  `${name} is not a valid state name. It needs to be a valid object property name.`;\n\n/**\n * Decorates a class with ngxs state information.\n */\nexport function State<T>(options: StoreOptions<T>) {\n  return function(target: any) {\n    const meta = ensureStoreMetadata(target);\n\n    // Handle inheritance\n    if (Object.getPrototypeOf(target).hasOwnProperty(META_KEY)) {\n      const parentMeta = Object.getPrototypeOf(target)[META_KEY];\n\n      meta.actions = {\n        ...meta.actions,\n        ...parentMeta.actions\n      };\n    }\n\n    meta.children = options.children;\n    meta.defaults = options.defaults;\n    meta.name = options.name;\n\n    if (!options.name) {\n      throw new Error(`States must register a 'name' property`);\n    }\n\n    if (!stateNameRegex.test(options.name)) {\n      throw new Error(stateNameErrorMessage(options.name));\n    }\n  };\n}\n",
    "import { ensureStoreMetadata } from './internals';\nimport { ActionOptions } from './symbols';\n\n/**\n * Decorates a method with a action information.\n */\nexport function Action(actions: any | any[], options?: ActionOptions) {\n  return function(target: any, name: string, descriptor: TypedPropertyDescriptor<any>) {\n    const meta = ensureStoreMetadata(target.constructor);\n\n    if (!Array.isArray(actions)) {\n      actions = [actions];\n    }\n\n    for (const action of actions) {\n      const type = action.type;\n\n      if (!action.type) {\n        throw new Error(`Action ${action.name} is missing a static \"type\" property`);\n      }\n\n      if (!meta.actions[type]) {\n        meta.actions[type] = [];\n      }\n\n      meta.actions[type].push({\n        fn: name,\n        options: options || {},\n        type\n      });\n    }\n  };\n}\n",
    "import { NgModule, ModuleWithProviders, Optional, Inject, InjectionToken } from '@angular/core';\n\nimport { ROOT_STATE_TOKEN, FEATURE_STATE_TOKEN, NgxsConfig } from './symbols';\nimport { StateFactory } from './state-factory';\nimport { StateContextFactory } from './state-context-factory';\nimport { Actions, InternalActions } from './actions-stream';\nimport { InternalDispatcher, InternalDispatchedActionResults } from './dispatcher';\nimport { InternalStateOperations } from './state-operations';\nimport { Store } from './store';\nimport { SelectFactory } from './select';\nimport { StateStream } from './state-stream';\nimport { PluginManager } from './plugin-manager';\nimport { InitState, UpdateState } from './actions';\n\n/**\n * Root module\n * @ignore\n */\n@NgModule()\nexport class NgxsRootModule {\n  constructor(\n    factory: StateFactory,\n    internalStateOperations: InternalStateOperations,\n    store: Store,\n    select: SelectFactory,\n    @Optional()\n    @Inject(ROOT_STATE_TOKEN)\n    states: any[]\n  ) {\n    // add stores to the state graph and return their defaults\n    const results = factory.addAndReturnDefaults(states);\n\n    const stateOperations = internalStateOperations.getRootStateOperations();\n    if (results) {\n      // get our current stream\n      const cur = stateOperations.getState();\n\n      // set the state to the current + new\n      stateOperations.setState({ ...cur, ...results.defaults });\n    }\n\n    // connect our actions stream\n    factory.connectActionHandlers();\n\n    // dispatch the init action and invoke init function after\n    stateOperations.dispatch(new InitState()).subscribe(() => {\n      if (results) {\n        factory.invokeInit(results.states);\n      }\n    });\n  }\n}\n\n/**\n * Feature module\n * @ignore\n */\n@NgModule({})\nexport class NgxsFeatureModule {\n  constructor(\n    store: Store,\n    internalStateOperations: InternalStateOperations,\n    factory: StateFactory,\n    @Optional()\n    @Inject(FEATURE_STATE_TOKEN)\n    states: any[][]\n  ) {\n    // Since FEATURE_STATE_TOKEN is a multi token, we need to\n    // flatten it [[Feature1State, Feature2State], [Feature3State]]\n    const flattenedStates = ([] as any[]).concat(...states);\n\n    // add stores to the state graph and return their defaults\n    const results = factory.addAndReturnDefaults(flattenedStates);\n\n    const stateOperations = internalStateOperations.getRootStateOperations();\n    if (results) {\n      // get our current stream\n      const cur = stateOperations.getState();\n\n      // set the state to the current + new\n      stateOperations.setState({ ...cur, ...results.defaults });\n    }\n\n    stateOperations.dispatch(new UpdateState()).subscribe(() => {\n      if (results) {\n        factory.invokeInit(results.states);\n      }\n    });\n  }\n}\n\nexport type ModuleOptions = Partial<NgxsConfig>;\n\nexport function ngxsConfigFactory(options: ModuleOptions): NgxsConfig {\n  const config = Object.assign(new NgxsConfig(), options);\n  return config;\n}\n\nexport const ROOT_OPTIONS = new InjectionToken('ROOT_OPTIONS');\n\n/**\n * Ngxs Module\n */\n@NgModule({})\nexport class NgxsModule {\n  /**\n   * Root module factory\n   */\n  static forRoot(states: any[] = [], options: ModuleOptions = {}): ModuleWithProviders {\n    return {\n      ngModule: NgxsRootModule,\n      providers: [\n        StateFactory,\n        StateContextFactory,\n        Actions,\n        InternalActions,\n        InternalDispatcher,\n        InternalDispatchedActionResults,\n        InternalStateOperations,\n        Store,\n        StateStream,\n        SelectFactory,\n        PluginManager,\n        ...states,\n        {\n          provide: ROOT_STATE_TOKEN,\n          useValue: states\n        },\n        {\n          provide: ROOT_OPTIONS,\n          useValue: options\n        },\n        {\n          provide: NgxsConfig,\n          useFactory: ngxsConfigFactory,\n          deps: [ROOT_OPTIONS]\n        }\n      ]\n    };\n  }\n\n  /**\n   * Feature module factory\n   */\n  static forFeature(states: any[]): ModuleWithProviders {\n    return {\n      ngModule: NgxsFeatureModule,\n      providers: [\n        StateFactory,\n        PluginManager,\n        ...states,\n        {\n          provide: FEATURE_STATE_TOKEN,\n          multi: true,\n          useValue: states\n        }\n      ]\n    };\n  }\n}\n",
    "/**\n * Init action\n */\nexport class InitState {\n  static readonly type = '@@INIT';\n}\n\n/**\n * Update action\n */\nexport class UpdateState {\n  static readonly type = '@@UPDATE_STATE';\n}\n",
    "import { Injectable } from '@angular/core';\n\nimport { Store } from './store';\nimport { fastPropGetter } from './internals';\nimport { META_KEY } from './symbols';\n\n/**\n * Allows the select decorator to get access to the DI store.\n * @ignore\n */\n@Injectable()\nexport class SelectFactory {\n  static store: Store | undefined = undefined;\n  constructor(store: Store) {\n    SelectFactory.store = store;\n  }\n}\n\n/**\n * Decorator for selecting a slice of state from the store.\n */\nexport function Select(selectorOrFeature?, ...paths: string[]) {\n  return function(target: any, name: string) {\n    const selectorFnName = '__' + name + '__selector';\n\n    if (!selectorOrFeature) {\n      // if foo$ => make it just foo\n      selectorOrFeature = name.lastIndexOf('$') === name.length - 1 ? name.substring(0, name.length - 1) : name;\n    }\n\n    const createSelect = fn => {\n      const store = SelectFactory.store;\n\n      if (!store) {\n        throw new Error('SelectFactory not connected to store!');\n      }\n\n      return store.select(fn);\n    };\n\n    const createSelector = () => {\n      if (typeof selectorOrFeature === 'string') {\n        const propsArray = paths.length ? [selectorOrFeature, ...paths] : selectorOrFeature.split('.');\n\n        return fastPropGetter(propsArray);\n      } else if (selectorOrFeature[META_KEY] && selectorOrFeature[META_KEY].path) {\n        return fastPropGetter(selectorOrFeature[META_KEY].path.split('.'));\n      } else {\n        return selectorOrFeature;\n      }\n    };\n\n    if (target[selectorFnName]) {\n      throw new Error('You cannot use @Select decorator and a ' + selectorFnName + ' property.');\n    }\n\n    if (delete target[name]) {\n      Object.defineProperty(target, selectorFnName, {\n        writable: true,\n        enumerable: false,\n        configurable: true\n      });\n\n      Object.defineProperty(target, name, {\n        get: function() {\n          return this[selectorFnName] || (this[selectorFnName] = createSelect.apply(this, [createSelector()]));\n        },\n        enumerable: true,\n        configurable: true\n      });\n    }\n  };\n}\n",
    "import { Injectable, NgZone } from '@angular/core';\nimport { Observable, of, Subscription } from 'rxjs';\nimport { catchError, distinctUntilChanged, map, take } from 'rxjs/operators';\n\nimport { getSelectorFn } from './selector-utils';\nimport { InternalStateOperations } from './state-operations';\nimport { StateStream } from './state-stream';\nimport { enterZone } from './zone';\n\n@Injectable()\nexport class Store {\n  constructor(\n    private _ngZone: NgZone,\n    private _stateStream: StateStream,\n    private _internalStateOperations: InternalStateOperations\n  ) {}\n\n  /**\n   * Dispatches event(s).\n   */\n  dispatch(event: any | any[]): Observable<any> {\n    return this._internalStateOperations.getRootStateOperations().dispatch(event);\n  }\n\n  /**\n   * Selects a slice of data from the store.\n   */\n  select<T>(selector: (state: any, ...states: any[]) => T): Observable<T>;\n  select(selector: string | any): Observable<any>;\n  select(selector: any): Observable<any> {\n    const selectorFn = getSelectorFn(selector);\n    return this._stateStream.pipe(\n      map(selectorFn),\n      catchError(err => {\n        // if error is TypeError we swallow it to prevent usual errors with property access\n        if (err instanceof TypeError) {\n          return of(undefined);\n        }\n\n        // rethrow other errors\n        throw err;\n      }),\n      distinctUntilChanged(),\n      enterZone(this._ngZone)\n    );\n  }\n\n  /**\n   * Select one slice of data from the store.\n   */\n  selectOnce<T>(selector: (state: any, ...states: any[]) => T): Observable<T>;\n  selectOnce(selector: string | any): Observable<any>;\n  selectOnce(selector: any): Observable<any> {\n    return this.select(selector).pipe(take(1));\n  }\n\n  /**\n   * Select a snapshot from the state.\n   */\n  selectSnapshot<T>(selector: (state: any, ...states: any[]) => T): T;\n  selectSnapshot(selector: string | any): any;\n  selectSnapshot(selector: any): any {\n    const selectorFn = getSelectorFn(selector);\n    return selectorFn(this._stateStream.getValue());\n  }\n\n  /**\n   * Allow the user to subscribe to the root of the state\n   */\n  subscribe(fn?: any): Subscription {\n    return this._stateStream.pipe(enterZone(this._ngZone)).subscribe(fn);\n  }\n\n  /**\n   * Return the raw value of the state.\n   */\n  snapshot(): any {\n    return this._internalStateOperations.getRootStateOperations().getState();\n  }\n\n  /**\n   * Reset the state to a specific point in time. This method is useful\n   * for plugin's who need to modify the state directly or unit testing.\n   */\n  reset(state: any) {\n    return this._internalStateOperations.getRootStateOperations().setState(state);\n  }\n}\n",
    "import { META_KEY } from './symbols';\nimport { SelectFromState, SelectorMetaDataModel, fastPropGetter } from './internals';\n\n/**\n * This function gets the selector function to be used to get the selected slice from the app state\n * @ignore\n */\nexport function getSelectorFn(selector: any): SelectFromState {\n  const metadata = selector[META_KEY];\n  if (metadata) {\n    const selectFromAppState = (<SelectorMetaDataModel>metadata).selectFromAppState;\n    if (selectFromAppState) {\n      return selectFromAppState;\n    } else if (metadata.path) {\n      return fastPropGetter(metadata.path.split('.'));\n    }\n  }\n  return selector;\n}\n",
    "import { Injector, Injectable, SkipSelf, Optional } from '@angular/core';\nimport { Observable, of, forkJoin, from, throwError } from 'rxjs';\nimport { shareReplay, takeUntil, map, catchError, filter, mergeMap, defaultIfEmpty } from 'rxjs/operators';\n\nimport { META_KEY, NgxsLifeCycle } from './symbols';\nimport {\n  topologicalSort,\n  buildGraph,\n  findFullParentPath,\n  nameToState,\n  isObject,\n  StateClass,\n  MappedStore\n} from './internals';\nimport { getActionTypeFromInstance, setValue } from './utils';\nimport { ofActionDispatched } from './of-action';\nimport { InternalActions, ActionStatus, ActionContext } from './actions-stream';\nimport { InternalDispatchedActionResults } from './dispatcher';\nimport { StateContextFactory } from './state-context-factory';\n\n/**\n * State factory class\n * @ignore\n */\n@Injectable()\nexport class StateFactory {\n  get states(): MappedStore[] {\n    return this._parentFactory ? this._parentFactory.states : this._states;\n  }\n\n  private _states: MappedStore[] = [];\n  private _connected = false;\n\n  constructor(\n    private _injector: Injector,\n    @Optional()\n    @SkipSelf()\n    private _parentFactory: StateFactory,\n    private _actions: InternalActions,\n    private _actionResults: InternalDispatchedActionResults,\n    private _stateContextFactory: StateContextFactory\n  ) {}\n\n  /**\n   * Add a new state to the global defs.\n   */\n  add(oneOrManyStateClasses: StateClass | StateClass[]): MappedStore[] {\n    let stateClasses: StateClass[];\n    if (!Array.isArray(oneOrManyStateClasses)) {\n      stateClasses = [oneOrManyStateClasses];\n    } else {\n      stateClasses = oneOrManyStateClasses;\n    }\n\n    const stateGraph = buildGraph(stateClasses);\n    const sortedStates = topologicalSort(stateGraph);\n    const depths = findFullParentPath(stateGraph);\n    const nameGraph = nameToState(stateClasses);\n    const mappedStores: MappedStore[] = [];\n\n    for (const name of sortedStates) {\n      const stateClass = nameGraph[name];\n\n      if (!stateClass[META_KEY]) {\n        throw new Error('States must be decorated with @State() decorator');\n      }\n\n      const depth = depths[name];\n      const { actions } = stateClass[META_KEY];\n      let { defaults } = stateClass[META_KEY];\n\n      stateClass[META_KEY].path = depth;\n\n      // ensure our store hasn't already been added\n      // but dont throw since it could be lazy\n      // loaded from different paths\n      const has = this.states.find(s => s.name === name);\n      if (!has) {\n        // create new instance of defaults\n        if (Array.isArray(defaults)) {\n          defaults = [...defaults];\n        } else if (isObject(defaults)) {\n          defaults = { ...defaults };\n        } else if (defaults === undefined) {\n          defaults = {};\n        }\n\n        const instance = this._injector.get(stateClass);\n\n        mappedStores.push({\n          actions,\n          instance,\n          defaults,\n          name,\n          depth\n        });\n      }\n    }\n\n    this.states.push(...mappedStores);\n\n    return mappedStores;\n  }\n\n  /**\n   * Add a set of states to the store and return the defaulsts\n   */\n  addAndReturnDefaults(stateClasses: any[]): { defaults: any; states: MappedStore[] } {\n    if (stateClasses) {\n      const states = this.add(stateClasses);\n      const defaults = states.reduce(\n        (result: any, meta: MappedStore) => setValue(result, meta.depth, meta.defaults),\n        {}\n      );\n      return { defaults, states };\n    }\n  }\n\n  /**\n   * Bind the actions to the handlers\n   */\n  connectActionHandlers() {\n    if (this._connected) return;\n    this._actions\n      .pipe(\n        filter((ctx: ActionContext) => ctx.status === ActionStatus.Dispatched),\n        mergeMap(({ action }) =>\n          this.invokeActions(this._actions, action).pipe(\n            map(() => <ActionContext>{ action, status: ActionStatus.Successful }),\n            defaultIfEmpty(<ActionContext>{ action, status: ActionStatus.Canceled }),\n            catchError(error => of(<ActionContext>{ action, status: ActionStatus.Errored, error }))\n          )\n        )\n      )\n      .subscribe(ctx => this._actionResults.next(ctx));\n    this._connected = true;\n  }\n\n  /**\n   * Invoke the init function on the states.\n   */\n  invokeInit(stateMetadatas: MappedStore[]) {\n    for (const metadata of stateMetadatas) {\n      const instance: NgxsLifeCycle = metadata.instance;\n\n      if (instance.ngxsOnInit) {\n        const stateContext = this.createStateContext(metadata);\n        instance.ngxsOnInit(stateContext);\n      }\n    }\n  }\n\n  /**\n   * Invoke actions on the states.\n   */\n  invokeActions(actions$: InternalActions, action) {\n    const results = [];\n\n    for (const metadata of this.states) {\n      const type = getActionTypeFromInstance(action);\n      const actionMetas = metadata.actions[type];\n\n      if (actionMetas) {\n        for (const actionMeta of actionMetas) {\n          const stateContext = this.createStateContext(metadata);\n          try {\n            let result = metadata.instance[actionMeta.fn](stateContext, action);\n\n            if (result instanceof Promise) {\n              result = from(result);\n            }\n\n            if (result instanceof Observable) {\n              result = result.pipe(\n                actionMeta.options.cancelUncompleted\n                  ? takeUntil(actions$.pipe(ofActionDispatched(action)))\n                  : map(r => r)\n              ); // map acts like a noop\n            } else {\n              result = of({}).pipe(shareReplay());\n            }\n\n            results.push(result);\n          } catch (e) {\n            results.push(throwError(e));\n          }\n        }\n      }\n    }\n\n    if (!results.length) {\n      results.push(of({}));\n    }\n\n    return forkJoin(results);\n  }\n\n  /**\n   * Create the state context\n   */\n  private createStateContext(metadata: MappedStore) {\n    return this._stateContextFactory.createStateContext(metadata);\n  }\n}\n",
    "import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { StateContext } from './symbols';\nimport { MappedStore } from './internals';\nimport { setValue, getValue } from './utils';\nimport { InternalStateOperations } from './state-operations';\n\n/**\n * State Context factory class\n * @ignore\n */\n@Injectable()\nexport class StateContextFactory {\n  constructor(\n    private _internalStateOperations: InternalStateOperations\n  ) {}\n\n  /**\n   * Create the state context\n   */\n  createStateContext(metadata: MappedStore): StateContext<any> {\n    const root = this._internalStateOperations.getRootStateOperations();\n    return {\n      getState(): any {\n        const state = root.getState();\n        return getValue(state, metadata.depth);\n      },\n      patchState(val: any): any {\n        const isArray = Array.isArray(val);\n        const isPrimitive = typeof val !== 'object';\n\n        if (isArray) {\n          throw new Error('Patching arrays is not supported.');\n        } else if (isPrimitive) {\n          throw new Error('Patching primitives is not supported.');\n        }\n\n        const state = root.getState();\n        const local = getValue(state, metadata.depth);\n        const clone = { ...local };\n\n        for (const k in val) {\n          clone[k] = val[k];\n        }\n\n        const newState = setValue(state, metadata.depth, clone);\n        root.setState(newState);\n        return newState;\n      },\n      setState(val: any): any {\n        let state = root.getState();\n        state = setValue(state, metadata.depth, val);\n        root.setState(state);\n        return state;\n      },\n      dispatch(actions: any | any[]): Observable<any> {\n        return root.dispatch(actions);\n      }\n    };\n  }\n}\n",
    "import { Injectable } from '@angular/core';\n\nimport { StateOperations } from './internals';\nimport { InternalDispatcher } from './dispatcher';\nimport { StateStream } from './state-stream';\nimport { NgxsConfig } from './symbols';\nimport { deepFreeze } from './freeze';\n\n/**\n * State Context factory class\n * @ignore\n */\n@Injectable()\nexport class InternalStateOperations {\n  constructor(\n    private _stateStream: StateStream,\n    private _dispatcher: InternalDispatcher,\n    private _config: NgxsConfig\n  ) {}\n\n  /**\n   * Returns the root state operators.\n   */\n  getRootStateOperations(): StateOperations<any> {\n    const rootStateOperations = {\n      getState: () => this._stateStream.getValue(),\n      setState: newState => this._stateStream.next(newState),\n      dispatch: actions => this._dispatcher.dispatch(actions)\n    };\n\n    if (this._config.developmentMode) {\n      return this.ensureStateAndActionsAreImmutable(rootStateOperations);\n    }\n\n    return rootStateOperations;\n  }\n\n  private ensureStateAndActionsAreImmutable(root: StateOperations<any>): StateOperations<any> {\n    return {\n      getState: () => root.getState(),\n      setState: value => {\n        const frozenValue = deepFreeze(value);\n        return root.setState(frozenValue);\n      },\n      dispatch: actions => {\n        return root.dispatch(actions);\n      }\n    };\n  }\n}\n",
    "/**\n * Object freeze code\n * https://github.com/jsdf/deep-freeze\n */\nexport const deepFreeze = o => {\n  Object.freeze(o);\n\n  const oIsFunction = typeof o === 'function';\n  const hasOwnProp = Object.prototype.hasOwnProperty;\n\n  Object.getOwnPropertyNames(o).forEach(function(prop) {\n    if (\n      hasOwnProp.call(o, prop) &&\n      (oIsFunction ? prop !== 'caller' && prop !== 'callee' && prop !== 'arguments' : true) &&\n      o[prop] !== null &&\n      (typeof o[prop] === 'object' || typeof o[prop] === 'function') &&\n      !Object.isFrozen(o[prop])\n    ) {\n      deepFreeze(o[prop]);\n    }\n  });\n\n  return o;\n};\n",
    "import { Injectable, ErrorHandler, NgZone } from '@angular/core';\nimport { Observable, of, forkJoin, empty, Subject, throwError } from 'rxjs';\nimport { shareReplay, filter, exhaustMap, take } from 'rxjs/operators';\n\nimport { compose } from './compose';\nimport { InternalActions, ActionStatus, ActionContext } from './actions-stream';\nimport { StateStream } from './state-stream';\nimport { PluginManager } from './plugin-manager';\nimport { enterZone } from './zone';\n\n/**\n * Internal Action result stream that is emitted when an action is completed.\n * This is used as a method of returning the action result to the dispatcher\n * for the observable returned by the dispatch(...) call.\n * The dispatcher then asynchronously pushes the result from this stream onto the main action stream as a result.\n */\n@Injectable()\nexport class InternalDispatchedActionResults extends Subject<ActionContext> {}\n\n@Injectable()\nexport class InternalDispatcher {\n  constructor(\n    private _errorHandler: ErrorHandler,\n    private _actions: InternalActions,\n    private _actionResults: InternalDispatchedActionResults,\n    private _pluginManager: PluginManager,\n    private _stateStream: StateStream,\n    private _ngZone: NgZone\n  ) {}\n\n  /**\n   * Dispatches event(s).\n   */\n  dispatch(event: any | any[]): Observable<any> {\n    const result: Observable<any> = this._ngZone.runOutsideAngular(() => {\n      if (Array.isArray(event)) {\n        return forkJoin(event.map(a => this.dispatchSingle(a)));\n      } else {\n        return this.dispatchSingle(event);\n      }\n    });\n\n    result.subscribe({\n      error: error => this._ngZone.run(() => this._errorHandler.handleError(error))\n    });\n\n    return result.pipe(enterZone(this._ngZone));\n  }\n\n  private dispatchSingle(action: any): Observable<any> {\n    const prevState = this._stateStream.getValue();\n    const plugins = this._pluginManager.plugins;\n\n    return (compose([\n      ...plugins,\n      (nextState, nextAction) => {\n        if (nextState !== prevState) {\n          this._stateStream.next(nextState);\n        }\n        const actionResult$ = this.getActionResultStream(nextAction);\n        actionResult$.subscribe(ctx => this._actions.next(ctx));\n        this._actions.next({ action: nextAction, status: ActionStatus.Dispatched });\n        return this.createDispatchObservable(actionResult$);\n      }\n    ])(prevState, action) as Observable<any>).pipe(shareReplay());\n  }\n\n  private getActionResultStream(action: any): Observable<ActionContext> {\n    return this._actionResults.pipe(\n      filter((ctx: ActionContext) => ctx.action === action && ctx.status !== ActionStatus.Dispatched),\n      take(1),\n      shareReplay()\n    );\n  }\n\n  private createDispatchObservable(actionResult$: Observable<ActionContext>): Observable<any> {\n    return actionResult$\n      .pipe(\n        exhaustMap((ctx: ActionContext) => {\n          switch (ctx.status) {\n            case ActionStatus.Successful:\n              return of(this._stateStream.getValue());\n            case ActionStatus.Errored:\n              return throwError(ctx.error);\n            default:\n              return empty();\n          }\n        })\n      )\n      .pipe(shareReplay());\n  }\n}\n",
    "import { Observable, Observer } from 'rxjs';\nimport { NgZone } from '@angular/core';\n\n/**\n * Operator to run the `subscribe` in a Angular zone.\n */\nexport function enterZone<T>(zone: NgZone) {\n  return (source: Observable<T>) => {\n    return new Observable((sink: Observer<T>) => {\n      return source.subscribe({\n        next(x) {\n          zone.run(() => sink.next(x));\n        },\n        error(e) {\n          zone.run(() => sink.error(e));\n        },\n        complete() {\n          zone.run(() => sink.complete());\n        }\n      });\n    });\n  };\n}\n",
    "import { Injectable, Optional, SkipSelf, Inject } from '@angular/core';\nimport { NgxsPluginFn, NGXS_PLUGINS, NgxsPlugin } from './symbols';\n\n/**\n * Plugin manager class\n * @ignore\n */\n@Injectable()\nexport class PluginManager {\n  plugins: NgxsPluginFn[] = [];\n\n  constructor(\n    @Optional()\n    @SkipSelf()\n    private _parentManager: PluginManager,\n    @Inject(NGXS_PLUGINS)\n    @Optional()\n    private _plugins: NgxsPlugin[]\n  ) {\n    this.register();\n  }\n\n  private register() {\n    if (!this._plugins) {\n      return;\n    }\n\n    this.plugins = this._plugins.map(plugin => {\n      if (plugin.handle) {\n        return plugin.handle.bind(plugin);\n      } else {\n        return plugin;\n      }\n    });\n\n    if (this._parentManager) {\n      this._parentManager.plugins.push(...this.plugins);\n    }\n  }\n}\n",
    "import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\n/**\n * BehaviorSubject of the entire state.\n * @ignore\n */\n@Injectable()\nexport class StateStream extends BehaviorSubject<any> {\n  constructor() {\n    super({});\n  }\n}\n",
    "/**\n * Composes a array of functions from left to right. Example:\n *\n *      compose([fn, final])(state, action);\n *\n * then the funcs have a signature like:\n *\n *      function fn (state, action, next) {\n *          console.log('here', state, action, next);\n *          return next(state, action);\n *      }\n *\n *      function final (state, action) {\n *          console.log('here', state, action);\n *          return state;\n *      }\n *\n * the last function should not call `next`.\n *\n * @ignore\n */\nexport const compose = funcs => (...args) => {\n  const curr = funcs.shift();\n  return curr(...args, (...nextArgs) => compose(funcs)(...nextArgs));\n};\n",
    "import { Injectable } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\n\n/**\n * Status of a dispatched action\n */\nexport const enum ActionStatus {\n  Dispatched = 'DISPATCHED',\n  Successful = 'SUCCESSFUL',\n  Canceled = 'CANCELED',\n  Errored = 'ERRORED'\n}\n\nexport interface ActionContext {\n  status: ActionStatus;\n  action: any;\n  error?: Error;\n}\n\n/**\n * Custom Subject that ensures that subscribers are notified of values in the order that they arrived.\n * A standard Subject does not have this guarantee.\n * For example, given the following code:\n * ```typescript\n *   const subject = new Subject<string>();\n     subject.subscribe(value => {\n       if (value === 'start') subject.next('end');\n     });\n     subject.subscribe(value => { });\n     subject.next('start');\n * ```\n * When `subject` is a standard `Subject<T>` the second subscriber would recieve `end` and then `start`.\n * When `subject` is a `OrderedSubject<T>` the second subscriber would recieve `start` and then `end`.\n */\nexport class OrderedSubject<T> extends Subject<T> {\n  private _itemQueue: T[] = [];\n  private _busyPushingNext = false;\n\n  next(value?: T): void {\n    if (this._busyPushingNext) {\n      this._itemQueue.unshift(value);\n      return;\n    }\n    this._busyPushingNext = true;\n    super.next(value);\n    while (this._itemQueue.length > 0) {\n      const nextValue = this._itemQueue.pop();\n      super.next(nextValue);\n    }\n    this._busyPushingNext = false;\n  }\n}\n\n/**\n * Internal Action stream that is emitted anytime an action is dispatched.\n */\n@Injectable()\nexport class InternalActions extends OrderedSubject<ActionContext> {}\n\n/**\n * Action stream that is emitted anytime an action is dispatched.\n *\n * You can listen to this in services to react without stores.\n */\n@Injectable()\nexport class Actions extends Observable<any> {\n  constructor(actions$: InternalActions) {\n    super(observer => {\n      actions$.subscribe(res => observer.next(res), err => observer.error(err), () => observer.complete());\n    });\n  }\n}\n",
    "import { OperatorFunction, Observable } from 'rxjs';\nimport { map, filter } from 'rxjs/operators';\nimport { getActionTypeFromInstance } from './utils';\nimport { ActionContext, ActionStatus } from './actions-stream';\n\nexport function ofAction<T>(allowedType): OperatorFunction<any, T>;\nexport function ofAction<T>(...allowedTypes): OperatorFunction<any, T>;\n\n/**\n * RxJS operator for selecting out specific actions.\n *\n * This will grab actions that have just been dispatched as well as actions that have completed\n */\nexport function ofAction(...allowedTypes: any[]) {\n  return ofActionOperator(allowedTypes);\n}\n\n/**\n * RxJS operator for selecting out specific actions.\n *\n * This will ONLY grab actions that have just been dispatched\n */\nexport function ofActionDispatched(...allowedTypes: any[]) {\n  return ofActionOperator(allowedTypes, ActionStatus.Dispatched);\n}\n\n/**\n * RxJS operator for selecting out specific actions.\n *\n * This will ONLY grab actions that have just been successfully completed\n */\nexport function ofActionSuccessful(...allowedTypes: any[]) {\n  return ofActionOperator(allowedTypes, ActionStatus.Successful);\n}\n\n/**\n * RxJS operator for selecting out specific actions.\n *\n * This will ONLY grab actions that have just been canceled\n */\nexport function ofActionCanceled(...allowedTypes: any[]) {\n  return ofActionOperator(allowedTypes, ActionStatus.Canceled);\n}\n\n/**\n * RxJS operator for selecting out specific actions.\n *\n * This will ONLY grab actions that have just thrown an error\n */\nexport function ofActionErrored(...allowedTypes: any[]) {\n  return ofActionOperator(allowedTypes, ActionStatus.Errored);\n}\n\nfunction ofActionOperator(allowedTypes: any[], status?: ActionStatus) {\n  const allowedMap = createAllowedMap(allowedTypes);\n  return function(o: Observable<any>) {\n    return o.pipe(filterStatus(allowedMap, status), mapAction());\n  };\n}\n\nfunction filterStatus(allowedTypes: { [key: string]: boolean }, status?: ActionStatus) {\n  return filter((ctx: ActionContext) => {\n    const actionType = getActionTypeFromInstance(ctx.action);\n    const type = allowedTypes[actionType];\n    return status ? type && ctx.status === status : type;\n  });\n}\n\nfunction mapAction() {\n  return map((ctx: ActionContext) => ctx.action);\n}\n\nfunction createAllowedMap(types: any[]): { [key: string]: boolean } {\n  return types.reduce((acc: any, klass: any) => {\n    acc[getActionTypeFromInstance(klass)] = true;\n    return acc;\n  }, {});\n}\n",
    "/**\n * Returns the type from an action instance.\n * @ignore\n */\nexport function getActionTypeFromInstance(action: any): string {\n  if (action.constructor && action.constructor.type) {\n    return action.constructor.type;\n  }\n\n  return action.type;\n}\n\n/**\n * Matches a action\n * @ignore\n */\nexport function actionMatcher(action1: any) {\n  const type1 = getActionTypeFromInstance(action1);\n\n  return function(action2: any) {\n    return type1 === getActionTypeFromInstance(action2);\n  };\n}\n\n/**\n * Set a deeply nested value. Example:\n *\n *   setValue({ foo: { bar: { eat: false } } },\n *      'foo.bar.eat', true) //=> { foo: { bar: { eat: true } } }\n *\n * While it traverses it also creates new objects from top down.\n *\n * @ignore\n */\nexport const setValue = (obj: any, prop: string, val: any) => {\n  obj = { ...obj };\n\n  const split = prop.split('.');\n  const last = split[split.length - 1];\n\n  split.reduce((acc, part) => {\n    if (part === last) {\n      acc[part] = val;\n    } else {\n      acc[part] = { ...acc[part] };\n    }\n\n    return acc && acc[part];\n  }, obj);\n\n  return obj;\n};\n\n/**\n * Get a deeply nested value. Example:\n *\n *    getValue({ foo: bar: [] }, 'foo.bar') //=> []\n *\n * @ignore\n */\nexport const getValue = (obj: any, prop: string) =>\n  prop.split('.').reduce((acc: any, part: string) => acc && acc[part], obj);\n",
    "import { META_KEY, ActionOptions } from './symbols';\nimport { Observable } from 'rxjs';\n\nexport interface ObjectKeyMap<T> {\n  [key: string]: T;\n}\n\nexport interface StateClass {\n  [META_KEY]?: MetaDataModel;\n}\n\nexport type StateKeyGraph = ObjectKeyMap<string[]>;\n\nexport interface ActionHandlerMetaData {\n  fn: string;\n  options: ActionOptions;\n  type: string;\n}\n\nexport interface StateOperations<T> {\n  getState(): T;\n  setState(val: T);\n  dispatch(actions: any | any[]): Observable<void>;\n}\n\nexport interface MetaDataModel {\n  name: string;\n  actions: ObjectKeyMap<ActionHandlerMetaData[]>;\n  defaults: any;\n  path: string;\n  children: StateClass[];\n  instance: any;\n}\n\nexport type SelectFromState = (state: any) => any;\n\nexport interface SelectorMetaDataModel {\n  selectFromAppState: SelectFromState;\n  originalFn: Function;\n  storeMetaData: MetaDataModel;\n}\n\nexport interface MappedStore {\n  name: string;\n  actions: ObjectKeyMap<ActionHandlerMetaData[]>;\n  defaults: any;\n  instance: any;\n  depth: string;\n}\n\n/**\n * Ensures metadata is attached to the class and returns it.\n *\n * @ignore\n */\nexport function ensureStoreMetadata(target): MetaDataModel {\n  if (!target.hasOwnProperty(META_KEY)) {\n    const defaultMetadata: MetaDataModel = {\n      name: null,\n      actions: {},\n      defaults: {},\n      path: null,\n      children: [],\n      instance: null\n    };\n\n    Object.defineProperty(target, META_KEY, { value: defaultMetadata });\n  }\n\n  return target[META_KEY];\n}\n\n/**\n * Ensures metadata is attached to the selector and returns it.\n *\n * @ignore\n */\nexport function ensureSelectorMetadata(target): SelectorMetaDataModel {\n  if (!target.hasOwnProperty(META_KEY)) {\n    const defaultMetadata: SelectorMetaDataModel = {\n      selectFromAppState: null,\n      originalFn: null,\n      storeMetaData: null\n    };\n\n    Object.defineProperty(target, META_KEY, { value: defaultMetadata });\n  }\n\n  return target[META_KEY];\n}\n\n/**\n * The generated function is faster than:\n * - pluck (Observable operator)\n * - memoize\n *\n * @ignore\n */\nexport function fastPropGetter(paths: string[]): (x: any) => any {\n  const segments = paths;\n  let seg = 'store.' + segments[0];\n  let i = 0;\n  const l = segments.length;\n\n  let expr = seg;\n  while (++i < l) {\n    expr = expr + ' && ' + (seg = seg + '.' + segments[i]);\n  }\n\n  const fn = new Function('store', 'return ' + expr + ';');\n\n  return <(x: any) => any>fn;\n}\n\n/**\n * Given an array of states, it will return a object graph. Example:\n *    const states = [\n *      Cart,\n *      CartSaved,\n *      CartSavedItems\n *    ]\n *\n * would return:\n *\n *  const graph = {\n *    cart: ['saved'],\n *    saved: ['items'],\n *    items: []\n *  };\n *\n * @ignore\n */\nexport function buildGraph(stateClasses: StateClass[]): StateKeyGraph {\n  const findName = (stateClass: StateClass) => {\n    const meta = stateClasses.find(g => g === stateClass);\n    if (!meta) {\n      throw new Error(`Child state not found: ${stateClass}`);\n    }\n\n    if (!meta[META_KEY]) {\n      throw new Error('States must be decorated with @State() decorator');\n    }\n\n    return meta[META_KEY].name;\n  };\n\n  return stateClasses.reduce<StateKeyGraph>((result: StateKeyGraph, stateClass: StateClass) => {\n    if (!stateClass[META_KEY]) {\n      throw new Error('States must be decorated with @State() decorator');\n    }\n\n    const { name, children } = stateClass[META_KEY];\n    result[name] = (children || []).map(findName);\n    return result;\n  }, {});\n}\n\n/**\n * Given a states array, returns object graph\n * returning the name and state metadata. Example:\n *\n *  const graph = {\n *    cart: { metadata }\n *  };\n *\n * @ignore\n */\nexport function nameToState(states: StateClass[]): ObjectKeyMap<StateClass> {\n  return states.reduce<ObjectKeyMap<StateClass>>((result: ObjectKeyMap<StateClass>, stateClass: StateClass) => {\n    if (!stateClass[META_KEY]) {\n      throw new Error('States must be decorated with @State() decorator');\n    }\n\n    const meta = stateClass[META_KEY];\n    result[meta.name] = stateClass;\n    return result;\n  }, {});\n}\n\n/**\n * Given a object relationship graph will return the full path\n * for the child items. Example:\n *\n *  const graph = {\n *    cart: ['saved'],\n *    saved: ['items'],\n *    items: []\n *  };\n *\n * would return:\n *\n *  const r = {\n *    cart: 'cart',\n *    saved: 'cart.saved',\n *    items: 'cart.saved.items'\n *  };\n *\n * @ignore\n */\nexport function findFullParentPath(obj: StateKeyGraph, newObj: ObjectKeyMap<string> = {}): ObjectKeyMap<string> {\n  const visit = (child: StateKeyGraph, keyToFind: string): string => {\n    for (const key in child) {\n      if (child.hasOwnProperty(key) && child[key].indexOf(keyToFind) >= 0) {\n        const parent = visit(child, key);\n        return parent !== null ? `${parent}.${key}` : key;\n      }\n    }\n    return null;\n  };\n\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      const parent = visit(obj, key);\n      newObj[key] = parent ? `${parent}.${key}` : key;\n    }\n  }\n\n  return newObj;\n}\n\n/**\n * Given a object graph, it will return the items topologically sorted Example:\n *\n *  const graph = {\n *    cart: ['saved'],\n *    saved: ['items'],\n *    items: []\n *  };\n *\n * would return:\n *\n *  const results = [\n *    'items',\n *    'saved',\n *    'cart'\n *  ];\n *\n * @ignore\n */\nexport function topologicalSort(graph: StateKeyGraph): string[] {\n  const sorted: string[] = [];\n  const visited: ObjectKeyMap<boolean> = {};\n\n  const visit = (name: string, ancestors: string[] = []) => {\n    if (!Array.isArray(ancestors)) {\n      ancestors = [];\n    }\n\n    ancestors.push(name);\n    visited[name] = true;\n\n    graph[name].forEach((dep: string) => {\n      if (ancestors.indexOf(dep) >= 0) {\n        throw new Error(`Circular dependency '${dep}' is required by '${name}': ${ancestors.join(' -> ')}`);\n      }\n\n      if (visited[dep]) {\n        return;\n      }\n\n      visit(dep, ancestors.slice(0));\n    });\n\n    if (sorted.indexOf(name) < 0) {\n      sorted.push(name);\n    }\n  };\n\n  Object.keys(graph).forEach(k => visit(k));\n\n  return sorted.reverse();\n}\n\n/**\n * Returns if the parameter is a object or not.\n *\n * @ignore\n */\nexport function isObject(obj) {\n  return (typeof obj === 'object' && obj !== null) || typeof obj === 'function';\n}\n",
    "import { InjectionToken } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nexport const ROOT_STATE_TOKEN = new InjectionToken<any>('ROOT_STATE_TOKEN');\nexport const FEATURE_STATE_TOKEN = new InjectionToken<any>('FEATURE_STATE_TOKEN');\nexport const META_KEY = 'NGXS_META';\n\nexport const NGXS_PLUGINS = new InjectionToken('NGXS_PLUGINS');\nexport type NgxsPluginConstructor = new (...args: any[]) => NgxsPlugin;\nexport type NgxsPluginFn = (state: any, mutation: any, next: NgxsNextPluginFn) => any;\n\n/**\n * The NGXS config settings.\n */\nexport class NgxsConfig {\n  /**\n   * Run in development mode. This will add additional debugging features:\n   * - Object.freeze on the state and actions to guarantee immutability\n   * (default: false)\n   */\n  developmentMode: boolean;\n}\n\n/**\n * State context provided to the actions in the state.\n */\nexport interface StateContext<T> {\n  /**\n   * Get the current state.\n   */\n  getState(): T;\n\n  /**\n   * Reset the state to a new value.\n   */\n  setState(val: T);\n\n  /**\n   * Patch the existing state with the provided value.\n   */\n  patchState(val: Partial<T>);\n\n  /**\n   * Dispatch a new action and return the dispatched observable.\n   */\n  dispatch(actions: any | any[]): Observable<void>;\n}\n\nexport type NgxsNextPluginFn = (state: any, mutation: any) => any;\n\n/**\n * Plugin interface\n */\nexport interface NgxsPlugin {\n  /**\n   * Handle the state/action before its submitted to the state handlers.\n   */\n  handle(state: any, action: any, next: NgxsNextPluginFn): any;\n}\n\n/**\n * Options that can be provided to the store.\n */\nexport interface StoreOptions<T> {\n  /**\n   * Name of the state. Required.\n   */\n  name: string;\n\n  /**\n   * Default values for the state. If not provided, uses empty object.\n   */\n  defaults?: T;\n\n  /**\n   * Sub states for the given state.\n   */\n  children?: any[];\n}\n\n/**\n * Actions that can be provided in a action decorator.\n */\nexport interface ActionOptions {\n  /**\n   * Cancel the previous uncompleted observable(s).\n   */\n  cancelUncompleted?: boolean;\n}\n\n/**\n * On init interface\n */\nexport interface NgxsOnInit {\n  ngxsOnInit(ctx?: StateContext<any>): void | any;\n}\n\nexport type NgxsLifeCycle = Partial<NgxsOnInit>;\n"
  ],
  "names": [
    "tslib_1.__spread",
    "tslib_1.__values",
    "tslib_1.__extends"
  ],
  "mappings": "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"
}
