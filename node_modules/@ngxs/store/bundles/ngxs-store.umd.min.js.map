{
  "version": 3,
  "file": "ngxs-store.umd.min.js",
  "sources": [
    "ng://@ngxs/store/packages/store/src/symbols.ts",
    "ng://@ngxs/store/packages/store/src/internals.ts",
    "ng://@ngxs/store/packages/store/src/utils.ts",
    "ng://@ngxs/store/packages/store/src/of-action.ts",
    "ng://@ngxs/store/packages/store/src/actions-stream.ts",
    "ng://@ngxs/store/packages/store/src/compose.ts",
    "ng://@ngxs/store/packages/store/src/state-stream.ts",
    "ng://@ngxs/store/packages/store/src/plugin-manager.ts",
    "ng://@ngxs/store/packages/store/src/zone.ts",
    "ng://@ngxs/store/packages/store/src/dispatcher.ts",
    "ng://@ngxs/store/packages/store/src/freeze.ts",
    "ng://@ngxs/store/packages/store/src/state-operations.ts",
    "ng://@ngxs/store/packages/store/src/state-context-factory.ts",
    "ng://@ngxs/store/packages/store/src/state-factory.ts",
    "ng://@ngxs/store/packages/store/src/selector-utils.ts",
    "ng://@ngxs/store/packages/store/src/store.ts",
    "ng://@ngxs/store/packages/store/src/select.ts",
    "ng://@ngxs/store/packages/store/src/actions.ts",
    "ng://@ngxs/store/packages/store/src/module.ts",
    "ng://@ngxs/store/packages/store/src/state.ts",
    "ng://@ngxs/store/packages/store/src/memoize.ts",
    "ng://@ngxs/store/packages/store/src/action.ts",
    "ng://@ngxs/store/packages/store/src/selector.ts"
  ],
  "sourcesContent": [
    "import { InjectionToken } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nexport const ROOT_STATE_TOKEN = new InjectionToken<any>('ROOT_STATE_TOKEN');\nexport const FEATURE_STATE_TOKEN = new InjectionToken<any>('FEATURE_STATE_TOKEN');\nexport const META_KEY = 'NGXS_META';\n\nexport const NGXS_PLUGINS = new InjectionToken('NGXS_PLUGINS');\nexport type NgxsPluginConstructor = new (...args: any[]) => NgxsPlugin;\nexport type NgxsPluginFn = (state: any, mutation: any, next: NgxsNextPluginFn) => any;\n\n/**\n * The NGXS config settings.\n */\nexport class NgxsConfig {\n  /**\n   * Run in development mode. This will add additional debugging features:\n   * - Object.freeze on the state and actions to guarantee immutability\n   * (default: false)\n   */\n  developmentMode: boolean;\n}\n\n/**\n * State context provided to the actions in the state.\n */\nexport interface StateContext<T> {\n  /**\n   * Get the current state.\n   */\n  getState(): T;\n\n  /**\n   * Reset the state to a new value.\n   */\n  setState(val: T);\n\n  /**\n   * Patch the existing state with the provided value.\n   */\n  patchState(val: Partial<T>);\n\n  /**\n   * Dispatch a new action and return the dispatched observable.\n   */\n  dispatch(actions: any | any[]): Observable<void>;\n}\n\nexport type NgxsNextPluginFn = (state: any, mutation: any) => any;\n\n/**\n * Plugin interface\n */\nexport interface NgxsPlugin {\n  /**\n   * Handle the state/action before its submitted to the state handlers.\n   */\n  handle(state: any, action: any, next: NgxsNextPluginFn): any;\n}\n\n/**\n * Options that can be provided to the store.\n */\nexport interface StoreOptions<T> {\n  /**\n   * Name of the state. Required.\n   */\n  name: string;\n\n  /**\n   * Default values for the state. If not provided, uses empty object.\n   */\n  defaults?: T;\n\n  /**\n   * Sub states for the given state.\n   */\n  children?: any[];\n}\n\n/**\n * Actions that can be provided in a action decorator.\n */\nexport interface ActionOptions {\n  /**\n   * Cancel the previous uncompleted observable(s).\n   */\n  cancelUncompleted?: boolean;\n}\n\n/**\n * On init interface\n */\nexport interface NgxsOnInit {\n  ngxsOnInit(ctx?: StateContext<any>): void | any;\n}\n\nexport type NgxsLifeCycle = Partial<NgxsOnInit>;\n",
    "import { META_KEY, ActionOptions } from './symbols';\nimport { Observable } from 'rxjs';\n\nexport interface ObjectKeyMap<T> {\n  [key: string]: T;\n}\n\nexport interface StateClass {\n  [META_KEY]?: MetaDataModel;\n}\n\nexport type StateKeyGraph = ObjectKeyMap<string[]>;\n\nexport interface ActionHandlerMetaData {\n  fn: string;\n  options: ActionOptions;\n  type: string;\n}\n\nexport interface StateOperations<T> {\n  getState(): T;\n  setState(val: T);\n  dispatch(actions: any | any[]): Observable<void>;\n}\n\nexport interface MetaDataModel {\n  name: string;\n  actions: ObjectKeyMap<ActionHandlerMetaData[]>;\n  defaults: any;\n  path: string;\n  children: StateClass[];\n  instance: any;\n}\n\nexport type SelectFromState = (state: any) => any;\n\nexport interface SelectorMetaDataModel {\n  selectFromAppState: SelectFromState;\n  originalFn: Function;\n  storeMetaData: MetaDataModel;\n}\n\nexport interface MappedStore {\n  name: string;\n  actions: ObjectKeyMap<ActionHandlerMetaData[]>;\n  defaults: any;\n  instance: any;\n  depth: string;\n}\n\n/**\n * Ensures metadata is attached to the class and returns it.\n *\n * @ignore\n */\nexport function ensureStoreMetadata(target): MetaDataModel {\n  if (!target.hasOwnProperty(META_KEY)) {\n    const defaultMetadata: MetaDataModel = {\n      name: null,\n      actions: {},\n      defaults: {},\n      path: null,\n      children: [],\n      instance: null\n    };\n\n    Object.defineProperty(target, META_KEY, { value: defaultMetadata });\n  }\n\n  return target[META_KEY];\n}\n\n/**\n * Ensures metadata is attached to the selector and returns it.\n *\n * @ignore\n */\nexport function ensureSelectorMetadata(target): SelectorMetaDataModel {\n  if (!target.hasOwnProperty(META_KEY)) {\n    const defaultMetadata: SelectorMetaDataModel = {\n      selectFromAppState: null,\n      originalFn: null,\n      storeMetaData: null\n    };\n\n    Object.defineProperty(target, META_KEY, { value: defaultMetadata });\n  }\n\n  return target[META_KEY];\n}\n\n/**\n * The generated function is faster than:\n * - pluck (Observable operator)\n * - memoize\n *\n * @ignore\n */\nexport function fastPropGetter(paths: string[]): (x: any) => any {\n  const segments = paths;\n  let seg = 'store.' + segments[0];\n  let i = 0;\n  const l = segments.length;\n\n  let expr = seg;\n  while (++i < l) {\n    expr = expr + ' && ' + (seg = seg + '.' + segments[i]);\n  }\n\n  const fn = new Function('store', 'return ' + expr + ';');\n\n  return <(x: any) => any>fn;\n}\n\n/**\n * Given an array of states, it will return a object graph. Example:\n *    const states = [\n *      Cart,\n *      CartSaved,\n *      CartSavedItems\n *    ]\n *\n * would return:\n *\n *  const graph = {\n *    cart: ['saved'],\n *    saved: ['items'],\n *    items: []\n *  };\n *\n * @ignore\n */\nexport function buildGraph(stateClasses: StateClass[]): StateKeyGraph {\n  const findName = (stateClass: StateClass) => {\n    const meta = stateClasses.find(g => g === stateClass);\n    if (!meta) {\n      throw new Error(`Child state not found: ${stateClass}`);\n    }\n\n    if (!meta[META_KEY]) {\n      throw new Error('States must be decorated with @State() decorator');\n    }\n\n    return meta[META_KEY].name;\n  };\n\n  return stateClasses.reduce<StateKeyGraph>((result: StateKeyGraph, stateClass: StateClass) => {\n    if (!stateClass[META_KEY]) {\n      throw new Error('States must be decorated with @State() decorator');\n    }\n\n    const { name, children } = stateClass[META_KEY];\n    result[name] = (children || []).map(findName);\n    return result;\n  }, {});\n}\n\n/**\n * Given a states array, returns object graph\n * returning the name and state metadata. Example:\n *\n *  const graph = {\n *    cart: { metadata }\n *  };\n *\n * @ignore\n */\nexport function nameToState(states: StateClass[]): ObjectKeyMap<StateClass> {\n  return states.reduce<ObjectKeyMap<StateClass>>((result: ObjectKeyMap<StateClass>, stateClass: StateClass) => {\n    if (!stateClass[META_KEY]) {\n      throw new Error('States must be decorated with @State() decorator');\n    }\n\n    const meta = stateClass[META_KEY];\n    result[meta.name] = stateClass;\n    return result;\n  }, {});\n}\n\n/**\n * Given a object relationship graph will return the full path\n * for the child items. Example:\n *\n *  const graph = {\n *    cart: ['saved'],\n *    saved: ['items'],\n *    items: []\n *  };\n *\n * would return:\n *\n *  const r = {\n *    cart: 'cart',\n *    saved: 'cart.saved',\n *    items: 'cart.saved.items'\n *  };\n *\n * @ignore\n */\nexport function findFullParentPath(obj: StateKeyGraph, newObj: ObjectKeyMap<string> = {}): ObjectKeyMap<string> {\n  const visit = (child: StateKeyGraph, keyToFind: string): string => {\n    for (const key in child) {\n      if (child.hasOwnProperty(key) && child[key].indexOf(keyToFind) >= 0) {\n        const parent = visit(child, key);\n        return parent !== null ? `${parent}.${key}` : key;\n      }\n    }\n    return null;\n  };\n\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      const parent = visit(obj, key);\n      newObj[key] = parent ? `${parent}.${key}` : key;\n    }\n  }\n\n  return newObj;\n}\n\n/**\n * Given a object graph, it will return the items topologically sorted Example:\n *\n *  const graph = {\n *    cart: ['saved'],\n *    saved: ['items'],\n *    items: []\n *  };\n *\n * would return:\n *\n *  const results = [\n *    'items',\n *    'saved',\n *    'cart'\n *  ];\n *\n * @ignore\n */\nexport function topologicalSort(graph: StateKeyGraph): string[] {\n  const sorted: string[] = [];\n  const visited: ObjectKeyMap<boolean> = {};\n\n  const visit = (name: string, ancestors: string[] = []) => {\n    if (!Array.isArray(ancestors)) {\n      ancestors = [];\n    }\n\n    ancestors.push(name);\n    visited[name] = true;\n\n    graph[name].forEach((dep: string) => {\n      if (ancestors.indexOf(dep) >= 0) {\n        throw new Error(`Circular dependency '${dep}' is required by '${name}': ${ancestors.join(' -> ')}`);\n      }\n\n      if (visited[dep]) {\n        return;\n      }\n\n      visit(dep, ancestors.slice(0));\n    });\n\n    if (sorted.indexOf(name) < 0) {\n      sorted.push(name);\n    }\n  };\n\n  Object.keys(graph).forEach(k => visit(k));\n\n  return sorted.reverse();\n}\n\n/**\n * Returns if the parameter is a object or not.\n *\n * @ignore\n */\nexport function isObject(obj) {\n  return (typeof obj === 'object' && obj !== null) || typeof obj === 'function';\n}\n",
    "/**\n * Returns the type from an action instance.\n * @ignore\n */\nexport function getActionTypeFromInstance(action: any): string {\n  if (action.constructor && action.constructor.type) {\n    return action.constructor.type;\n  }\n\n  return action.type;\n}\n\n/**\n * Matches a action\n * @ignore\n */\nexport function actionMatcher(action1: any) {\n  const type1 = getActionTypeFromInstance(action1);\n\n  return function(action2: any) {\n    return type1 === getActionTypeFromInstance(action2);\n  };\n}\n\n/**\n * Set a deeply nested value. Example:\n *\n *   setValue({ foo: { bar: { eat: false } } },\n *      'foo.bar.eat', true) //=> { foo: { bar: { eat: true } } }\n *\n * While it traverses it also creates new objects from top down.\n *\n * @ignore\n */\nexport const setValue = (obj: any, prop: string, val: any) => {\n  obj = { ...obj };\n\n  const split = prop.split('.');\n  const last = split[split.length - 1];\n\n  split.reduce((acc, part) => {\n    if (part === last) {\n      acc[part] = val;\n    } else {\n      acc[part] = { ...acc[part] };\n    }\n\n    return acc && acc[part];\n  }, obj);\n\n  return obj;\n};\n\n/**\n * Get a deeply nested value. Example:\n *\n *    getValue({ foo: bar: [] }, 'foo.bar') //=> []\n *\n * @ignore\n */\nexport const getValue = (obj: any, prop: string) =>\n  prop.split('.').reduce((acc: any, part: string) => acc && acc[part], obj);\n",
    "import { OperatorFunction, Observable } from 'rxjs';\nimport { map, filter } from 'rxjs/operators';\nimport { getActionTypeFromInstance } from './utils';\nimport { ActionContext, ActionStatus } from './actions-stream';\n\nexport function ofAction<T>(allowedType): OperatorFunction<any, T>;\nexport function ofAction<T>(...allowedTypes): OperatorFunction<any, T>;\n\n/**\n * RxJS operator for selecting out specific actions.\n *\n * This will grab actions that have just been dispatched as well as actions that have completed\n */\nexport function ofAction(...allowedTypes: any[]) {\n  return ofActionOperator(allowedTypes);\n}\n\n/**\n * RxJS operator for selecting out specific actions.\n *\n * This will ONLY grab actions that have just been dispatched\n */\nexport function ofActionDispatched(...allowedTypes: any[]) {\n  return ofActionOperator(allowedTypes, ActionStatus.Dispatched);\n}\n\n/**\n * RxJS operator for selecting out specific actions.\n *\n * This will ONLY grab actions that have just been successfully completed\n */\nexport function ofActionSuccessful(...allowedTypes: any[]) {\n  return ofActionOperator(allowedTypes, ActionStatus.Successful);\n}\n\n/**\n * RxJS operator for selecting out specific actions.\n *\n * This will ONLY grab actions that have just been canceled\n */\nexport function ofActionCanceled(...allowedTypes: any[]) {\n  return ofActionOperator(allowedTypes, ActionStatus.Canceled);\n}\n\n/**\n * RxJS operator for selecting out specific actions.\n *\n * This will ONLY grab actions that have just thrown an error\n */\nexport function ofActionErrored(...allowedTypes: any[]) {\n  return ofActionOperator(allowedTypes, ActionStatus.Errored);\n}\n\nfunction ofActionOperator(allowedTypes: any[], status?: ActionStatus) {\n  const allowedMap = createAllowedMap(allowedTypes);\n  return function(o: Observable<any>) {\n    return o.pipe(filterStatus(allowedMap, status), mapAction());\n  };\n}\n\nfunction filterStatus(allowedTypes: { [key: string]: boolean }, status?: ActionStatus) {\n  return filter((ctx: ActionContext) => {\n    const actionType = getActionTypeFromInstance(ctx.action);\n    const type = allowedTypes[actionType];\n    return status ? type && ctx.status === status : type;\n  });\n}\n\nfunction mapAction() {\n  return map((ctx: ActionContext) => ctx.action);\n}\n\nfunction createAllowedMap(types: any[]): { [key: string]: boolean } {\n  return types.reduce((acc: any, klass: any) => {\n    acc[getActionTypeFromInstance(klass)] = true;\n    return acc;\n  }, {});\n}\n",
    "import { Injectable } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\n\n/**\n * Status of a dispatched action\n */\nexport const enum ActionStatus {\n  Dispatched = 'DISPATCHED',\n  Successful = 'SUCCESSFUL',\n  Canceled = 'CANCELED',\n  Errored = 'ERRORED'\n}\n\nexport interface ActionContext {\n  status: ActionStatus;\n  action: any;\n  error?: Error;\n}\n\n/**\n * Custom Subject that ensures that subscribers are notified of values in the order that they arrived.\n * A standard Subject does not have this guarantee.\n * For example, given the following code:\n * ```typescript\n *   const subject = new Subject<string>();\n     subject.subscribe(value => {\n       if (value === 'start') subject.next('end');\n     });\n     subject.subscribe(value => { });\n     subject.next('start');\n * ```\n * When `subject` is a standard `Subject<T>` the second subscriber would recieve `end` and then `start`.\n * When `subject` is a `OrderedSubject<T>` the second subscriber would recieve `start` and then `end`.\n */\nexport class OrderedSubject<T> extends Subject<T> {\n  private _itemQueue: T[] = [];\n  private _busyPushingNext = false;\n\n  next(value?: T): void {\n    if (this._busyPushingNext) {\n      this._itemQueue.unshift(value);\n      return;\n    }\n    this._busyPushingNext = true;\n    super.next(value);\n    while (this._itemQueue.length > 0) {\n      const nextValue = this._itemQueue.pop();\n      super.next(nextValue);\n    }\n    this._busyPushingNext = false;\n  }\n}\n\n/**\n * Internal Action stream that is emitted anytime an action is dispatched.\n */\n@Injectable()\nexport class InternalActions extends OrderedSubject<ActionContext> {}\n\n/**\n * Action stream that is emitted anytime an action is dispatched.\n *\n * You can listen to this in services to react without stores.\n */\n@Injectable()\nexport class Actions extends Observable<any> {\n  constructor(actions$: InternalActions) {\n    super(observer => {\n      actions$.subscribe(res => observer.next(res), err => observer.error(err), () => observer.complete());\n    });\n  }\n}\n",
    "/**\n * Composes a array of functions from left to right. Example:\n *\n *      compose([fn, final])(state, action);\n *\n * then the funcs have a signature like:\n *\n *      function fn (state, action, next) {\n *          console.log('here', state, action, next);\n *          return next(state, action);\n *      }\n *\n *      function final (state, action) {\n *          console.log('here', state, action);\n *          return state;\n *      }\n *\n * the last function should not call `next`.\n *\n * @ignore\n */\nexport const compose = funcs => (...args) => {\n  const curr = funcs.shift();\n  return curr(...args, (...nextArgs) => compose(funcs)(...nextArgs));\n};\n",
    "import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\n/**\n * BehaviorSubject of the entire state.\n * @ignore\n */\n@Injectable()\nexport class StateStream extends BehaviorSubject<any> {\n  constructor() {\n    super({});\n  }\n}\n",
    "import { Injectable, Optional, SkipSelf, Inject } from '@angular/core';\nimport { NgxsPluginFn, NGXS_PLUGINS, NgxsPlugin } from './symbols';\n\n/**\n * Plugin manager class\n * @ignore\n */\n@Injectable()\nexport class PluginManager {\n  plugins: NgxsPluginFn[] = [];\n\n  constructor(\n    @Optional()\n    @SkipSelf()\n    private _parentManager: PluginManager,\n    @Inject(NGXS_PLUGINS)\n    @Optional()\n    private _plugins: NgxsPlugin[]\n  ) {\n    this.register();\n  }\n\n  private register() {\n    if (!this._plugins) {\n      return;\n    }\n\n    this.plugins = this._plugins.map(plugin => {\n      if (plugin.handle) {\n        return plugin.handle.bind(plugin);\n      } else {\n        return plugin;\n      }\n    });\n\n    if (this._parentManager) {\n      this._parentManager.plugins.push(...this.plugins);\n    }\n  }\n}\n",
    "import { Observable, Observer } from 'rxjs';\nimport { NgZone } from '@angular/core';\n\n/**\n * Operator to run the `subscribe` in a Angular zone.\n */\nexport function enterZone<T>(zone: NgZone) {\n  return (source: Observable<T>) => {\n    return new Observable((sink: Observer<T>) => {\n      return source.subscribe({\n        next(x) {\n          zone.run(() => sink.next(x));\n        },\n        error(e) {\n          zone.run(() => sink.error(e));\n        },\n        complete() {\n          zone.run(() => sink.complete());\n        }\n      });\n    });\n  };\n}\n",
    "import { Injectable, ErrorHandler, NgZone } from '@angular/core';\nimport { Observable, of, forkJoin, empty, Subject, throwError } from 'rxjs';\nimport { shareReplay, filter, exhaustMap, take } from 'rxjs/operators';\n\nimport { compose } from './compose';\nimport { InternalActions, ActionStatus, ActionContext } from './actions-stream';\nimport { StateStream } from './state-stream';\nimport { PluginManager } from './plugin-manager';\nimport { enterZone } from './zone';\n\n/**\n * Internal Action result stream that is emitted when an action is completed.\n * This is used as a method of returning the action result to the dispatcher\n * for the observable returned by the dispatch(...) call.\n * The dispatcher then asynchronously pushes the result from this stream onto the main action stream as a result.\n */\n@Injectable()\nexport class InternalDispatchedActionResults extends Subject<ActionContext> {}\n\n@Injectable()\nexport class InternalDispatcher {\n  constructor(\n    private _errorHandler: ErrorHandler,\n    private _actions: InternalActions,\n    private _actionResults: InternalDispatchedActionResults,\n    private _pluginManager: PluginManager,\n    private _stateStream: StateStream,\n    private _ngZone: NgZone\n  ) {}\n\n  /**\n   * Dispatches event(s).\n   */\n  dispatch(event: any | any[]): Observable<any> {\n    const result: Observable<any> = this._ngZone.runOutsideAngular(() => {\n      if (Array.isArray(event)) {\n        return forkJoin(event.map(a => this.dispatchSingle(a)));\n      } else {\n        return this.dispatchSingle(event);\n      }\n    });\n\n    result.subscribe({\n      error: error => this._ngZone.run(() => this._errorHandler.handleError(error))\n    });\n\n    return result.pipe(enterZone(this._ngZone));\n  }\n\n  private dispatchSingle(action: any): Observable<any> {\n    const prevState = this._stateStream.getValue();\n    const plugins = this._pluginManager.plugins;\n\n    return (compose([\n      ...plugins,\n      (nextState, nextAction) => {\n        if (nextState !== prevState) {\n          this._stateStream.next(nextState);\n        }\n        const actionResult$ = this.getActionResultStream(nextAction);\n        actionResult$.subscribe(ctx => this._actions.next(ctx));\n        this._actions.next({ action: nextAction, status: ActionStatus.Dispatched });\n        return this.createDispatchObservable(actionResult$);\n      }\n    ])(prevState, action) as Observable<any>).pipe(shareReplay());\n  }\n\n  private getActionResultStream(action: any): Observable<ActionContext> {\n    return this._actionResults.pipe(\n      filter((ctx: ActionContext) => ctx.action === action && ctx.status !== ActionStatus.Dispatched),\n      take(1),\n      shareReplay()\n    );\n  }\n\n  private createDispatchObservable(actionResult$: Observable<ActionContext>): Observable<any> {\n    return actionResult$\n      .pipe(\n        exhaustMap((ctx: ActionContext) => {\n          switch (ctx.status) {\n            case ActionStatus.Successful:\n              return of(this._stateStream.getValue());\n            case ActionStatus.Errored:\n              return throwError(ctx.error);\n            default:\n              return empty();\n          }\n        })\n      )\n      .pipe(shareReplay());\n  }\n}\n",
    "/**\n * Object freeze code\n * https://github.com/jsdf/deep-freeze\n */\nexport const deepFreeze = o => {\n  Object.freeze(o);\n\n  const oIsFunction = typeof o === 'function';\n  const hasOwnProp = Object.prototype.hasOwnProperty;\n\n  Object.getOwnPropertyNames(o).forEach(function(prop) {\n    if (\n      hasOwnProp.call(o, prop) &&\n      (oIsFunction ? prop !== 'caller' && prop !== 'callee' && prop !== 'arguments' : true) &&\n      o[prop] !== null &&\n      (typeof o[prop] === 'object' || typeof o[prop] === 'function') &&\n      !Object.isFrozen(o[prop])\n    ) {\n      deepFreeze(o[prop]);\n    }\n  });\n\n  return o;\n};\n",
    "import { Injectable } from '@angular/core';\n\nimport { StateOperations } from './internals';\nimport { InternalDispatcher } from './dispatcher';\nimport { StateStream } from './state-stream';\nimport { NgxsConfig } from './symbols';\nimport { deepFreeze } from './freeze';\n\n/**\n * State Context factory class\n * @ignore\n */\n@Injectable()\nexport class InternalStateOperations {\n  constructor(\n    private _stateStream: StateStream,\n    private _dispatcher: InternalDispatcher,\n    private _config: NgxsConfig\n  ) {}\n\n  /**\n   * Returns the root state operators.\n   */\n  getRootStateOperations(): StateOperations<any> {\n    const rootStateOperations = {\n      getState: () => this._stateStream.getValue(),\n      setState: newState => this._stateStream.next(newState),\n      dispatch: actions => this._dispatcher.dispatch(actions)\n    };\n\n    if (this._config.developmentMode) {\n      return this.ensureStateAndActionsAreImmutable(rootStateOperations);\n    }\n\n    return rootStateOperations;\n  }\n\n  private ensureStateAndActionsAreImmutable(root: StateOperations<any>): StateOperations<any> {\n    return {\n      getState: () => root.getState(),\n      setState: value => {\n        const frozenValue = deepFreeze(value);\n        return root.setState(frozenValue);\n      },\n      dispatch: actions => {\n        return root.dispatch(actions);\n      }\n    };\n  }\n}\n",
    "import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { StateContext } from './symbols';\nimport { MappedStore } from './internals';\nimport { setValue, getValue } from './utils';\nimport { InternalStateOperations } from './state-operations';\n\n/**\n * State Context factory class\n * @ignore\n */\n@Injectable()\nexport class StateContextFactory {\n  constructor(\n    private _internalStateOperations: InternalStateOperations\n  ) {}\n\n  /**\n   * Create the state context\n   */\n  createStateContext(metadata: MappedStore): StateContext<any> {\n    const root = this._internalStateOperations.getRootStateOperations();\n    return {\n      getState(): any {\n        const state = root.getState();\n        return getValue(state, metadata.depth);\n      },\n      patchState(val: any): any {\n        const isArray = Array.isArray(val);\n        const isPrimitive = typeof val !== 'object';\n\n        if (isArray) {\n          throw new Error('Patching arrays is not supported.');\n        } else if (isPrimitive) {\n          throw new Error('Patching primitives is not supported.');\n        }\n\n        const state = root.getState();\n        const local = getValue(state, metadata.depth);\n        const clone = { ...local };\n\n        for (const k in val) {\n          clone[k] = val[k];\n        }\n\n        const newState = setValue(state, metadata.depth, clone);\n        root.setState(newState);\n        return newState;\n      },\n      setState(val: any): any {\n        let state = root.getState();\n        state = setValue(state, metadata.depth, val);\n        root.setState(state);\n        return state;\n      },\n      dispatch(actions: any | any[]): Observable<any> {\n        return root.dispatch(actions);\n      }\n    };\n  }\n}\n",
    "import { Injector, Injectable, SkipSelf, Optional } from '@angular/core';\nimport { Observable, of, forkJoin, from, throwError } from 'rxjs';\nimport { shareReplay, takeUntil, map, catchError, filter, mergeMap, defaultIfEmpty } from 'rxjs/operators';\n\nimport { META_KEY, NgxsLifeCycle } from './symbols';\nimport {\n  topologicalSort,\n  buildGraph,\n  findFullParentPath,\n  nameToState,\n  isObject,\n  StateClass,\n  MappedStore\n} from './internals';\nimport { getActionTypeFromInstance, setValue } from './utils';\nimport { ofActionDispatched } from './of-action';\nimport { InternalActions, ActionStatus, ActionContext } from './actions-stream';\nimport { InternalDispatchedActionResults } from './dispatcher';\nimport { StateContextFactory } from './state-context-factory';\n\n/**\n * State factory class\n * @ignore\n */\n@Injectable()\nexport class StateFactory {\n  get states(): MappedStore[] {\n    return this._parentFactory ? this._parentFactory.states : this._states;\n  }\n\n  private _states: MappedStore[] = [];\n  private _connected = false;\n\n  constructor(\n    private _injector: Injector,\n    @Optional()\n    @SkipSelf()\n    private _parentFactory: StateFactory,\n    private _actions: InternalActions,\n    private _actionResults: InternalDispatchedActionResults,\n    private _stateContextFactory: StateContextFactory\n  ) {}\n\n  /**\n   * Add a new state to the global defs.\n   */\n  add(oneOrManyStateClasses: StateClass | StateClass[]): MappedStore[] {\n    let stateClasses: StateClass[];\n    if (!Array.isArray(oneOrManyStateClasses)) {\n      stateClasses = [oneOrManyStateClasses];\n    } else {\n      stateClasses = oneOrManyStateClasses;\n    }\n\n    const stateGraph = buildGraph(stateClasses);\n    const sortedStates = topologicalSort(stateGraph);\n    const depths = findFullParentPath(stateGraph);\n    const nameGraph = nameToState(stateClasses);\n    const mappedStores: MappedStore[] = [];\n\n    for (const name of sortedStates) {\n      const stateClass = nameGraph[name];\n\n      if (!stateClass[META_KEY]) {\n        throw new Error('States must be decorated with @State() decorator');\n      }\n\n      const depth = depths[name];\n      const { actions } = stateClass[META_KEY];\n      let { defaults } = stateClass[META_KEY];\n\n      stateClass[META_KEY].path = depth;\n\n      // ensure our store hasn't already been added\n      // but dont throw since it could be lazy\n      // loaded from different paths\n      const has = this.states.find(s => s.name === name);\n      if (!has) {\n        // create new instance of defaults\n        if (Array.isArray(defaults)) {\n          defaults = [...defaults];\n        } else if (isObject(defaults)) {\n          defaults = { ...defaults };\n        } else if (defaults === undefined) {\n          defaults = {};\n        }\n\n        const instance = this._injector.get(stateClass);\n\n        mappedStores.push({\n          actions,\n          instance,\n          defaults,\n          name,\n          depth\n        });\n      }\n    }\n\n    this.states.push(...mappedStores);\n\n    return mappedStores;\n  }\n\n  /**\n   * Add a set of states to the store and return the defaulsts\n   */\n  addAndReturnDefaults(stateClasses: any[]): { defaults: any; states: MappedStore[] } {\n    if (stateClasses) {\n      const states = this.add(stateClasses);\n      const defaults = states.reduce(\n        (result: any, meta: MappedStore) => setValue(result, meta.depth, meta.defaults),\n        {}\n      );\n      return { defaults, states };\n    }\n  }\n\n  /**\n   * Bind the actions to the handlers\n   */\n  connectActionHandlers() {\n    if (this._connected) return;\n    this._actions\n      .pipe(\n        filter((ctx: ActionContext) => ctx.status === ActionStatus.Dispatched),\n        mergeMap(({ action }) =>\n          this.invokeActions(this._actions, action).pipe(\n            map(() => <ActionContext>{ action, status: ActionStatus.Successful }),\n            defaultIfEmpty(<ActionContext>{ action, status: ActionStatus.Canceled }),\n            catchError(error => of(<ActionContext>{ action, status: ActionStatus.Errored, error }))\n          )\n        )\n      )\n      .subscribe(ctx => this._actionResults.next(ctx));\n    this._connected = true;\n  }\n\n  /**\n   * Invoke the init function on the states.\n   */\n  invokeInit(stateMetadatas: MappedStore[]) {\n    for (const metadata of stateMetadatas) {\n      const instance: NgxsLifeCycle = metadata.instance;\n\n      if (instance.ngxsOnInit) {\n        const stateContext = this.createStateContext(metadata);\n        instance.ngxsOnInit(stateContext);\n      }\n    }\n  }\n\n  /**\n   * Invoke actions on the states.\n   */\n  invokeActions(actions$: InternalActions, action) {\n    const results = [];\n\n    for (const metadata of this.states) {\n      const type = getActionTypeFromInstance(action);\n      const actionMetas = metadata.actions[type];\n\n      if (actionMetas) {\n        for (const actionMeta of actionMetas) {\n          const stateContext = this.createStateContext(metadata);\n          try {\n            let result = metadata.instance[actionMeta.fn](stateContext, action);\n\n            if (result instanceof Promise) {\n              result = from(result);\n            }\n\n            if (result instanceof Observable) {\n              result = result.pipe(\n                actionMeta.options.cancelUncompleted\n                  ? takeUntil(actions$.pipe(ofActionDispatched(action)))\n                  : map(r => r)\n              ); // map acts like a noop\n            } else {\n              result = of({}).pipe(shareReplay());\n            }\n\n            results.push(result);\n          } catch (e) {\n            results.push(throwError(e));\n          }\n        }\n      }\n    }\n\n    if (!results.length) {\n      results.push(of({}));\n    }\n\n    return forkJoin(results);\n  }\n\n  /**\n   * Create the state context\n   */\n  private createStateContext(metadata: MappedStore) {\n    return this._stateContextFactory.createStateContext(metadata);\n  }\n}\n",
    "import { META_KEY } from './symbols';\nimport { SelectFromState, SelectorMetaDataModel, fastPropGetter } from './internals';\n\n/**\n * This function gets the selector function to be used to get the selected slice from the app state\n * @ignore\n */\nexport function getSelectorFn(selector: any): SelectFromState {\n  const metadata = selector[META_KEY];\n  if (metadata) {\n    const selectFromAppState = (<SelectorMetaDataModel>metadata).selectFromAppState;\n    if (selectFromAppState) {\n      return selectFromAppState;\n    } else if (metadata.path) {\n      return fastPropGetter(metadata.path.split('.'));\n    }\n  }\n  return selector;\n}\n",
    "import { Injectable, NgZone } from '@angular/core';\nimport { Observable, of, Subscription } from 'rxjs';\nimport { catchError, distinctUntilChanged, map, take } from 'rxjs/operators';\n\nimport { getSelectorFn } from './selector-utils';\nimport { InternalStateOperations } from './state-operations';\nimport { StateStream } from './state-stream';\nimport { enterZone } from './zone';\n\n@Injectable()\nexport class Store {\n  constructor(\n    private _ngZone: NgZone,\n    private _stateStream: StateStream,\n    private _internalStateOperations: InternalStateOperations\n  ) {}\n\n  /**\n   * Dispatches event(s).\n   */\n  dispatch(event: any | any[]): Observable<any> {\n    return this._internalStateOperations.getRootStateOperations().dispatch(event);\n  }\n\n  /**\n   * Selects a slice of data from the store.\n   */\n  select<T>(selector: (state: any, ...states: any[]) => T): Observable<T>;\n  select(selector: string | any): Observable<any>;\n  select(selector: any): Observable<any> {\n    const selectorFn = getSelectorFn(selector);\n    return this._stateStream.pipe(\n      map(selectorFn),\n      catchError(err => {\n        // if error is TypeError we swallow it to prevent usual errors with property access\n        if (err instanceof TypeError) {\n          return of(undefined);\n        }\n\n        // rethrow other errors\n        throw err;\n      }),\n      distinctUntilChanged(),\n      enterZone(this._ngZone)\n    );\n  }\n\n  /**\n   * Select one slice of data from the store.\n   */\n  selectOnce<T>(selector: (state: any, ...states: any[]) => T): Observable<T>;\n  selectOnce(selector: string | any): Observable<any>;\n  selectOnce(selector: any): Observable<any> {\n    return this.select(selector).pipe(take(1));\n  }\n\n  /**\n   * Select a snapshot from the state.\n   */\n  selectSnapshot<T>(selector: (state: any, ...states: any[]) => T): T;\n  selectSnapshot(selector: string | any): any;\n  selectSnapshot(selector: any): any {\n    const selectorFn = getSelectorFn(selector);\n    return selectorFn(this._stateStream.getValue());\n  }\n\n  /**\n   * Allow the user to subscribe to the root of the state\n   */\n  subscribe(fn?: any): Subscription {\n    return this._stateStream.pipe(enterZone(this._ngZone)).subscribe(fn);\n  }\n\n  /**\n   * Return the raw value of the state.\n   */\n  snapshot(): any {\n    return this._internalStateOperations.getRootStateOperations().getState();\n  }\n\n  /**\n   * Reset the state to a specific point in time. This method is useful\n   * for plugin's who need to modify the state directly or unit testing.\n   */\n  reset(state: any) {\n    return this._internalStateOperations.getRootStateOperations().setState(state);\n  }\n}\n",
    "import { Injectable } from '@angular/core';\n\nimport { Store } from './store';\nimport { fastPropGetter } from './internals';\nimport { META_KEY } from './symbols';\n\n/**\n * Allows the select decorator to get access to the DI store.\n * @ignore\n */\n@Injectable()\nexport class SelectFactory {\n  static store: Store | undefined = undefined;\n  constructor(store: Store) {\n    SelectFactory.store = store;\n  }\n}\n\n/**\n * Decorator for selecting a slice of state from the store.\n */\nexport function Select(selectorOrFeature?, ...paths: string[]) {\n  return function(target: any, name: string) {\n    const selectorFnName = '__' + name + '__selector';\n\n    if (!selectorOrFeature) {\n      // if foo$ => make it just foo\n      selectorOrFeature = name.lastIndexOf('$') === name.length - 1 ? name.substring(0, name.length - 1) : name;\n    }\n\n    const createSelect = fn => {\n      const store = SelectFactory.store;\n\n      if (!store) {\n        throw new Error('SelectFactory not connected to store!');\n      }\n\n      return store.select(fn);\n    };\n\n    const createSelector = () => {\n      if (typeof selectorOrFeature === 'string') {\n        const propsArray = paths.length ? [selectorOrFeature, ...paths] : selectorOrFeature.split('.');\n\n        return fastPropGetter(propsArray);\n      } else if (selectorOrFeature[META_KEY] && selectorOrFeature[META_KEY].path) {\n        return fastPropGetter(selectorOrFeature[META_KEY].path.split('.'));\n      } else {\n        return selectorOrFeature;\n      }\n    };\n\n    if (target[selectorFnName]) {\n      throw new Error('You cannot use @Select decorator and a ' + selectorFnName + ' property.');\n    }\n\n    if (delete target[name]) {\n      Object.defineProperty(target, selectorFnName, {\n        writable: true,\n        enumerable: false,\n        configurable: true\n      });\n\n      Object.defineProperty(target, name, {\n        get: function() {\n          return this[selectorFnName] || (this[selectorFnName] = createSelect.apply(this, [createSelector()]));\n        },\n        enumerable: true,\n        configurable: true\n      });\n    }\n  };\n}\n",
    "/**\n * Init action\n */\nexport class InitState {\n  static readonly type = '@@INIT';\n}\n\n/**\n * Update action\n */\nexport class UpdateState {\n  static readonly type = '@@UPDATE_STATE';\n}\n",
    "import { NgModule, ModuleWithProviders, Optional, Inject, InjectionToken } from '@angular/core';\n\nimport { ROOT_STATE_TOKEN, FEATURE_STATE_TOKEN, NgxsConfig } from './symbols';\nimport { StateFactory } from './state-factory';\nimport { StateContextFactory } from './state-context-factory';\nimport { Actions, InternalActions } from './actions-stream';\nimport { InternalDispatcher, InternalDispatchedActionResults } from './dispatcher';\nimport { InternalStateOperations } from './state-operations';\nimport { Store } from './store';\nimport { SelectFactory } from './select';\nimport { StateStream } from './state-stream';\nimport { PluginManager } from './plugin-manager';\nimport { InitState, UpdateState } from './actions';\n\n/**\n * Root module\n * @ignore\n */\n@NgModule()\nexport class NgxsRootModule {\n  constructor(\n    factory: StateFactory,\n    internalStateOperations: InternalStateOperations,\n    store: Store,\n    select: SelectFactory,\n    @Optional()\n    @Inject(ROOT_STATE_TOKEN)\n    states: any[]\n  ) {\n    // add stores to the state graph and return their defaults\n    const results = factory.addAndReturnDefaults(states);\n\n    const stateOperations = internalStateOperations.getRootStateOperations();\n    if (results) {\n      // get our current stream\n      const cur = stateOperations.getState();\n\n      // set the state to the current + new\n      stateOperations.setState({ ...cur, ...results.defaults });\n    }\n\n    // connect our actions stream\n    factory.connectActionHandlers();\n\n    // dispatch the init action and invoke init function after\n    stateOperations.dispatch(new InitState()).subscribe(() => {\n      if (results) {\n        factory.invokeInit(results.states);\n      }\n    });\n  }\n}\n\n/**\n * Feature module\n * @ignore\n */\n@NgModule({})\nexport class NgxsFeatureModule {\n  constructor(\n    store: Store,\n    internalStateOperations: InternalStateOperations,\n    factory: StateFactory,\n    @Optional()\n    @Inject(FEATURE_STATE_TOKEN)\n    states: any[][]\n  ) {\n    // Since FEATURE_STATE_TOKEN is a multi token, we need to\n    // flatten it [[Feature1State, Feature2State], [Feature3State]]\n    const flattenedStates = ([] as any[]).concat(...states);\n\n    // add stores to the state graph and return their defaults\n    const results = factory.addAndReturnDefaults(flattenedStates);\n\n    const stateOperations = internalStateOperations.getRootStateOperations();\n    if (results) {\n      // get our current stream\n      const cur = stateOperations.getState();\n\n      // set the state to the current + new\n      stateOperations.setState({ ...cur, ...results.defaults });\n    }\n\n    stateOperations.dispatch(new UpdateState()).subscribe(() => {\n      if (results) {\n        factory.invokeInit(results.states);\n      }\n    });\n  }\n}\n\nexport type ModuleOptions = Partial<NgxsConfig>;\n\nexport function ngxsConfigFactory(options: ModuleOptions): NgxsConfig {\n  const config = Object.assign(new NgxsConfig(), options);\n  return config;\n}\n\nexport const ROOT_OPTIONS = new InjectionToken('ROOT_OPTIONS');\n\n/**\n * Ngxs Module\n */\n@NgModule({})\nexport class NgxsModule {\n  /**\n   * Root module factory\n   */\n  static forRoot(states: any[] = [], options: ModuleOptions = {}): ModuleWithProviders {\n    return {\n      ngModule: NgxsRootModule,\n      providers: [\n        StateFactory,\n        StateContextFactory,\n        Actions,\n        InternalActions,\n        InternalDispatcher,\n        InternalDispatchedActionResults,\n        InternalStateOperations,\n        Store,\n        StateStream,\n        SelectFactory,\n        PluginManager,\n        ...states,\n        {\n          provide: ROOT_STATE_TOKEN,\n          useValue: states\n        },\n        {\n          provide: ROOT_OPTIONS,\n          useValue: options\n        },\n        {\n          provide: NgxsConfig,\n          useFactory: ngxsConfigFactory,\n          deps: [ROOT_OPTIONS]\n        }\n      ]\n    };\n  }\n\n  /**\n   * Feature module factory\n   */\n  static forFeature(states: any[]): ModuleWithProviders {\n    return {\n      ngModule: NgxsFeatureModule,\n      providers: [\n        StateFactory,\n        PluginManager,\n        ...states,\n        {\n          provide: FEATURE_STATE_TOKEN,\n          multi: true,\n          useValue: states\n        }\n      ]\n    };\n  }\n}\n",
    "import { ensureStoreMetadata } from './internals';\nimport { StoreOptions, META_KEY } from './symbols';\n\nconst stateNameRegex = new RegExp('^[a-zA-Z0-9]+$');\n\n/**\n * Error message\n * @ignore\n */\nexport const stateNameErrorMessage = name =>\n  `${name} is not a valid state name. It needs to be a valid object property name.`;\n\n/**\n * Decorates a class with ngxs state information.\n */\nexport function State<T>(options: StoreOptions<T>) {\n  return function(target: any) {\n    const meta = ensureStoreMetadata(target);\n\n    // Handle inheritance\n    if (Object.getPrototypeOf(target).hasOwnProperty(META_KEY)) {\n      const parentMeta = Object.getPrototypeOf(target)[META_KEY];\n\n      meta.actions = {\n        ...meta.actions,\n        ...parentMeta.actions\n      };\n    }\n\n    meta.children = options.children;\n    meta.defaults = options.defaults;\n    meta.name = options.name;\n\n    if (!options.name) {\n      throw new Error(`States must register a 'name' property`);\n    }\n\n    if (!stateNameRegex.test(options.name)) {\n      throw new Error(stateNameErrorMessage(options.name));\n    }\n  };\n}\n",
    "function defaultEqualityCheck(a, b) {\n  return a === b;\n}\n\nfunction areArgumentsShallowlyEqual(equalityCheck, prev, next) {\n  if (prev === null || next === null || prev.length !== next.length) {\n    return false;\n  }\n\n  // Do this in a for loop (and not a `forEach` or an `every`) so we can determine equality as fast as possible.\n  const length = prev.length;\n  for (let i = 0; i < length; i++) {\n    if (!equalityCheck(prev[i], next[i])) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * Memoize a function on its last inputs only.\n * Oringinally from: https://github.com/reduxjs/reselect/blob/master/src/index.js\n *\n * @ignore\n */\nexport function memoize(func, equalityCheck = defaultEqualityCheck) {\n  let lastArgs = null;\n  let lastResult = null;\n  // we reference arguments instead of spreading them for performance reasons\n  return <(...args) => any>function memoized() {\n    if (!areArgumentsShallowlyEqual(equalityCheck, lastArgs, arguments)) {\n      // apply arguments instead of spreading for performance.\n      lastResult = func.apply(null, arguments);\n    }\n\n    lastArgs = arguments;\n    return lastResult;\n  };\n}\n",
    "import { ensureStoreMetadata } from './internals';\nimport { ActionOptions } from './symbols';\n\n/**\n * Decorates a method with a action information.\n */\nexport function Action(actions: any | any[], options?: ActionOptions) {\n  return function(target: any, name: string, descriptor: TypedPropertyDescriptor<any>) {\n    const meta = ensureStoreMetadata(target.constructor);\n\n    if (!Array.isArray(actions)) {\n      actions = [actions];\n    }\n\n    for (const action of actions) {\n      const type = action.type;\n\n      if (!action.type) {\n        throw new Error(`Action ${action.name} is missing a static \"type\" property`);\n      }\n\n      if (!meta.actions[type]) {\n        meta.actions[type] = [];\n      }\n\n      meta.actions[type].push({\n        fn: name,\n        options: options || {},\n        type\n      });\n    }\n  };\n}\n",
    "import { memoize } from './memoize';\nimport { getValue } from './utils';\nimport { ensureStoreMetadata, ensureSelectorMetadata } from './internals';\nimport { getSelectorFn } from './selector-utils';\n\n/**\n * Decorator for memoizing a state selector.\n */\nexport function Selector(selectors?: any[]) {\n  return (target: any, key: string, descriptor: PropertyDescriptor) => {\n    const metadata = ensureStoreMetadata(target);\n\n    if (descriptor.value !== null) {\n      const prev = descriptor.value;\n      const wrappedFn = function wrappedSelectorFn(...args) {\n        const returnValue = prev(...args);\n        if (returnValue instanceof Function) {\n          const innerMemoizedFn = memoize.apply(null, [returnValue]);\n          return innerMemoizedFn;\n        }\n        return returnValue;\n      };\n      const memoizedFn = memoize(wrappedFn);\n\n      const fn = state => {\n        const results = [];\n\n        // If we are on a state class, get the metadata path\n        if (metadata && metadata.path) {\n          results.push(getValue(state, metadata.path));\n        }\n\n        // Allow additional selectors if passed\n        if (selectors) {\n          results.push(...selectors.map(a => getSelectorFn(a)(state)));\n        }\n\n        // if the lambda tries to access a something on the\n        // state that doesn't exist, it will throw a TypeError.\n        // since this is quite usual behaviour, we simply return undefined if so.\n        try {\n          return memoizedFn(...results);\n        } catch (ex) {\n          if (ex instanceof TypeError) {\n            return undefined;\n          }\n          throw ex;\n        }\n      };\n\n      const selectorMetaData = ensureSelectorMetadata(memoizedFn);\n      selectorMetaData.originalFn = prev;\n      selectorMetaData.storeMetaData = metadata;\n      selectorMetaData.selectFromAppState = fn;\n\n      return {\n        configurable: true,\n        get() {\n          return memoizedFn;\n        }\n      };\n    } else {\n      throw new Error('Selectors only work on methods');\n    }\n  };\n}\n"
  ],
  "names": [
    "ROOT_STATE_TOKEN",
    "InjectionToken",
    "FEATURE_STATE_TOKEN",
    "META_KEY",
    "NGXS_PLUGINS",
    "NgxsConfig",
    "ensureStoreMetadata",
    "target",
    "hasOwnProperty",
    "Object",
    "defineProperty",
    "value",
    "name",
    "actions",
    "defaults",
    "path",
    "children",
    "instance",
    "fastPropGetter",
    "paths",
    "segments",
    "seg",
    "i",
    "l",
    "length",
    "expr",
    "Function",
    "getActionTypeFromInstance",
    "action",
    "constructor",
    "type",
    "setValue",
    "obj",
    "prop",
    "val",
    "assign",
    "split",
    "last",
    "reduce",
    "acc",
    "part",
    "getValue",
    "ofActionOperator",
    "allowedTypes",
    "status",
    "allowedMap",
    "OrderedSubject",
    "_this",
    "_super",
    "apply",
    "this",
    "tslib_1.__spread",
    "arguments",
    "_busyPushingNext",
    "prototype",
    "next",
    "_itemQueue",
    "unshift",
    "call",
    "nextValue",
    "pop",
    "Subject",
    "InternalActions",
    "decorators",
    "Injectable",
    "tslib_1.__extends",
    "Actions",
    "compose",
    "funcs",
    "args",
    "_i",
    "StateStream",
    "PluginManager",
    "_parentManager",
    "_plugins",
    "plugins",
    "register",
    "map",
    "plugin",
    "handle",
    "bind",
    "_a",
    "push",
    "enterZone",
    "zone",
    "source",
    "Observable",
    "sink",
    "subscribe",
    "x",
    "run",
    "error",
    "e",
    "complete",
    "InternalDispatchedActionResults",
    "InternalDispatcher",
    "_errorHandler",
    "_actions",
    "_actionResults",
    "_pluginManager",
    "_stateStream",
    "_ngZone",
    "dispatch",
    "event",
    "result",
    "runOutsideAngular",
    "Array",
    "isArray",
    "forkJoin",
    "a",
    "dispatchSingle",
    "handleError",
    "pipe",
    "prevState",
    "nextState",
    "nextAction",
    "actionResult$",
    "getActionResultStream",
    "ctx",
    "createDispatchObservable",
    "shareReplay",
    "filter",
    "take",
    "exhaustMap",
    "throwError",
    "deepFreeze",
    "o",
    "freeze",
    "oIsFunction",
    "hasOwnProp",
    "getOwnPropertyNames",
    "forEach",
    "isFrozen",
    "InternalStateOperations",
    "_dispatcher",
    "_config",
    "getRootStateOperations",
    "rootStateOperations",
    "getState",
    "setState",
    "newState",
    "developmentMode",
    "ensureStateAndActionsAreImmutable",
    "root",
    "frozenValue",
    "ctorParameters",
    "StateContextFactory",
    "_internalStateOperations",
    "createStateContext",
    "metadata",
    "state",
    "depth",
    "patchState",
    "isPrimitive",
    "Error",
    "local",
    "clone",
    "k",
    "StateFactory",
    "_injector",
    "_parentFactory",
    "_stateContextFactory",
    "_states",
    "_connected",
    "get",
    "configurable",
    "add",
    "oneOrManyStateClasses",
    "stateClasses",
    "findName",
    "graph",
    "sorted",
    "visited",
    "visit",
    "e_1",
    "_b",
    "stateGraph",
    "stateClass",
    "meta",
    "find",
    "g",
    "sortedStates",
    "ancestors",
    "dep",
    "indexOf",
    "join",
    "slice",
    "keys",
    "depths",
    "newObj",
    "child",
    "keyToFind",
    "key",
    "parent_1",
    "parent_2",
    "findFullParentPath",
    "nameGraph",
    "mappedStores",
    "_loop_1",
    "name_1",
    "this_1",
    "states",
    "s",
    "undefined",
    "sortedStates_1",
    "tslib_1.__values",
    "sortedStates_1_1",
    "done",
    "e_1_1",
    "mergeMap",
    "invokeActions",
    "defaultIfEmpty",
    "catchError",
    "of",
    "invokeInit",
    "stateMetadatas",
    "stateMetadatas_1",
    "stateMetadatas_1_1",
    "ngxsOnInit",
    "stateContext",
    "e_2_1",
    "e_2",
    "return",
    "actionMetas",
    "actionMeta",
    "fn",
    "Promise",
    "from",
    "getSelectorFn",
    "selector",
    "selectFromAppState",
    "Store",
    "select",
    "selectorFn",
    "err",
    "TypeError",
    "distinctUntilChanged",
    "selectOnce",
    "selectSnapshot",
    "snapshot",
    "reset",
    "NgZone",
    "SelectFactory",
    "store",
    "InitState",
    "NgxsRootModule",
    "results",
    "factory",
    "addAndReturnDefaults",
    "stateOperations",
    "internalStateOperations",
    "cur",
    "flattenedStates",
    "concat",
    "UpdateState",
    "NgModule",
    "Optional",
    "Inject",
    "NgxsModule",
    "forRoot",
    "options",
    "ngModule",
    "providers",
    "provide",
    "useValue",
    "ROOT_OPTIONS",
    "useFactory",
    "ngxsConfigFactory",
    "deps",
    "forFeature",
    "NgxsFeatureModule",
    "stateNameRegex",
    "RegExp",
    "stateNameErrorMessage",
    "defaultEqualityCheck",
    "b",
    "memoize",
    "func",
    "equalityCheck",
    "lastArgs",
    "prev",
    "lastResult",
    "descriptor",
    "actions_1",
    "actions_1_1",
    "getPrototypeOf",
    "parentMeta",
    "test",
    "selectorOrFeature",
    "selectorFnName",
    "lastIndexOf",
    "substring",
    "writable",
    "enumerable",
    "selectors",
    "prev_1",
    "memoizedFn_1",
    "returnValue",
    "selectorMetaData",
    "originalFn",
    "storeMetaData",
    "ex",
    "action1",
    "type1",
    "action2"
  ],
  "mappings": "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"
}
