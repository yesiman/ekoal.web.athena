{
  "_args": [
    [
      {
        "raw": "mini-css-extract-plugin@~0.4.0",
        "scope": null,
        "escapedName": "mini-css-extract-plugin",
        "name": "mini-css-extract-plugin",
        "rawSpec": "~0.4.0",
        "spec": ">=0.4.0 <0.5.0",
        "type": "range"
      },
      "/Users/yesi/_dev/__current/ekoal.web.athena/node_modules/@angular-devkit/build-angular"
    ]
  ],
  "_from": "mini-css-extract-plugin@>=0.4.0 <0.5.0",
  "_id": "mini-css-extract-plugin@0.4.1",
  "_inCache": true,
  "_location": "/mini-css-extract-plugin",
  "_nodeVersion": "8.11.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/mini-css-extract-plugin_0.4.1_1530280097058_0.16789616761501347"
  },
  "_npmUser": {
    "name": "evilebottnawi",
    "email": "sheo13666q@gmail.com"
  },
  "_npmVersion": "6.1.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "mini-css-extract-plugin@~0.4.0",
    "scope": null,
    "escapedName": "mini-css-extract-plugin",
    "name": "mini-css-extract-plugin",
    "rawSpec": "~0.4.0",
    "spec": ">=0.4.0 <0.5.0",
    "type": "range"
  },
  "_requiredBy": [
    "/@angular-devkit/build-angular"
  ],
  "_resolved": "https://registry.npmjs.org/mini-css-extract-plugin/-/mini-css-extract-plugin-0.4.1.tgz",
  "_shasum": "d2bcf77bb2596b8e4bd9257e43d3f9164c2e86cb",
  "_shrinkwrap": null,
  "_spec": "mini-css-extract-plugin@~0.4.0",
  "_where": "/Users/yesi/_dev/__current/ekoal.web.athena/node_modules/@angular-devkit/build-angular",
  "author": {
    "name": "Tobias Koppers @sokra"
  },
  "bin": "",
  "bugs": {
    "url": "https://github.com/webpack-contrib/mini-css-extract-plugin/issues"
  },
  "dependencies": {
    "@webpack-contrib/schema-utils": "^1.0.0-beta.0",
    "loader-utils": "^1.1.0",
    "webpack-sources": "^1.1.0"
  },
  "description": "desc",
  "devDependencies": {
    "@commitlint/cli": "^6.1.3",
    "@commitlint/config-conventional": "^6.1.3",
    "@webpack-contrib/eslint-config-webpack": "^2.0.4",
    "babel-cli": "^6.26.0",
    "babel-jest": "^22.2.2",
    "babel-plugin-transform-object-rest-spread": "^6.26.0",
    "babel-polyfill": "^6.26.0",
    "babel-preset-env": "^1.6.1",
    "conventional-github-releaser": "^2.0.2",
    "cross-env": "^5.1.3",
    "css-loader": "^0.28.10",
    "del": "^3.0.0",
    "del-cli": "^1.1.0",
    "eslint": "^4.17.0",
    "eslint-plugin-import": "^2.8.0",
    "eslint-plugin-prettier": "^2.6.0",
    "file-loader": "^1.1.11",
    "husky": "^0.14.3",
    "jest": "^22.2.2",
    "lint-staged": "^6.1.0",
    "memory-fs": "^0.4.1",
    "nsp": "^3.1.0",
    "pre-commit": "^1.2.2",
    "prettier": "^1.11.1",
    "standard-version": "^4.3.0",
    "webpack": "^4.14.0",
    "webpack-cli": "^2.0.13",
    "webpack-defaults": "^2.3.0",
    "webpack-dev-server": "^3.1.1"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-XWuB3G61Rtasq/gLe7cp5cuozehE6hN+E4sxCamRR/WDiHTg+f7ZIAS024r8UJQffY+e2gGELXQZgQoFDfNDCg==",
    "shasum": "d2bcf77bb2596b8e4bd9257e43d3f9164c2e86cb",
    "tarball": "https://registry.npmjs.org/mini-css-extract-plugin/-/mini-css-extract-plugin-0.4.1.tgz",
    "fileCount": 7,
    "unpackedSize": 31921,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbNjihCRA9TVsSAnZWagAAZEwQAIthWsZm5OiAZ9xnyYQa\nJkKc1Ww5U7nN+5uuQ+Df5DuwEX5NqzmxD/QCXKAre0u/eDT+XW5W+woSgYWx\nrPEzqjIp/ae9Yd/Uv7IZ85qhHmD2UWnAzP1VtcAsmeHF7FvD5ZiS8e+15876\nIWp3KQq9gscXa1R8c/umUjk2a9NlVaZITTl6+xdYR/VN1+DvCBLjmodfTd8W\n8hps69mfcW5+FjXfWIiqVNFehlQBrgMY9IppcYQnCkHYLBMPzOhsL8CCukjh\nYN0MkEIpzk3XboJhviMG9MJJYYm/NuBnkgnEpaVs//XAVIwVMWE85FHpc4hi\nNCgOta89GQ2tazVPuTdPnQhtYAf36gZXl28YuEExghaoFYXHC/o68uttK5bU\nSJfzA8yf1LzLPFgWLlt0btMMI53rsgIhaN0dmgQQfx1ejtE+S3qSmvCwJF/q\nay33OOGg486dK4lEd+YIfUUzTLOUAYuxO0WdZf6I/q1MU2wM57Bb+YwzeT9i\ny1vHwGiOxIr9VkCBVWZ1WvS1+E2ZHvu8r7k4HO9gi9f5f3/Dhjab1B6AttaW\n749eOS4Fs3bf8/uEMF4alCQ7lvMtzdBT+G8uMvK0pErHLSa4v7nanlcxJ/+g\nrhdnni1TnUa8o1V9qhQ9K2/SkBYgTaJ31gS7blqgmPLt2rgpOYtL307GfzDH\nRADw\r\n=Grz3\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "engines": {
    "node": ">= 6.9.0 <7.0.0 || >= 8.9.0"
  },
  "files": [
    "dist"
  ],
  "gitHead": "4afcfe2a16216d4b5e693d2fc87e177f3c8af1e2",
  "homepage": "https://github.com/webpack-contrib/mini-css-extract-plugin",
  "keywords": [
    "webpack"
  ],
  "license": "MIT",
  "lint-staged": {
    "*.js": [
      "eslint --fix",
      "git add"
    ]
  },
  "main": "dist/cjs.js",
  "maintainers": [
    {
      "name": "bebraw",
      "email": "bebraw@gmail.com"
    },
    {
      "name": "d3viant0ne",
      "email": "wiens.joshua@gmail.com"
    },
    {
      "name": "evilebottnawi",
      "email": "sheo13666q@gmail.com"
    },
    {
      "name": "jhnns",
      "email": "mail@johannesewald.de"
    },
    {
      "name": "jtangelder",
      "email": "j.tangelder@gmail.com"
    },
    {
      "name": "michael-ciniawsky",
      "email": "michael.ciniawsky@gmail.com"
    },
    {
      "name": "shellscape",
      "email": "andrew@shellscape.org"
    },
    {
      "name": "sokra",
      "email": "tobias.koppers@googlemail.com"
    },
    {
      "name": "thelarkinn",
      "email": "sean.larkin@cuw.edu"
    }
  ],
  "name": "mini-css-extract-plugin",
  "optionalDependencies": {},
  "peerDependencies": {
    "webpack": "^4.4.0"
  },
  "pre-commit": "lint-staged",
  "readme": "<div align=\"center\">\n  <!-- replace with accurate logo e.g from https://worldvectorlogo.com/ -->\n  <img width=\"200\" height=\"200\" src=\"https://cdn.worldvectorlogo.com/logos/javascript.svg\">\n  <a href=\"https://webpack.js.org/\">\n    <img width=\"200\" height=\"200\" vspace=\"\" hspace=\"25\" src=\"https://cdn.rawgit.com/webpack/media/e7485eb2/logo/icon-square-big.svg\">\n  </a>\n  <h1>mini-css-extract-plugin</h1>\n</div>\n\n[![npm][npm]][npm-url]\n[![deps][deps]][deps-url]\n[![tests][tests]][tests-url]\n[![coverage][cover]][cover-url]\n[![chat][chat]][chat-url]\n\nThis plugin extracts CSS into separate files. It creates a CSS file per JS file which contains CSS. It supports On-Demand-Loading of CSS and SourceMaps.\n\nIt builds on top of a new webpack v4 feature (module types) and requires webpack 4 to work.\n\nCompared to the extract-text-webpack-plugin:\n\n* Async loading\n* No duplicate compilation (performance)\n* Easier to use\n* Specific to CSS\n\nTODO:\n\n* HMR support\n\n<h2 align=\"center\">Install</h2>\n\n```bash\nnpm install --save-dev mini-css-extract-plugin\n```\n\n<h2 align=\"center\">Usage</h2>\n\n### Configuration\n\n#### Minimal example\n\n**webpack.config.js**\n\n```js\nconst MiniCssExtractPlugin = require(\"mini-css-extract-plugin\");\nmodule.exports = {\n  plugins: [\n    new MiniCssExtractPlugin({\n      // Options similar to the same options in webpackOptions.output\n      // both options are optional\n      filename: \"[name].css\",\n      chunkFilename: \"[id].css\"\n    })\n  ],\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        use: [\n          {\n            loader: MiniCssExtractPlugin.loader,\n            options: {\n              // you can specify a publicPath here\n              // by default it use publicPath in webpackOptions.output\n              publicPath: '../'\n            }\n          },\n          \"css-loader\"\n        ]\n      }\n    ]\n  }\n}\n```\n\n#### Advanced configuration example\n\nThis plugin should be used only on `production` builds without `style-loader` in the loaders chain, especially if you want to have HMR in `development`.\n\nHere is an example to have both HMR in `development` and your styles extracted in a file for `production` builds.\n\n(Loaders options left out for clarity, adapt accordingly to your needs.)\n\n\n**webpack.config.js**\n\n```js\nconst MiniCssExtractPlugin = require(\"mini-css-extract-plugin\");\nconst devMode = process.env.NODE_ENV !== 'production'\n\nmodule.exports = {\n  plugins: [\n    new MiniCssExtractPlugin({\n      // Options similar to the same options in webpackOptions.output\n      // both options are optional\n      filename: devMode ? '[name].css' : '[name].[hash].css',\n      chunkFilename: devMode ? '[id].css' : '[id].[hash].css',\n    })\n  ],\n  module: {\n    rules: [\n      {\n        test: /\\.(sa|sc|c)ss$/,\n        use: [\n          devMode ? 'style-loader' : MiniCssExtractPlugin.loader,\n          'css-loader',\n          'postcss-loader',\n          'sass-loader',\n        ],\n      }\n    ]\n  }\n}\n```\n\n### Minimizing For Production\n\nWhile webpack 5 is likely to come with a CSS minimizer built-in, with webpack 4 you need to bring your own. To minify the output, use a plugin like [optimize-css-assets-webpack-plugin](https://github.com/NMFR/optimize-css-assets-webpack-plugin). Setting `optimization.minimizer` overrides the defaults provided by webpack, so make sure to also specify a JS minimizer:\n\n**webpack.config.js**\n\n```js\nconst UglifyJsPlugin = require(\"uglifyjs-webpack-plugin\");\nconst MiniCssExtractPlugin = require(\"mini-css-extract-plugin\");\nconst OptimizeCSSAssetsPlugin = require(\"optimize-css-assets-webpack-plugin\");\nmodule.exports = {\n  optimization: {\n    minimizer: [\n      new UglifyJsPlugin({\n        cache: true,\n        parallel: true,\n        sourceMap: true // set to true if you want JS source maps\n      }),\n      new OptimizeCSSAssetsPlugin({})\n    ]\n  },\n  plugins: [\n    new MiniCssExtractPlugin({\n      filename: \"[name].css\",\n      chunkFilename: \"[id].css\"\n    })\n  ],\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        use: [\n          MiniCssExtractPlugin.loader,\n          \"css-loader\"\n        ]\n      }\n    ]\n  }\n}\n```\n\n### Features\n\n#### Using preloaded or inlined CSS\n\nThe runtime code detects already added CSS via `<link>` or `<style>` tag.\nThis can be useful when injecting CSS on server-side for Server-Side-Rendering.\nThe `href` of the `<link>` tag has to match the URL that will be used for loading the CSS chunk.\nThe `data-href` attribute can be used for `<link>` and `<style>` too.\nWhen inlining CSS `data-href` must be used.\n\n#### Extracting all CSS in a single file\n\nSimilar to what [extract-text-webpack-plugin](https://github.com/webpack-contrib/extract-text-webpack-plugin) does, the CSS\ncan be extracted in one CSS file using `optimization.splitChunks.cacheGroups`.\n\n**webpack.config.js**\n\n```js\nconst MiniCssExtractPlugin = require(\"mini-css-extract-plugin\");\nmodule.exports = {\n  optimization: {\n    splitChunks: {\n      cacheGroups: {\n        styles: {\n          name: 'styles',\n          test: /\\.css$/,\n          chunks: 'all',\n          enforce: true\n        }\n      }\n    }\n  },\n  plugins: [\n    new MiniCssExtractPlugin({\n      filename: \"[name].css\",\n    })\n  ],\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        use: [\n          MiniCssExtractPlugin.loader,\n          \"css-loader\"\n        ]\n      }\n    ]\n  }\n}\n```\n\n#### Extracting CSS based on entry\n\nYou may also extract the CSS based on the webpack entry name. This is especially useful if you import routes dynamically\nbut want to keep your CSS bundled according to entry. This also prevents the CSS duplication issue one had with the\nExtractTextPlugin.\n\n```javascript\nconst path = require('path');\nconst MiniCssExtractPlugin = require(\"mini-css-extract-plugin\");\n\nfunction recursiveIssuer(m) {\n  if (m.issuer) {\n    return recursiveIssuer(m.issuer);\n  } else if (m.name) {\n    return m.name;\n  } else {\n    return false;\n  }\n}\n\nmodule.exports = {\n  entry: {\n    foo: path.resolve(__dirname, 'src/foo'),\n    bar: path.resolve(__dirname, 'src/bar')\n  },\n  optimization: {\n    splitChunks: {\n      cacheGroups: {\n        fooStyles: {\n          name: 'foo',\n          test: (m,c,entry = 'foo') => m.constructor.name === 'CssModule' && recursiveIssuer(m) === entry,\n          chunks: 'all',\n          enforce: true\n        },\n        barStyles: {\n          name: 'bar',\n          test: (m,c,entry = 'bar') => m.constructor.name === 'CssModule' && recursiveIssuer(m) === entry,\n          chunks: 'all',\n          enforce: true\n        }\n      }\n    }\n  },\n  plugins: [\n    new MiniCssExtractPlugin({\n      filename: \"[name].css\",\n    })\n  ],\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        use: [\n          MiniCssExtractPlugin.loader,\n          \"css-loader\"\n        ]\n      }\n    ]\n  }\n}\n```\n\n<h2 align=\"center\">Maintainers</h2>\n\n<table>\n  <tbody>\n    <tr>\n      <td align=\"center\">\n        <a href=\"https://github.com/sokra\">\n          <img width=\"150\" height=\"150\" src=\"https://github.com/sokra.png?size=150\">\n          </br>\n          Tobias Koppers\n        </a>\n      </td>\n    </tr>\n  <tbody>\n</table>\n\n#### Long Term Caching\n\nFor long term caching use `filename: \"[contenthash].css\"`. Optionally add `[name]`.\n\n\n## License\n\n#### [MIT](./LICENSE)\n\n[npm]: https://img.shields.io/npm/v/webpack-contrib/mini-css-extract-plugin.svg\n[npm-url]: https://npmjs.com/package/mini-css-extract-plugin\n\n[node]: https://img.shields.io/node/v/webpack-contrib/mini-css-extract-plugin.svg\n[node-url]: https://nodejs.org\n\n[deps]: https://david-dm.org/webpack-contrib/mini-css-extract-plugin.svg\n[deps-url]: https://david-dm.org/webpack-contrib/mini-css-extract-plugin\n\n[tests]: \thttps://img.shields.io/circleci/project/github/webpack-contrib/mini-css-extract-plugin.svg\n[tests-url]: https://circleci.com/gh/webpack-contrib/mini-css-extract-plugin\n\n[cover]: https://codecov.io/gh/webpack-contrib/mini-css-extract-plugin/branch/master/graph/badge.svg\n[cover-url]: https://codecov.io/gh/webpack-contrib/mini-css-extract-plugin\n\n[chat]: https://img.shields.io/badge/gitter-webpack%2Fwebpack-brightgreen.svg\n[chat-url]: https://gitter.im/webpack/webpack\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/webpack-contrib/mini-css-extract-plugin.git"
  },
  "scripts": {
    "build": "cross-env NODE_ENV=production babel src -d dist --ignore 'src/**/*.test.js' --copy-files",
    "ci:coverage": "npm run test:coverage -- --runInBand",
    "ci:lint": "npm run lint && npm run security",
    "ci:lint:commits": "commitlint --from=${CIRCLE_BRANCH} --to=${CIRCLE_SHA1}",
    "ci:test": "npm run test -- --runInBand",
    "clean": "del-cli dist",
    "commitlint": "commitlint",
    "commitmsg": "commitlint -e $GIT_PARAMS",
    "defaults": "webpack-defaults",
    "lint": "eslint --cache src test",
    "lint-staged": "lint-staged",
    "prebuild": "npm run clean",
    "prepublish": "npm run build",
    "release": "standard-version",
    "release:ci": "conventional-github-releaser -p angular",
    "release:validate": "commitlint --from=$(git describe --tags --abbrev=0) --to=$(git rev-parse HEAD)",
    "security": "nsp check",
    "start": "npm run build -- -w",
    "test": "jest",
    "test:coverage": "jest --collectCoverageFrom='src/**/*.js' --coverage",
    "test:manual": "webpack-dev-server test/manual/src/index.js --open --config test/manual/webpack.config.js",
    "test:watch": "jest --watch"
  },
  "version": "0.4.1",
  "warnings": [
    {
      "code": "ENOTSUP",
      "required": {
        "node": ">= 6.9.0 <7.0.0 || >= 8.9.0"
      },
      "pkgid": "mini-css-extract-plugin@0.4.1"
    }
  ]
}
