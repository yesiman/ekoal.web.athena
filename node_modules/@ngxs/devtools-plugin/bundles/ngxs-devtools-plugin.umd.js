(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@ngxs/store'), require('rxjs/operators')) :
    typeof define === 'function' && define.amd ? define('@ngxs/devtools-plugin', ['exports', '@angular/core', '@ngxs/store', 'rxjs/operators'], factory) :
    (factory((global.ngxs = global.ngxs || {}, global.ngxs['devtools-plugin'] = {}),global.ng.core,global['ngxs-store'],global.Rx.Observable.prototype));
}(this, (function (exports,core,store,operators) { 'use strict';

    var NGXS_DEVTOOLS_OPTIONS = new core.InjectionToken('NGXS_DEVTOOLS_OPTIONS');
    /**
     * Adds support for the Redux Devtools extension:
     * http://extension.remotedev.io/
     */
    var NgxsReduxDevtoolsPlugin = (function () {
        function NgxsReduxDevtoolsPlugin(_options, _injector) {
            var _this = this;
            this._options = _options;
            this._injector = _injector;
            this.devtoolsExtension = null;
            this.windowObj = typeof window !== 'undefined' ? window : {};
            var globalDevtools = this.windowObj['__REDUX_DEVTOOLS_EXTENSION__'] || this.windowObj['devToolsExtension'];
            if (globalDevtools) {
                this.devtoolsExtension = globalDevtools.connect(_options);
                this.devtoolsExtension.subscribe(function (a) { return _this.dispatched(a); });
            }
        }
        /**
           * Middleware handle function
           */
        NgxsReduxDevtoolsPlugin.prototype.handle = function (state, action, next) {
            var _this = this;
            var isDisabled = this._options && this._options.disabled;
            if (!this.devtoolsExtension || isDisabled) {
                return next(state, action);
            }
            return next(state, action).pipe(operators.tap(function (newState) {
                // if init action, send initial state to dev tools
                var isInitAction = store.getActionTypeFromInstance(action) === '@@INIT';
                if (isInitAction) {
                    _this.devtoolsExtension.init(state);
                }
                else {
                    var type = store.getActionTypeFromInstance(action);
                    _this.devtoolsExtension.send(Object.assign({}, action, { type: type }), newState);
                }
            }));
        };
        /**
           * Handle the action from the dev tools subscription
           */
        NgxsReduxDevtoolsPlugin.prototype.dispatched = function (action) {
            if (action.type === 'DISPATCH') {
                if (action.payload.type === 'JUMP_TO_ACTION' || action.payload.type === 'JUMP_TO_STATE') {
                    var prevState = JSON.parse(action.state);
                    // Lazy get the store for circular depedency issues
                    var store$$1 = this._injector.get(store.Store);
                    store$$1.reset(prevState);
                }
                else if (action.payload.type === 'TOGGLE_ACTION') {
                    console.warn('Skip is not supported at this time.');
                }
            }
            else if (action.type === 'ACTION') {
                // Lazy get the store for circular depedency issues
                var store$$1 = this._injector.get(store.Store);
                var actionPayload = JSON.parse(action.payload);
                store$$1.dispatch(actionPayload);
            }
        };
        return NgxsReduxDevtoolsPlugin;
    }());
    NgxsReduxDevtoolsPlugin.decorators = [
        { type: core.Injectable },
    ];
    /** @nocollapse */
    NgxsReduxDevtoolsPlugin.ctorParameters = function () {
        return [
            { type: undefined, decorators: [{ type: core.Inject, args: [NGXS_DEVTOOLS_OPTIONS,] },] },
            { type: core.Injector, },
        ];
    };
    function devtoolsOptionsFactory(options) {
        return Object.assign({ name: 'NGXS' }, options);
    }
    var USER_OPTIONS = new core.InjectionToken('USER_OPTIONS');
    var NgxsReduxDevtoolsPluginModule = (function () {
        function NgxsReduxDevtoolsPluginModule() {
        }
        NgxsReduxDevtoolsPluginModule.forRoot = function (options) {
            return {
                ngModule: NgxsReduxDevtoolsPluginModule,
                providers: [
                    {
                        provide: store.NGXS_PLUGINS,
                        useClass: NgxsReduxDevtoolsPlugin,
                        multi: true
                    },
                    {
                        provide: USER_OPTIONS,
                        useValue: options
                    },
                    {
                        provide: NGXS_DEVTOOLS_OPTIONS,
                        useFactory: devtoolsOptionsFactory,
                        deps: [USER_OPTIONS]
                    }
                ]
            };
        };
        return NgxsReduxDevtoolsPluginModule;
    }());
    NgxsReduxDevtoolsPluginModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [store.NgxsModule]
                },] },
    ];

    exports.ɵb = USER_OPTIONS;
    exports.ɵa = devtoolsOptionsFactory;
    exports.ɵd = NGXS_DEVTOOLS_OPTIONS;
    exports.NgxsReduxDevtoolsPluginModule = NgxsReduxDevtoolsPluginModule;
    exports.NgxsReduxDevtoolsPlugin = NgxsReduxDevtoolsPlugin;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ngxs-devtools-plugin.umd.js.map
