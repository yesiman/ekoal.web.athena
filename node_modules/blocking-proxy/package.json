{
  "_args": [
    [
      {
        "raw": "blocking-proxy@^1.0.0",
        "scope": null,
        "escapedName": "blocking-proxy",
        "name": "blocking-proxy",
        "rawSpec": "^1.0.0",
        "spec": ">=1.0.0 <2.0.0",
        "type": "range"
      },
      "/Users/yesi/_dev/__current/ekoal.web.athena/node_modules/protractor"
    ]
  ],
  "_from": "blocking-proxy@>=1.0.0 <2.0.0",
  "_id": "blocking-proxy@1.0.1",
  "_inCache": true,
  "_location": "/blocking-proxy",
  "_nodeVersion": "6.11.2",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/blocking-proxy-1.0.1.tgz_1508362705749_0.7009442718699574"
  },
  "_npmUser": {
    "name": "angularcore",
    "email": "angular-core+npm@google.com"
  },
  "_npmVersion": "5.4.2",
  "_phantomChildren": {},
  "_requested": {
    "raw": "blocking-proxy@^1.0.0",
    "scope": null,
    "escapedName": "blocking-proxy",
    "name": "blocking-proxy",
    "rawSpec": "^1.0.0",
    "spec": ">=1.0.0 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/protractor"
  ],
  "_resolved": "https://registry.npmjs.org/blocking-proxy/-/blocking-proxy-1.0.1.tgz",
  "_shasum": "81d6fd1fe13a4c0d6957df7f91b75e98dac40cb2",
  "_shrinkwrap": null,
  "_spec": "blocking-proxy@^1.0.0",
  "_where": "/Users/yesi/_dev/__current/ekoal.web.athena/node_modules/protractor",
  "bin": {
    "blocking-proxy": "built/lib/bin.js"
  },
  "bugs": {
    "url": "https://github.com/angular/jasminewd/issues"
  },
  "contributors": [
    {
      "name": "Michael Giambalvo",
      "email": "heathkit@google.com"
    },
    {
      "name": "Julie Ralph",
      "email": "ju.ralph@gmail.com"
    }
  ],
  "dependencies": {
    "minimist": "^1.2.0"
  },
  "description": "WebDriver Proxy for testing rich clients. It block certain calls until Angular is done updating the page under test.",
  "devDependencies": {
    "@types/jasmine": "2.5.45",
    "@types/minimist": "^1.1.29",
    "@types/nock": "^8.2.0",
    "@types/node": "^6.0.45",
    "@types/rimraf": "0.0.28",
    "@types/selenium-webdriver": "^2.53.39",
    "body-parser": "1.14.2",
    "clang-format": "^1.0.34",
    "gulp": "^3.9.1",
    "gulp-clang-format": "^1.0.23",
    "gulp-tslint": "^7.0.1",
    "jasmine": "^2.3.2",
    "jasmine-co": "^1.2.2",
    "jasmine-ts": "^0.2.1",
    "jshint": "2.9.1",
    "nock": "^9.0.2",
    "rimraf": "^2.5.4",
    "run-sequence": "^1.2.2",
    "selenium-mock": "^0.1.5",
    "selenium-webdriver": "^3.6.0",
    "ts-node": "^2.1.2",
    "tslint": "^4.3.1",
    "tslint-eslint-rules": "^3.1.0",
    "typescript": "^2.1.5",
    "vrsource-tslint-rules": "^0.14.1",
    "webdriver-manager": "^12.0.6"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-KE8NFMZr3mN2E0HcvCgRtX7DjhiIQrwle+nSVJVC/yqFb9+xznHl2ZcoBp2L9qzkI4t4cBFJ1efXF8Dwi132RA==",
    "shasum": "81d6fd1fe13a4c0d6957df7f91b75e98dac40cb2",
    "tarball": "https://registry.npmjs.org/blocking-proxy/-/blocking-proxy-1.0.1.tgz"
  },
  "engines": {
    "node": ">=6.9.x"
  },
  "gitHead": "2c5b6f3f0243d1a29382870dd32d02bd6876de01",
  "homepage": "https://github.com/angular/blocking-proxy",
  "jshintConfig": {
    "esversion": 6
  },
  "keywords": [
    "test",
    "testing",
    "webdriver",
    "webdriverjs",
    "selenium"
  ],
  "license": "MIT",
  "main": "built/lib/index.js",
  "maintainers": [
    {
      "name": "angularcore",
      "email": "angular-core+npm@google.com"
    }
  ],
  "name": "blocking-proxy",
  "optionalDependencies": {},
  "readme": "# Blocking Proxy [![Build Status](https://circleci.com/gh/angular/blocking-proxy.svg?style=shield)](https://circleci.com/gh/angular/blocking-proxy)\n\nBlocking Proxy is a tool for adding functionality to WebDriver-based\ntests.  It sits between your tests and the Selenium Server. For each \nWebDriver command, it runs a set of 'barriers' that will block \nforwarding the command to the Selenium server until some condition\nis met.\n\nBecause it interacts with WebDriver at the network level, Blocking Proxy can be\nused regardless of which language your tests are written in. See [the example](https://github.com/angular/blocking-proxy/blob/master/examples/README.md) \nfor a demonstration of using Blocking Proxy with WebDriver tests written in Python.\n\nAlthough Blocking Proxy can handle multiple WebDriver sessions, it can not yet handle\nmultiple concurrent clients. Thus, it's recommended to start a separate instance\nfor each test process.\n\n# Usage\n\nBlocking Proxy can be installed globally with `npm install -g blocking-proxy`.\nYou can also use it by cloning this repo and running these commands:\n\n```\nnpm install\nwebdriver-manager update && webdriver-manager start (in another terminal)\nnode ./built/lib/bin.js --seleniumAddress http://localhost:4444/wd/hub\n```\n\n# Features\n\n## Wait for Angular\n\nWhen testing an Angular application, Blocking Proxy can block webdriver commands\nuntil Angular's change detection is finished, and thus make your tests less flaky.\n\n## Highlight Delay\n\nIf `--highlightDelay <delayMS>` is specified, Blocking Proxy will wait for \nthe specified delay (in milliseconds) before executing click commands or sending \nkeys. It will also highlight the element that is the target of the command.\n\nHere's an example of highlight delay in action:\n\n![Highlight Delay](http://i.giphy.com/jg7B2HHPIkwak.gif)\n\n## WebDriver logging\n\nWhen `--logDir <path>` is set, Blocking Proxy will create a readable log of \nWebDriver commands at the specified path. The log will look something like this:\n\n```\n20:08:14.830 |    834ms | 37f13c | NewSession\n    {\"browserName\":\"chrome\"}\n20:08:15.674 |      4ms | 37f13c | SetTimeouts\n20:08:15.681 |    578ms | 37f13c | Go http://localhost:8081/ng1/#/interaction\n20:08:16.300 |    438ms | 37f13c | FindElement\n    Using css selector \\'.invalid\\'\n    ERROR: no such element\n```\nEach line shows the command that was executed and how long it took. For some\ncommands, extra data or the response from WebDriver will be shown on following\nlines.\n\n# Development\n\n## Formatting and lint\n\n`gulp format` runs clang-format. `gulp lint` validates format and runs tslint.\n\n## Running tests \n\nUnit tests live in `spec/unit` and can be run with `npm test`. Run `npm run test:auto` to automatically watch for changes and run unit tests.\n\n## Running e2e tests\n\nStart webdriver\n\n    webdriver-manager update\n    webdriver-manager start\n\nin another terminal, start the testapp\n\n    npm run testapp \n\nStart the proxy with \n  \n    npm start\n\nin yet another terminal, run the tests\n\n    npm run test:e2e\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/angular/jasminewd.git"
  },
  "scripts": {
    "prepublish": "gulp prepublish",
    "start": "node built/lib/bin.js",
    "test": "JASMINE_CONFIG_PATH=spec/jasmine_unit.json jasmine-ts",
    "test:auto": "find lib spec | entr npm test",
    "test:e2e": "JASMINE_CONFIG_PATH=spec/jasmine_e2e.json jasmine-ts",
    "testapp": "cd testapp && npm start",
    "webdriver": "webdriver-manager update && webdriver-manager start"
  },
  "typings": "built/lib/index.d.ts",
  "version": "1.0.1"
}
