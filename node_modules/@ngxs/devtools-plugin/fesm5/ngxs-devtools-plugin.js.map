{
  "version": 3,
  "file": "ngxs-devtools-plugin.js",
  "sources": [
    "ng://@ngxs/devtools-plugin/packages/devtools-plugin/src/devtools.module.ts",
    "ng://@ngxs/devtools-plugin/packages/devtools-plugin/src/devtools.plugin.ts",
    "ng://@ngxs/devtools-plugin/packages/devtools-plugin/src/symbols.ts"
  ],
  "sourcesContent": [
    "import { NgModule, ModuleWithProviders, InjectionToken } from '@angular/core';\nimport { NgxsModule, NGXS_PLUGINS } from '@ngxs/store';\n\nimport { NgxsDevtoolsOptions, NGXS_DEVTOOLS_OPTIONS } from './symbols';\nimport { NgxsReduxDevtoolsPlugin } from './devtools.plugin';\n\nexport function devtoolsOptionsFactory(options: NgxsDevtoolsOptions) {\n  return {\n    name: 'NGXS',\n    ...options\n  };\n}\n\nexport const USER_OPTIONS = new InjectionToken('USER_OPTIONS');\n\n@NgModule({\n  imports: [NgxsModule]\n})\nexport class NgxsReduxDevtoolsPluginModule {\n  static forRoot(options?: NgxsDevtoolsOptions): ModuleWithProviders {\n    return {\n      ngModule: NgxsReduxDevtoolsPluginModule,\n      providers: [\n        {\n          provide: NGXS_PLUGINS,\n          useClass: NgxsReduxDevtoolsPlugin,\n          multi: true\n        },\n        {\n          provide: USER_OPTIONS,\n          useValue: options\n        },\n        {\n          provide: NGXS_DEVTOOLS_OPTIONS,\n          useFactory: devtoolsOptionsFactory,\n          deps: [USER_OPTIONS]\n        }\n      ]\n    };\n  }\n}\n",
    "import { Injectable, Inject, Injector } from '@angular/core';\nimport { NgxsPlugin, getActionTypeFromInstance, Store } from '@ngxs/store';\nimport { tap } from 'rxjs/operators';\n\nimport { NgxsDevtoolsExtension, NgxsDevtoolsOptions, NGXS_DEVTOOLS_OPTIONS, NgxsDevtoolsAction } from './symbols';\n\n/**\n * Adds support for the Redux Devtools extension:\n * http://extension.remotedev.io/\n */\n@Injectable()\nexport class NgxsReduxDevtoolsPlugin implements NgxsPlugin {\n  private readonly devtoolsExtension: NgxsDevtoolsExtension | null = null;\n  private readonly windowObj: any = typeof window !== 'undefined' ? window : {};\n\n  constructor(@Inject(NGXS_DEVTOOLS_OPTIONS) private _options: NgxsDevtoolsOptions, private _injector: Injector) {\n    const globalDevtools = this.windowObj['__REDUX_DEVTOOLS_EXTENSION__'] || this.windowObj['devToolsExtension'];\n    if (globalDevtools) {\n      this.devtoolsExtension = globalDevtools.connect(_options) as NgxsDevtoolsExtension;\n      this.devtoolsExtension.subscribe(a => this.dispatched(a));\n    }\n  }\n\n  /**\n   * Middleware handle function\n   */\n  handle(state: any, action: any, next: any) {\n    const isDisabled = this._options && this._options.disabled;\n    if (!this.devtoolsExtension || isDisabled) {\n      return next(state, action);\n    }\n\n    return next(state, action).pipe(\n      tap(newState => {\n        // if init action, send initial state to dev tools\n        const isInitAction = getActionTypeFromInstance(action) === '@@INIT';\n        if (isInitAction) {\n          this.devtoolsExtension.init(state);\n        } else {\n          const type = getActionTypeFromInstance(action);\n\n          this.devtoolsExtension.send({ ...action, type }, newState);\n        }\n      })\n    );\n  }\n\n  /**\n   * Handle the action from the dev tools subscription\n   */\n  dispatched(action: NgxsDevtoolsAction) {\n    if (action.type === 'DISPATCH') {\n      if (action.payload.type === 'JUMP_TO_ACTION' || action.payload.type === 'JUMP_TO_STATE') {\n        const prevState = JSON.parse(action.state);\n        // Lazy get the store for circular depedency issues\n        const store = this._injector.get(Store);\n        store.reset(prevState);\n      } else if (action.payload.type === 'TOGGLE_ACTION') {\n        console.warn('Skip is not supported at this time.');\n      }\n    } else if (action.type === 'ACTION') {\n      // Lazy get the store for circular depedency issues\n      const store = this._injector.get(Store);\n      const actionPayload = JSON.parse(action.payload);\n      store.dispatch(actionPayload);\n    }\n  }\n}\n",
    "import { InjectionToken } from '@angular/core';\n\n/**\n * Interface for the redux-devtools-extension API.\n */\nexport interface NgxsDevtoolsExtension {\n  init(state);\n  send(action: any, state?: any);\n  subscribe(fn: (message: NgxsDevtoolsAction) => void);\n}\n\nexport interface NgxsDevtoolsAction {\n  type: string;\n  payload: any;\n  state: any;\n  id: number;\n  source: string;\n}\n\nexport interface NgxsDevtoolsOptions {\n  /**\n   * The name of the extension\n   */\n  name?: string;\n\n  /**\n   * Whether the dev tools is enabled or note. Useful for setting during production.\n   */\n  disabled?: boolean;\n\n  /**\n   * Max number of entiries to keep.\n   */\n  maxAge?: number;\n\n  /**\n   * Reformat actions before sending to dev tools\n   */\n  actionSanitizer?: (action: any) => void;\n\n  /**\n   * Reformat state before sending to devtools\n   */\n  stateSanitizer?: (state: any) => void;\n}\n\nexport const NGXS_DEVTOOLS_OPTIONS = new InjectionToken('NGXS_DEVTOOLS_OPTIONS');\n"
  ],
  "names": [],
  "mappings": "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"
}
