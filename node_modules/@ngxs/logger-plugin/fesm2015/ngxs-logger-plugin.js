import { InjectionToken, Injectable, Inject, NgModule } from '@angular/core';
import { getActionTypeFromInstance, NGXS_PLUGINS } from '@ngxs/store';
import { tap } from 'rxjs/operators';

const NGXS_LOGGER_PLUGIN_OPTIONS = new InjectionToken('NGXS_LOGGER_PLUGIN_OPTIONS');

const repeat = (str, times) => new Array(times + 1).join(str);
const pad = (num, maxLength) => repeat('0', maxLength - num.toString().length) + num;

class NgxsLoggerPlugin {
    constructor(_options) {
        this._options = _options;
    }
    handle(state, event, next) {
        if (this._options.disabled) {
            return next(state, event);
        }
        const options = this._options || {};
        const logger = options.logger || console;
        const actionName = getActionTypeFromInstance(event);
        const time = new Date();
        // tslint:disable-next-line
        const formattedTime = ` @ ${pad(time.getHours(), 2)}:${pad(time.getMinutes(), 2)}:${pad(time.getSeconds(), 2)}.${pad(time.getMilliseconds(), 3)}`;
        const message = `action ${actionName}${formattedTime}`;
        const startMessage = options.collapsed ? logger.groupCollapsed : logger.group;
        try {
            startMessage.call(logger, message);
        }
        catch (e) {
            console.log(message);
        }
        if (typeof event.payload !== 'undefined') {
            this.log('payload', 'color: #9E9E9E; font-weight: bold', event.payload);
        }
        this.log('prev state', 'color: #9E9E9E; font-weight: bold', state);
        return next(state, event).pipe(tap(nextState => {
            this.log('next state', 'color: #4CAF50; font-weight: bold', nextState);
            try {
                logger.groupEnd();
            }
            catch (e) {
                logger.log('—— log end ——');
            }
        }));
    }
    log(title, color, payload) {
        const options = this._options || {};
        const logger = options.logger || console;
        if (this.isIE()) {
            logger.log(title, payload);
        }
        else {
            logger.log('%c ' + title, color, payload);
        }
    }
    isIE() {
        const ua = typeof window !== 'undefined' && window.navigator.userAgent ? window.navigator.userAgent : '';
        let ms_ie = false;
        const old_ie = ua.indexOf('MSIE ');
        const new_ie = ua.indexOf('Trident/');
        if (old_ie > -1 || new_ie > -1) {
            ms_ie = true;
        }
        return ms_ie;
    }
}
NgxsLoggerPlugin.decorators = [
    { type: Injectable },
];
/** @nocollapse */
NgxsLoggerPlugin.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [NGXS_LOGGER_PLUGIN_OPTIONS,] },] },
];

const USER_OPTIONS = new InjectionToken('LOGGER_USER_OPTIONS');
function loggerOptionsFactory(options) {
    const defaultLoggerOptions = {
        logger: console,
        collapsed: false,
        disabled: false
    };
    return Object.assign({}, defaultLoggerOptions, options);
}
class NgxsLoggerPluginModule {
    static forRoot(options) {
        return {
            ngModule: NgxsLoggerPluginModule,
            providers: [
                {
                    provide: NGXS_PLUGINS,
                    useClass: NgxsLoggerPlugin,
                    multi: true
                },
                {
                    provide: USER_OPTIONS,
                    useValue: options
                },
                {
                    provide: NGXS_LOGGER_PLUGIN_OPTIONS,
                    useFactory: loggerOptionsFactory,
                    deps: [USER_OPTIONS]
                }
            ]
        };
    }
}
NgxsLoggerPluginModule.decorators = [
    { type: NgModule },
];

/**
 * Generated bundle index. Do not edit.
 */

export { USER_OPTIONS as ɵa, loggerOptionsFactory as ɵb, NGXS_LOGGER_PLUGIN_OPTIONS as ɵd, NgxsLoggerPluginModule, NgxsLoggerPlugin };
//# sourceMappingURL=ngxs-logger-plugin.js.map
