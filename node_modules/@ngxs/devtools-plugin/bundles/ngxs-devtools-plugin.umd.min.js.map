{
  "version": 3,
  "file": "ngxs-devtools-plugin.umd.min.js",
  "sources": [
    "ng://@ngxs/devtools-plugin/packages/devtools-plugin/src/symbols.ts",
    "ng://@ngxs/devtools-plugin/packages/devtools-plugin/src/devtools.plugin.ts",
    "ng://@ngxs/devtools-plugin/packages/devtools-plugin/src/devtools.module.ts"
  ],
  "sourcesContent": [
    "import { InjectionToken } from '@angular/core';\n\n/**\n * Interface for the redux-devtools-extension API.\n */\nexport interface NgxsDevtoolsExtension {\n  init(state);\n  send(action: any, state?: any);\n  subscribe(fn: (message: NgxsDevtoolsAction) => void);\n}\n\nexport interface NgxsDevtoolsAction {\n  type: string;\n  payload: any;\n  state: any;\n  id: number;\n  source: string;\n}\n\nexport interface NgxsDevtoolsOptions {\n  /**\n   * The name of the extension\n   */\n  name?: string;\n\n  /**\n   * Whether the dev tools is enabled or note. Useful for setting during production.\n   */\n  disabled?: boolean;\n\n  /**\n   * Max number of entiries to keep.\n   */\n  maxAge?: number;\n\n  /**\n   * Reformat actions before sending to dev tools\n   */\n  actionSanitizer?: (action: any) => void;\n\n  /**\n   * Reformat state before sending to devtools\n   */\n  stateSanitizer?: (state: any) => void;\n}\n\nexport const NGXS_DEVTOOLS_OPTIONS = new InjectionToken('NGXS_DEVTOOLS_OPTIONS');\n",
    "import { Injectable, Inject, Injector } from '@angular/core';\nimport { NgxsPlugin, getActionTypeFromInstance, Store } from '@ngxs/store';\nimport { tap } from 'rxjs/operators';\n\nimport { NgxsDevtoolsExtension, NgxsDevtoolsOptions, NGXS_DEVTOOLS_OPTIONS, NgxsDevtoolsAction } from './symbols';\n\n/**\n * Adds support for the Redux Devtools extension:\n * http://extension.remotedev.io/\n */\n@Injectable()\nexport class NgxsReduxDevtoolsPlugin implements NgxsPlugin {\n  private readonly devtoolsExtension: NgxsDevtoolsExtension | null = null;\n  private readonly windowObj: any = typeof window !== 'undefined' ? window : {};\n\n  constructor(@Inject(NGXS_DEVTOOLS_OPTIONS) private _options: NgxsDevtoolsOptions, private _injector: Injector) {\n    const globalDevtools = this.windowObj['__REDUX_DEVTOOLS_EXTENSION__'] || this.windowObj['devToolsExtension'];\n    if (globalDevtools) {\n      this.devtoolsExtension = globalDevtools.connect(_options) as NgxsDevtoolsExtension;\n      this.devtoolsExtension.subscribe(a => this.dispatched(a));\n    }\n  }\n\n  /**\n   * Middleware handle function\n   */\n  handle(state: any, action: any, next: any) {\n    const isDisabled = this._options && this._options.disabled;\n    if (!this.devtoolsExtension || isDisabled) {\n      return next(state, action);\n    }\n\n    return next(state, action).pipe(\n      tap(newState => {\n        // if init action, send initial state to dev tools\n        const isInitAction = getActionTypeFromInstance(action) === '@@INIT';\n        if (isInitAction) {\n          this.devtoolsExtension.init(state);\n        } else {\n          const type = getActionTypeFromInstance(action);\n\n          this.devtoolsExtension.send({ ...action, type }, newState);\n        }\n      })\n    );\n  }\n\n  /**\n   * Handle the action from the dev tools subscription\n   */\n  dispatched(action: NgxsDevtoolsAction) {\n    if (action.type === 'DISPATCH') {\n      if (action.payload.type === 'JUMP_TO_ACTION' || action.payload.type === 'JUMP_TO_STATE') {\n        const prevState = JSON.parse(action.state);\n        // Lazy get the store for circular depedency issues\n        const store = this._injector.get(Store);\n        store.reset(prevState);\n      } else if (action.payload.type === 'TOGGLE_ACTION') {\n        console.warn('Skip is not supported at this time.');\n      }\n    } else if (action.type === 'ACTION') {\n      // Lazy get the store for circular depedency issues\n      const store = this._injector.get(Store);\n      const actionPayload = JSON.parse(action.payload);\n      store.dispatch(actionPayload);\n    }\n  }\n}\n",
    "import { NgModule, ModuleWithProviders, InjectionToken } from '@angular/core';\nimport { NgxsModule, NGXS_PLUGINS } from '@ngxs/store';\n\nimport { NgxsDevtoolsOptions, NGXS_DEVTOOLS_OPTIONS } from './symbols';\nimport { NgxsReduxDevtoolsPlugin } from './devtools.plugin';\n\nexport function devtoolsOptionsFactory(options: NgxsDevtoolsOptions) {\n  return {\n    name: 'NGXS',\n    ...options\n  };\n}\n\nexport const USER_OPTIONS = new InjectionToken('USER_OPTIONS');\n\n@NgModule({\n  imports: [NgxsModule]\n})\nexport class NgxsReduxDevtoolsPluginModule {\n  static forRoot(options?: NgxsDevtoolsOptions): ModuleWithProviders {\n    return {\n      ngModule: NgxsReduxDevtoolsPluginModule,\n      providers: [\n        {\n          provide: NGXS_PLUGINS,\n          useClass: NgxsReduxDevtoolsPlugin,\n          multi: true\n        },\n        {\n          provide: USER_OPTIONS,\n          useValue: options\n        },\n        {\n          provide: NGXS_DEVTOOLS_OPTIONS,\n          useFactory: devtoolsOptionsFactory,\n          deps: [USER_OPTIONS]\n        }\n      ]\n    };\n  }\n}\n"
  ],
  "names": [
    "NGXS_DEVTOOLS_OPTIONS",
    "InjectionToken",
    "NgxsReduxDevtoolsPlugin",
    "_options",
    "_injector",
    "_this",
    "this",
    "devtoolsExtension",
    "windowObj",
    "window",
    "globalDevtools",
    "connect",
    "subscribe",
    "a",
    "dispatched",
    "prototype",
    "handle",
    "state",
    "action",
    "next",
    "isDisabled",
    "disabled",
    "pipe",
    "tap",
    "newState",
    "getActionTypeFromInstance",
    "init",
    "type",
    "send",
    "Object",
    "assign",
    "prevState",
    "JSON",
    "parse",
    "store",
    "get",
    "Store",
    "reset",
    "payload",
    "console",
    "warn",
    "actionPayload",
    "dispatch",
    "devtoolsOptionsFactory",
    "options",
    "name",
    "Injectable",
    "USER_OPTIONS",
    "NgxsReduxDevtoolsPluginModule",
    "forRoot",
    "ngModule",
    "providers",
    "provide",
    "NGXS_PLUGINS",
    "useClass",
    "multi",
    "useValue",
    "useFactory",
    "deps"
  ],
  "mappings": "6aA8CAA,EAAA,IAAAC,EAAAA,eAAA,yBCnCAC,EAAA,WAIE,SAAAA,EAAFC,EAAAC,GAAqD,IAArDC,EAAAC,KAA4FA,KAA5FH,SAAAA,EAHAG,KAAAF,UAAAA,EACAE,KAAAC,kBAAA,KAGID,KAAJE,UAAA,oBAAAC,OAAAA,OAAA,GACI,IAAIC,EAAiBJ,KAAzBE,UAAA,8BAAAF,KAAAE,UAAA,kBACME,IACAJ,KAAKC,kBAAXG,EAAAC,QAAAR,GACAG,KAAAC,kBAAAK,UAAA,SAAAC,GAAA,OAAAR,EAAAS,WAAAD,MAVA,OAiBAX,EAAAa,UAAAC,OAAA,SAAqDC,EAArDC,EAAAC,GACI,IAAId,EAARC,KACMc,EAANd,KAAAH,UAAAG,KAAAH,SAAAkB,SACA,OAAAf,KAAAC,mBAAAa,EAEeD,EAAfF,EAAAC,GAGAC,EAAAF,EAAAC,GAAAI,KAAAC,EAAAA,IAAA,SAAAC,GAGA,GADA,WAAAC,EAAAA,0BAAAP,GACcb,EAAdE,kBAAAmB,KAAAT,OAGA,CACA,IAAAU,EAAAF,EAAAA,0BAAAP,GACAb,EAAAE,kBAAAqB,KAAAC,OAAAC,OAAA,GAAAZ,EAAA,CAAAS,KAAAA,IAAAH,QASAtB,EAAAa,UAAAD,WAAA,SAAAI,GACA,GAAA,aAAAA,EAAAS,6EAEQ,IAARI,EAAAC,KAAAC,MAAAf,EAAAD,QAEAiB,EAAA5B,KAAAF,UAAA+B,IAAAC,EAAAA,QAAAC,MAAwBN,OAExB,kBAAAb,EAAAoB,QAAAX,MACAY,QAAAC,KAAA,4CAEA,GAAA,WAAAtB,EAAAS,KAAA,CAEM,IAANO,EAAA5B,KAAAF,UAAA+B,IAAAC,EAAAA,OACAK,EAAAT,KAAAC,MAAAf,EAAAoB,SACAJ,EAAAQ,SAAAD,KAxDAvC,EACA,GCLA,SAAAyC,EAAuCC,GACrC,OAAFf,OAAAC,OAAA,CACIe,KAAM,QACHD,iBDMP,CAAAjB,KAAAmB,EAAAA,2HCFA,IAAAC,EAAA,IAAA9C,EAAAA,eAAA,gBAKA+C,EAAA,WACE,SAAAA,KAJF,OAMAA,EAAAC,QAAA,SAAAL,GACA,MAAA,CACAM,SAAAF,EACAG,UAAA,CACA,CACUC,QAAVC,EAAAA,aACAC,SAAApD,EACAqD,OAAA,GAEA,CACAH,QAAAL,EACAS,SAAAZ,GAEA,CACUQ,QAAVpD,EACAyD,WAAAd,EACAe,KAAA,CAAAX,OAtBAC,EAGA,GADAA"
}
