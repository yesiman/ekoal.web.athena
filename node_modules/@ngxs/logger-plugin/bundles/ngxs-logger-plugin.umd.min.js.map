{
  "version": 3,
  "file": "ngxs-logger-plugin.umd.min.js",
  "sources": [
    "ng://@ngxs/logger-plugin/packages/logger-plugin/src/symbols.ts",
    "ng://@ngxs/logger-plugin/packages/logger-plugin/src/internals.ts",
    "ng://@ngxs/logger-plugin/packages/logger-plugin/src/logger.plugin.ts",
    "ng://@ngxs/logger-plugin/packages/logger-plugin/src/logger.module.ts"
  ],
  "sourcesContent": [
    "import { InjectionToken } from '@angular/core';\n\nexport interface NgxsLoggerPluginOptions {\n  /** Auto expand logged actions  */\n  collapsed?: boolean;\n\n  /** Provide alternate console.log implementation */\n  logger?: any;\n\n  /** Disable the logger. Useful for prod mode. */\n  disabled?: boolean;\n}\n\nexport const NGXS_LOGGER_PLUGIN_OPTIONS = new InjectionToken('NGXS_LOGGER_PLUGIN_OPTIONS');\n",
    "export const repeat = (str, times) => new Array(times + 1).join(str);\nexport const pad = (num, maxLength) => repeat('0', maxLength - num.toString().length) + num;\n",
    "import { Injectable, Inject } from '@angular/core';\nimport { NgxsPlugin, getActionTypeFromInstance } from '@ngxs/store';\n\nimport { NGXS_LOGGER_PLUGIN_OPTIONS, NgxsLoggerPluginOptions } from './symbols';\nimport { pad } from './internals';\nimport { tap } from 'rxjs/operators';\n\n@Injectable()\nexport class NgxsLoggerPlugin implements NgxsPlugin {\n  constructor(@Inject(NGXS_LOGGER_PLUGIN_OPTIONS) private _options: NgxsLoggerPluginOptions) {}\n\n  handle(state, event, next) {\n    if (this._options.disabled) {\n      return next(state, event);\n    }\n\n    const options = this._options || <any>{};\n    const logger = options.logger || console;\n    const actionName = getActionTypeFromInstance(event);\n    const time = new Date();\n\n    // tslint:disable-next-line\n    const formattedTime = ` @ ${pad(time.getHours(), 2)}:${pad(time.getMinutes(), 2)}:${pad(\n      time.getSeconds(),\n      2\n    )}.${pad(time.getMilliseconds(), 3)}`;\n\n    const message = `action ${actionName}${formattedTime}`;\n    const startMessage = options.collapsed ? logger.groupCollapsed : logger.group;\n\n    try {\n      startMessage.call(logger, message);\n    } catch (e) {\n      console.log(message);\n    }\n\n    if (typeof event.payload !== 'undefined') {\n      this.log('payload', 'color: #9E9E9E; font-weight: bold', event.payload);\n    }\n\n    this.log('prev state', 'color: #9E9E9E; font-weight: bold', state);\n\n    return next(state, event).pipe(\n      tap(nextState => {\n        this.log('next state', 'color: #4CAF50; font-weight: bold', nextState);\n        try {\n          logger.groupEnd();\n        } catch (e) {\n          logger.log('—— log end ——');\n        }\n      })\n    );\n  }\n\n  log(title: string, color: string, payload: any) {\n    const options = this._options || <any>{};\n    const logger = options.logger || console;\n\n    if (this.isIE()) {\n      logger.log(title, payload);\n    } else {\n      logger.log('%c ' + title, color, payload);\n    }\n  }\n\n  isIE(): boolean {\n    const ua = typeof window !== 'undefined' && window.navigator.userAgent ? window.navigator.userAgent : '';\n    let ms_ie = false;\n\n    const old_ie = ua.indexOf('MSIE ');\n    const new_ie = ua.indexOf('Trident/');\n\n    if (old_ie > -1 || new_ie > -1) {\n      ms_ie = true;\n    }\n\n    return ms_ie;\n  }\n}\n",
    "import { NgModule, ModuleWithProviders, InjectionToken } from '@angular/core';\nimport { NGXS_PLUGINS } from '@ngxs/store';\nimport { NgxsLoggerPluginOptions, NGXS_LOGGER_PLUGIN_OPTIONS } from './symbols';\nimport { NgxsLoggerPlugin } from './logger.plugin';\n\nexport const USER_OPTIONS = new InjectionToken('LOGGER_USER_OPTIONS');\n\nexport function loggerOptionsFactory(options: NgxsLoggerPluginOptions) {\n  const defaultLoggerOptions: NgxsLoggerPluginOptions = {\n    logger: console,\n    collapsed: false,\n    disabled: false\n  };\n\n  return {\n    ...defaultLoggerOptions,\n    ...options\n  };\n}\n\n@NgModule()\nexport class NgxsLoggerPluginModule {\n  static forRoot(options?: NgxsLoggerPluginOptions): ModuleWithProviders {\n    return {\n      ngModule: NgxsLoggerPluginModule,\n      providers: [\n        {\n          provide: NGXS_PLUGINS,\n          useClass: NgxsLoggerPlugin,\n          multi: true\n        },\n        {\n          provide: USER_OPTIONS,\n          useValue: options\n        },\n        {\n          provide: NGXS_LOGGER_PLUGIN_OPTIONS,\n          useFactory: loggerOptionsFactory,\n          deps: [USER_OPTIONS]\n        }\n      ]\n    };\n  }\n}\n"
  ],
  "names": [
    "NGXS_LOGGER_PLUGIN_OPTIONS",
    "InjectionToken",
    "pad",
    "num",
    "maxLength",
    "str",
    "times",
    "toString",
    "length",
    "Array",
    "join",
    "NgxsLoggerPlugin",
    "_options",
    "this",
    "prototype",
    "handle",
    "state",
    "event",
    "next",
    "_this",
    "disabled",
    "options",
    "logger",
    "console",
    "actionName",
    "getActionTypeFromInstance",
    "message",
    "time",
    "getHours",
    "getMinutes",
    "getSeconds",
    "getMilliseconds",
    "startMessage",
    "collapsed",
    "groupCollapsed",
    "group",
    "call",
    "e",
    "log",
    "payload",
    "pipe",
    "tap",
    "nextState",
    "groupEnd",
    "title",
    "color",
    "isIE",
    "ua",
    "window",
    "navigator",
    "userAgent",
    "ms_ie",
    "old_ie",
    "indexOf",
    "new_ie",
    "USER_OPTIONS",
    "loggerOptionsFactory",
    "defaultLoggerOptions",
    "Object",
    "assign",
    "NgxsLoggerPluginModule",
    "forRoot",
    "ngModule",
    "providers",
    "provide",
    "NGXS_PLUGINS",
    "useClass",
    "multi",
    "useValue",
    "useFactory",
    "deps"
  ],
  "mappings": "yaAaAA,EAAA,IAAAC,EAAAA,eAAA,8BCZAC,EAAA,SAAAC,EAAAC,GAA6C,OAD7CC,EACA,IADmCC,EACnCF,EAAAD,EAAAI,WAA2FC,OAD3F,IAAAC,MAAAH,EAAqE,GAArEI,KAAAL,GACAF,EADA,IAAAE,EAAmCC,GCQnCK,EAAA,WACE,SAAAA,EAAFC,GAA0DC,KAA1DD,SAA0DA,SAExDD,EAAFG,UAAAC,OAAA,SAAAC,EAAAC,EAAAC,GACI,IAAIC,EAARN,KACA,GAAMA,KAAND,SAAAQ,SACA,OAAAF,EAAAF,EAAAC,GAGI,IAAJI,EAAAR,KAAAD,UAAA,GACAU,EAAAD,EAAAC,QAAAC,QACAC,EAAqBC,EAAAA,0BAArBR,cASAS,EAAA,UAAAF,GADA,MAAAtB,EAAAyB,EAAAC,WAAA,GAA0D,IAA1D1B,EAAAyB,EAAAE,aAAA,GAAA,IAAA3B,EAAAyB,EAAAG,aAAA,GAAA,IAAA5B,EAAAyB,EAAAI,kBAAA,IAGQC,EAARX,EAAAY,UAAAX,EAAAY,eAAAZ,EAAAa,MACA,IACAH,EAAAI,KAAAd,EAAAI,GACA,MAAAW,GACAd,QAAAe,IAAAZ,GAUA,MAPA,oBAAAT,EAAAsB,SACA1B,KAAAyB,IAAA,UAAA,oCAAArB,EAAAsB,SAII1B,KAAJyB,IAAA,aAAA,oCAAAtB,GAEAE,EAAgBF,EAAhBC,GAAAuB,KAAAC,EAAAA,IAAA,SAAAC,GACQvB,EAARmB,IAAA,aAAA,oCAAAI,GACA,IACApB,EAAAqB,WACA,MAAAN,GACAf,EAAAgB,IAAA,sBAMA3B,EAAiBG,UAAjBwB,IAAiC,SAAjCM,EAAAC,EAAAN,GACI,IAEIjB,GAFRT,KAAAD,UAAA,IAEAU,QAAAC,QACMV,KAANiC,OACAxB,EAAAgB,IAAAM,EAAAL,GAEAjB,EAAAgB,IAAA,MAAAM,EAAAC,EAAAN,IAIA5B,EAAAG,UAAAgC,KAAA,WACI,IAAIC,EAAR,oBAAAC,QAAAA,OAAAC,UAAAC,UAAAF,OAAAC,UAAAC,UAAA,GAEAC,GAAgB,EAChBC,EAAAL,EAAAM,QAAA,SAEQC,EAASP,EAAjBM,QAAA,YAKA,QAJA,EAAMD,IAAN,EAAAE,KACAH,GAAA,GAGAA,KArEA,kICHA,IAAAI,EAAA,IAAAtD,EAAAA,eAAA,uBAEA,SAAAuD,EAAqCnC,GACnC,IAAFoC,EAAA,CACInC,OAAQC,QACRU,WAAW,EACXb,UAAU,GAGZ,OAAFsC,OAAAC,OAAA,GACOF,EACApC,GAKP,IAAAuC,EAAA,WACE,SAAAA,KAFF,OAIAA,EAAAC,QAAA,SAAAxC,GACA,MAAA,CACAyC,SAAAF,EACAG,UAAA,CACA,CACUC,QAAVC,EAAAA,aACAC,SAAAvD,EACAwD,OAAA,GAEA,CACAH,QAAAT,EACAa,SAAA/C,GAEA,CACU2C,QAAVhE,EACAqE,WAAAb,EACAc,KAAA,CAAAf,OApBAK,EACA"
}
