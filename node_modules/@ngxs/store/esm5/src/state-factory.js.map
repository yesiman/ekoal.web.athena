{
  "version": 3,
  "file": "state-factory.js",
  "sources": [
    "ng://@ngxs/store/packages/store/src/state-factory.ts"
  ],
  "sourcesContent": [
    "import { Injector, Injectable, SkipSelf, Optional } from '@angular/core';\nimport { Observable, of, forkJoin, from, throwError } from 'rxjs';\nimport { shareReplay, takeUntil, map, catchError, filter, mergeMap, defaultIfEmpty } from 'rxjs/operators';\n\nimport { META_KEY, NgxsLifeCycle } from './symbols';\nimport {\n  topologicalSort,\n  buildGraph,\n  findFullParentPath,\n  nameToState,\n  isObject,\n  StateClass,\n  MappedStore\n} from './internals';\nimport { getActionTypeFromInstance, setValue } from './utils';\nimport { ofActionDispatched } from './of-action';\nimport { InternalActions, ActionStatus, ActionContext } from './actions-stream';\nimport { InternalDispatchedActionResults } from './dispatcher';\nimport { StateContextFactory } from './state-context-factory';\n\n/**\n * State factory class\n * @ignore\n */\n@Injectable()\nexport class StateFactory {\n  get states(): MappedStore[] {\n    return this._parentFactory ? this._parentFactory.states : this._states;\n  }\n\n  private _states: MappedStore[] = [];\n  private _connected = false;\n\n  constructor(\n    private _injector: Injector,\n    @Optional()\n    @SkipSelf()\n    private _parentFactory: StateFactory,\n    private _actions: InternalActions,\n    private _actionResults: InternalDispatchedActionResults,\n    private _stateContextFactory: StateContextFactory\n  ) {}\n\n  /**\n   * Add a new state to the global defs.\n   */\n  add(oneOrManyStateClasses: StateClass | StateClass[]): MappedStore[] {\n    let stateClasses: StateClass[];\n    if (!Array.isArray(oneOrManyStateClasses)) {\n      stateClasses = [oneOrManyStateClasses];\n    } else {\n      stateClasses = oneOrManyStateClasses;\n    }\n\n    const stateGraph = buildGraph(stateClasses);\n    const sortedStates = topologicalSort(stateGraph);\n    const depths = findFullParentPath(stateGraph);\n    const nameGraph = nameToState(stateClasses);\n    const mappedStores: MappedStore[] = [];\n\n    for (const name of sortedStates) {\n      const stateClass = nameGraph[name];\n\n      if (!stateClass[META_KEY]) {\n        throw new Error('States must be decorated with @State() decorator');\n      }\n\n      const depth = depths[name];\n      const { actions } = stateClass[META_KEY];\n      let { defaults } = stateClass[META_KEY];\n\n      stateClass[META_KEY].path = depth;\n\n      // ensure our store hasn't already been added\n      // but dont throw since it could be lazy\n      // loaded from different paths\n      const has = this.states.find(s => s.name === name);\n      if (!has) {\n        // create new instance of defaults\n        if (Array.isArray(defaults)) {\n          defaults = [...defaults];\n        } else if (isObject(defaults)) {\n          defaults = { ...defaults };\n        } else if (defaults === undefined) {\n          defaults = {};\n        }\n\n        const instance = this._injector.get(stateClass);\n\n        mappedStores.push({\n          actions,\n          instance,\n          defaults,\n          name,\n          depth\n        });\n      }\n    }\n\n    this.states.push(...mappedStores);\n\n    return mappedStores;\n  }\n\n  /**\n   * Add a set of states to the store and return the defaulsts\n   */\n  addAndReturnDefaults(stateClasses: any[]): { defaults: any; states: MappedStore[] } {\n    if (stateClasses) {\n      const states = this.add(stateClasses);\n      const defaults = states.reduce(\n        (result: any, meta: MappedStore) => setValue(result, meta.depth, meta.defaults),\n        {}\n      );\n      return { defaults, states };\n    }\n  }\n\n  /**\n   * Bind the actions to the handlers\n   */\n  connectActionHandlers() {\n    if (this._connected) return;\n    this._actions\n      .pipe(\n        filter((ctx: ActionContext) => ctx.status === ActionStatus.Dispatched),\n        mergeMap(({ action }) =>\n          this.invokeActions(this._actions, action).pipe(\n            map(() => <ActionContext>{ action, status: ActionStatus.Successful }),\n            defaultIfEmpty(<ActionContext>{ action, status: ActionStatus.Canceled }),\n            catchError(error => of(<ActionContext>{ action, status: ActionStatus.Errored, error }))\n          )\n        )\n      )\n      .subscribe(ctx => this._actionResults.next(ctx));\n    this._connected = true;\n  }\n\n  /**\n   * Invoke the init function on the states.\n   */\n  invokeInit(stateMetadatas: MappedStore[]) {\n    for (const metadata of stateMetadatas) {\n      const instance: NgxsLifeCycle = metadata.instance;\n\n      if (instance.ngxsOnInit) {\n        const stateContext = this.createStateContext(metadata);\n        instance.ngxsOnInit(stateContext);\n      }\n    }\n  }\n\n  /**\n   * Invoke actions on the states.\n   */\n  invokeActions(actions$: InternalActions, action) {\n    const results = [];\n\n    for (const metadata of this.states) {\n      const type = getActionTypeFromInstance(action);\n      const actionMetas = metadata.actions[type];\n\n      if (actionMetas) {\n        for (const actionMeta of actionMetas) {\n          const stateContext = this.createStateContext(metadata);\n          try {\n            let result = metadata.instance[actionMeta.fn](stateContext, action);\n\n            if (result instanceof Promise) {\n              result = from(result);\n            }\n\n            if (result instanceof Observable) {\n              result = result.pipe(\n                actionMeta.options.cancelUncompleted\n                  ? takeUntil(actions$.pipe(ofActionDispatched(action)))\n                  : map(r => r)\n              ); // map acts like a noop\n            } else {\n              result = of({}).pipe(shareReplay());\n            }\n\n            results.push(result);\n          } catch (e) {\n            results.push(throwError(e));\n          }\n        }\n      }\n    }\n\n    if (!results.length) {\n      results.push(of({}));\n    }\n\n    return forkJoin(results);\n  }\n\n  /**\n   * Create the state context\n   */\n  private createStateContext(metadata: MappedStore) {\n    return this._stateContextFactory.createStateContext(metadata);\n  }\n}\n"
  ],
  "names": [],
  "mappings": "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"
}
