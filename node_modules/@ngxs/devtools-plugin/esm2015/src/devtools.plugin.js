import { Injectable, Inject, Injector } from '@angular/core';
import { getActionTypeFromInstance, Store } from '@ngxs/store';
import { tap } from 'rxjs/operators';
import { NGXS_DEVTOOLS_OPTIONS } from './symbols';
/**
 * Adds support for the Redux Devtools extension:
 * http://extension.remotedev.io/
 */
export class NgxsReduxDevtoolsPlugin {
    constructor(_options, _injector) {
        this._options = _options;
        this._injector = _injector;
        this.devtoolsExtension = null;
        this.windowObj = typeof window !== 'undefined' ? window : {};
        const globalDevtools = this.windowObj['__REDUX_DEVTOOLS_EXTENSION__'] || this.windowObj['devToolsExtension'];
        if (globalDevtools) {
            this.devtoolsExtension = globalDevtools.connect(_options);
            this.devtoolsExtension.subscribe(a => this.dispatched(a));
        }
    }
    /**
       * Middleware handle function
       */
    handle(state, action, next) {
        const isDisabled = this._options && this._options.disabled;
        if (!this.devtoolsExtension || isDisabled) {
            return next(state, action);
        }
        return next(state, action).pipe(tap(newState => {
            // if init action, send initial state to dev tools
            const isInitAction = getActionTypeFromInstance(action) === '@@INIT';
            if (isInitAction) {
                this.devtoolsExtension.init(state);
            }
            else {
                const type = getActionTypeFromInstance(action);
                this.devtoolsExtension.send(Object.assign({}, action, { type }), newState);
            }
        }));
    }
    /**
       * Handle the action from the dev tools subscription
       */
    dispatched(action) {
        if (action.type === 'DISPATCH') {
            if (action.payload.type === 'JUMP_TO_ACTION' || action.payload.type === 'JUMP_TO_STATE') {
                const prevState = JSON.parse(action.state);
                // Lazy get the store for circular depedency issues
                const store = this._injector.get(Store);
                store.reset(prevState);
            }
            else if (action.payload.type === 'TOGGLE_ACTION') {
                console.warn('Skip is not supported at this time.');
            }
        }
        else if (action.type === 'ACTION') {
            // Lazy get the store for circular depedency issues
            const store = this._injector.get(Store);
            const actionPayload = JSON.parse(action.payload);
            store.dispatch(actionPayload);
        }
    }
}
NgxsReduxDevtoolsPlugin.decorators = [
    { type: Injectable },
];
/** @nocollapse */
NgxsReduxDevtoolsPlugin.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [NGXS_DEVTOOLS_OPTIONS,] },] },
    { type: Injector, },
];
//# sourceMappingURL=devtools.plugin.js.map
