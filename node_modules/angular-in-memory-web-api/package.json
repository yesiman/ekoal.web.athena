{
  "_args": [
    [
      {
        "raw": "angular-in-memory-web-api@0.6.0",
        "scope": null,
        "escapedName": "angular-in-memory-web-api",
        "name": "angular-in-memory-web-api",
        "rawSpec": "0.6.0",
        "spec": "0.6.0",
        "type": "version"
      },
      "/Users/yesi/_dev/__current/ekoal.web.athena"
    ]
  ],
  "_from": "angular-in-memory-web-api@0.6.0",
  "_id": "angular-in-memory-web-api@0.6.0",
  "_inCache": true,
  "_location": "/angular-in-memory-web-api",
  "_nodeVersion": "8.9.4",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/angular-in-memory-web-api_0.6.0_1521780871491_0.9776840138512128"
  },
  "_npmUser": {
    "name": "wardbell",
    "email": "wardbell@hotmail.com"
  },
  "_npmVersion": "5.6.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "angular-in-memory-web-api@0.6.0",
    "scope": null,
    "escapedName": "angular-in-memory-web-api",
    "name": "angular-in-memory-web-api",
    "rawSpec": "0.6.0",
    "spec": "0.6.0",
    "type": "version"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/angular-in-memory-web-api/-/angular-in-memory-web-api-0.6.0.tgz",
  "_shasum": "28262d6f7cdf1415c1d540c1a5cb838d58cb602a",
  "_shrinkwrap": null,
  "_spec": "angular-in-memory-web-api@0.6.0",
  "_where": "/Users/yesi/_dev/__current/ekoal.web.athena",
  "author": "",
  "bugs": {
    "url": "https://github.com/angular/in-memory-web-api/issues"
  },
  "dependencies": {},
  "description": "An in-memory web api for Angular demos and tests",
  "devDependencies": {
    "@angular/animations": "6.0.0-rc.0",
    "@angular/common": "6.0.0-rc.0",
    "@angular/compiler": "6.0.0-rc.0",
    "@angular/compiler-cli": "6.0.0-rc.0",
    "@angular/core": "6.0.0-rc.0",
    "@angular/http": "6.0.0-rc.0",
    "@angular/platform-browser": "6.0.0-rc.0",
    "@angular/platform-browser-dynamic": "6.0.0-rc.0",
    "@angular/platform-server": "6.0.0-rc.0",
    "@types/jasmine": "2.5.54",
    "@types/jasmine-ajax": "^3.1.37",
    "@types/node": "^6.0.46",
    "canonical-path": "0.0.2",
    "concurrently": "^3.0.0",
    "core-js": "^2.4.1",
    "del": "^2.2.2",
    "gulp": "^3.9.1",
    "gulp-bump": "^2.4.0",
    "gulp-load-plugins": "^1.3.0",
    "gulp-task-listing": "^1.0.1",
    "gulp-util": "^3.0.7",
    "http-server": "^0.9.0",
    "jasmine-ajax": "^3.3.1",
    "jasmine-core": "~2.8.0",
    "karma": "^1.7.1",
    "karma-chrome-launcher": "^2.2.0",
    "karma-cli": "^1.0.1",
    "karma-htmlfile-reporter": "^0.3.5",
    "karma-jasmine": "^1.1.0",
    "karma-jasmine-ajax": "^0.1.13",
    "karma-jasmine-html-reporter": "^0.2.2",
    "karma-phantomjs-launcher": "^1.0.4",
    "karma-sourcemap-loader": "^0.3.7",
    "karma-webpack": "^2.0.4",
    "lite-server": "^2.3.0",
    "lodash": "^4.17.4",
    "rimraf": "^2.6.1",
    "rollup": "^0.49.3",
    "rollup-stream": "^1.24.1",
    "rxjs": "^6.0.0-beta.1",
    "systemjs": "0.20.18",
    "tslint": "^3.15.1",
    "typescript": "~2.7.2",
    "vinyl-source-stream": "^1.1.0",
    "webpack": "2.2.1",
    "yargs": "^5.0.0",
    "zone.js": "^0.8.4"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-+i2bH9T/S4gTQdJLt264H4JMKXNpik33pMatSOvPSqFQ0vImnTBVbvijfmy75OgwKPJ8OZw0R76CrLjp2EYX2A==",
    "shasum": "28262d6f7cdf1415c1d540c1a5cb838d58cb602a",
    "tarball": "https://registry.npmjs.org/angular-in-memory-web-api/-/angular-in-memory-web-api-0.6.0.tgz",
    "fileCount": 57,
    "unpackedSize": 570306
  },
  "gitHead": "9a6e50960cd8fa37daaeaddc51582fe563a63ddb",
  "homepage": "https://github.com/angular/in-memory-web-api#readme",
  "keywords": [],
  "license": "MIT",
  "main": "bundles/in-memory-web-api.umd.js",
  "maintainers": [
    {
      "name": "angular",
      "email": "angular-core+npm@google.com"
    },
    {
      "name": "wardbell",
      "email": "wardbell@hotmail.com"
    }
  ],
  "module": "index.js",
  "name": "angular-in-memory-web-api",
  "optionalDependencies": {},
  "peerDependencies": {
    "@angular/common": "^6.0.0-rc.0",
    "@angular/core": "^6.0.0-rc.0",
    "@angular/http": "^6.0.0-rc.0",
    "rxjs": "^6.0.0-beta.1"
  },
  "readme": "# Angular in-memory-web-api\n[![Build Status][travis-badge]][travis-badge-url]\n\nAn in-memory web api for Angular demos and tests\nthat emulates CRUD operations over a RESTy API.\n\nIt intercepts Angular `Http` and `HttpClient` requests that would otherwise go to the remote server and redirects them to an in-memory data store that you control.\n\nSee [Austin McDaniel's article](https://medium.com/@amcdnl/mocking-with-angular-more-than-just-unit-testing-cbb7908c9fcc) \nfor a quick introduction.\n\n### _It used to work and now it doesn't :-(_\n\nPerhaps you installed a new version of this library? Check the \n[CHANGELOG.md](https://github.com/angular/in-memory-web-api/blob/master/CHANGELOG.md) \nfor breaking changes that may have affected your app.\n\nIf that doesn't explain it, create an \n[issue on github](https://github.com/angular/in-memory-web-api/issues),\npreferably with a small repro.\n\n## Use cases\n\n* Demo apps that need to simulate CRUD data persistence operations without a real server.\nYou won't have to build and start a test server.\n\n* Whip up prototypes and proofs of concept.\n\n* Share examples with the community in a web coding environment such as Plunker or CodePen.\nCreate Angular issues and StackOverflow answers supported by live code.\n\n* Simulate operations against data collections that aren't yet implemented on your dev/test server. \nYou can pass requests thru to the dev/test server for collections that are supported.\n\n* Write unit test apps that read and write data.\nAvoid the hassle of intercepting multiple http calls and manufacturing sequences of responses.\nThe in-memory data store resets for each test so there is no cross-test data pollution.\n\n* End-to-end tests. If you can toggle the app into test mode\nusing the in-memory web api, you won't disturb the real database.\nThis can be especially useful for CI (continuous integration) builds.\n\n\n>**LIMITATIONS**\n>\n>The _in-memory-web-api_ exists primarily to support the \n[Angular documentation](https://angular.io/docs/ts/latest/ \"Angular documentation web site\").\nIt is not supposed to emulate every possible real world web API and is not intended for production use.\n>\n>Most importantly, it is ***always experimental***. \nWe will make breaking changes and we won't feel bad about it \nbecause this is a development tool, not a production product. \nWe do try to tell you about such changes in the `CHANGELOG.md`\nand we fix bugs as fast as we can.\n\n## HTTP request handling\nThis in-memory web api service processes an HTTP request and \nreturns an `Observable` of HTTP `Response` object\nin the manner of a RESTy web api.\nIt natively handles URI patterns in the form `:base/:collectionName/:id?`\n\nExamples:\n```\n  // for requests to an `api` base URL that gets heroes from a 'heroes' collection \n  GET api/heroes          // all heroes\n  GET api/heroes/42       // the hero with id=42\n  GET api/heroes?name=^j  // 'j' is a regex; returns heroes whose name starting with 'j' or 'J'\n  GET api/heroes.json/42  // ignores the \".json\"\n```\n\nThe in-memory web api service processes these requests against a \"database\" - a set of named collections - that you define during setup.\n\n## Basic setup\n\n<a id=\"createDb\"></a>\n\nCreate an `InMemoryDataService` class that implements `InMemoryDbService`.\n\nAt minimum it must implement `createDb` which \ncreates a \"database\" hash whose keys are collection names\nand whose values are arrays of collection objects to return or update.\nFor example:\n```ts\nimport { InMemoryDbService } from 'angular-in-memory-web-api';\n\nexport class InMemHeroService implements InMemoryDbService {\n  createDb() {\n    let heroes = [\n      { id: 1, name: 'Windstorm' },\n      { id: 2, name: 'Bombasto' },\n      { id: 3, name: 'Magneta' },\n      { id: 4, name: 'Tornado' }\n    ];\n    return {heroes};\n  }\n}\n```\n\n**Notes**\n\n* The in-memory web api library _currently_ assumes that every collection has a primary key called `id`.\n\n* The `createDb` method can be synchronous or asynchronous.\nIt would have to be asynchronous if you initialized your in-memory database service from a JSON file.\nReturn the database _object_, an _observable_ of that object, or a _promise_ of that object. The tests include an example of all three.\n\n* The in-memory web api calls your `InMemoryDbService` data service class's  `createDb` method on two occasions.\n\n  1. when it handles the _first_ HTTP request \n  1. when it receives a `resetdb` [command](#commands).\n\n  In the command case, the service passes in a `RequestInfo` object,\n  enabling the `createDb` logic to adjust its behavior per the client request. See the tests for examples.\n\n### Import the in-memory web api module\n\nRegister your data store service implementation with the `HttpClientInMemoryWebApiModule`\nin your root `AppModule.imports`\ncalling the `forRoot` static method with this service class and an optional configuration object:\n```ts\nimport { HttpClientModule } from '@angular/common/http';\nimport { HttpClientInMemoryWebApiModule } from 'angular-in-memory-web-api';\n\nimport { InMemHeroService } from '../app/hero.service';\n\n@NgModule({\n imports: [\n   HttpClientModule,\n   HttpClientInMemoryWebApiModule.forRoot(InMemHeroService),\n   ...\n ],\n ...\n})\nexport class AppModule { ... }\n```\n\n**_Notes_**\n\n* Always import the `HttpClientInMemoryWebApiModule` _after_ the `HttpClientModule` \nto ensure that the in-memory backend provider supersedes the Angular version.\n\n* You can setup the in-memory web api within a lazy loaded feature module by calling the `.forFeature` method as you would `.forRoot`.\n\n* In production, you want HTTP requests to go to the real server and probably have no need for the _in-memory_ provider.\nCLI-based apps can exclude the provider in production builds like this:\n  ```javascript\n  imports: [\n    HttpClientModule,\n    environment.production ?\n      [] : HttpClientInMemoryWebApiModule.forRoot(InMemHeroService)\n    ...\n  ]\n  ```\n\n### Setup for the older Angular _Http_ module\n\nYou can still use the in-memory web api with the older `Http` module.\n\n```ts\nimport { HttpModule } from '@angular/http';\nimport { HttpInMemoryWebApiModule } from 'angular-in-memory-web-api';\n\nimport { InMemHeroService } from '../app/hero.service';\n\n@NgModule({\nimports: [\n  HttpModule,\n  HttpInMemoryWebApiModule.forRoot(InMemHeroService),\n  ...\n],\n...\n})\nexport class AppModule { ... }\n```\n### Setup for both Angular HTTP modules\n\nPerhaps you have a hybrid app with BOTH Angular modules \nbecause you're migrating to `HttpClient` from `Http`.\nOr perhaps you've used this library before and you don't have time \nat this moment to re-do your module setup.\n\nThere's a combo-module \n(`InMemoryWebApiModule`) that prepares for both of them.\nIt has the same syntax from pre-`v0.4.0` days and it should \"_just work_\"\nas long as you aren't using the [advanced features described below](#advanced-features).\n  \n```ts\nimport { HttpModule } from '@angular/http';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { InMemoryWebApiModule } from 'angular-in-memory-web-api';\n\nimport { InMemHeroService } from '../app/hero.service';\n\n@NgModule({\nimports: [\n  HttpModule,\n  HttpClientModule,\n  InMemoryWebApiModule.forRoot(InMemHeroService),\n  ...\n],\n...\n})\nexport class AppModule { ... }\n```\n\n# Examples\nThe tests (`src/app/*.spec.ts` files) in the \n[github repository](https://github.com/angular/in-memory-web-api/tree/master/src/app) \nare a good place to learn how to setup and use this in-memory web api library.\n\nSee also the example source code in the official Angular.io documentation such as the\n[HttpClient](https://angular.io/guide/http) guide and the\n[Tour of Heroes](https://angular.io/tutorial/toh-pt6). \n\n# Advanced Features\nSome features are not readily apparent in the basic usage described above.\n\n## Configuration arguments\n\nThe `InMemoryBackendConfigArgs` defines a set of options. Add them as the second `forRoot` argument:\n```ts\n  InMemoryWebApiModule.forRoot(InMemHeroService, { delay: 500 }),\n```\n\n**Read the `InMemoryBackendConfigArgs` interface to learn about these options**.\n\n\n## Request evaluation order\nThis service can evaluate requests in multiple ways depending upon the configuration.\nHere's how it reasons:\n1. If it looks like a [command](#commands), process as a command\n2. If the [HTTP method is overridden](#method-override), try the override.\n3. If the resource name (after the api base path) matches one of the configured collections, process that\n4. If not but the `Config.passThruUnknownUrl` flag is `true`, try to [pass the request along to a real _XHR_](#passthru).\n5. Return a 404.\n\nSee the `handleRequest` method implementation for details.\n\n## Default delayed response\n\nBy default this service adds a 500ms delay \nto all data requests to simulate round-trip latency.\n\n>[Command requests](#commands) have zero added delay as they concern \nin-memory service configuration and do not emulate real data requests.\n\nYou can change or eliminate the latency by setting a different `delay` value:\n```ts\n  InMemoryWebApiModule.forRoot(InMemHeroService, { delay: 0 }),    // no delay\n  InMemoryWebApiModule.forRoot(InMemHeroService, { delay: 1500 }), // 1.5 second delay\n```\n\n## Simple query strings\nPass custom filters as a regex pattern via query string. \nThe query string defines which property and value to match.\n\nFormat: `/app/heroes/?propertyName=regexPattern`\n\nThe following example matches all names start with the letter 'j'  or 'J' in the heroes collection.\n\n`/app/heroes/?name=^j`\n\n>Search pattern matches are case insensitive by default. \nSet `config.caseSensitiveSearch = true` if needed.\n\n<a id=\"passthru\"></a>\n## Pass thru to a live server\n\nIf an existing, running remote server should handle requests for collections \nthat are not in the in-memory database, set `Config.passThruUnknownUrl: true`.\nThen this service will forward unrecognized requests to the remote server\nvia the Angular default `XHR` backend (it depends on whether your using `Http` or `HttpClient`).\n\n<a id=\"commands\"></a>\n## Commands\n\nThe client may issue a command request to get configuration state\nfrom the in-memory web api service, reconfigure it, \nor reset the in-memory database.\n\nWhen the last segment of the _api base path_ is \"commands\", the `collectionName` is treated as the _command_.\n\nExample URLs:\n```\n  commands/resetdb   // Reset the \"database\" to its original state\n  commands/config    // Get or update this service's config object\n```\n\nUsage:\n```\n  http.post('commands/resetdb', undefined);\n  http.get('commands/config');\n  http.post('commands/config', '{\"delay\":1000}');\n```\n\nCommand requests do not simulate real remote data access.\nThey ignore the latency delay and respond as quickly as possible.\n\nThe `resetDb` command\ncalls your `InMemoryDbService` data service's  [`createDb` method](#createDb) with the `RequestInfo` object,\nenabling the `createDb` logic to adjust its behavior per the client request.\n\nIn the following example, the client includes a reset option in the command request body:\n```\nhttp\n  // Reset the database collections with the `clear` option\n  .post('commands/resetDb', { clear: true }))\n\n  // when command finishes, get heroes\n  .concatMap(\n    ()=> http.get<Data>('api/heroes')\n        .map(data => data.data as Hero[])\n  )\n\n  // execute the request sequence and \n  // do something with the heroes\n  .subscribe(...)\n```\n\nSee the tests for other examples.\n\n## _parseRequestUrl_\n\nThe `parseRequestUrl` parses the request URL into a `ParsedRequestUrl` object.\n`ParsedRequestUrl` is a public interface whose properties guide the in-memory web api\nas it processes the request.\n\n### Default _parseRequestUrl_\n\nDefault parsing depends upon certain values of `config`: `apiBase`, `host`, and `urlRoot`.\nRead the source code for the complete story.\n\nConfiguring the `apiBase` yields the most interesting changes to `parseRequestUrl` behavior:\n\n* For `apiBase=undefined` and `url='http://localhost/api/customers/42'`\n    ```\n    {apiBase: 'api/', collectionName: 'customers', id: '42', ...}\n    ```\n\n*  For `apiBase='some/api/root/'` and `url='http://localhost/some/api/root/customers'`\n    ```\n    { apiBase: 'some/api/root/', collectionName: 'customers', id: undefined, ... }\n    ```\n\n*  For `apiBase='/'` and `url='http://localhost/customers'`\n    ```\n    { apiBase: '/', collectionName: 'customers', id: undefined, ... }\n    ```\n\n**The actual api base segment values are ignored**. Only the number of segments matters.\nThe following api base strings are considered identical: 'a/b' ~ 'some/api/' ~ `two/segments'\n\nThis means that URLs that work with the in-memory web api may be rejected by the real server.\n\n### Custom _parseRequestUrl_\n\nYou can override the default parser by implementing a `parseRequestUrl` method in your `InMemoryDbService`.\n\nThe service calls your method with two arguments.\n1. `url` - the request URL string\n1. `requestInfoUtils` - utility methods in a `RequestInfoUtilities` object, including the default parser.\nNote that some values have not yet been set as they depend on the outcome of parsing.\n\nYour method must either return a `ParsedRequestUrl` object or `null`|`undefined`,\nin which case the service uses the default parser.\nIn this way you can intercept and parse some URLs and leave the others to the default parser.\n\n## Custom _genId_\n\nCollection items are presumed to have a primary key property called `id`.\n\nYou can specify the `id` while adding a new item. \nThe service will blindly use that `id`; it does not check for uniqueness.\n\nIf you do not specify the `id`, the service generates one via the `genId` method.\n\nYou can override the default id generator with a method called `genId` in your `InMemoryDbService`.\nYour method receives the new item's collection and collection name. \nIt should return the generated id.\nIf your generator returns `null`|`undefined`, the service uses the default generator. \n\n## _responseInterceptor_\n\nYou can change the response returned by the service's default HTTP methods.\nA typical reason to intercept is to add a header that your application is expecting.\n\nTo intercept responses, add a `responseInterceptor` method to your `InMemoryDbService` class. \nThe service calls your interceptor like this:\n```ts\nresponseOptions = this.responseInterceptor(responseOptions, requestInfo);\n```\n\n<a id=\"method-override\"></a>\n## HTTP method interceptors\n\nYou may have HTTP requests that the in-memory web api can't handle properly.\n\nYou can override any HTTP method by implementing a method \nof that name in your `InMemoryDbService`.\n\nYour method's name must be the same as the HTTP method name but **all lowercase**.\nThe in-memory web api calls it with a `RequestInfo` object that contains request data and utility methods.\n\nFor example, if you implemented a `get` method, the web api would be called like this:\n`yourInMemDbService[\"get\"](requestInfo)`.\n\nYour custom HTTP method must return either:\n\n* `Observable<Response>` - you handled the request and the response is available from this\nobservable.  It _should be \"cold\"_.\n\n* `null`/`undefined` - you decided not to intervene, \nperhaps because you wish to intercept only certain paths for the given HTTP method.\nThe service continues with its default processing of the HTTP request.\n\nThe `RequestInfo` is an interface defined in `src/in-mem/interfaces.ts`. \nIts members include:\n```ts\nreq: Request;           // the request object from the client\ncollectionName: string; // calculated from the request url\ncollection: any[];      // the corresponding collection (if found)\nid: any;                // the item `id` (if specified)\nurl: string;            // the url in the request\nutils: RequestInfoUtilities; // helper functions\n```\nThe functions in `utils` can help you analyze the request\nand compose a response.\n\n## In-memory Web Api Examples\n\nThe [github repository](https://github.com/angular/in-memory-web-api/tree/master/src/app)\ndemonstrates library usage with tested examples.\n\nThe `HeroInMemDataService` class (in `src/app/hero-in-mem-data.service.ts`) is a Hero-oriented `InMemoryDbService`\nsuch as you might see in an HTTP sample in the Angular documentation.\n\nThe `HeroInMemDataOverrideService` class (in `src/app/hero-in-mem-data-override.service.ts`)\ndemonstrates a few ways to override methods of the base `HeroInMemDataService`.\n\nThe tests ([see below](#testing)) exercise these examples.\n\n# Build Instructions\n\nFollow these steps for updating the library.\n\n- `gulp bump` - up the package version number.\n\n- update `CHANGELOG.md` to record the change. Call out _breaking changes_.\n\n- update `README.md` if usage or interfaces change.\n\n- consider updating the dependency versions in `package.json`.\n\n- `npm install` the new package(s) if you did.\n\n- `npm list --depth=0` to make sure they really did install!\n\n- `gulp clean` to delete all generated files.\n\n- `npm test` to dev-build and run tests (see [\"Testing\"](#testing) below).\n\n- `gulp build` to build for distribution.\n\n- git add, commit, and push.\n\n- `npm publish`\n\n- Confirm that angular.io docs samples still work\n\n- Add two tags to the release commit in github\n  - the version number\n  - 'latest'\n\n[travis-badge]: https://travis-ci.org/angular/in-memory-web-api.svg?branch=master\n[travis-badge-url]: https://travis-ci.org/angular/in-memory-web-api\n\n## Testing\n\nThe \"app\" for this repo is not a real app.\nIt's an Angular data service (`HeroService`) and a bunch of tests.\n\n>Note that the `tsconfig.json` produces a `commonjs` module.\nThat's what _Angular specs require_.\nBut when building for an app, it should be a `es2015` module,\nas is the `tsconfig-ngc.json` for AOT-ready version of this library.\n\nThese tests are a work-in-progress, as tests often are.\n\nThe `src/` folder is divided into \n- `app/` - the test \"app\" and its tests\n- `in-mem/` - the source code for the in-memory web api library\n\n>A real app would reference the in-memory web api node module;\nthese tests reference the library source files.\n\nThe `karma-test-shim.js` adds the `in-mem` folder to the list of folders that SystemJS should resolve.\n\n## Rollup\n\nThe gulp \"umd\" task runs rollup for tree-shaking.\n\nI don't remember if it ever worked without a lot of warnings.\nThe `v0.4.x` release updated to `rollup@0.49` which required updates to the `rollup.config.js`.\n\nStill weirdly runs  `cjs` rollup config first that I can’t find (which produces numerous warnings) before doing the right thing and running the `umd` config. \n\nAlso does not work if you follow instructions and use the `output` property of `rollup.config.js`; does work when configure it “wrong” and put the options in the root.\n\nIgnoring these issues for now.\n\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/angular/in-memory-web-api.git"
  },
  "scripts": {
    "build": "tsc",
    "build:watch": "tsc -w",
    "lint": "tslint ./src/*.ts -t verbose -e ./src/*.d.ts",
    "pretest": "npm run build",
    "pretest:once": "npm run build",
    "start": "concurrently \"npm run build:watch\" \"npm run serve\"",
    "test": "concurrently \"npm run build:watch\" \"karma start karma.conf.js\"",
    "test:once": "karma start karma.conf.js --single-run",
    "tsc": "tsc",
    "tsc:w": "tsc -w"
  },
  "version": "0.6.0"
}
