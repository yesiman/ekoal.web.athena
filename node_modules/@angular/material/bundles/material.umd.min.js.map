{"version":3,"file":"material.umd.min.js","sources":["../../src/lib/select/select.ts","../../src/lib/tooltip/tooltip.ts","../../src/lib/tabs/tab-header.ts","../../src/lib/tabs/tab-group.ts","../../src/lib/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/lib/tabs/tabs-module.ts","../../src/lib/toolbar/toolbar.ts","../../src/lib/toolbar/toolbar-module.ts","../../src/lib/tree/outlet.ts","../../src/lib/tree/node.ts","../../src/lib/tree/padding.ts","../../src/lib/tree/tree.ts","../../src/lib/tree/toggle.ts","../../src/lib/tree/tree-module.ts","../../src/lib/tree/data-source/flat-data-source.ts","../../src/lib/tree/data-source/nested-data-source.ts","../../src/lib/version.ts","../../src/lib/autocomplete/autocomplete-trigger.ts","../../src/lib/core/testing/month-constants.ts","../../src/lib/expansion/expansion-animations.ts","../../src/lib/stepper/step-header.ts","../../src/lib/stepper/stepper-animations.ts","../../src/lib/stepper/stepper-icon.ts","../../src/lib/stepper/stepper.ts","../../src/lib/stepper/stepper-button.ts","../../src/lib/stepper/stepper-module.ts","../../src/lib/table/table.ts","../../src/lib/table/cell.ts","../../src/lib/table/row.ts","../../src/lib/table/table-module.ts","../../src/lib/table/table-data-source.ts","../../src/lib/tabs/ink-bar.ts","../../src/lib/tabs/tab-label.ts","../../src/lib/tabs/tab-content.ts","../../src/lib/tabs/tab.ts","../../src/lib/tabs/tabs-animations.ts","../../src/lib/tabs/tab-body.ts","../../src/lib/tabs/tab-label-wrapper.ts","../../src/lib/slider/slider.ts","../../src/lib/slider/slider-module.ts","../../src/lib/snack-bar/snack-bar-ref.ts","../../src/lib/snack-bar/snack-bar-config.ts","../../src/lib/snack-bar/snack-bar-animations.ts","../../src/lib/snack-bar/simple-snack-bar.ts","../../src/lib/snack-bar/snack-bar-container.ts","../../src/lib/snack-bar/snack-bar.ts","../../src/lib/snack-bar/snack-bar-module.ts","../../src/lib/sort/sort.ts","../../src/lib/sort/sort-animations.ts","../../src/lib/sort/sort-header-intl.ts","../../src/lib/sort/sort-header.ts","../../src/lib/sort/sort-module.ts","../../src/lib/stepper/step-label.ts","../../src/lib/stepper/stepper-intl.ts","../../src/lib/sidenav/drawer.ts","../../src/lib/sidenav/sidenav.ts","../../src/lib/sidenav/sidenav-module.ts","../../src/lib/slide-toggle/slide-toggle.ts","../../src/lib/slide-toggle/slide-toggle-module.ts","../../src/lib/progress-spinner/progress-spinner.ts","../../src/lib/progress-spinner/progress-spinner-module.ts","../../src/lib/radio/radio.ts","../../src/lib/radio/radio-module.ts","../../src/lib/sidenav/drawer-animations.ts","../../src/lib/select/select-module.ts","../../src/lib/tooltip/tooltip-animations.ts","../../src/lib/tooltip/tooltip-module.ts","../../src/lib/paginator/paginator-intl.ts","../../src/lib/paginator/paginator.ts","../../src/lib/paginator/paginator-module.ts","../../src/lib/progress-bar/progress-bar.ts","../../src/lib/progress-bar/progress-bar-module.ts","../../src/lib/menu/menu-directive.ts","../../src/lib/menu/menu-trigger.ts","../../src/lib/menu/menu-module.ts","../../src/lib/select/select-animations.ts","../../src/lib/list/selection-list.ts","../../src/lib/list/list-module.ts","../../src/lib/menu/menu-content.ts","../../src/lib/menu/menu-animations.ts","../../src/lib/menu/menu-panel.ts","../../src/lib/menu/menu-item.ts","../../src/lib/list/list.ts","../../src/lib/icon/icon-registry.ts","../../src/lib/icon/icon.ts","../../src/lib/icon/icon-module.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/datepicker/datepicker-module.ts","../../src/lib/divider/divider.ts","../../src/lib/divider/divider-module.ts","../../src/lib/expansion/accordion.ts","../../src/lib/expansion/expansion-panel-content.ts","../../src/lib/expansion/expansion-panel.ts","../../src/lib/expansion/expansion-panel-header.ts","../../src/lib/expansion/expansion-module.ts","../../src/lib/grid-list/grid-tile.ts","../../src/lib/grid-list/tile-coordinator.ts","../../src/lib/grid-list/tile-styler.ts","../../src/lib/grid-list/grid-list.ts","../../src/lib/grid-list/grid-list-module.ts","../../src/lib/datepicker/multi-year-view.ts","../../src/lib/datepicker/year-view.ts","../../src/lib/datepicker/calendar.ts","../../src/lib/datepicker/datepicker-animations.ts","../../src/lib/datepicker/datepicker.ts","../../src/lib/dialog/dialog-container.ts","../../src/lib/dialog/dialog-ref.ts","../../src/lib/dialog/dialog.ts","../../src/lib/dialog/dialog-content-directives.ts","../../src/lib/dialog/dialog-module.ts","../../src/lib/input/autosize.ts","../../src/lib/input/input-value-accessor.ts","../../src/lib/input/input.ts","../../src/lib/input/input-module.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox-module.ts","../../src/lib/chips/chip.ts","../../src/lib/chips/chip-default-options.ts","../../src/lib/chips/chip-list.ts","../../src/lib/chips/chip-input.ts","../../src/lib/chips/chips-module.ts","../../src/lib/dialog/dialog-config.ts","../../src/lib/dialog/dialog-animations.ts","../../src/lib/button/button.ts","../../src/lib/button/button-module.ts","../../src/lib/button-toggle/button-toggle.ts","../../src/lib/button-toggle/button-toggle-module.ts","../../src/lib/card/card.ts","../../src/lib/card/card-module.ts","../../src/lib/checkbox/checkbox-config.ts","../../src/lib/autocomplete/autocomplete-module.ts","../../src/lib/badge/badge.ts","../../src/lib/badge/badge-module.ts","../../src/lib/bottom-sheet/bottom-sheet-config.ts","../../src/lib/bottom-sheet/bottom-sheet-ref.ts","../../src/lib/bottom-sheet/bottom-sheet-animations.ts","../../src/lib/bottom-sheet/bottom-sheet-container.ts","../../src/lib/bottom-sheet/bottom-sheet.ts","../../src/lib/bottom-sheet/bottom-sheet-module.ts","../../src/lib/core/option/option.ts","../../src/lib/core/option/index.ts","../../src/lib/core/label/label-options.ts","../../src/lib/form-field/error.ts","../../src/lib/form-field/form-field-animations.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/label.ts","../../src/lib/form-field/placeholder.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/suffix.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field-module.ts","../../src/lib/autocomplete/autocomplete.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/disable-ripple.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/common-behaviors/error-state.ts","../../src/lib/core/common-behaviors/initialized.ts","../../src/lib/core/datetime/date-adapter.ts","../../src/lib/core/datetime/native-date-adapter.ts","../../src/lib/core/ripple/ripple-renderer.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/input/input-errors.ts","../../src/lib/datepicker/datepicker-errors.ts","../../src/lib/grid-list/grid-list-measure.ts","../../src/lib/menu/menu-errors.ts","../../src/lib/select/select-errors.ts","../../src/lib/sort/sort-errors.ts","../../src/lib/core/animation/animation.ts","../../src/lib/core/datetime/date-formats.ts","../../src/lib/core/datetime/native-date-formats.ts","../../src/lib/core/datetime/index.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/gestures/gesture-config.ts","../../src/lib/core/line/line.ts","../../src/lib/core/ripple/ripple-ref.ts","../../src/lib/core/ripple/ripple.ts","../../src/lib/core/ripple/index.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/option/optgroup.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  SPACE,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  CdkConnectedOverlay,\n  Overlay,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  ViewportRuler,\n} from '@angular/cdk/overlay';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  CanDisable,\n  CanDisableRipple,\n  CanUpdateErrorState,\n  ErrorStateMatcher,\n  HasTabIndex,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinErrorState,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {defer, merge, Observable, Subject} from 'rxjs';\nimport {filter, map, startWith, switchMap, take, takeUntil} from 'rxjs/operators';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 20px.\n */\nexport const SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 20;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nexport class MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatSelectMixinBase = mixinDisableRipple(\n    mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_ariaLabel',\n    '[attr.aria-labelledby]': 'ariaLabelledby',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    matSelectAnimations.transformPanel,\n    matSelectAnimations.fadeInContent\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form. */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private readonly _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when select has been touched` */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Whether the panel's animation is done. */\n  _panelDoneAnimating: boolean = false;\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy = this._scrollStrategyFactory();\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the component is disabling centering of the active option over the trigger. */\n  private _disableOptionCentering: boolean = false;\n\n  /** Whether the select is focused. */\n  focused: boolean = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger') trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder(): string { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether to center the active option over the trigger. */\n  @Input()\n  get disableOptionCentering(): boolean { return this._disableOptionCentering; }\n  set disableOptionCentering(value: boolean) {\n    this._disableOptionCentering = coerceBooleanProperty(value);\n  }\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  readonly optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.options) {\n      return merge(...this.options.map(option => option.onSelectionChange));\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  });\n\n   /** Event emitted when the select panel has been toggled. */\n   @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the select has been opened. */\n  @Output('opened') readonly _openedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => o), map(() => {}));\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed') readonly _closedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => !o), map(() => {}));\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectChange> =\n      new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) private _scrollStrategyFactory) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes.disabled) {\n      this.stateChanges.next();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length || this._panelOpen) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement)['font-size']);\n\n    this._panelOpen = true;\n    this._keyManager.withHorizontalOrientation(null);\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n        keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n\n    // Open the select on ALT + arrow key to match the native <select>\n    if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n    } else if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n\n      manager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n          manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  /**\n   * When the panel element is finished transforming in (though not fading in), it\n   * emits an event and focuses an option if the panel is open.\n   */\n  _onPanelDone(): void {\n    if (this.panelOpen) {\n      this._scrollTop = 0;\n      this.openedChange.emit(true);\n    } else {\n      this.openedChange.emit(false);\n      this._panelDoneAnimating = false;\n      this.overlayDir.offsetX = 0;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * When the panel content is done fading in, the _panelDoneAnimating property is\n   * set so the proper class can be added to the panel.\n   */\n  _onFadeInDone(): void {\n    this._panelDoneAnimating = this.panelOpen;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this.focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this.focused = false;\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[], isUserInput = false): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      this._clearSelection();\n\n      const correspondingOption = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(correspondingOption);\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput = false): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      isUserInput ? correspondingOption._selectViaInteraction() : correspondingOption.select();\n      this._selectionModel.select(correspondingOption);\n      this.stateChanges.next();\n    }\n\n    return correspondingOption;\n  }\n\n\n  /**\n   * Clears the select trigger and deselects every option in the list.\n   * @param skip Option that should not be deselected.\n   */\n  private _clearSelection(skip?: MatOption): void {\n    this._selectionModel.clear();\n    this.options.forEach(option => {\n      if (option !== skip) {\n        option.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options)\n      .withTypeAhead()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n\n    this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n      // Restore focus to the trigger before closing. Ensures that the focus\n      // position won't be lost if the user got focus into the overlay.\n      this.focus();\n      this.close();\n    });\n\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n    this.optionSelectionChanges\n      .pipe(takeUntil(changedOrDestroyed), filter(event => event.isUserInput))\n      .subscribe(event => {\n        this._onSelect(event.source);\n\n        if (!this.multiple && this._panelOpen) {\n          this.close();\n          this.focus();\n        }\n      });\n\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n      });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    // TODO(crisbeto): handle blank/null options inside multi-select.\n    if (this.multiple) {\n      this._selectionModel.toggle(option);\n      this.stateChanges.next();\n      wasSelected ? option.deselect() : option.select();\n      this._keyManager.setActiveItem(option);\n      this._sortValues();\n\n      // In case the user select the option with their mouse, we\n      // want to restore focus back to the trigger, in order to\n      // prevent the select keyboard controls from clashing with\n      // the ones from `mat-option`.\n      this.focus();\n    } else {\n      this._clearSelection(option.value == null ? undefined : option);\n\n      if (option.value == null) {\n        this._propagateChanges(option.value);\n      } else {\n        this._selectionModel.select(option);\n        this.stateChanges.next();\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.options.forEach(option => {\n        if (option.selected) {\n          this._selectionModel.select(option);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options,\n        this.optionGroups);\n\n    this.panel.nativeElement.scrollTop = _getOptionScrollPosition(\n      activeOptionIndex + labelCount,\n      this._getItemHeight(),\n      this.panel.nativeElement.scrollTop,\n      SELECT_PANEL_MAX_HEIGHT\n    );\n  }\n\n  /** Focuses the select element. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options,\n        this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  get _ariaLabel(): string | null {\n    // If an ariaLabelledby value has been set, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors.\n    this.overlayDir.offsetX = offsetX;\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    // Disable offset if requested by user by returning 0 as value to offset\n    if (this._disableOptionCentering) {\n      return 0;\n    }\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height\n    // difference, multiplied by -1 to ensure that the overlay moves in the correct\n    // direction up the page.\n    return optionOffsetFromPanelTop * -1 - optionHeightAdjustment;\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {BreakpointObserver, Breakpoints, BreakpointState} from '@angular/cdk/layout';\nimport {\n  ConnectionPositionPair,\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  OverlayConnectionPosition,\n  OverlayRef,\n  ScrollDispatcher,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {Platform} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject, Observable} from 'rxjs';\nimport {matTooltipAnimations} from './tooltip-animations';\n\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\n/** Time in ms to throttle repositioning after scroll events. */\nexport const SCROLL_THROTTLE_MS = 20;\n\n/** CSS class that will be attached to the overlay panel. */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n\n/** Creates an error to be thrown if the user supplied an invalid tooltip position. */\nexport function getMatTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy', {\n      providedIn: 'root',\n      factory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(): () => ScrollStrategy {\n  const overlay = inject(Overlay);\n  return () => overlay.scrollStrategies.reposition({scrollThrottle: SCROLL_THROTTLE_MS});\n}\n\n/** Default `matTooltip` options that can be overridden. */\nexport interface MatTooltipDefaultOptions {\n  showDelay: number;\n  hideDelay: number;\n  touchendHideDelay: number;\n}\n\n/** Injection token to be used to override the default options for `matTooltip`. */\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS =\n    new InjectionToken<MatTooltipDefaultOptions>('mat-tooltip-default-options', {\n      providedIn: 'root',\n      factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\n    });\n\nexport function MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY(): MatTooltipDefaultOptions {\n  return {\n    showDelay: 0,\n    hideDelay: 0,\n    touchendHideDelay: 1500,\n  };\n}\n\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.google.com/components/tooltips.html\n */\n@Directive({\n  selector: '[matTooltip]',\n  exportAs: 'matTooltip',\n  host: {\n    '(longpress)': 'show()',\n    '(keydown)': '_handleKeydown($event)',\n    '(touchend)': '_handleTouchend()',\n  },\n})\nexport class MatTooltip implements OnDestroy {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\n\n  private _portal: ComponentPortal<TooltipComponent>;\n  private _position: TooltipPosition = 'below';\n  private _disabled: boolean = false;\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  @Input('matTooltipPosition')\n  get position(): TooltipPosition { return this._position; }\n  set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      if (this._overlayRef) {\n        this._updatePosition();\n\n        if (this._tooltipInstance) {\n          this._tooltipInstance!.show(value, 0);\n        }\n\n        this._overlayRef.updatePosition();\n      }\n    }\n  }\n\n  /** Disables the display of the tooltip. */\n  @Input('matTooltipDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n\n  /** The default delay in ms before showing the tooltip after show is called */\n  @Input('matTooltipShowDelay') showDelay = this._defaultOptions.showDelay;\n\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  @Input('matTooltipHideDelay') hideDelay = this._defaultOptions.hideDelay;\n\n  private _message = '';\n\n  /** The message to be displayed in the tooltip */\n  @Input('matTooltip')\n  get message() { return this._message; }\n  set message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._updateTooltipMessage();\n      this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n    }\n  }\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('matTooltipClass')\n  get tooltipClass() { return this._tooltipClass; }\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  private _manualListeners = new Map<string, Function>();\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _elementRef: ElementRef,\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    private _ngZone: NgZone,\n    private _platform: Platform,\n    private _ariaDescriber: AriaDescriber,\n    private _focusMonitor: FocusMonitor,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) private _scrollStrategy,\n    @Optional() private _dir: Directionality,\n    @Optional() @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\n      private _defaultOptions: MatTooltipDefaultOptions) {\n\n    const element: HTMLElement = _elementRef.nativeElement;\n\n    // The mouse events shouldn't be bound on iOS devices, because\n    // they can prevent the first tap from firing its click event.\n    if (!_platform.IOS) {\n      this._manualListeners.set('mouseenter', () => this.show());\n      this._manualListeners.set('mouseleave', () => this.hide());\n\n      this._manualListeners\n        .forEach((listener, event) => _elementRef.nativeElement.addEventListener(event, listener));\n    } else if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n      // will add some inline styles by default, including `user-select: none`. This is\n      // problematic on iOS, because it will prevent users from typing in inputs. If\n      // we're on iOS and the tooltip is attached on an input or textarea, we clear\n      // the `user-select` to avoid these issues.\n      element.style.webkitUserSelect = element.style.userSelect = '';\n    }\n\n    _focusMonitor.monitor(element).pipe(takeUntil(this._destroyed)).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        _ngZone.run(() => this.hide(0));\n      } else if (origin !== 'program') {\n        _ngZone.run(() => this.show());\n      }\n    });\n  }\n\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._tooltipInstance = null;\n    }\n\n    // Clean up the event listeners set in the constructor\n    if (!this._platform.IOS) {\n      this._manualListeners.forEach((listener, event) =>\n        this._elementRef.nativeElement.removeEventListener(event, listener));\n\n      this._manualListeners.clear();\n    }\n\n    this._destroyed.next();\n    this._destroyed.complete();\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message) { return; }\n\n    const overlayRef = this._createOverlay();\n\n    this._detach();\n    this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n    this._tooltipInstance = overlayRef.attach(this._portal).instance;\n    this._tooltipInstance.afterHidden()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    this._tooltipInstance!.show(this._position, delay);\n  }\n\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n\n  /** Shows/hides the tooltip */\n  toggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n\n  /** Handles the keydown events on the host element. */\n  _handleKeydown(e: KeyboardEvent) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE) {\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n\n  /** Handles the touchend events on the host element. */\n  _handleTouchend() {\n    this.hide(this._defaultOptions.touchendHideDelay);\n  }\n\n  /** Create the overlay config and position strategy */\n  private _createOverlay(): OverlayRef {\n    if (this._overlayRef) {\n      return this._overlayRef;\n    }\n\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n    const direction = this._dir ? this._dir.value : 'ltr';\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay.position()\n      .flexibleConnectedTo(this._elementRef)\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8)\n      .withPositions([\n        {...origin.main, ...overlay.main},\n        {...origin.fallback, ...overlay.fallback}\n      ]);\n\n    const scrollableAncestors = this._scrollDispatcher\n      .getAncestorScrollContainers(this._elementRef);\n\n    strategy.withScrollableContainers(scrollableAncestors);\n\n    strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(() => this.hide(0));\n        } else {\n          // Otherwise recalculate the origin based on the new position.\n          this._tooltipInstance._setTransformOrigin(change.connectionPair, direction);\n        }\n      }\n    });\n\n    this._overlayRef = this._overlay.create({\n      direction,\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._overlayRef.detachments()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n\n    return this._overlayRef;\n  }\n\n  /** Detaches the currently-attached tooltip. */\n  private _detach() {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n\n    this._tooltipInstance = null;\n  }\n\n  /** Updates the position of the current tooltip. */\n  private _updatePosition() {\n    const position =\n        this._overlayRef!.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    position\n      .withPositions([\n        {...origin.main, ...overlay.main},\n        {...origin.fallback, ...overlay.fallback}\n      ]);\n  }\n\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n   */\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let originPosition: OriginConnectionPosition;\n\n    if (position == 'above' || position == 'below') {\n      originPosition = {originX: 'center', originY: position == 'above' ? 'top' : 'bottom'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      originPosition = {originX: 'start', originY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      originPosition = {originX: 'end', originY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(originPosition.originX, originPosition.originY);\n\n    return {\n      main: originPosition,\n      fallback: {originX: x, originY: y}\n    };\n  }\n\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let overlayPosition: OverlayConnectionPosition;\n\n    if (position == 'above') {\n      overlayPosition = {overlayX: 'center', overlayY: 'bottom'};\n    } else if (position == 'below') {\n      overlayPosition = {overlayX: 'center', overlayY: 'top'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      overlayPosition = {overlayX: 'end', overlayY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      overlayPosition = {overlayX: 'start', overlayY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n\n    return {\n      main: overlayPosition,\n      fallback: {overlayX: x, overlayY: y}\n    };\n  }\n\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  private _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(\n        take(1),\n        takeUntil(this._destroyed)\n      ).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef!.updatePosition();\n        }\n      });\n    }\n  }\n\n  /** Updates the tooltip class */\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n\n  /** Inverts an overlay position. */\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {x, y};\n  }\n}\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTooltipAnimations.tooltipState],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n})\nexport class TooltipComponent {\n  /** Message to display in the tooltip */\n  message: string;\n\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId: number;\n\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId: number;\n\n  /** Property watched by the animation framework to show or hide the tooltip */\n  _visibility: TooltipVisibility = 'initial';\n\n  /** Whether interactions on the page should close the tooltip */\n  private _closeOnInteraction: boolean = false;\n\n  /** The transform origin used in the animation for showing and hiding the tooltip */\n  _transformOrigin: 'top' | 'bottom' | 'left' | 'right' = 'bottom';\n\n  /** Current position of the tooltip. */\n  private _position: TooltipPosition;\n\n  /** Subject for notifying that the tooltip has been hidden from the view */\n  private readonly _onHide: Subject<any> = new Subject();\n\n  /** Stream that emits whether the user has a handset-sized display.  */\n  _isHandset: Observable<BreakpointState> = this._breakpointObserver.observe(Breakpoints.Handset);\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _breakpointObserver: BreakpointObserver) {}\n\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param position Position of the tooltip.\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(position: TooltipPosition, delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._position = position;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n\n  /** Whether the tooltip is being displayed. */\n  isVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n\n  /** Sets the tooltip transform origin according to the position of the tooltip overlay. */\n  _setTransformOrigin(overlayPosition: ConnectionPositionPair, direction: Direction) {\n    const axis = (this._position === 'above' || this._position === 'below') ? 'Y' : 'X';\n    const position = axis == 'X' ? overlayPosition.overlayX : overlayPosition.overlayY;\n\n    if (position === 'top' || position === 'bottom') {\n      this._transformOrigin = position;\n    } else if (position === 'start') {\n      this._transformOrigin = direction === 'ltr' ? 'left' : 'right';\n    } else if (position === 'end') {\n      this._transformOrigin = direction === 'ltr' ? 'right' : 'left';\n    } else {\n      throw getMatTooltipInvalidPositionError(this._position);\n    }\n  }\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n\n  _animationDone(event: AnimationEvent): void {\n    const toState = event.toState as TooltipVisibility;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      this._closeOnInteraction = true;\n    }\n  }\n\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.google.com/components/tooltips.html#tooltips-interaction\n   */\n  _handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {END, ENTER, HOME, LEFT_ARROW, RIGHT_ARROW, SPACE} from '@angular/cdk/keycodes';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, mixinDisableRipple} from '@angular/material/core';\nimport {merge, of as observableOf, Subscription} from 'rxjs';\nimport {MatInkBar} from './ink-bar';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\n\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n// Boilerplate for applying mixins to MatTabHeader.\n/** @docs-private */\nexport class MatTabHeaderBase {}\nexport const _MatTabHeaderMixinBase = mixinDisableRipple(MatTabHeaderBase);\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n})\nexport class MatTabHeader extends _MatTabHeaderMixinBase\n    implements AfterContentChecked, AfterContentInit, OnDestroy, CanDisableRipple {\n\n  @ContentChildren(MatTabLabelWrapper) _labelWrappers: QueryList<MatTabLabelWrapper>;\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer') _tabListContainer: ElementRef;\n  @ViewChild('tabList') _tabList: ElementRef;\n\n  /** The tab index that is focused. */\n  private _focusIndex: number = 0;\n\n  /** The distance in pixels that the tab labels should be translated to the left. */\n  private _scrollDistance = 0;\n\n  /** Whether the header should scroll to the selected index after the view has been checked. */\n  private _selectedIndexChanged = false;\n\n  /** Combines listeners that will re-align the ink bar whenever they're invoked. */\n  private _realignInkBar = Subscription.EMPTY;\n\n  /** Whether the controls for pagination should be displayed */\n  _showPaginationControls = false;\n\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n  _disableScrollAfter = true;\n\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n  _disableScrollBefore = true;\n\n  /**\n   * The number of tab labels that are displayed on the header. When this changes, the header\n   * should re-evaluate the scroll position.\n   */\n  private _tabLabelCount: number;\n\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\n  private _scrollDistanceChanged: boolean;\n\n  private _selectedIndex: number = 0;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number { return this._selectedIndex; }\n  set selectedIndex(value: number) {\n    value = coerceNumberProperty(value);\n    this._selectedIndexChanged = this._selectedIndex != value;\n    this._selectedIndex = value;\n    this._focusIndex = value;\n  }\n\n  /** Event emitted when the option is selected. */\n  @Output() readonly selectFocusedIndex = new EventEmitter();\n\n  /** Event emitted when a label is focused. */\n  @Output() readonly indexFocused = new EventEmitter();\n\n  constructor(private _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler,\n              @Optional() private _dir: Directionality) {\n    super();\n  }\n\n  ngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._labelWrappers.length) {\n      this._updatePagination();\n      this._tabLabelCount = this._labelWrappers.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  _handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case RIGHT_ARROW:\n        this._focusNextTab();\n        break;\n      case LEFT_ARROW:\n        this._focusPreviousTab();\n        break;\n      case HOME:\n        this._focusFirstTab();\n        event.preventDefault();\n        break;\n      case END:\n        this._focusLastTab();\n        event.preventDefault();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        event.preventDefault();\n        break;\n    }\n  }\n\n  /**\n   * Aligns the ink bar to the selected tab on load.\n   */\n  ngAfterContentInit() {\n    const dirChange = this._dir ? this._dir.change : observableOf(null);\n    const resize = this._viewportRuler.change(150);\n    const realign = () => {\n      this._updatePagination();\n      this._alignInkBarToSelectedTab();\n    };\n\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\n    // This helps in cases where the user lands directly on a page with paginated tabs.\n    typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\n    this._realignInkBar = merge(dirChange, resize).subscribe(realign);\n  }\n\n  ngOnDestroy() {\n    this._realignInkBar.unsubscribe();\n  }\n\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   */\n  _onContentChanges() {\n    this._updatePagination();\n    this._alignInkBarToSelectedTab();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Updating the view whether pagination should be enabled or not\n   */\n  _updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n\n  /** When the focus index is set, we must manually send focus to the correct label */\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this._focusIndex == value) { return; }\n\n    this._focusIndex = value;\n    this.indexFocused.emit(value);\n    this._setTabFocus(value);\n  }\n\n  /** Tracks which element has focus; used for keyboard navigation */\n  get focusIndex(): number { return this._focusIndex; }\n\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   */\n  _isValidIndex(index: number): boolean {\n    if (!this._labelWrappers) { return true; }\n\n    const tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   */\n  _setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._labelWrappers && this._labelWrappers.length) {\n      this._labelWrappers.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const containerEl = this._tabListContainer.nativeElement;\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n\n  /**\n   * Moves the focus towards the beginning or the end of the list depending on the offset provided.\n   * Valid offsets are 1 and -1.\n   */\n  _moveFocus(offset: number) {\n    if (this._labelWrappers) {\n      const tabs: MatTabLabelWrapper[] = this._labelWrappers.toArray();\n\n      for (let i = this.focusIndex + offset; i < tabs.length && i >= 0; i += offset) {\n        if (this._isValidIndex(i)) {\n          this.focusIndex = i;\n          return;\n        }\n      }\n    }\n  }\n\n  /** Increment the focus index by 1 until a valid tab is found. */\n  _focusNextTab(): void {\n    this._moveFocus(this._getLayoutDirection() == 'ltr' ? 1 : -1);\n  }\n\n  /** Decrement the focus index by 1 until a valid tab is found. */\n  _focusPreviousTab(): void {\n    this._moveFocus(this._getLayoutDirection() == 'ltr' ? -1 : 1);\n  }\n\n  /** Focuses the first tab. */\n  private _focusFirstTab(): void {\n    for (let i = 0; i < this._labelWrappers.length; i++) {\n      if (this._isValidIndex(i)) {\n        this.focusIndex = i;\n        break;\n      }\n    }\n  }\n\n  /** Focuses the last tab. */\n  private _focusLastTab(): void {\n    for (let i = this._labelWrappers.length - 1; i > -1; i--) {\n      if (this._isValidIndex(i)) {\n        this.focusIndex = i;\n        break;\n      }\n    }\n  }\n\n  /** The layout direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n  _updateTabScrollPosition() {\n    const scrollDistance = this.scrollDistance;\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    this._tabList.nativeElement.style.transform = `translate3d(${translateX}px, 0, 0)`;\n  }\n\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n  get scrollDistance(): number { return this._scrollDistance; }\n  set scrollDistance(v: number) {\n    this._scrollDistance = Math.max(0, Math.min(this._getMaxScrollDistance(), v));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n  }\n\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollHeader(scrollDir: ScrollDirection) {\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    this.scrollDistance += (scrollDir == 'before' ? -1 : 1) * viewLength / 3;\n  }\n\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollToLabel(labelIndex: number) {\n    const selectedLabel = this._labelWrappers ? this._labelWrappers.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    let labelBeforePos: number, labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = selectedLabel.getOffsetLeft();\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n    }\n\n    const beforeVisiblePos = this.scrollDistance;\n    const afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkPaginationEnabled() {\n    const isEnabled =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!isEnabled) {\n      this.scrollDistance = 0;\n    }\n\n    if (isEnabled !== this._showPaginationControls) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._showPaginationControls = isEnabled;\n  }\n\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _getMaxScrollDistance(): number {\n    const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return (lengthOfTabList - viewLength) || 0;\n  }\n\n  /** Tells the ink-bar to align itself to the current label wrapper */\n  _alignInkBarToSelectedTab(): void {\n    const selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length ?\n        this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement :\n        null;\n\n    this._inkBar.alignToElement(selectedLabelWrapper);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisableRipple,\n  mixinColor,\n  mixinDisableRipple,\n  ThemePalette\n} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatTab} from './tab';\nimport {MatTabHeader} from './tab-header';\n\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class MatTabChangeEvent {\n  /** Index of the currently-selected tab. */\n  index: number;\n  /** Reference to the currently-selected tab. */\n  tab: MatTab;\n}\n\n/** Possible positions for the tab header. */\nexport type MatTabHeaderPosition = 'above' | 'below';\n\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nexport class MatTabGroupBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabGroupMixinBase = mixinColor(mixinDisableRipple(MatTabGroupBase), 'primary');\n\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://material.io/design/components/tabs.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-group',\n  exportAs: 'matTabGroup',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color', 'disableRipple'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  },\n})\nexport class MatTabGroup extends _MatTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\n\n  @ContentChildren(MatTab) _tabs: QueryList<MatTab>;\n\n  @ViewChild('tabBodyWrapper') _tabBodyWrapper: ElementRef;\n\n  @ViewChild('tabHeader') _tabHeader: MatTabHeader;\n\n  /** The tab index that should be selected after the content has been checked. */\n  private _indexToSelect: number | null = 0;\n\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n  private _tabBodyWrapperHeight: number = 0;\n\n  /** Subscription to tabs being added/removed. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the tab labels. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  @Input()\n  get dynamicHeight(): boolean { return this._dynamicHeight; }\n  set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n  private _dynamicHeight: boolean = false;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number | null { return this._selectedIndex; }\n  set selectedIndex(value: number | null) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  private _selectedIndex: number | null = null;\n\n  /** Position of the tab header. */\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\n\n  /** Background color of the tab group. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when focus has changed within a tab group. */\n  @Output() readonly focusChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>();\n\n  /** Event emitted when the body animation has completed */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() readonly selectedTabChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>(true);\n\n  private _groupId: number;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super(elementRef);\n    this._groupId = nextId++;\n  }\n\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   */\n  ngAfterContentChecked() {\n    // Clamp the next selected index to the boundsof 0 and the tabs length.\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    let indexToSelect = this._indexToSelect =\n        Math.min(this._tabs.length - 1, Math.max(this._indexToSelect || 0, 0));\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect && this._selectedIndex != null) {\n      const tabChangeEvent = this._createChangeEvent(indexToSelect);\n      this.selectedTabChange.emit(tabChangeEvent);\n      // Emitting this value after change detection has run\n      // since the checked content may contain this variable'\n      Promise.resolve().then(() => this.selectedIndexChange.emit(indexToSelect));\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MatTab, index: number) => {\n      tab.position = index - indexToSelect;\n      tab.isActive = index === indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy() {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  /** Re-aligns the ink bar to the selected tab element. */\n  realignInkBar() {\n    if (this._tabHeader) {\n      this._tabHeader._alignInkBarToSelectedTab();\n    }\n  }\n\n  _focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): MatTabChangeEvent {\n    const event = new MatTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(\n        ...this._tabs.map(tab => tab._disableChange),\n        ...this._tabs.map(tab => tab._labelChange)).subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   */\n  _setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\n\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n\n  /** Removes the height of the tab body wrapper. */\n  _removeTabBodyWrapperHeight(): void {\n    this._tabBodyWrapperHeight = this._tabBodyWrapper.nativeElement.clientHeight;\n    this._tabBodyWrapper.nativeElement.style.height = '';\n    this.animationDone.emit();\n  }\n\n  /** Handle click events, setting new selected index if appropriate. */\n  _handleClick(tab: MatTab, tabHeader: MatTabHeader, idx: number) {\n    if (!tab.disabled) {\n      this.selectedIndex = tabHeader.focusIndex = idx;\n    }\n  }\n\n  /** Retrieves the tabindex for the tab. */\n  _getTabIndex(tab: MatTab, idx: number): number | null {\n    if (tab.disabled) {\n      return null;\n    }\n    return this.selectedIndex === idx ? 0 : -1;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex, RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, of as observableOf, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from '../ink-bar';\n\n\n// Boilerplate for applying mixins to MatTabNav.\n/** @docs-private */\nexport class MatTabNavBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabNavMixinBase = mixinDisableRipple(mixinColor(MatTabNavBase, 'primary'));\n\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-tab-nav-bar]',\n  exportAs: 'matTabNavBar, matTabNav',\n  inputs: ['color', 'disableRipple'],\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {'class': 'mat-tab-nav-bar'},\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTabNav extends _MatTabNavMixinBase implements AfterContentInit, CanColor,\n    CanDisableRipple, OnDestroy {\n\n  /** Subject that emits when the component has been destroyed. */\n  private readonly _onDestroy = new Subject<void>();\n\n  private _activeLinkChanged: boolean;\n  private _activeLinkElement: ElementRef | null;\n\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n\n  /** Query list of all tab links of the tab navigation. */\n  @ContentChildren(forwardRef(() => MatTabLink), {descendants: true})\n  _tabLinks: QueryList<MatTabLink>;\n\n  /** Background color of the tab nav. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  constructor(elementRef: ElementRef,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler) {\n    super(elementRef);\n  }\n\n  /**\n   * Notifies the component that the active link has been changed.\n   * @deletion-target 7.0.0 `element` parameter to be removed.\n   */\n  updateActiveLink(element: ElementRef) {\n    // Note: keeping the `element` for backwards-compat, but isn't being used for anything.\n    // @deletion-target 7.0.0\n    this._activeLinkChanged = !!element;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  ngAfterContentInit(): void {\n    this._ngZone.runOutsideAngular(() => {\n      const dirChange = this._dir ? this._dir.change : observableOf(null);\n\n      return merge(dirChange, this._viewportRuler.change(10))\n          .pipe(takeUntil(this._onDestroy))\n          .subscribe(() => this._alignInkBar());\n    });\n  }\n\n  /** Checks if the active link has been changed and, if so, will update the ink bar. */\n  ngAfterContentChecked(): void {\n    if (this._activeLinkChanged) {\n      const activeTab = this._tabLinks.find(tab => tab.active);\n\n      this._activeLinkElement = activeTab ? activeTab._elementRef : null;\n      this._alignInkBar();\n      this._activeLinkChanged = false;\n    }\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /** Aligns the ink bar to the active link. */\n  _alignInkBar(): void {\n    if (this._activeLinkElement) {\n      this._inkBar.show();\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n    } else {\n      this._inkBar.hide();\n    }\n  }\n}\n\n\n// Boilerplate for applying mixins to MatTabLink.\nexport class MatTabLinkBase {}\nexport const _MatTabLinkMixinBase =\n  mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkBase)));\n\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\n@Directive({\n  selector: '[mat-tab-link], [matTabLink]',\n  exportAs: 'matTabLink',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'class': 'mat-tab-link',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.tabIndex]': 'tabIndex',\n    '[class.mat-tab-disabled]': 'disabled',\n    '[class.mat-tab-label-active]': 'active',\n    '(click)': '_handleClick($event)'\n  }\n})\nexport class MatTabLink extends _MatTabLinkMixinBase\n    implements OnDestroy, CanDisable, CanDisableRipple, HasTabIndex, RippleTarget {\n\n  /** Whether the tab link is active or not. */\n  protected _isActive: boolean = false;\n\n  /** Reference to the RippleRenderer for the tab-link. */\n  protected _tabLinkRipple: RippleRenderer;\n\n  /** Whether the link is active. */\n  @Input()\n  get active(): boolean { return this._isActive; }\n  set active(value: boolean) {\n    if (value !== this._isActive) {\n      this._isActive = value;\n      this._tabNavBar.updateActiveLink(this._elementRef);\n    }\n  }\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._tabNavBar.disableRipple;\n  }\n\n  constructor(private _tabNavBar: MatTabNav,\n              public _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Attribute('tabindex') tabIndex: string) {\n    super();\n\n    this._tabLinkRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._tabLinkRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    if (globalOptions) {\n      this.rippleConfig = {\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n        speedFactor: globalOptions.baseSpeedFactor,\n        animation: globalOptions.animation,\n      };\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabLinkRipple._removeTriggerEvents();\n  }\n\n  /**\n   * Handles the click event, preventing default navigation if the tab link is disabled.\n   */\n  _handleClick(event: MouseEvent) {\n    if (this.disabled) {\n      event.preventDefault();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatInkBar} from './ink-bar';\nimport {MatTab} from './tab';\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\nimport {MatTabContent} from './tab-content';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTabLink, MatTabNav} from './tab-nav-bar/tab-nav-bar';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MatCommonModule,\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatTabNav,\n    MatTabLink,\n    MatTabContent,\n  ],\n  declarations: [\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatInkBar,\n    MatTabLabelWrapper,\n    MatTabNav,\n    MatTabLink,\n    MatTabBody,\n    MatTabBodyPortal,\n    MatTabHeader,\n    MatTabContent,\n  ],\n})\nexport class MatTabsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  isDevMode,\n  QueryList,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\n\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nexport class MatToolbarBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatToolbarMixinBase = mixinColor(MatToolbarBase);\n\n@Directive({\n  selector: 'mat-toolbar-row',\n  exportAs: 'matToolbarRow',\n  host: {'class': 'mat-toolbar-row'},\n})\nexport class MatToolbarRow {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-toolbar',\n  exportAs: 'matToolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    '[class.mat-toolbar-multiple-rows]': 'this._toolbarRows.length',\n    '[class.mat-toolbar-single-row]': '!this._toolbarRows.length'\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\n  private _document: Document;\n\n  /** Reference to all toolbar row elements that have been projected. */\n  @ContentChildren(MatToolbarRow) _toolbarRows: QueryList<MatToolbarRow>;\n\n  constructor(\n    elementRef: ElementRef,\n    private _platform: Platform,\n    @Inject(DOCUMENT) document?: any) {\n    super(elementRef);\n\n    // TODO: make the document a required param when doing breaking changes.\n    this._document = document;\n  }\n\n  ngAfterViewInit() {\n    if (!isDevMode() || !this._platform.isBrowser) {\n      return;\n    }\n\n    this._checkToolbarMixedModes();\n    this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n  }\n\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   */\n  private _checkToolbarMixedModes() {\n    if (!this._toolbarRows.length) {\n      return;\n    }\n\n    // Check if there are any other DOM nodes that can display content but aren't inside of\n    // a <mat-toolbar-row> element.\n    const isCombinedUsage = [].slice.call(this._elementRef.nativeElement.childNodes)\n      .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n      .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\n      .some(node => node.textContent.trim());\n\n    if (isCombinedUsage) {\n      throwToolbarMixedModesError();\n    }\n  }\n}\n\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport function throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n    'inside of a `<mat-toolbar>` for a single row.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatToolbar, MatToolbarRow} from './toolbar';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n  declarations: [MatToolbar, MatToolbarRow],\n})\nexport class MatToolbarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodeOutlet} from '@angular/cdk/tree';\nimport {\n  Directive,\n  ViewContainerRef,\n} from '@angular/core';\n\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n@Directive({\n  selector: '[matTreeNodeOutlet]'\n})\nexport class MatTreeNodeOutlet implements CdkTreeNodeOutlet {\n  constructor(public viewContainer: ViewContainerRef) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Attribute,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Input,\n  IterableDiffers,\n  QueryList\n} from '@angular/core';\nimport {\n  CdkNestedTreeNode,\n  CdkTree,\n  CdkTreeNodeDef,\n  CdkTreeNode,\n} from '@angular/cdk/tree';\nimport {MatTreeNodeOutlet} from './outlet';\nimport {mixinTabIndex, mixinDisabled, CanDisable, HasTabIndex} from '@angular/material/core';\n\n\nexport const _MatTreeNodeMixinBase = mixinTabIndex(mixinDisabled(CdkTreeNode));\nexport const _MatNestedTreeNodeMixinBase = mixinTabIndex(mixinDisabled(CdkNestedTreeNode));\n\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n@Directive({\n  selector: 'mat-tree-node',\n  exportAs: 'matTreeNode',\n  inputs: ['disabled', 'tabIndex'],\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n    '[attr.role]': 'role',\n    'class': 'mat-tree-node'\n  },\n  providers: [{provide: CdkTreeNode, useExisting: MatTreeNode}]\n})\nexport class MatTreeNode<T> extends _MatTreeNodeMixinBase<T> implements HasTabIndex, CanDisable {\n  @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n  constructor(protected _elementRef: ElementRef,\n              protected _tree: CdkTree<T>,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n}\n\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeDef]',\n  inputs: [\n    'when: matTreeNodeDefWhen'\n  ],\n  providers: [{provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef}]\n})\nexport class MatTreeNodeDef<T> extends CdkTreeNodeDef<T> {\n  @Input('matTreeNode') data: T;\n}\n\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\n@Directive({\n  selector: 'mat-nested-tree-node',\n  exportAs: 'matNestedTreeNode',\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.role]': 'role',\n    'class': 'mat-nested-tree-node',\n  },\n  inputs: ['disabled', 'tabIndex'],\n  providers: [\n    {provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CdkTreeNode, useExisting: MatNestedTreeNode}\n  ]\n})\nexport class MatNestedTreeNode<T> extends _MatNestedTreeNodeMixinBase<T>\n    implements HasTabIndex, CanDisable {\n\n  @Input('matNestedTreeNode') node: T;\n\n  @ContentChildren(MatTreeNodeOutlet) nodeOutlet: QueryList<MatTreeNodeOutlet>;\n\n  constructor(protected _elementRef: ElementRef,\n              protected _tree: CdkTree<T>,\n              protected _differs: IterableDiffers,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree, _differs);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n\n  // This is a workaround for https://github.com/angular/angular/issues/23091\n  // In aot mode, the lifecycle hooks from parent class are not called.\n  // TODO(tinayuangao): Remove when the angular issue #23091 is fixed\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodePadding} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodePadding]',\n  providers: [{provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding}]\n})\nexport class MatTreeNodePadding<T> extends CdkTreeNodePadding<T> {\n\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n  @Input('matTreeNodePadding') level: number;\n\n  /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n  @Input('matTreeNodePaddingIndent') indent: number;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, ViewChild, ViewEncapsulation} from '@angular/core';\nimport {CdkTree} from '@angular/cdk/tree';\nimport {MatTreeNodeOutlet} from './outlet';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tree',\n  exportAs: 'matTree',\n  template: `<ng-container matTreeNodeOutlet></ng-container>`,\n  host: {\n    'class': 'mat-tree',\n    'role': 'tree',\n  },\n  styleUrls: ['tree.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [{provide: CdkTree, useExisting: MatTree}]\n})\nexport class MatTree<T> extends CdkTree<T> {\n  // Outlets within the tree's template where the dataNodes will be inserted.\n  @ViewChild(MatTreeNodeOutlet) _nodeOutlet: MatTreeNodeOutlet;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\nimport {CdkTreeNodeToggle} from '@angular/cdk/tree';\n\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeToggle]',\n  host: {\n    '(click)': '_toggle($event)',\n  },\n  providers: [{provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle}]\n})\nexport class MatTreeNodeToggle<T> extends CdkTreeNodeToggle<T> {\n  @Input('matTreeNodeToggleRecursive') recursive: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatNestedTreeNode, MatTreeNodeDef, MatTreeNode} from './node';\nimport {MatTree} from './tree';\nimport {MatTreeNodeToggle} from './toggle';\nimport {MatTreeNodeOutlet} from './outlet';\nimport {MatTreeNodePadding} from './padding';\n\nconst MAT_TREE_DIRECTIVES = [\n  MatNestedTreeNode,\n  MatTreeNodeDef,\n  MatTreeNodePadding,\n  MatTreeNodeToggle,\n  MatTree,\n  MatTreeNode,\n  MatTreeNodeOutlet\n];\n\n@NgModule({\n  imports: [CdkTreeModule, CommonModule, MatCommonModule],\n  exports: MAT_TREE_DIRECTIVES,\n  declarations: MAT_TREE_DIRECTIVES,\n})\nexport class MatTreeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {FlatTreeControl, TreeControl} from '@angular/cdk/tree';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map, take} from 'rxjs/operators';\n\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class MatTreeFlattener<T, F> {\n\n  constructor(public transformFunction: (node: T, level: number) => F,\n              public getLevel: (node: F) => number,\n              public isExpandable: (node: F) => boolean,\n              public getChildren: (node: T) => Observable<T[]>) {}\n\n  _flattenNode(node: T, level: number,\n               resultNodes: F[], parentMap: boolean[]): F[] {\n    const flatNode = this.transformFunction(node, level);\n    resultNodes.push(flatNode);\n\n    if (this.isExpandable(flatNode)) {\n      this.getChildren(node).pipe(take(1)).subscribe(children => {\n        children.forEach((child, index) => {\n          let childParentMap: boolean[] = parentMap.slice();\n          childParentMap.push(index != children.length - 1);\n          this._flattenNode(child, level + 1, resultNodes, childParentMap);\n        });\n      });\n    }\n    return resultNodes;\n  }\n\n  /**\n   * Flatten a list of node type T to flattened version of node F.\n   * Please note that type T may be nested, and the length of `structuredData` may be different\n   * from that of returned list `F[]`.\n   */\n  flattenNodes(structuredData: T[]): F[] {\n    let resultNodes: F[] = [];\n    structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n    return resultNodes;\n  }\n\n  /**\n   * Expand flattened node with current expansion status.\n   * The returned list may have different length.\n   */\n  expandFlattenedNodes(nodes: F[], treeControl: TreeControl<F>): F[] {\n    let results: F[] = [];\n    let currentExpand: boolean[] = [];\n    currentExpand[0] = true;\n\n    nodes.forEach((node) => {\n      let expand = true;\n      for (let i = 0; i <= this.getLevel(node); i++) {\n        expand = expand && currentExpand[i];\n      }\n      if (expand) {\n        results.push(node);\n      }\n      if (this.isExpandable(node)) {\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n      }\n    });\n    return results;\n  }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\nexport class MatTreeFlatDataSource<T, F> extends DataSource<F> {\n  _flattenedData = new BehaviorSubject<F[]>([]);\n\n  _expandedData = new BehaviorSubject<F[]>([]);\n\n  _data: BehaviorSubject<T[]>;\n  get data() { return this._data.value; }\n  set data(value: T[]) {\n    this._data.next(value);\n    this._flattenedData.next(this.treeFlattener.flattenNodes(this.data));\n    this.treeControl.dataNodes = this._flattenedData.value;\n  }\n\n  constructor(private treeControl: FlatTreeControl<F>,\n              private treeFlattener: MatTreeFlattener<T, F>,\n              initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n  }\n\n  connect(collectionViewer: CollectionViewer): Observable<F[]> {\n    const changes = [\n      collectionViewer.viewChange,\n      this.treeControl.expansionModel.onChange!,\n      this._flattenedData\n    ];\n    return merge(...changes).pipe(map(() => {\n      this._expandedData.next(\n        this.treeFlattener.expandFlattenedNodes(this._flattenedData.value, this.treeControl));\n      return this._expandedData.value;\n    }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nexport class MatTreeNestedDataSource<T> extends DataSource<T> {\n  _data = new BehaviorSubject<T[]>([]);\n\n  /**\n   * Data for the nested treee\n   */\n  get data() { return this._data.value; }\n  set data(value: T[]) { this._data.next(value); }\n\n  connect(collectionViewer: CollectionViewer): Observable<T[]> {\n    return merge(...[collectionViewer.viewChange, this._data])\n      .pipe(map(() => {\n        return this.data;\n      }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n\n/** Current version of Angular Material. */\nexport const VERSION = new Version('6.0.2');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n  ViewportRuler,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {filter, take, switchMap, delay, tap} from 'rxjs/operators';\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  MatOption,\n  MatOptionSelectionChange,\n} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {Subscription, defer, fromEvent, merge, of as observableOf, Subject, Observable} from 'rxjs';\nimport {MatAutocomplete} from './autocomplete';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy', {\n      providedIn: 'root',\n      factory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(): () => ScrollStrategy {\n  const overlay = inject(Overlay);\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n@Directive({\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    'role': 'combobox',\n    'autocomplete': 'off',\n    'aria-autocomplete': 'list',\n    '[attr.aria-activedescendant]': 'activeOption?.id',\n    '[attr.aria-expanded]': 'panelOpen.toString()',\n    '[attr.aria-owns]': 'autocomplete?.id',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  exportAs: 'matAutocompleteTrigger',\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MatAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal;\n  private _componentDestroyed = false;\n\n  /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n  private _previousValue: string | number | null;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: FlexibleConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Subscription to viewport size changes. */\n  private _viewportSubscription = Subscription.EMPTY;\n\n  /** Stream of keyboard events that can close the panel. */\n  private readonly _closeKeyEventStream = new Subject<void>();\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when autocomplete has been touched` */\n  _onTouched = () => {};\n\n  /** The autocomplete panel to be attached to this trigger. */\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\n\n  constructor(private _element: ElementRef, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _formField: MatFormField,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @deletion-target 7.0.0 Make `_viewportRuler` required.\n              private _viewportRuler?: ViewportRuler) {}\n\n  ngOnDestroy() {\n    this._viewportSubscription.unsubscribe();\n    this._componentDestroyed = true;\n    this._destroyPanel();\n    this._closeKeyEventStream.complete();\n  }\n\n  /** Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean {\n    return this._overlayAttached && this.autocomplete.showPanel;\n  }\n  private _overlayAttached: boolean = false;\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (!this._overlayAttached) {\n      return;\n    }\n\n    if (this.panelOpen) {\n      // Only emit if the panel was visible.\n      this.autocomplete.closed.emit();\n    }\n\n    this.autocomplete._isOpen = this._overlayAttached = false;\n\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n      this._closingActionsSubscription.unsubscribe();\n    }\n\n    // Note that in some cases this can end up being called after the component is destroyed.\n    // Add a check to ensure that we don't try to run change detection on a destroyed view.\n    if (!this._componentDestroyed) {\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MatOptionSelectionChange> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)),\n      this._closeKeyEventStream,\n      this._outsideClickStream,\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\n          observableOf()\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  readonly optionSelections: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.autocomplete && this.autocomplete.options) {\n     return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n    }\n\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n    // Return a stream that we'll replace with the real one once everything is in place.\n    return this._zone.onStable\n        .asObservable()\n        .pipe(take(1), switchMap(() => this.optionSelections));\n  });\n\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private get _outsideClickStream(): Observable<any> {\n    if (!this._document) {\n      return observableOf(null);\n    }\n\n    return merge(\n      fromEvent(this._document, 'click'),\n      fromEvent(this._document, 'touchend')\n    )\n    .pipe(filter((event: MouseEvent | TouchEvent) => {\n      const clickTarget = event.target as HTMLElement;\n      const formField = this._formField ?\n          this._formField._elementRef.nativeElement : null;\n\n      return this._overlayAttached &&\n              clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    // Prevent the default action on all escape key presses. This is here primarily to bring IE\n    // in line with other browsers. By default, pressing escape on IE will cause it to revert\n    // the input value to the one that it had on focus, however it won't dispatch any events\n    // which means that the model value will be out of sync with the view.\n    if (keyCode === ESCAPE) {\n      event.preventDefault();\n    }\n\n    // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n    // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n    if (this.panelOpen && (keyCode === ESCAPE || (keyCode === UP_ARROW && event.altKey))) {\n      this._resetActiveItem();\n      this._closeKeyEventStream.next();\n      event.stopPropagation();\n    } else if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._canOpen()) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    let target = event.target as HTMLInputElement;\n    let value: number | string | null = target.value;\n\n    // Based on `NumberValueAccessor` from forms.\n    if (target.type === 'number') {\n      value = value == '' ? null : parseFloat(value);\n    }\n\n    // If the input has a placeholder, IE will fire the `input` event on page load,\n    // focus and blur, in addition to when the user actually changed the value. To\n    // filter out all of the extra events, we save the value on focus and between\n    // `input` events, and we check whether it changed.\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\n    if (this._canOpen() && this._previousValue !== value &&\n      document.activeElement === event.target) {\n      this._previousValue = value;\n      this._onChange(value);\n      this.openPanel();\n    }\n  }\n\n  _handleFocus(): void {\n    if (this._canOpen()) {\n      this._previousValue = this._element.nativeElement.value;\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n    const index = this.autocomplete._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(index,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n\n    const newScrollPosition = _getOptionScrollPosition(\n      index + labelCount,\n      AUTOCOMPLETE_OPTION_HEIGHT,\n      this.autocomplete._getScrollTop(),\n      AUTOCOMPLETE_PANEL_HEIGHT\n    );\n\n    this.autocomplete._setScrollTop(newScrollPosition);\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() => this._positionStrategy.reapplyLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n      .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n          this._resetActiveItem();\n          this.autocomplete._setVisibility();\n          return this.panelClosingActions;\n        }),\n        // when the first closing event occurs...\n        take(1)\n      )\n      // set the value, close the panel, and complete.\n      .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n      this.autocomplete.displayWith(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n  }\n\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      this._overlayRef = this._overlay.create(this._getOverlayConfig());\n\n      if (this._viewportRuler) {\n        this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n          if (this.panelOpen && this._overlayRef) {\n            this._overlayRef.updateSize({width: this._getHostWidth()});\n          }\n        });\n      }\n    } else {\n      // Update the panel width and direction, in case anything has changed.\n      this._overlayRef.updateSize({width: this._getHostWidth()});\n      this._overlayRef.setDirection(this._getDirection());\n    }\n\n    if (this._overlayRef && !this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    const wasOpen = this.panelOpen;\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._overlayAttached = true;\n\n    // We need to do an extra `panelOpen` check in here, because the\n    // autocomplete won't be shown if there are no options.\n    if (this.panelOpen && wasOpen !== this.panelOpen) {\n      this.autocomplete.opened.emit();\n    }\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getHostWidth(),\n      direction: this._getDirection()\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy = this._overlay.position()\n      .flexibleConnectedTo(this._getConnectedElement())\n      .withFlexibleDimensions(false)\n      .withPush(false)\n      .withPositions([\n        {originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'top'},\n        {originX: 'start', originY: 'top', overlayX: 'start', overlayY: 'bottom'}\n      ]);\n\n    return this._positionStrategy;\n  }\n\n  private _getDirection() {\n    return this._dir ? this._dir.value : 'ltr';\n  }\n\n  private _getConnectedElement(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /**\n   * Resets the active item to -1 so arrow events will activate the\n   * correct options, or to 0 if the consumer opted into it.\n   */\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n  }\n\n  /** Determines whether the panel can be opened. */\n  private _canOpen(): boolean {\n    const element: HTMLInputElement = this._element.nativeElement;\n    return !element.readOnly && !element.disabled;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n */\nexport const JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8,\n    OCT = 9, NOV = 10, DEC = 11;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  animateChild,\n  group,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/** Animations used by the Material expansion panel. */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly expansionHeaderHeight: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel header height. */\n  expansionHeaderHeight: trigger('expansionHeight', [\n    state('collapsed', style({\n      height: '{{collapsedHeight}}',\n    }), {\n      params: {collapsedHeight: '48px'},\n    }),\n    state('expanded', style({\n      height: '{{expandedHeight}}'\n    }), {\n      params: {expandedHeight: '64px'}\n    }),\n    transition('expanded <=> collapsed', group([\n      query('@indicatorRotate', animateChild(), {optional: true}),\n      animate(EXPANSION_PANEL_ANIMATION_TIMING),\n    ])),\n  ]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  TemplateRef,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperIntl} from './stepper-intl';\nimport {MatStepperIconContext} from './stepper-icon';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step-header',\n  templateUrl: 'step-header.html',\n  styleUrls: ['step-header.css'],\n  host: {\n    'class': 'mat-step-header',\n    'role': 'tab',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStepHeader implements OnDestroy {\n  private _intlSubscription: Subscription;\n\n  /** State of the given step. */\n  @Input() state: string;\n\n  /** Label of the given step. */\n  @Input() label: MatStepLabel | string;\n\n  /** Overrides for the header icons, passed in via the stepper. */\n  @Input() iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>};\n\n  /** Index of the given step. */\n  @Input() index: number;\n\n  /** Whether the given step is selected. */\n  @Input() selected: boolean;\n\n  /** Whether the given step label is active. */\n  @Input() active: boolean;\n\n  /** Whether the given step is optional. */\n  @Input() optional: boolean;\n\n  constructor(\n    public _intl: MatStepperIntl,\n    private _focusMonitor: FocusMonitor,\n    private _element: ElementRef,\n    changeDetectorRef: ChangeDetectorRef) {\n    _focusMonitor.monitor(_element.nativeElement, true);\n    this._intlSubscription = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnDestroy() {\n    this._intlSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\n\n  /** Returns string label of given step if it is a text label. */\n  _stringLabel(): string | null {\n    return this.label instanceof MatStepLabel ? null : this.label;\n  }\n\n  /** Returns MatStepLabel if the label of given step is a template label. */\n  _templateLabel(): MatStepLabel | null {\n    return this.label instanceof MatStepLabel ? this.label : null;\n  }\n\n  /** Returns the host HTML element. */\n  _getHostElement() {\n    return this._element.nativeElement;\n  }\n\n  /** Template context variables that are exposed to the `matStepperIcon` instances. */\n  _getIconContext(): MatStepperIconContext {\n    return {\n      index: this.index,\n      active: this.active,\n      optional: this.optional\n    };\n  }\n\n  focus() {\n    this._getHostElement().focus();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material steppers. */\nexport const matStepperAnimations: {\n  readonly horizontalStepTransition: AnimationTriggerMetadata;\n  readonly verticalStepTransition: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions the step along the X axis in a horizontal stepper. */\n  horizontalStepTransition: trigger('stepTransition', [\n    state('previous', style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'})),\n    state('current', style({transform: 'none', visibility: 'visible'})),\n    state('next', style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'})),\n    transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n  ]),\n\n  /** Animation that transitions the step along the Y axis in a vertical stepper. */\n  verticalStepTransition: trigger('stepTransition', [\n    state('previous', style({height: '0px', visibility: 'hidden'})),\n    state('next', style({height: '0px', visibility: 'hidden'})),\n    state('current', style({height: '*', visibility: 'visible'})),\n    transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, TemplateRef} from '@angular/core';\n\n/** Template context available to an attached `matStepperIcon`. */\nexport interface MatStepperIconContext {\n  /** Index of the step. */\n  index: number;\n  /** Whether the step is currently active. */\n  active: boolean;\n  /** Whether the step is optional. */\n  optional: boolean;\n}\n\n/**\n * Template to be used to override the icons inside the step header.\n */\n@Directive({\n  selector: 'ng-template[matStepperIcon]',\n})\nexport class MatStepperIcon {\n  /** Name of the icon to be overridden. */\n  @Input('matStepperIcon') name: 'edit' | 'done' | 'number';\n\n  constructor(public templateRef: TemplateRef<MatStepperIconContext>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {CdkStep, CdkStepper, StepContentPositionState} from '@angular/cdk/stepper';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Optional,\n  Output,\n  QueryList,\n  SkipSelf,\n  TemplateRef,\n  ViewChildren,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {takeUntil} from 'rxjs/operators';\nimport {matStepperAnimations} from './stepper-animations';\nimport {MatStepperIcon, MatStepperIconContext} from './stepper-icon';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step',\n  templateUrl: 'step.html',\n  providers: [{provide: ErrorStateMatcher, useExisting: MatStep}],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matStep',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStep extends CdkStep implements ErrorStateMatcher {\n  /** Content for step label given by `<ng-template matStepLabel>`. */\n  @ContentChild(MatStepLabel) stepLabel: MatStepLabel;\n\n  constructor(@Inject(forwardRef(() => MatStepper)) stepper: MatStepper,\n              @SkipSelf() private _errorStateMatcher: ErrorStateMatcher) {\n    super(stepper);\n  }\n\n  /** Custom error state matcher that additionally checks for validity of interacted form. */\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n\n    // Custom error state checks for the validity of form that is not submitted or touched\n    // since user can trigger a form change by calling for another step without directly\n    // interacting with the current form.\n    const customErrorState = !!(control && control.invalid && this.interacted);\n\n    return originalErrorState || customErrorState;\n  }\n}\n\n\n@Directive({\n  selector: '[matStepper]'\n})\nexport class MatStepper extends CdkStepper implements AfterContentInit {\n  /** The list of step headers of the steps in the stepper. */\n  @ViewChildren(MatStepHeader) _stepHeader: QueryList<MatStepHeader>;\n\n  /** Steps that the stepper holds. */\n  @ContentChildren(MatStep) _steps: QueryList<MatStep>;\n\n  /** Custom icon overrides passed in by the consumer. */\n  @ContentChildren(MatStepperIcon) _icons: QueryList<MatStepperIcon>;\n\n  /** Event emitted when the current step is done transitioning in. */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Consumer-specified template-refs to be used to override the header icons. */\n  _iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>} = {};\n\n  ngAfterContentInit() {\n    const icons = this._icons.toArray();\n\n    ['edit', 'done', 'number'].forEach(name => {\n      const override = icons.find(icon => icon.name === name);\n\n      if (override) {\n        this._iconOverrides[name] = override.templateRef;\n      }\n    });\n\n    // Mark the component for change detection whenever the content children query changes\n    this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this._stateChanged());\n  }\n\n  _animationDone(event: AnimationEvent) {\n    if ((event.toState as StepContentPositionState) === 'current') {\n      this.animationDone.emit();\n    }\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-horizontal-stepper',\n  exportAs: 'matHorizontalStepper',\n  templateUrl: 'stepper-horizontal.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-horizontal',\n    'aria-orientation': 'horizontal',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.horizontalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatHorizontalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatHorizontalStepper extends MatStepper { }\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-vertical-stepper',\n  exportAs: 'matVerticalStepper',\n  templateUrl: 'stepper-vertical.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-vertical',\n    'aria-orientation': 'vertical',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.verticalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatVerticalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatVerticalStepper extends MatStepper {\n  constructor(@Optional() dir: Directionality, changeDetectorRef: ChangeDetectorRef) {\n    super(dir, changeDetectorRef);\n    this._orientation = 'vertical';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepper, CdkStepperNext, CdkStepperPrevious} from '@angular/cdk/stepper';\nimport {MatStepper} from './stepper';\n\n/** Button that moves to the next step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperNext]',\n  host: {\n    '(click)': '_stepper.next()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperNext extends CdkStepperNext {}\n\n/** Button that moves to the previous step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperPrevious]',\n  host: {\n    '(click)': '_stepper.previous()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperPrevious extends CdkStepperPrevious {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {ErrorStateMatcher, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {MatHorizontalStepper, MatStep, MatStepper, MatVerticalStepper} from './stepper';\nimport {MatStepperNext, MatStepperPrevious} from './stepper-button';\nimport {MatStepperIcon} from './stepper-icon';\nimport {MatStepperIntl} from './stepper-intl';\n\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    CommonModule,\n    PortalModule,\n    MatButtonModule,\n    CdkStepperModule,\n    MatIconModule,\n    MatRippleModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  declarations: [\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  providers: [MatStepperIntl, ErrorStateMatcher],\n})\nexport class MatStepperModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  IterableDiffers,\n  ViewEncapsulation\n} from '@angular/core';\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-table, table[mat-table]',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTable<T> extends CdkTable<T> {\n  // TODO(andrewseguin): Remove this explicitly set constructor when the compiler knows how to\n  // properly build the es6 version of the class. Currently sets ctorParameters to empty due to a\n  // fixed bug.\n  // https://github.com/angular/tsickle/pull/760 - tsickle PR that fixed this\n  // https://github.com/angular/angular/pull/23531 - updates compiler-cli to fixed version\n  constructor(protected _differs: IterableDiffers,\n              protected _changeDetectorRef: ChangeDetectorRef,\n              protected _elementRef: ElementRef,\n              @Attribute('role') role: string) {\n    super(_differs, _changeDetectorRef, _elementRef, role);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Input, TemplateRef} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef, CdkFooterCell, CdkFooterCellDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\n})\nexport class MatCellDef extends CdkCellDef {\n  // TODO(andrewseguin): Remove this constructor after compiler-cli is updated; see issue #9329\n  constructor(/** @docs-private */ public template: TemplateRef<any>) {\n    super(template);\n  }\n}\n\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\n})\nexport class MatHeaderCellDef extends CdkHeaderCellDef {\n  // TODO(andrewseguin): Remove this constructor after compiler-cli is updated; see issue #9329\n  constructor(/** @docs-private */ public template: TemplateRef<any>) {\n    super(template);\n  }\n}\n\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matFooterCellDef]',\n  providers: [{provide: CdkFooterCellDef, useExisting: MatFooterCellDef}]\n})\nexport class MatFooterCellDef extends CdkFooterCellDef {\n  // TODO(andrewseguin): Remove this constructor after compiler-cli is updated; see issue #9329\n  constructor(/** @docs-private */ public template: TemplateRef<any>) {\n    super(template);\n  }\n}\n\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[matColumnDef]',\n  providers: [{provide: CdkColumnDef, useExisting: MatColumnDef}],\n})\nexport class MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  @Input('matColumnDef') name: string;\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-header-cell, th[mat-header-cell]',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class MatHeaderCell extends CdkHeaderCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Footer cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-footer-cell, td[mat-footer-cell]',\n  host: {\n    'class': 'mat-footer-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatFooterCell extends CdkFooterCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-cell, td[mat-cell]',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatCell extends CdkCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Directive,\n  IterableDiffers, TemplateRef,\n  ViewEncapsulation\n} from '@angular/core';\nimport {\n  CDK_ROW_TEMPLATE, CdkFooterRow, CdkFooterRowDef,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef,\n} from '@angular/cdk/table';\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef'],\n})\nexport class MatHeaderRowDef extends CdkHeaderRowDef {\n  // TODO(andrewseguin): Remove this constructor after compiler-cli is updated; see issue #9329\n  constructor(template: TemplateRef<any>, _differs: IterableDiffers) {\n    super(template, _differs);\n  }\n}\n\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\n@Directive({\n  selector: '[matFooterRowDef]',\n  providers: [{provide: CdkFooterRowDef, useExisting: MatFooterRowDef}],\n  inputs: ['columns: matFooterRowDef'],\n})\nexport class MatFooterRowDef extends CdkFooterRowDef {\n  // TODO(andrewseguin): Remove this constructor after compiler-cli is updated; see issue #9329\n  constructor(template: TemplateRef<any>, _differs: IterableDiffers) {\n    super(template, _differs);\n  }\n}\n\n/**\n * Data row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n})\nexport class MatRowDef<T> extends CdkRowDef<T> {\n  // TODO(andrewseguin): Remove this constructor after compiler-cli is updated; see issue #9329\n  constructor(template: TemplateRef<any>, _differs: IterableDiffers) {\n    super(template, _differs);\n  }\n}\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-header-row, tr[mat-header-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matHeaderRow',\n})\nexport class MatHeaderRow extends CdkHeaderRow { }\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-footer-row, tr[mat-footer-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-footer-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matFooterRow',\n})\nexport class MatFooterRow extends CdkFooterRow { }\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-row, tr[mat-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRow',\n})\nexport class MatRow extends CdkRow { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {\n  MatCell,\n  MatCellDef,\n  MatColumnDef,\n  MatFooterCell,\n  MatFooterCellDef,\n  MatHeaderCell,\n  MatHeaderCellDef\n} from './cell';\nimport {\n  MatFooterRow,\n  MatFooterRowDef,\n  MatHeaderRow,\n  MatHeaderRowDef,\n  MatRow,\n  MatRowDef\n} from './row';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\n\nconst EXPORTED_DECLARATIONS = [\n  // Table\n  MatTable,\n\n  // Template defs\n  MatHeaderCellDef,\n  MatHeaderRowDef,\n  MatColumnDef,\n  MatCellDef,\n  MatRowDef,\n  MatFooterCellDef,\n  MatFooterRowDef,\n\n  // Cell directives\n  MatHeaderCell,\n  MatCell,\n  MatFooterCell,\n\n  // Row directions\n  MatHeaderRow,\n  MatRow,\n  MatFooterRow,\n];\n\n@NgModule({\n  imports: [CdkTableModule, CommonModule, MatCommonModule],\n  exports: EXPORTED_DECLARATIONS,\n  declarations: EXPORTED_DECLARATIONS,\n})\nexport class MatTableModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {_isNumberValue} from '@angular/cdk/coercion';\nimport {DataSource} from '@angular/cdk/table';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  merge,\n  Observable,\n  of as observableOf,\n  Subscription\n} from 'rxjs';\nimport {MatPaginator, PageEvent} from '@angular/material/paginator';\nimport {MatSort, Sort} from '@angular/material/sort';\nimport {map} from 'rxjs/operators';\n\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n */\nexport class MatTableDataSource<T> extends DataSource<T> {\n  /** Stream that emits when a new data array is set on the data source. */\n  private readonly _data: BehaviorSubject<T[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private readonly _renderData = new BehaviorSubject<T[]>([]);\n\n  /** Stream that emits when a new filter string is set on the data source. */\n  private readonly _filter = new BehaviorSubject<string>('');\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription: Subscription;\n\n  /**\n   * The filtered set of data that has been matched by the filter string, or all the data if there\n   * is no filter. Useful for knowing the set of data the table represents.\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\n   * shown to the user rather than all the data.\n   */\n  filteredData: T[];\n\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  get data() { return this._data.value; }\n  set data(data: T[]) { this._data.next(data); }\n\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  get filter(): string { return this._filter.value; }\n  set filter(filter: string) { this._filter.next(filter); }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  get sort(): MatSort | null { return this._sort; }\n  set sort(sort: MatSort|null) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  private _sort: MatSort|null;\n\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  get paginator(): MatPaginator | null { return this._paginator; }\n  set paginator(paginator: MatPaginator|null) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  private _paginator: MatPaginator|null;\n\n  /**\n   * Data accessor function that is used for accessing data properties for sorting through\n   * the default sortData function.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\n      (data: T, sortHeaderId: string): string|number => {\n    const value: any = data[sortHeaderId];\n    return _isNumberValue(value) ? Number(value) : value;\n  }\n\n  /**\n   * Gets a sorted copy of the data array based on the state of the MatSort. Called\n   * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n   * By default, the function retrieves the active sort and its direction and compares data\n   * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n   * of data ordering.\n   * @param data The array of data that should be sorted.\n   * @param sort The connected MatSort that holds the current sort state.\n   */\n  sortData: ((data: T[], sort: MatSort) => T[]) = (data: T[], sort: MatSort): T[] => {\n    const active = sort.active;\n    const direction = sort.direction;\n    if (!active || direction == '') { return data; }\n\n    return data.sort((a, b) => {\n      let valueA = this.sortingDataAccessor(a, active);\n      let valueB = this.sortingDataAccessor(b, active);\n\n      // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n      // one value exists while the other doesn't. In this case, existing value should come first.\n      // This avoids inconsistent results when comparing values to undefined/null.\n      // If neither value exists, return 0 (equal).\n      let comparatorResult = 0;\n      if (valueA != null && valueB != null) {\n        // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n        if (valueA > valueB) {\n          comparatorResult = 1;\n        } else if (valueA < valueB) {\n          comparatorResult = -1;\n        }\n      } else if (valueA != null) {\n        comparatorResult = 1;\n      } else if (valueB != null) {\n        comparatorResult = -1;\n      }\n\n      return comparatorResult * (direction == 'asc' ? 1 : -1);\n    });\n  }\n\n  /**\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\n    // Transform the data into a lowercase string of all property values.\n    const accumulator = (currentTerm, key) => currentTerm + data[key];\n    const dataStr = Object.keys(data).reduce(accumulator, '').toLowerCase();\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) != -1;\n  }\n\n  constructor(initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // The events should emit whenever the component emits a change or initializes, or if no\n    // component is provided, a stream with just a null event should be provided.\n    // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\n    // pipeline can progress to the next step. Note that the value from these streams are not used,\n    // they purely act as a signal to progress in the pipeline.\n    const sortChange: Observable<Sort|null> = this._sort ?\n        merge<Sort>(this._sort.sortChange, this._sort.initialized) :\n        observableOf(null);\n    const pageChange: Observable<PageEvent|null> = this._paginator ?\n        merge<PageEvent>(this._paginator.page, this._paginator.initialized) :\n        observableOf(null);\n\n    if (this._renderChangesSubscription) {\n      this._renderChangesSubscription.unsubscribe();\n    }\n\n    const dataStream = this._data;\n    // Watch for base data or filter changes to provide a filtered set of data.\n    const filteredData = combineLatest(dataStream, this._filter)\n      .pipe(map(([data]) => this._filterData(data)));\n    // Watch for filtered data or sort changes to provide an ordered set of data.\n    const orderedData = combineLatest(filteredData, sortChange)\n      .pipe(map(([data]) => this._orderData(data)));\n    // Watch for ordered data or page changes to provide a paged set of data.\n    const paginatedData = combineLatest(orderedData, pageChange)\n      .pipe(map(([data]) => this._pageData(data)));\n    // Watched for paged data changes and send the result to the table to render.\n    paginatedData.subscribe(data => this._renderData.next(data));\n  }\n\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data: T[]) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overridden for customization.\n    this.filteredData =\n        !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\n\n    return this.filteredData;\n  }\n\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data: T[]): T[] {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort) { return data; }\n\n    return this.sortData(data.slice(), this.sort);\n  }\n\n  /**\n   * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data: T[]): T[] {\n    if (!this.paginator) { return data; }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice().splice(startIndex, this.paginator.pageSize);\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      if (!this.paginator) { return; }\n\n      this.paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (this.paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(this.paginator.length / this.paginator.pageSize) - 1 || 0;\n        this.paginator.pageIndex = Math.min(this.paginator.pageIndex, lastPageIndex);\n      }\n    });\n  }\n\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() { return this._renderData; }\n\n  /**\n   * Used by the MatTable. Called when it is destroyed. No-op.\n   * @docs-private\n   */\n  disconnect() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Inject, InjectionToken, NgZone} from '@angular/core';\n\n\n/**\n * Interface for a a MatInkBar positioner method, defining the positioning and width of the ink\n * bar in a set of tabs.\n */\n// tslint:disable-next-line class-name Using leading underscore to denote internal interface.\nexport interface _MatInkBarPositioner {\n  (element: HTMLElement): { left: string, width: string };\n}\n\n/** Injection token for the MatInkBar's Positioner. */\nexport const _MAT_INK_BAR_POSITIONER =\n  new InjectionToken<_MatInkBarPositioner>('MatInkBarPositioner', {\n    providedIn: 'root',\n    factory: _MAT_INK_BAR_POSITIONER_FACTORY\n  });\n\n/**\n * The default positioner function for the MatInkBar.\n * @docs-private\n */\nexport function _MAT_INK_BAR_POSITIONER_FACTORY(): _MatInkBarPositioner {\n  const method = (element: HTMLElement) => ({\n    left: element ? (element.offsetLeft || 0) + 'px' : '0',\n    width: element ? (element.offsetWidth || 0) + 'px' : '0',\n  });\n\n  return method;\n}\n\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n  },\n})\nexport class MatInkBar {\n  constructor(\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone,\n    @Inject(_MAT_INK_BAR_POSITIONER) private _inkBarPositioner: _MatInkBarPositioner) { }\n\n  /**\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\n   * Shows the ink bar if previously set as hidden.\n   * @param element\n   */\n  alignToElement(element: HTMLElement) {\n    this.show();\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._setStyles(element));\n      });\n    } else {\n      this._setStyles(element);\n    }\n  }\n\n  /** Shows the ink bar. */\n  show(): void {\n    this._elementRef.nativeElement.style.visibility = 'visible';\n  }\n\n  /** Hides the ink bar. */\n  hide(): void {\n    this._elementRef.nativeElement.style.visibility = 'hidden';\n  }\n\n  /**\n   * Sets the proper styles to the ink bar element.\n   * @param element\n   */\n  private _setStyles(element: HTMLElement) {\n    const positions = this._inkBarPositioner(element);\n    const inkBar: HTMLElement = this._elementRef.nativeElement;\n\n    inkBar.style.left = positions.left;\n    inkBar.style.width = positions.width;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef, ViewContainerRef} from '@angular/core';\nimport {CdkPortal} from '@angular/cdk/portal';\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n  selector: '[mat-tab-label], [matTabLabel]',\n})\nexport class MatTabLabel extends CdkPortal {\n  constructor(templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\n    super(templateRef, viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/** Decorates the `ng-template` tags and reads out the template from it. */\n@Directive({selector: '[matTabContent]'})\nexport class MatTabContent {\n  constructor(public template: TemplateRef<any>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabContent} from './tab-content';\n\n\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nexport class MatTabBase {}\nexport const _MatTabMixinBase = mixinDisabled(MatTabBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matTab',\n})\nexport class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n  /** Content for the tab label given by `<ng-template mat-tab-label>`. */\n  @ContentChild(MatTabLabel) templateLabel: MatTabLabel;\n\n  /**\n   * Template provided in the tab content that will be used if present, used to enable lazy-loading\n   */\n  @ContentChild(MatTabContent, {read: TemplateRef}) _explicitContent: TemplateRef<any>;\n\n  /** Template inside the MatTab view that contains an `<ng-content>`. */\n  @ViewChild(TemplateRef) _implicitContent: TemplateRef<any>;\n\n  /** The plain text label for the tab, used when there is no template label. */\n  @Input('label') textLabel: string = '';\n\n  /** The portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal | null = null;\n\n  /** @docs-private */\n  get content(): TemplatePortal | null {\n    return this._contentPortal;\n  }\n\n  /** Emits whenever the label changes. */\n  readonly _labelChange = new Subject<void>();\n\n  /** Emits whenever the disable changes */\n  readonly _disableChange = new Subject<void>();\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number | null = null;\n\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number | null = null;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel')) {\n      this._labelChange.next();\n    }\n\n    if (changes.hasOwnProperty('disabled')) {\n      this._disableChange.next();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._disableChange.complete();\n    this._labelChange.complete();\n  }\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(\n        this._explicitContent || this._implicitContent, this._viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material tabs. */\nexport const matTabsAnimations: {\n  readonly translateTab: AnimationTriggerMetadata;\n} = {\n  /** Animation translates a tab along the X axis. */\n  translateTab: trigger('translateTab', [\n    // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n    state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\n    state('left', style({transform: 'translate3d(-100%, 0, 0)'})),\n    state('right', style({transform: 'translate3d(100%, 0, 0)'})),\n    transition('* => left, * => right, left => center, right => center',\n        animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')),\n    transition('void => left-origin-center', [\n      style({transform: 'translate3d(-100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ]),\n    transition('void => right-origin-center', [\n      style({transform: 'translate3d(100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ])\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  Input,\n  Inject,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Directive,\n  Optional,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  forwardRef,\n  ViewChild,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {TemplatePortal, CdkPortalOutlet, PortalHostDirective} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\nimport {Subscription} from 'rxjs';\nimport {matTabsAnimations} from './tabs-animations';\nimport {startWith} from 'rxjs/operators';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MatTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MatTabBodyOriginState = 'left' | 'right';\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabBodyHost]'\n})\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n  /** Subscription to events for when the tab body begins centering. */\n  private _centeringSub = Subscription.EMPTY;\n  /** Subscription to events for when the tab body finishes leaving from center position. */\n  private _leavingSub = Subscription.EMPTY;\n\n  constructor(\n    componentFactoryResolver: ComponentFactoryResolver,\n    viewContainerRef: ViewContainerRef,\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody) {\n      super(componentFactoryResolver, viewContainerRef);\n  }\n\n  /** Set initial visibility or set up subscription for changing visibility. */\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    this._centeringSub = this._host._beforeCentering\n      .pipe(startWith(this._host._isCenterPosition(this._host._position)))\n      .subscribe((isCentering: boolean) => {\n        if (isCentering && !this.hasAttached()) {\n          this.attach(this._host._content);\n        }\n      });\n\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      this.detach();\n    });\n  }\n\n  /** Clean up centering subscription. */\n  ngOnDestroy(): void {\n    super.ngOnDestroy();\n    this._centeringSub.unsubscribe();\n    this._leavingSub.unsubscribe();\n  }\n}\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTabsAnimations.translateTab],\n  host: {\n    'class': 'mat-tab-body',\n  },\n})\nexport class MatTabBody implements OnInit {\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\n  @Output() readonly _onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the tab completes its animation towards the center. */\n  @Output() readonly _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n   /** The portal host inside of this container into which the tab body content will be loaded. */\n  @ViewChild(PortalHostDirective) _portalHost: PortalHostDirective;\n\n  /** The tab body content to display. */\n  @Input('content') _content: TemplatePortal;\n\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n  @Input()\n  set position(position: number) {\n    if (position < 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'left' : 'right';\n    } else if (position > 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n  _position: MatTabBodyPositionState;\n\n  /** The origin position from which this tab should appear when it is centered into view. */\n  @Input()\n  set origin(origin: number) {\n    if (origin == null) { return; }\n\n    const dir = this._getLayoutDirection();\n    if ((dir == 'ltr' && origin <= 0) || (dir == 'rtl' && origin > 0)) {\n      this._origin = 'left';\n    } else {\n      this._origin = 'right';\n    }\n  }\n  _origin: MatTabBodyOriginState;\n\n  constructor(private _elementRef: ElementRef,\n              @Optional() private _dir: Directionality) { }\n\n  /**\n   * After initialized, check if the content is centered and has an origin. If so, set the\n   * special position states that transition the tab from the left or right before centering.\n   */\n  ngOnInit() {\n    if (this._position == 'center' && this._origin) {\n      this._position = this._origin == 'left' ? 'left-origin-center' : 'right-origin-center';\n    }\n  }\n\n  _onTranslateTabStarted(e: AnimationEvent): void {\n    const isCentering = this._isCenterPosition(e.toState);\n    this._beforeCentering.emit(isCentering);\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n\n  _onTranslateTabComplete(e: AnimationEvent): void {\n    // If the transition to the center is complete, emit an event.\n    if (this._isCenterPosition(e.toState) && this._isCenterPosition(this._position)) {\n      this._onCentered.emit();\n    }\n\n    if (this._isCenterPosition(e.fromState) && !this._isCenterPosition(this._position)) {\n      this._afterLeavingCenter.emit();\n    }\n  }\n\n  /** The text direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the provided position state is considered center, regardless of origin. */\n  _isCenterPosition(position: MatTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nexport class MatTabLabelWrapperBase {}\nexport const _MatTabLabelWrapperMixinBase = mixinDisabled(MatTabLabelWrapperBase);\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled'\n  }\n})\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\n  constructor(public elementRef: ElementRef) {\n    super();\n  }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  HammerInput,\n  HasTabIndex,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {Subscription} from 'rxjs';\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n */\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n\n/** A simple change event emitted by the MatSlider component. */\nexport class MatSliderChange {\n  /** The MatSlider that changed. */\n  source: MatSlider;\n\n  /** The new value of the source slider. */\n  value: number | null;\n}\n\n\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nexport class MatSliderBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSliderMixinBase =\n  mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slider',\n  exportAs: 'matSlider',\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(click)': '_onClick($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    '[tabIndex]': 'tabIndex',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlider extends _MatSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\n  /** Whether the slider is inverted. */\n  @Input()\n  get invert(): boolean { return this._invert; }\n  set invert(value: boolean) {\n    this._invert = coerceBooleanProperty(value);\n  }\n  private _invert = false;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max(): number { return this._max; }\n  set max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _max: number = 100;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min(): number { return this._min; }\n  set min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _min: number = 0;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step(): number { return this._step; }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundToDecimal = this._step.toString().split('.').pop()!.length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _step: number = 1;\n\n  /** Whether or not to show the thumb label. */\n  @Input()\n  get thumbLabel(): boolean { return this._thumbLabel; }\n  set thumbLabel(value: boolean) { this._thumbLabel = coerceBooleanProperty(value); }\n  private _thumbLabel: boolean = false;\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  @Input()\n  get tickInterval() { return this._tickInterval; }\n  set tickInterval(value: 'auto' | number) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval as number);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  private _tickInterval: 'auto' | number = 0;\n\n  /** Value of the slider. */\n  @Input()\n  get value(): number | null {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n  set value(v: number | null) {\n    if (v !== this._value) {\n      this._value = coerceNumberProperty(v);\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _value: number | null = null;\n\n  /**\n   * Function that will be used to format the value before it is displayed\n   * in the thumb label. Can be used to format very large number in order\n   * for them to fit into the slider thumb.\n   */\n  @Input() displayWith: (value: number | null) => string | number;\n\n  /** Whether the slider is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  private _vertical = false;\n\n  /** Event emitted when the slider value has changed. */\n  @Output() readonly change: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n  @Output() readonly input: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** The value to be used for display purposes. */\n  get displayValue(): string | number {\n    if (this.displayWith) {\n      return this.displayWith(this.value);\n    }\n\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundToDecimal && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundToDecimal);\n    }\n\n    return this.value || 0;\n  }\n\n  /** set focus to the host element */\n  focus() {\n    this._focusHostElement();\n  }\n\n  /** blur the host element */\n  blur() {\n    this._blurHostElement();\n  }\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** The percentage of the slider that coincides with the value. */\n  get percent(): number { return this._clamp(this._percent); }\n  private _percent: number = 0;\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n\n  /**\n   * Whether the axis of the slider is inverted.\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n   */\n  get _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n\n\n  /** Whether the slider is at its minimum value. */\n  get _isMinValue() {\n    return this.percent === 0;\n  }\n\n  /**\n   * The amount of space to leave between the slider thumb and the track fill & track background\n   * elements.\n   */\n  get _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n\n  /** CSS styles for the track background element. */\n  get _trackBackgroundStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    let sign = this._invertMouseCoords ? '-' : '';\n    return {\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${1 - this.percent})`\n    };\n  }\n\n  /** CSS styles for the track fill element. */\n  get _trackFillStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    let sign = this._invertMouseCoords ? '' : '-';\n    return {\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${this.percent})`\n    };\n  }\n\n  /** CSS styles for the ticks container element. */\n  get _ticksContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let sign = !this.vertical && this._direction == 'rtl' ? '' : '-';\n    let offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n\n  /** CSS styles for the ticks element. */\n  get _ticksStyles(): { [key: string]: string } {\n    let tickSize = this._tickIntervalPercent * 100;\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let sign = !this.vertical && this._direction == 'rtl' ? '-' : '';\n    let rotate = !this.vertical && this._direction == 'rtl' ? ' rotate(180deg)' : '';\n    let styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n\n  get _thumbContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let invertOffset =\n        (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n\n  /** The size of a tick interval as a percentage of the size of the track. */\n  private _tickIntervalPercent: number = 0;\n\n  /** The dimensions of the slider. */\n  private _sliderDimensions: ClientRect | null = null;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Decimal places to round to, based on the step amount. */\n  private _roundToDecimal: number;\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** The value of the slider when the slide start event fires. */\n  private _valueOnSlideStart: number | null;\n\n  /** Reference to the inner slider wrapper element. */\n  @ViewChild('sliderWrapper') private _sliderWrapper: ElementRef;\n\n  /**\n   * Whether mouse events should be converted to a slider position by calculating their distance\n   * from the right or bottom edge of the slider as opposed to the top or left.\n   */\n  private get _invertMouseCoords() {\n    return (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n\n  /** The language direction for this slider element. */\n  private get _direction() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Attribute('tabindex') tabIndex: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngOnInit() {\n    this._focusMonitor\n        .monitor(this._elementRef.nativeElement, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onClick(event: MouseEvent) {\n    if (this.disabled) {\n      return;\n    }\n\n    let oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    // Emit a change and input event if the value changed.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n\n  _onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n\n  _onSlideStart(event: HammerInput | null) {\n    if (this.disabled || this._isSliding) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n\n  _onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value && !this.disabled) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n\n  _onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onBlur() {\n    this.onTouched();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this.disabled) { return; }\n\n    let oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._direction == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._direction == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n\n  _onKeyup() {\n    this._isSliding = false;\n  }\n\n  /** Increments the slider by the given number of steps (negative number decrements). */\n  private _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n  private _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = this._clamp((posComponent - offset) / size);\n\n    if (this._invertMouseCoords) {\n      percent = 1 - percent;\n    }\n\n    // Since the steps may not divide cleanly into the max value, if the user\n    // slid to 0 or 100 percent, we jump to the min/max value. This approach\n    // is slightly more intuitive than using `Math.ceil` below, because it\n    // follows the user's pointer closer.\n    if (percent === 0) {\n      this.value = this.min;\n    } else if (percent === 1) {\n      this.value = this.max;\n    } else {\n      let exactValue = this._calculateValue(percent);\n\n      // This calculation finds the closest step by finding the closest\n      // whole number divisible by the step relative to the min.\n      let closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n\n      // If we've got a step with a decimal, we may end up with something like 33.300000000000004.\n      // Truncate the value to ensure that it matches the label and to make it easier to work with.\n      if (this._roundToDecimal) {\n        closestValue = parseFloat(closestValue.toFixed(this._roundToDecimal));\n      }\n\n      // The value needs to snap to the min and max.\n      this.value = this._clamp(closestValue, this.min, this.max);\n    }\n  }\n\n  /** Emits a change event if the current value is different from the last emitted value. */\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n\n  /** Emits an input event when the current value is different from the last emitted value. */\n  private _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n  private _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n\n  /** Creates a slider change object from the specified value. */\n  private _createChangeEvent(value = this.value): MatSliderChange {\n    let event = new MatSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n\n  /** Calculates the percentage of the slider that a value is. */\n  private _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n\n  /** Calculates the value a percentage of the slider corresponds to. */\n  private _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n\n  /** Return a number between two numbers. */\n  private _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Get the bounding client rect of the slider track element.\n   * The track is used rather than the native element to ignore the extra space that the thumb can\n   * take up.\n   */\n  private _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n\n  /**\n   * Focuses the native element.\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n   */\n  private _focusHostElement() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Blurs the native element. */\n  private _blurHostElement() {\n    this._elementRef.nativeElement.blur();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Registers a callback to eb triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlider} from './slider';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatSlider, MatCommonModule],\n  declarations: [MatSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n})\nexport class MatSliderModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable, Subject} from 'rxjs';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n/** Event that is emitted when a snack bar is dismissed. */\nexport interface MatSnackBarDismiss {\n  /** Whether the snack bar was dismissed using the action button. */\n  dismissedByAction: boolean;\n}\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: MatSnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has been dismissed. */\n  private readonly _afterDismissed = new Subject<MatSnackBarDismiss>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private readonly _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: number;\n\n  /** Whether the snack bar was dismissed using the action button. */\n  private _dismissedByAction = false;\n\n  constructor(containerInstance: MatSnackBarContainer,\n              private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  dismissWithAction(): void {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n\n\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   * @deletion-target 7.0.0\n   */\n  closeWithAction(): void {\n    this.dismissWithAction();\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterDismissed.next({dismissedByAction: this._dismissedByAction});\n    this._afterDismissed.complete();\n    this._dismissedByAction = false;\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<MatSnackBarDismiss> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig<D = any> {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /** Message to be announced by the MatAriaLiveAnnouncer */\n  announcementMessage?: string = '';\n\n  /** The view container to place the overlay for the snack bar into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material snack bar. */\nexport const matSnackBarAnimations: {\n  readonly contentFade: AnimationTriggerMetadata;\n  readonly snackBarState: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\n  contentFade: trigger('contentFade', [\n    transition(':enter', [\n      style({opacity: '0'}),\n      animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.STANDARD_CURVE}`)\n    ])\n  ]),\n\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [\n    state('visible-top, visible-bottom', style({transform: 'translateY(0%)'})),\n    transition('visible-top => hidden-top, visible-bottom => hidden-bottom',\n      animate(`${AnimationDurations.EXITING} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible-top, void => visible-bottom',\n      animate(`${AnimationDurations.ENTERING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\nimport {matSnackBarAnimations} from './snack-bar-animations';\n\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matSnackBarAnimations.contentFade],\n  host: {\n    '[@contentFade]': '',\n    'class': 'mat-simple-snackbar',\n  }\n})\nexport class SimpleSnackBar {\n  /** Data that was injected into the snack bar. */\n  data: { message: string, action: string };\n\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\n    this.data = data;\n  }\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.dismissWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  CdkPortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  NgZone,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\nimport {matSnackBarAnimations} from './snack-bar-animations';\nimport {MatSnackBarConfig} from './snack-bar-config';\n\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matSnackBarAnimations.snackBarState],\n  host: {\n    'role': 'alert',\n    'class': 'mat-snack-bar-container',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n})\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  readonly _onExit: Subject<any> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  readonly _onEnter: Subject<any> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  /** The snack bar configuration. */\n  snackBarConfig: MatSnackBarConfig;\n\n  constructor(\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef) {\n    super();\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState.startsWith('hidden')) {\n      this._completeExit();\n    }\n\n    if (toState.startsWith('visible')) {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = `visible-${this.snackBarConfig.verticalPosition}`;\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    this._animationState = `hidden-${this.snackBarConfig.verticalPosition}`;\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n  private _applySnackBarClasses() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClasses = this.snackBarConfig.panelClass;\n\n    if (panelClasses) {\n      if (Array.isArray(panelClasses)) {\n        // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n        panelClasses.forEach(cssClass => element.classList.add(cssClass));\n      } else {\n        element.classList.add(panelClasses);\n      }\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n  }\n\n  /** Asserts that no content is already attached to the container. */\n  private _assertNotAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  EmbeddedViewRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n\n/** Injection token that can be used to specify default snack bar. */\nexport const MAT_SNACK_BAR_DEFAULT_OPTIONS =\n    new InjectionToken<MatSnackBarConfig>('mat-snack-bar-default-options', {\n      providedIn: 'root',\n      factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY(): MatSnackBarConfig {\n  return new MatSnackBarConfig();\n}\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable()\nexport class MatSnackBar {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _live: LiveAnnouncer,\n      private _injector: Injector,\n      private _breakpointObserver: BreakpointObserver,\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar,\n      @Inject(MAT_SNACK_BAR_DEFAULT_OPTIONS) private _defaultConfig: MatSnackBarConfig) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig):\n    MatSnackBarRef<T> {\n    return this._attach(component, config) as MatSnackBarRef<T>;\n  }\n\n  /**\n   * Creates and dispatches a snack bar with a custom template for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param template Template to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromTemplate(template: TemplateRef<any>, config?: MatSnackBarConfig):\n    MatSnackBarRef<EmbeddedViewRef<any>> {\n    return this._attach(template, config);\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\n      MatSnackBarRef<SimpleSnackBar> {\n    const _config = {...this._defaultConfig, ...config};\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n    _config.announcementMessage = message;\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\n    const containerPortal = new ComponentPortal(MatSnackBarContainer, config.viewContainerRef);\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component or a template as the content of the snack bar container.\n   */\n  private _attach<T>(content: ComponentType<T> | TemplateRef<T>, userConfig?: MatSnackBarConfig):\n    MatSnackBarRef<T | EmbeddedViewRef<any>> {\n\n    const config = {...this._defaultConfig, ...userConfig};\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T | EmbeddedViewRef<any>>(container, overlayRef);\n\n    if (content instanceof TemplateRef) {\n      const portal = new TemplatePortal(content, null!, {\n        $implicit: config.data,\n        snackBarRef\n      } as any);\n\n      snackBarRef.instance = container.attachTemplatePortal(portal);\n    } else {\n      const injector = this._createInjector(config, snackBarRef);\n      const portal = new ComponentPortal(content, undefined, injector);\n      const contentRef = container.attachComponentPortal<T>(portal);\n\n      // We can't pass this via the injector, because the injector is created earlier.\n      snackBarRef.instance = contentRef.instance;\n    }\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.Handset).pipe(\n      takeUntil(overlayRef.detachments().pipe(take(1)))\n    ).subscribe(state => {\n      if (state.matches) {\n        overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n      } else {\n        overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n      }\n    });\n\n    this._animateSnackBar(snackBarRef, config);\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /** Animates the old snack bar out and the new one in. */\n  private _animateSnackBar(snackBarRef: MatSnackBarRef<any>, config: MatSnackBarConfig) {\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (config.duration && config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration!));\n    }\n\n    if (config.announcementMessage) {\n      this._live.announce(config.announcementMessage, config.politeness);\n    }\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(\n      config: MatSnackBarConfig,\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap();\n\n    injectionTokens.set(MatSnackBarRef, snackBarRef);\n    injectionTokens.set(MAT_SNACK_BAR_DATA, config.data);\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MatSnackBar} from './snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MatButtonModule,\n    MatCommonModule,\n  ],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n  providers: [MatSnackBar]\n})\nexport class MatSnackBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  isDevMode,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CanDisable, HasInitialized, mixinDisabled, mixinInitialized} from '@angular/material/core';\nimport {SortDirection} from './sort-direction';\nimport {\n  getSortDuplicateSortableIdError,\n  getSortHeaderMissingIdError,\n  getSortInvalidDirectionError\n} from './sort-errors';\nimport {Subject} from 'rxjs';\n\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start: 'asc' | 'desc';\n\n  /** Whether to disable clearing the sorting state. */\n  disableClear: boolean;\n}\n\n/** The current sort state. */\nexport interface Sort {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nexport class MatSortBase {}\nexport const _MatSortMixinBase = mixinInitialized(mixinDisabled(MatSortBase));\n\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n@Directive({\n  selector: '[matSort]',\n  exportAs: 'matSort',\n  inputs: ['disabled: matSortDisabled']\n})\nexport class MatSort extends _MatSortMixinBase\n    implements CanDisable, HasInitialized, OnChanges, OnDestroy, OnInit {\n  /** Collection of all registered sortables that this directive manages. */\n  sortables = new Map<string, MatSortable>();\n\n  /** Used to notify any child components listening to state changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /** The id of the most recently sorted MatSortable. */\n  @Input('matSortActive') active: string;\n\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overriden by the MatSortable's sort start.\n   */\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\n\n  /** The sort direction of the currently active MatSortable. */\n  @Input('matSortDirection')\n  get direction(): SortDirection { return this._direction; }\n  set direction(direction: SortDirection) {\n    if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  private _direction: SortDirection = '';\n\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   */\n  @Input('matSortDisableClear')\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output('matSortChange') readonly sortChange: EventEmitter<Sort> = new EventEmitter<Sort>();\n\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n  register(sortable: MatSortable): void {\n    if (!sortable.id) {\n      throw getSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getSortDuplicateSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n  deregister(sortable: MatSortable): void {\n    this.sortables.delete(sortable.id);\n  }\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: MatSortable): void {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.emit({active: this.active, direction: this.direction});\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnInit() {\n    this._markInitialized();\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  keyframes,\n  AnimationTriggerMetadata, query, animateChild,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n                                  AnimationCurves.STANDARD_CURVE;\n\n/** Animations used by MatSort. */\nexport const matSortAnimations: {\n  readonly indicator: AnimationTriggerMetadata;\n  readonly leftPointer: AnimationTriggerMetadata;\n  readonly rightPointer: AnimationTriggerMetadata;\n  readonly arrowOpacity: AnimationTriggerMetadata;\n  readonly arrowPosition: AnimationTriggerMetadata;\n  readonly allowChildren: AnimationTriggerMetadata;\n} = {\n  /** Animation that moves the sort indicator. */\n  indicator: trigger('indicator', [\n    state('active-asc, asc', style({transform: 'translateY(0px)'})),\n    // 10px is the height of the sort indicator, minus the width of the pointers\n    state('active-desc, desc', style({transform: 'translateY(10px)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: trigger('leftPointer', [\n    state('active-asc, asc', style({transform: 'rotate(-45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: trigger('rightPointer', [\n    state('active-asc, asc', style({transform: 'rotate(45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(-45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that controls the arrow opacity. */\n  arrowOpacity: trigger('arrowOpacity', [\n    state('desc-to-active, asc-to-active, active', style({opacity: 1})),\n    state('desc-to-hint, asc-to-hint, hint', style({opacity: .54})),\n    state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc',\n        style({opacity: 0})),\n    // Transition between all states except for immediate transitions\n    transition('* => asc, * => desc, * => active, * => hint', animate('0ms')),\n    transition('* <=> *', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /**\n   * Animation for the translation of the arrow as a whole. States are separated into two\n   * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n   * peek, and active. The other states define a specific animation (source-to-destination)\n   * and are determined as a function of their prev user-perceived state and what the next state\n   * should be.\n   */\n  arrowPosition: trigger('arrowPosition', [\n    // Hidden Above => Hint Center\n    transition('* => desc-to-hint, * => desc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(-25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Below\n    transition('* => hint-to-desc, * => active-to-desc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(25%)'})\n        ]))),\n    // Hidden Below => Hint Center\n    transition('* => asc-to-hint, * => asc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Above\n    transition('* => hint-to-asc, * => active-to-asc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(-25%)'})\n        ]))),\n    state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active',\n        style({transform: 'translateY(0)'})),\n    state('hint-to-desc, active-to-desc, desc',\n        style({transform: 'translateY(-25%)'})),\n    state('hint-to-asc, active-to-asc, asc',\n        style({transform: 'translateY(25%)'})),\n  ]),\n\n  /** Necessary trigger that calls animate on children animations. */\n  allowChildren: trigger('allowChildren', [\n    transition('* <=> *', [\n      query('@*', animateChild(), {optional: true})\n    ])\n  ]),\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n@Injectable({providedIn: 'root'})\nexport class MatSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** ARIA label for the sorting button. */\n  sortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n}\n/** @docs-private */\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n\n/** @docs-private */\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkColumnDef} from '@angular/cdk/table';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  Optional,\n  ViewEncapsulation\n} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatSort, MatSortable} from './sort';\nimport {matSortAnimations} from './sort-animations';\nimport {SortDirection} from './sort-direction';\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\nimport {MatSortHeaderIntl} from './sort-header-intl';\n\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nexport class MatSortHeaderBase {}\nexport const _MatSortHeaderMixinBase = mixinDisabled(MatSortHeaderBase);\n\n/**\n * Valid positions for the arrow to be in for its opacity and translation. If the state is a\n * sort direction, the position of the arrow will be above/below and opacity 0. If the state is\n * hint, the arrow will be in the center with a slight opacity. Active state means the arrow will\n * be fully opaque in the center.\n *\n * @docs-private\n */\nexport type ArrowViewState = SortDirection | 'hint' | 'active';\n\n/**\n * States describing the arrow's animated position (animating fromState to toState).\n * If the fromState is not defined, there will be no animated transition to the toState.\n * @docs-private\n */\nexport interface ArrowViewStateTransition {\n  fromState?: ArrowViewState;\n  toState: ArrowViewState;\n}\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-sort-header]',\n  exportAs: 'matSortHeader',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_handleClick()',\n    '(mouseenter)': '_setIndicatorHintVisible(true)',\n    '(longpress)': '_setIndicatorHintVisible(true)',\n    '(mouseleave)': '_setIndicatorHintVisible(false)',\n    '[attr.aria-sort]': '_getAriaSortAttribute()',\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  animations: [\n    matSortAnimations.indicator,\n    matSortAnimations.leftPointer,\n    matSortAnimations.rightPointer,\n    matSortAnimations.arrowOpacity,\n    matSortAnimations.arrowPosition,\n    matSortAnimations.allowChildren,\n  ]\n})\nexport class MatSortHeader extends _MatSortHeaderMixinBase implements MatSortable, CanDisable {\n  private _rerenderSubscription: Subscription;\n\n  /**\n   * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n   * provide an affordance that the header is sortable by showing on focus and hover.\n   */\n  _showIndicatorHint: boolean = false;\n\n  /**\n   * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n   * position through the animation. If animations are currently disabled, the fromState is removed\n   * so that there is no animation displayed.\n   */\n  _viewState: ArrowViewStateTransition;\n\n  /** The direction the arrow should be facing according to the current state. */\n  _arrowDirection: SortDirection = '';\n\n  /**\n   * Whether the view state animation should show the transition between the `from` and `to` states.\n   */\n  _disableViewStateAnimation = false;\n\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   */\n  @Input('mat-sort-header') id: string;\n\n  /** Sets the position of the arrow that displays when sorted. */\n  @Input() arrowPosition: 'before' | 'after' = 'after';\n\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n  @Input() start: 'asc' | 'desc';\n\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n  @Input()\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  constructor(public _intl: MatSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _sort: MatSort,\n              @Optional() public _cdkColumnDef: CdkColumnDef) {\n\n    super();\n\n    if (!_sort) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n        .subscribe(() => {\n          if (this._isSorted()) {\n            this._updateArrowDirection();\n          }\n\n          // If this header was recently active and now no longer sorted, animate away the arrow.\n          if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n            this._disableViewStateAnimation = false;\n            this._setAnimationTransitionState({fromState: 'active', toState: this._arrowDirection});\n          }\n\n          changeDetectorRef.markForCheck();\n        });\n  }\n\n  ngOnInit() {\n    if (!this.id && this._cdkColumnDef) {\n      this.id = this._cdkColumnDef.name;\n    }\n\n    // Initialize the direction of the arrow and set the view state to be immediately that state.\n    this._updateArrowDirection();\n    this._setAnimationTransitionState(\n        {toState: this._isSorted() ? 'active' : this._arrowDirection});\n\n    this._sort.register(this);\n  }\n\n  ngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /**\n   * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n   * user showing what the active sort will become. If set to false, the arrow will fade away.\n   */\n  _setIndicatorHintVisible(visible: boolean) {\n    // No-op if the sort header is disabled - should not make the hint visible.\n    if (this._isDisabled() && visible) { return; }\n\n    this._showIndicatorHint = visible;\n\n    if (!this._isSorted()) {\n      this._updateArrowDirection();\n      if (this._showIndicatorHint) {\n        this._setAnimationTransitionState({fromState: this._arrowDirection, toState: 'hint'});\n      } else {\n        this._setAnimationTransitionState({fromState: 'hint', toState: this._arrowDirection});\n      }\n    }\n  }\n\n  /**\n   * Sets the animation transition view state for the arrow's position and opacity. If the\n   * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n   * no animation appears.\n   */\n  _setAnimationTransitionState(viewState: ArrowViewStateTransition) {\n    this._viewState = viewState;\n\n    // If the animation for arrow position state (opacity/translation) should be disabled,\n    // remove the fromState so that it jumps right to the toState.\n    if (this._disableViewStateAnimation) {\n      this._viewState = {toState: viewState.toState};\n    }\n  }\n\n  /** Triggers the sort on this sort header and removes the indicator hint. */\n  _handleClick() {\n    if (this._isDisabled()) { return; }\n\n    this._sort.sort(this);\n\n    // Do not show the animation if the header was already shown in the right position.\n    if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n      this._disableViewStateAnimation = true;\n    }\n\n    // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into\n    // the direction it is facing.\n    const viewState: ArrowViewStateTransition = this._isSorted() ?\n        {fromState: this._arrowDirection, toState: 'active'} :\n        {fromState: 'active', toState: this._arrowDirection};\n    this._setAnimationTransitionState(viewState);\n\n    this._showIndicatorHint = false;\n  }\n\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n  _isSorted() {\n    return this._sort.active == this.id &&\n        (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n  }\n\n  /** Returns the animation state for the arrow direction (indicator and pointers). */\n  _getArrowDirectionState() {\n    return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n  }\n\n  /** Returns the arrow position state (opacity, translation). */\n  _getArrowViewState() {\n    const fromState = this._viewState.fromState;\n    return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n  }\n\n  /**\n   * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n   * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n   * active sorted direction. The reason this is updated through a function is because the direction\n   * should only be changed at specific times - when deactivated but the hint is displayed and when\n   * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n   * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n   * preserving its direction, even though the next sort direction is actually different and should\n   * only be changed once the arrow displays again (hint or activation).\n   */\n  _updateArrowDirection() {\n    this._arrowDirection = this._isSorted() ?\n        this._sort.direction :\n        (this.start || this._sort.start);\n  }\n\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n\n  /**\n   * Gets the aria-sort attribute that should be applied to this sort header. If this header\n   * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n   * says that the aria-sort property should only be present on one header at a time, so removing\n   * ensures this is true.\n   */\n  _getAriaSortAttribute() {\n    if (!this._isSorted()) { return null; }\n\n    return this._sort.direction == 'asc' ? 'ascending' : 'descending';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatSortHeader} from './sort-header';\nimport {MatSort} from './sort';\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MatSort, MatSortHeader],\n  declarations: [MatSort, MatSortHeader],\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n})\nexport class MatSortModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\nimport {CdkStepLabel} from '@angular/cdk/stepper';\n\n@Directive({\n  selector: '[matStepLabel]',\n})\nexport class MatStepLabel extends CdkStepLabel {\n  constructor(template: TemplateRef<any>) {\n    super(template);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Stepper data that is required for internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatStepperIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** Label that is rendered below optional steps. */\n  optionalLabel: string = 'Optional';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusMonitor, FocusOrigin, FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {CdkScrollable} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {filter, take, startWith, takeUntil, map, debounceTime} from 'rxjs/operators';\nimport {merge, fromEvent, Observable, Subject} from 'rxjs';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/** Throws an exception when two MatDrawer are matching the same position. */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n\n\n/** Result of the toggle promise that indicates the state of the drawer. */\nexport type MatDrawerToggleResult = 'open' | 'close';\n\n/** Configures whether drawers should use auto sizing by default. */\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n      providedIn: 'root',\n      factory: MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY(): boolean {\n  return false;\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContent implements AfterContentInit {\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatDrawerContainer)) public _container: MatDrawerContainer) {\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMarginChanges.subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n\n\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer',\n  exportAs: 'matDrawer',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _focusTrap: FocusTrap;\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\n  private _enableAnimations = false;\n\n  /** The side that the drawer is attached to. */\n  @Input()\n  get position(): 'start' | 'end' { return this._position; }\n  set position(value: 'start' | 'end') {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onPositionChanged.emit();\n    }\n  }\n  private _position: 'start' | 'end' = 'start';\n\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  @Input()\n  get mode(): 'over' | 'push' | 'side' { return this._mode; }\n  set mode(value: 'over' | 'push' | 'side') {\n    this._mode = value;\n    this._modeChanged.next();\n  }\n  private _mode: 'over' | 'push' | 'side' = 'over';\n\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  @Input()\n  get disableClose(): boolean { return this._disableClose; }\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\n  private _disableClose: boolean = false;\n\n  /** Whether the drawer should focus the first focusable element automatically when opened. */\n  @Input()\n  get autoFocus(): boolean { return this._autoFocus; }\n  set autoFocus(value: boolean) { this._autoFocus = coerceBooleanProperty(value); }\n  private _autoFocus: boolean = true;\n\n  /** How the sidenav was opened (keypress, mouse click etc.) */\n  private _openedVia: FocusOrigin | null;\n\n  /** Emits whenever the drawer has started animating. */\n  _animationStarted = new EventEmitter<AnimationEvent>();\n\n  /** Current state of the sidenav animation. */\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\n\n  /** Event emitted when the drawer open state is changed. */\n  @Output() readonly openedChange: EventEmitter<boolean> =\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter<boolean>(/* isAsync */true);\n\n  /** Event emitted when the drawer has been opened. */\n  @Output('opened')\n  get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started opening. */\n  @Output()\n  get openedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started closing. */\n  @Output()\n  get closedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer's position changes. */\n  @Output('positionChanged') onPositionChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\n   * to know when to when the mode changes so it can adapt the margins on the content.\n   */\n  readonly _modeChanged = new Subject();\n\n  get _isFocusTrapEnabled(): boolean {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n\n  constructor(private _elementRef: ElementRef,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _focusMonitor: FocusMonitor,\n              private _platform: Platform,\n              private _ngZone: NgZone,\n              @Optional() @Inject(DOCUMENT) private _doc: any) {\n\n    this.openedChange.subscribe((opened: boolean) => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n        }\n\n        if (this._isFocusTrapEnabled && this._focusTrap) {\n          this._trapFocus();\n        }\n      } else {\n        this._restoreFocus();\n      }\n    });\n\n    /**\n     * Listen to `keydown` events outside the zone so that change detection is not run every\n     * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n     * and we don't have close disabled.\n     */\n    this._ngZone.runOutsideAngular(() => {\n        fromEvent(this._elementRef.nativeElement, 'keydown').pipe(\n            filter((event: KeyboardEvent) => event.keyCode === ESCAPE && !this.disableClose)\n        ).subscribe((event) => this._ngZone.run(() => {\n            this.close();\n            event.stopPropagation();\n        }));\n    });\n  }\n\n  /** Traps focus inside the drawer. */\n  private _trapFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\n   * opened.\n   */\n  private _restoreFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    const activeEl = this._doc && this._doc.activeElement;\n\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this._isFocusTrapEnabled;\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { this.toggle(coerceBooleanProperty(value)); }\n  private _opened: boolean = false;\n\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia?: FocusOrigin): Promise<MatDrawerToggleResult> {\n    return this.toggle(true, openedVia);\n  }\n\n  /** Close the drawer. */\n  close(): Promise<MatDrawerToggleResult> {\n    return this.toggle(false);\n  }\n\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\n    Promise<MatDrawerToggleResult> {\n\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      this._restoreFocus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\n    }\n\n    return new Promise<MatDrawerToggleResult>(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => resolve(open ? 'open' : 'close'));\n    });\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStarted.emit(event);\n  }\n\n  _onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n        (toState === 'void' && fromState.indexOf('open') === 0)) {\n      this.openedChange.emit(this._opened);\n    }\n  }\n\n  get _width(): number {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\n}\n\n\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-container',\n  exportAs: 'matDrawerContainer',\n  templateUrl: 'drawer-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContainer implements AfterContentInit, OnDestroy {\n  @ContentChildren(MatDrawer) _drawers: QueryList<MatDrawer>;\n  @ContentChild(MatDrawerContent) _content: MatDrawerContent;\n\n  /** The drawer child with the `start` position. */\n  get start(): MatDrawer | null { return this._start; }\n\n  /** The drawer child with the `end` position. */\n  get end(): MatDrawer | null { return this._end; }\n\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  @Input()\n  get autosize(): boolean { return this._autosize; }\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\n  private _autosize: boolean;\n\n  /**\n   * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n   * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n   * mode as well.\n   */\n  @Input()\n  get hasBackdrop() {\n    if (this._backdropOverride == null) {\n      return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n    }\n\n    return this._backdropOverride;\n  }\n  set hasBackdrop(value: any) {\n    this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n  }\n  _backdropOverride: boolean | null;\n\n  /** Event emitted when the drawer backdrop is clicked. */\n  @Output() readonly backdropClick: EventEmitter<void> = new EventEmitter<void>();\n\n  /** The drawer at the start/end position, independent of direction. */\n  private _start: MatDrawer | null;\n  private _end: MatDrawer | null;\n\n  /**\n   * The drawer at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MatDrawer | null;\n  private _right: MatDrawer | null;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\n  private readonly _doCheckSubject = new Subject<void>();\n\n  /**\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\n   * fixed position elements inside of the transformed element.\n   */\n  _contentMargins: {left: number|null, right: number|null} = {left: null, right: null};\n\n  readonly _contentMarginChanges = new Subject<{left: number|null, right: number|null}>();\n\n  /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n  @ViewChild(CdkScrollable) scrollable: CdkScrollable;\n\n  constructor(@Optional() private _dir: Directionality,\n              private _element: ElementRef,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string) {\n\n    // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n        this._updateContentMargins();\n      });\n    }\n\n    this._autosize = defaultAutosize;\n  }\n\n  ngAfterContentInit() {\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length ||\n          this._isDrawerOpen(this._start) ||\n          this._isDrawerOpen(this._end)) {\n        this._updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    this._doCheckSubject.pipe(\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)\n    ).subscribe(() => this._updateContentMargins());\n  }\n\n  ngOnDestroy() {\n    this._doCheckSubject.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Calls `open` of both start and end drawers */\n  open(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n\n  /** Calls `close` of both start and end drawers */\n  close(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchDrawerToggle(drawer: MatDrawer): void {\n    drawer._animationStarted.pipe(\n      takeUntil(this._drawers.changes),\n      filter((event: AnimationEvent) => event.fromState !== event.toState)\n    )\n    .subscribe((event: AnimationEvent) => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant' && this._animationMode !== 'NoopAnimations') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this._updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  private _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  private _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n        .subscribe(() => {\n          this._updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  private _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add('mat-drawer-opened');\n    } else {\n      this._element.nativeElement.classList.remove('mat-drawer-opened');\n    }\n  }\n\n  /** Validate the state of the drawer children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (!this._dir || this._dir.value == 'ltr') {\n      this._left = this._start;\n      this._right = this._end;\n    } else {\n      this._left = this._end;\n      this._right = this._start;\n    }\n  }\n\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  private _isPushed() {\n    return (this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\n           (this._isDrawerOpen(this._end) && this._end.mode != 'over');\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n\n  _closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && this._canHaveBackdrop(drawer))\n      .forEach(drawer => drawer!.close());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start)) ||\n           (this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end));\n  }\n\n  private _canHaveBackdrop(drawer: MatDrawer): boolean {\n    return drawer.mode !== 'side' || !!this._backdropOverride;\n  }\n\n  private _isDrawerOpen(drawer: MatDrawer | null): drawer is MatDrawer {\n    return drawer != null && drawer.opened;\n  }\n\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  private _updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._width;\n      } else if (this._left.mode == 'push') {\n        let width = this._left._width;\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._width;\n      } else if (this._right.mode == 'push') {\n        let width = this._right._width;\n        right += width;\n        left -= width;\n      }\n    }\n\n    if (left !== this._contentMargins.left || right !== this._contentMargins.right) {\n      this._contentMargins = {left, right};\n\n      // Pull back into the NgZone since in some cases we could be outside. We need to be careful\n      // to do it only when something changed, otherwise we can end up hitting the zone too often.\n      this._ngZone.run(() => this._contentMarginChanges.next(this._contentMargins));\n    }\n\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  forwardRef,\n  Inject,\n  Input,\n  ViewEncapsulation,\n  QueryList,\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContent extends MatDrawerContent {\n  constructor(\n      changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer) {\n    super(changeDetectorRef, container);\n  }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav',\n  exportAs: 'matSidenav',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenav extends MatDrawer {\n  /** Whether the sidenav is fixed in the viewport. */\n  @Input()\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n  private _fixedInViewport = false;\n\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  @Input()\n  get fixedTopGap(): number { return this._fixedTopGap; }\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n  private _fixedTopGap = 0;\n\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  @Input()\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n  private _fixedBottomGap = 0;\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-container',\n  exportAs: 'matSidenavContainer',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContainer extends MatDrawerContainer {\n  @ContentChildren(MatSidenav) _drawers: QueryList<MatSidenav>;\n  @ContentChild(MatSidenavContent) _content: MatSidenavContent;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {ScrollDispatchModule} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    ScrollDispatchModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n})\nexport class MatSidenavModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HammerInput,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  constructor(\n    /** The source MatSlideToggle of the event. */\n    public source: MatSlideToggle,\n    /** The new `checked` value of the MatSlideToggle. */\n    public checked: boolean) { }\n}\n\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nexport class MatSlideToggleBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSlideToggleMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slide-toggle',\n  exportAs: 'matSlideToggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n    ControlValueAccessor, CanDisable, CanColor, HasTabIndex, CanDisableRipple {\n\n  private onChange = (_: any) => {};\n  private onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n\n  /** Reference to the focus state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  /** Whether the thumb is currently being dragged. */\n  private _dragging = false;\n\n  /** Previous checked state before drag started. */\n  private _previousChecked: boolean;\n\n  /** Width of the thumb bar of the slide-toggle. */\n  private _thumbBarWidth: number;\n\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\n  private _dragPercentage: number;\n\n  /** Reference to the thumb HTMLElement. */\n  @ViewChild('thumbContainer') _thumbEl: ElementRef<HTMLElement>;\n\n  /** Reference to the thumb bar HTMLElement. */\n  @ViewChild('toggleBar') _thumbBarEl: ElementRef<HTMLElement>;\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the slide-toggle element is checked or not */\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() readonly change: EventEmitter<MatSlideToggleChange> =\n      new EventEmitter<MatSlideToggleChange>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** Reference to the ripple directive on the thumb container. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated The `_platform` parameter to be removed.\n               * @deletion-target 7.0.0\n               */\n              _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string,\n              private _ngZone: NgZone) {\n\n    super(elementRef);\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    // Releasing the pointer over the `<label>` element while dragging triggers another\n    // click event on the `<label>` element. This means that the checked state of the underlying\n    // input changed unintentionally and needs to be changed back.\n    if (this._dragging) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      // For keyboard focus show a persistent ripple as focus indicator.\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      this.onTouched();\n\n      // Fade out and clear the focus ripple if one is currently present.\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  private _emitChangeEvent() {\n    this.onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n\n  /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\n  private _getDragPercentage(distance: number) {\n    let percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n  _onDragStart() {\n    if (!this.disabled && !this._dragging) {\n      const thumbEl = this._thumbEl.nativeElement;\n      this._thumbBarWidth = this._thumbBarEl.nativeElement.clientWidth - thumbEl.clientWidth;\n      thumbEl.classList.add('mat-dragging');\n\n      this._previousChecked = this.checked;\n      this._dragging = true;\n    }\n  }\n\n  _onDrag(event: HammerInput) {\n    if (this._dragging) {\n      this._dragPercentage = this._getDragPercentage(event.deltaX);\n      // Calculate the moved distance based on the thumb bar width.\n      const dragX = (this._dragPercentage / 100) * this._thumbBarWidth;\n      this._thumbEl.nativeElement.style.transform = `translate3d(${dragX}px, 0, 0)`;\n    }\n  }\n\n  _onDragEnd() {\n    if (this._dragging) {\n      const newCheckedValue = this._dragPercentage > 50;\n\n      if (newCheckedValue !== this.checked) {\n        this.checked = newCheckedValue;\n        this._emitChangeEvent();\n      }\n\n      // The drag should be stopped outside of the current event handler, otherwise the\n      // click event will be fired before it and will revert the drag change.\n      this._ngZone.runOutsideAngular(() => setTimeout(() => {\n        if (this._dragging) {\n          this._dragging = false;\n          this._thumbEl.nativeElement.classList.remove('mat-dragging');\n\n          // Reset the transform because the component will take care\n          // of the thumb position after drag.\n          this._thumbEl.nativeElement.style.transform = '';\n        }\n      }));\n    }\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the slide-toggle changes.\n    // Since the slide-toggle uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlideToggle} from './slide-toggle';\n\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatSlideToggle, MatCommonModule],\n  declarations: [MatSlideToggle],\n  providers: [\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n})\nexport class MatSlideToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  Input,\n  ElementRef,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nexport class MatProgressSpinnerBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatProgressSpinnerMixinBase = mixinColor(MatProgressSpinnerBase, 'primary');\n\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/material2/issues/8984\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n\n/**\n * `<mat-progress-spinner>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements CanColor {\n\n  private _value = 0;\n  private _strokeWidth: number;\n  private _fallbackAnimation = false;\n\n  /** Tracks diameters of existing instances to de-dupe generated styles (default d = 100) */\n  private static diameters = new Set<number>([BASE_SIZE]);\n\n  /**\n   * Used for storing all of the generated keyframe animations.\n   * @dynamic\n   */\n  private static styleTag: HTMLStyleElement|null = null;\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number { return this._diameter; }\n  set diameter(size: number) {\n    this._diameter = coerceNumberProperty(size);\n\n    if (!this._fallbackAnimation && !MatProgressSpinner.diameters.has(this._diameter)) {\n      this._attachStyleNode();\n    }\n  }\n  private _diameter = BASE_SIZE;\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth || this.diameter / 10;\n  }\n  set strokeWidth(value: number) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n\n\n  /** Mode of the progress circle */\n  @Input() mode: ProgressSpinnerMode = 'determinate';\n\n  /** Value of the progress circle. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue: number) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n\n  constructor(public _elementRef: ElementRef,\n              platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n\n    super(_elementRef);\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    const animationClass =\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n\n    _elementRef.nativeElement.classList.add(animationClass);\n  }\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  get _circleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  get _viewBox() {\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  get _strokeCircumference(): number {\n    return 2 * Math.PI * this._circleRadius;\n  }\n\n  /** The dash offset of the svg circle. */\n  get _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference * (100 - this._value) / 100;\n    }\n\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._strokeCircumference * 0.2;\n    }\n\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  get _circleStrokeWidth() {\n    return this.strokeWidth / this.diameter * 100;\n  }\n\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  private _attachStyleNode(): void {\n    let styleTag = MatProgressSpinner.styleTag;\n\n    if (!styleTag) {\n      styleTag = this._document.createElement('style');\n      this._document.head.appendChild(styleTag);\n      MatProgressSpinner.styleTag = styleTag;\n    }\n\n    if (styleTag && styleTag.sheet) {\n      (styleTag.sheet as CSSStyleSheet).insertRule(this._getAnimationText(), 0);\n    }\n\n    MatProgressSpinner.diameters.add(this.diameter);\n  }\n\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  private _getAnimationText(): string {\n    return INDETERMINATE_ANIMATION_TEMPLATE\n        // Animation should begin at 5% and end at 80%\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n        .replace(/DIAMETER/g, `${this.diameter}`);\n  }\n}\n\n\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSpinner extends MatProgressSpinner {\n  constructor(elementRef: ElementRef, platform: Platform,\n              @Optional() @Inject(DOCUMENT) document: any) {\n    super(elementRef, platform, document);\n    this.mode = 'indeterminate';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner\n  ],\n})\nclass MatProgressSpinnerModule {}\n\nexport {MatProgressSpinnerModule};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport class MatRadioChange {\n  constructor(\n    /** The MatRadioButton that emits the change event. */\n    public source: MatRadioButton,\n    /** The value of the MatRadioButton. */\n    public value: any) {}\n}\n\n\n// Boilerplate for applying mixins to MatRadioGroup.\n/** @docs-private */\nexport class MatRadioGroupBase { }\nexport const _MatRadioGroupMixinBase = mixinDisabled(MatRadioGroupBase);\n\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n@Directive({\n  selector: 'mat-radio-group',\n  exportAs: 'matRadioGroup',\n  providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n  inputs: ['disabled'],\n})\nexport class MatRadioGroup extends _MatRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n  /**\n   * Selected value for group. Should equal the value of the selected radio button if there *is*\n   * a corresponding radio button with a matching value. If there is *not* such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\n\n  /** The currently selected radio button. Should match value. */\n  private _selected: MatRadioButton | null = null;\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  private _labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the radio group is disabled. */\n  private _disabled: boolean = false;\n\n  /** Whether the radio group is required. */\n  private _required: boolean = false;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** Child radio buttons. */\n  @ContentChildren(forwardRef(() => MatRadioButton), { descendants: true })\n  _radios: QueryList<MatRadioButton>;\n\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition;\n  }\n  set labelPosition(v) {\n    this._labelPosition = v === 'before' ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n\n  /** Value of the radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value !== newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /** Whether the radio button is selected. */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: MatRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Whether the radio group is disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  /** Whether the radio group is required */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n      });\n    }\n  }\n\n  /** Updates the `selected` radio button from the internal _value state. */\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n    if (this._radios && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value === radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new MatRadioChange(this._selected!, this._value));\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n}\n\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nexport class MatRadioButtonBase {\n  // Since the disabled property is manually defined for the MatRadioButton and isn't set up in\n  // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n  // defined to properly work.\n  disabled: boolean;\n\n  constructor(public _elementRef: ElementRef) {}\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nexport const _MatRadioButtonMixinBase =\n    mixinColor(mixinDisableRipple(mixinTabIndex(MatRadioButtonBase)), 'accent');\n\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['color', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRadioButton',\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[attr.id]': 'id',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatRadioButton extends _MatRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, CanDisableRipple, HasTabIndex {\n\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\n\n  /** The unique ID for the radio button. */\n  @Input() id: string = this._uniqueId;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** The 'aria-describedby' attribute is read after the element's label and field type. */\n  @Input('aria-describedby') ariaDescribedby: string;\n\n  /** Whether this radio button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = coerceBooleanProperty(value);\n    if (this._checked !== newCheckedState) {\n      this._checked = newCheckedState;\n      if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** The value of this radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value !== value) {\n      this._value = value;\n      if (this.radioGroup !== null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value === value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n  private _labelPosition: 'before' | 'after';\n\n  /** Whether the radio button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    const newDisabledState = coerceBooleanProperty(value);\n    if (this._disabled !== newDisabledState) {\n      this._disabled = newDisabledState;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the radio button is required. */\n  @Input()\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: MatRadioGroup;\n\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether this radio is checked. */\n  private _checked: boolean = false;\n\n  /** Whether this radio is disabled. */\n  private _disabled: boolean;\n\n  /** Whether this radio is required. */\n  private _required: boolean;\n\n  /** Value assigned to this radio. */\n  private _value: any = null;\n\n  /** The child ripple instance. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  /** Reference to the current focus ripple. */\n  private _focusRipple: RippleRef | null;\n\n  /** Unregister function for _radioDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  /** The native `<input type=radio>` element */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  constructor(@Optional() radioGroup: MatRadioGroup,\n              elementRef: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _radioDispatcher: UniqueSelectionDispatcher) {\n    super(elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id !== this.id && name === this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /** Focuses the radio button. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n    this._removeUniqueSelectionListener();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    this.change.emit(new MatRadioChange(this, this._value));\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   */\n  _onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      this.radioGroup._touch();\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      if (this.radioGroup) {\n        this.radioGroup._touch();\n      }\n\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatRadioButton, MatRadioGroup} from './radio';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule],\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n  declarations: [MatRadioGroup, MatRadioButton],\n})\nexport class MatRadioModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material drawers. */\nexport const matDrawerAnimations: {\n  readonly transformDrawer: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [\n    state('open, open-instant', style({\n      'transform': 'translate3d(0, 0, 0)',\n      'visibility': 'visible',\n    })),\n    state('void', style({\n      // Avoids the shadow showing up when closed in SSR.\n      'box-shadow': 'none',\n      'visibility': 'hidden',\n    })),\n    transition('void => open-instant', animate('0ms')),\n    transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MatSelect, MatSelectTrigger} from './select';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class MatSelectModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by MatTooltip. */\nexport const matTooltipAnimations: {\n  readonly tooltipState: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [\n    state('initial, void, hidden', style({transform: 'scale(0)'})),\n    state('visible', style({transform: 'scale(1)'})),\n    transition('* => visible', animate('150ms cubic-bezier(0.0, 0.0, 0.2, 1)')),\n    transition('* => hidden', animate('150ms cubic-bezier(0.4, 0.0, 1, 1)')),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatTooltip, TooltipComponent} from './tooltip';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n  ],\n  exports: [MatTooltip, TooltipComponent, MatCommonModule],\n  declarations: [MatTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n})\nexport class MatTooltipModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n@Injectable({providedIn: 'root'})\nexport class MatPaginatorIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the page size selector. */\n  itemsPerPageLabel: string = 'Items per page:';\n\n  /** A label for the button that increments the current page. */\n  nextPageLabel: string = 'Next page';\n\n  /** A label for the button that decrements the current page. */\n  previousPageLabel: string = 'Previous page';\n\n  /** A label for the button that moves to the first page. */\n  firstPageLabel: string = 'First page';\n\n  /** A label for the button that moves to the last page. */\n  lastPageLabel: string = 'Last page';\n\n  /** A label for the range of items within the current page and the length of the whole list. */\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\n  }\n}\n\n/** @docs-private */\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n\n/** @docs-private */\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatPaginatorIntl} from './paginator-intl';\nimport {HasInitialized, mixinInitialized} from '@angular/material/core';\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n  /** The current page index. */\n  pageIndex: number;\n\n  /**\n   * Index of the page that was selected previously.\n   * @deletion-target 7.0.0 To be made into a required property.\n   */\n  previousPageIndex?: number;\n\n  /** The current page size */\n  pageSize: number;\n\n  /** The current total number of items being paged */\n  length: number;\n}\n\n// Boilerplate for applying mixins to MatPaginator.\n/** @docs-private */\nexport class MatPaginatorBase {}\nexport const _MatPaginatorBase = mixinInitialized(MatPaginatorBase);\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-paginator',\n  exportAs: 'matPaginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatPaginator extends _MatPaginatorBase implements OnInit, OnDestroy, HasInitialized {\n  private _initialized: boolean;\n  private _intlChanges: Subscription;\n\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n  @Input()\n  get pageIndex(): number { return this._pageIndex; }\n  set pageIndex(value: number) {\n    this._pageIndex = Math.max(coerceNumberProperty(value), 0);\n    this._changeDetectorRef.markForCheck();\n  }\n  _pageIndex: number = 0;\n\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n  @Input()\n  get length(): number { return this._length; }\n  set length(value: number) {\n    this._length = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  _length: number = 0;\n\n  /** Number of items to display on a page. By default set to 50. */\n  @Input()\n  get pageSize(): number { return this._pageSize; }\n  set pageSize(value: number) {\n    this._pageSize = Math.max(coerceNumberProperty(value), 0);\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSize: number;\n\n  /** The set of provided page size options to display to the user. */\n  @Input()\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\n  set pageSizeOptions(value: number[]) {\n    this._pageSizeOptions = (value || []).map(p => coerceNumberProperty(p));\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSizeOptions: number[] = [];\n\n  /** Whether to hide the page size selection UI from the user. */\n  @Input()\n  get hidePageSize(): boolean { return this._hidePageSize; }\n  set hidePageSize(value: boolean) {\n    this._hidePageSize = coerceBooleanProperty(value);\n  }\n  private _hidePageSize = false;\n\n\n  /** Whether to show the first/last buttons UI to the user. */\n  @Input()\n  get showFirstLastButtons(): boolean { return this._showFirstLastButtons; }\n  set showFirstLastButtons(value: boolean) {\n    this._showFirstLastButtons = coerceBooleanProperty(value);\n  }\n  private _showFirstLastButtons = false;\n\n  /** Event emitted when the paginator changes the page size or page index. */\n  @Output() readonly page: EventEmitter<PageEvent> = new EventEmitter<PageEvent>();\n\n  /** Displayed set of page size options. Will be sorted and include current page size. */\n  _displayedPageSizeOptions: number[];\n\n  constructor(public _intl: MatPaginatorIntl,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super();\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n    this._markInitialized();\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  /** Advances to the next page if it exists. */\n  nextPage(): void {\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex++;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move back to the previous page if it exists. */\n  previousPage(): void {\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex--;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the first page if not already there. */\n  firstPage(): void {\n    // hasPreviousPage being false implies at the start\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = 0;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the last page if not already there. */\n  lastPage(): void {\n    // hasNextPage being false implies at the end\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = this.getNumberOfPages();\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Whether there is a previous page. */\n  hasPreviousPage(): boolean {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n\n  /** Whether there is a next page. */\n  hasNextPage(): boolean {\n    const numberOfPages = this.getNumberOfPages();\n    return this.pageIndex < numberOfPages && this.pageSize != 0;\n  }\n\n  /** Calculate the number of pages */\n  getNumberOfPages(): number {\n    return Math.ceil(this.length / this.pageSize) - 1;\n  }\n\n\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n  _changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    const previousPageIndex = this.pageIndex;\n\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n    this.pageSize = pageSize;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n  private _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) === -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n  private _emitPageEvent(previousPageIndex: number) {\n    this.page.emit({\n      previousPageIndex,\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatPaginator} from './paginator';\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatTooltipModule,\n  ],\n  exports: [MatPaginator],\n  declarations: [MatPaginator],\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n})\nexport class MatPaginatorModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Input,\n  ViewEncapsulation\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progress bar \"for\".\n\n// Boilerplate for applying mixins to MatProgressBar.\n/** @docs-private */\nexport class MatProgressBarBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\nexport const _MatProgressBarMixinBase = mixinColor(MatProgressBarBase, 'primary');\n\n/** Counter used to generate unique IDs for progress bars. */\nlet progressbarId = 0;\n\n/**\n * `<mat-progress-bar>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n    'class': 'mat-progress-bar',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressBar extends _MatProgressBarMixinBase implements CanColor {\n\n  constructor(public _elementRef: ElementRef) {\n    super(_elementRef);\n  }\n\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value(): number { return this._value; }\n  set value(v: number) { this._value = clamp(v || 0); }\n  private _value: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue(): number { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n  private _bufferValue: number = 0;\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** The id of the progress bar. */\n  progressbarId = `mat-progress-bar-${progressbarId++}`;\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    const scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode === 'buffer') {\n      const scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n})\nexport class MatProgressBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager, FocusOrigin} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, LEFT_ARROW, RIGHT_ARROW, DOWN_ARROW, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Output,\n  TemplateRef,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, switchMap, take} from 'rxjs/operators';\nimport {matMenuAnimations} from './menu-animations';\nimport {MatMenuContent} from './menu-content';\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\n\n\n/** Default `mat-menu` options that can be overridden. */\nexport interface MatMenuDefaultOptions {\n  /** The x-axis position of the menu. */\n  xPosition: MenuPositionX;\n\n  /** The y-axis position of the menu. */\n  yPosition: MenuPositionY;\n\n  /** Whether the menu should overlap the menu trigger. */\n  overlapTrigger: boolean;\n\n  /** Class to be applied to the menu's backdrop. */\n  backdropClass: string;\n\n  /** Whether the menu has a backdrop. */\n  hasBackdrop?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-menu`. */\nexport const MAT_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MatMenuDefaultOptions>('mat-menu-default-options', {\n      providedIn: 'root',\n      factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_MENU_DEFAULT_OPTIONS_FACTORY(): MatMenuDefaultOptions {\n  return {\n    overlapTrigger: true,\n    xPosition: 'after',\n    yPosition: 'below',\n    backdropClass: 'cdk-overlay-transparent-backdrop',\n  };\n}\n/**\n * Start elevation for the menu panel.\n * @docs-private\n */\nconst MAT_MENU_BASE_ELEVATION = 2;\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matMenu',\n  animations: [\n    matMenuAnimations.transformMenu,\n    matMenuAnimations.fadeInItems\n  ],\n  providers: [\n    {provide: MAT_MENU_PANEL, useExisting: MatMenu}\n  ]\n})\nexport class MatMenu implements OnInit, AfterContentInit, MatMenuPanel<MatMenuItem>, OnDestroy {\n  private _keyManager: FocusKeyManager<MatMenuItem>;\n  private _xPosition: MenuPositionX = this._defaultOptions.xPosition;\n  private _yPosition: MenuPositionY = this._defaultOptions.yPosition;\n  private _previousElevation: string;\n\n  /** Menu items inside the current menu. */\n  private _items: MatMenuItem[] = [];\n\n  /** Emits whenever the amount of menu items changes. */\n  private _itemChanges = new Subject<MatMenuItem[]>();\n\n  /** Subscription to tab events on the menu panel */\n  private _tabSubscription = Subscription.EMPTY;\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: {[key: string]: boolean} = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter' = 'void';\n\n  /** Emits whenever an animation on the menu completes. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  /** Whether the menu is animating. */\n  _isAnimating: boolean;\n\n  /** Parent menu of the current menu panel. */\n  parentMenu: MatMenuPanel | undefined;\n\n  /** Layout direction of the menu. */\n  direction: Direction;\n\n  /** Class to be added to the backdrop element. */\n  @Input() backdropClass: string = this._defaultOptions.backdropClass;\n\n  /** Position of the menu in the X axis. */\n  @Input()\n  get xPosition(): MenuPositionX { return this._xPosition; }\n  set xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** Position of the menu in the Y axis. */\n  @Input()\n  get yPosition(): MenuPositionY { return this._yPosition; }\n  set yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) templateRef: TemplateRef<any>;\n\n  /**\n   * List of the items inside of a menu.\n   * @deprecated\n   * @deletion-target 7.0.0\n   */\n  @ContentChildren(MatMenuItem) items: QueryList<MatMenuItem>;\n\n  /**\n   * Menu content that will be rendered lazily.\n   * @docs-private\n   */\n  @ContentChild(MatMenuContent) lazyContent: MatMenuContent;\n\n  /** Whether the menu should overlap its trigger. */\n  @Input()\n  get overlapTrigger(): boolean { return this._overlapTrigger; }\n  set overlapTrigger(value: boolean) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  private _overlapTrigger: boolean = this._defaultOptions.overlapTrigger;\n\n  /** Whether the menu has a backdrop. */\n  @Input()\n  get hasBackdrop(): boolean | undefined { return this._hasBackdrop; }\n  set hasBackdrop(value: boolean | undefined) {\n    this._hasBackdrop = coerceBooleanProperty(value);\n  }\n  private _hasBackdrop: boolean | undefined = this._defaultOptions.hasBackdrop;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n  @Input('class')\n  set panelClass(classes: string) {\n    if (classes && classes.length) {\n      this._classList = classes.split(' ').reduce((obj: any, className: string) => {\n        obj[className] = true;\n        return obj;\n      }, {});\n\n      this._elementRef.nativeElement.className = '';\n      this.setPositionClasses();\n    }\n  }\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   * @deletion-target 7.0.0\n   */\n  @Input()\n  get classList(): string { return this.panelClass; }\n  set classList(classes: string) { this.panelClass = classes; }\n\n  /** Event emitted when the menu is closed. */\n  @Output() readonly closed: EventEmitter<void | 'click' | 'keydown' | 'tab'> =\n      new EventEmitter<void | 'click' | 'keydown' | 'tab'>();\n\n  /**\n   * Event emitted when the menu is closed.\n   * @deprecated Switch to `closed` instead\n   * @deletion-target 7.0.0\n   */\n  @Output() close = this.closed;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone,\n    @Inject(MAT_MENU_DEFAULT_OPTIONS) private _defaultOptions: MatMenuDefaultOptions) { }\n\n  ngOnInit() {\n    this.setPositionClasses();\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatMenuItem>(this._items).withWrap().withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.close.emit('tab'));\n  }\n\n  ngOnDestroy() {\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered(): Observable<MatMenuItem> {\n    return this._itemChanges.pipe(\n      startWith(this._items),\n      switchMap(items => merge(...items.map(item => item._hovered)))\n    );\n  }\n\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n\n    switch (keyCode) {\n      case ESCAPE:\n        this.closed.emit('keydown');\n        event.stopPropagation();\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n      break;\n      default:\n        if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n          this._keyManager.setFocusOrigin('keyboard');\n        }\n\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Focus the first item in the menu.\n   * @param origin Action from which the focus originated. Used to set the correct styling.\n   */\n  focusFirstItem(origin: FocusOrigin = 'program'): void {\n    // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n    if (this.lazyContent) {\n      this._ngZone.onStable.asObservable()\n        .pipe(take(1))\n        .subscribe(() => this._keyManager.setFocusOrigin(origin).setFirstItemActive());\n    } else {\n      this._keyManager.setFocusOrigin(origin).setFirstItemActive();\n    }\n  }\n\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\n   * the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n\n  /**\n   * It's necessary to set position-based classes to ensure the menu panel animation\n   * folds out from the correct direction.\n   */\n  setPositionClasses(posX: MenuPositionX = this.xPosition, posY: MenuPositionY = this.yPosition) {\n    this._classList['mat-menu-before'] = posX === 'before';\n    this._classList['mat-menu-after'] = posX === 'after';\n    this._classList['mat-menu-above'] = posY === 'above';\n    this._classList['mat-menu-below'] = posY === 'below';\n  }\n\n  /**\n   * Sets the menu panel elevation.\n   * @param depth Number of parent menus that come before the menu.\n   */\n  setElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    const newElevation = `mat-elevation-z${MAT_MENU_BASE_ELEVATION + depth}`;\n    const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n\n  /**\n   * Registers a menu item with the menu.\n   * @docs-private\n   */\n  addItem(item: MatMenuItem) {\n    // We register the items through this method, rather than picking them up through\n    // `ContentChildren`, because we need the items to be picked up by their closest\n    // `mat-menu` ancestor. If we used `@ContentChildren(MatMenuItem, {descendants: true})`,\n    // all descendant items will bleed into the top-level menu in the case where the consumer\n    // has `mat-menu` instances nested inside each other.\n    if (this._items.indexOf(item) === -1) {\n      this._items.push(item);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Removes an item from the menu.\n   * @docs-private\n   */\n  removeItem(item: MatMenuItem) {\n    const index = this._items.indexOf(item);\n\n    if (this._items.indexOf(item) > -1) {\n      this._items.splice(index, 1);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /** Starts the enter animation. */\n  _startAnimation() {\n    // @deletion-target 7.0.0 Combine with _resetAnimation.\n    this._panelAnimationState = 'enter';\n  }\n\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    // @deletion-target 7.0.0 Combine with _startAnimation.\n    this._panelAnimationState = 'void';\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    this._animationDone.next(event);\n    this._isAnimating = false;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin, isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {filter, take, delay, takeUntil} from 'rxjs/operators';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport {Subscription, merge, of as observableOf, asapScheduler} from 'rxjs';\nimport {MatMenu} from './menu-directive';\nimport {throwMatMenuMissingError} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\n\n/** Injection token that determines the scroll handling while the menu is open. */\nexport const MAT_MENU_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-menu-scroll-strategy', {\n      providedIn: 'root',\n      factory: MAT_MENU_SCROLL_STRATEGY_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_MENU_SCROLL_STRATEGY_FACTORY(): () => ScrollStrategy {\n  const overlay = inject(Overlay);\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** Default top padding of the menu panel. */\nexport const MENU_PANEL_TOP_PADDING = 8;\n\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\n/**\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\n@Directive({\n  selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n  host: {\n    'aria-haspopup': 'true',\n    '(mousedown)': '_handleMousedown($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'matMenuTrigger'\n})\nexport class MatMenuTrigger implements AfterContentInit, OnDestroy {\n  private _portal: TemplatePortal;\n  private _overlayRef: OverlayRef | null = null;\n  private _menuOpen: boolean = false;\n  private _closeSubscription = Subscription.EMPTY;\n  private _hoverSubscription = Subscription.EMPTY;\n\n  // Tracking input type is necessary so it's possible to only auto-focus\n  // the first item of the list when the menu is opened via the keyboard\n  private _openedByMouse: boolean = false;\n\n  /**\n   * @deprecated\n   * @deletion-target 7.0.0\n   */\n  @Input('mat-menu-trigger-for')\n  get _deprecatedMatMenuTriggerFor(): MatMenuPanel {\n    return this.menu;\n  }\n\n  set _deprecatedMatMenuTriggerFor(v: MatMenuPanel) {\n    this.menu = v;\n  }\n\n  /** References the menu instance that the trigger is associated with. */\n  @Input('matMenuTriggerFor') menu: MatMenuPanel;\n\n  /** Data to be passed along to any lazily-rendered content. */\n  @Input('matMenuTriggerData') menuData: any;\n\n  /** Event emitted when the associated menu is opened. */\n  @Output() readonly menuOpened: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is opened.\n   * @deprecated Switch to `menuOpened` instead\n   * @deletion-target 7.0.0\n   */\n  @Output() readonly onMenuOpen: EventEmitter<void> = this.menuOpened;\n\n  /** Event emitted when the associated menu is closed. */\n  @Output() readonly menuClosed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is closed.\n   * @deprecated Switch to `menuClosed` instead\n   * @deletion-target 7.0.0\n   */\n  @Output() readonly onMenuClose: EventEmitter<void> = this.menuClosed;\n\n  constructor(private _overlay: Overlay,\n              private _element: ElementRef,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_MENU_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _parentMenu: MatMenu,\n              @Optional() @Self() private _menuItemInstance: MatMenuItem,\n              @Optional() private _dir: Directionality,\n              // TODO(crisbeto): make the _focusMonitor required when doing breaking changes.\n              // @deletion-target 7.0.0\n              private _focusMonitor?: FocusMonitor) {\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._checkMenu();\n\n    this.menu.close.subscribe(reason => {\n      this._destroyMenu();\n\n      // If a click closed the menu, we should close the entire chain of nested menus.\n      if ((reason === 'click' || reason === 'tab') && this._parentMenu) {\n        this._parentMenu.closed.emit(reason);\n      }\n    });\n\n    this._handleHover();\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._cleanUpSubscriptions();\n  }\n\n  /** Whether the menu is open. */\n  get menuOpen(): boolean {\n    return this._menuOpen;\n  }\n\n  /** The text direction of the containing app. */\n  get dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n  triggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n\n  /** Toggles the menu between the open and closed states. */\n  toggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n\n  /** Opens the menu. */\n  openMenu(): void {\n    if (this._menuOpen) {\n      return;\n    }\n\n    const overlayRef = this._createOverlay();\n    overlayRef.setDirection(this.dir);\n    overlayRef.attach(this._portal);\n\n    if (this.menu.lazyContent) {\n      this.menu.lazyContent.attach(this.menuData);\n    }\n\n    this._closeSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n    this._initMenu();\n\n    if (this.menu instanceof MatMenu) {\n      this.menu._startAnimation();\n    }\n  }\n\n  /** Closes the menu. */\n  closeMenu(): void {\n    this.menu.close.emit();\n  }\n\n  /**\n   * Focuses the menu trigger.\n   * @param origin Source of the menu trigger's focus.\n   */\n  focus(origin: FocusOrigin = 'program') {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._element.nativeElement, origin);\n    } else {\n      this._element.nativeElement.focus();\n    }\n  }\n\n  /** Closes the menu and does the necessary cleanup. */\n  private _destroyMenu() {\n    if (!this._overlayRef || !this.menuOpen) {\n      return;\n    }\n\n    const menu = this.menu;\n\n    this._resetMenu();\n    this._closeSubscription.unsubscribe();\n    this._overlayRef.detach();\n\n    if (menu instanceof MatMenu) {\n      menu._resetAnimation();\n\n      if (menu.lazyContent) {\n        // Wait for the exit animation to finish before detaching the content.\n        menu._animationDone\n          .pipe(take(1))\n          .subscribe(() => menu.lazyContent!.detach());\n      }\n    } else if (menu.lazyContent) {\n      menu.lazyContent.detach();\n    }\n  }\n\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n  private _initMenu(): void {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this._setIsMenuOpen(true);\n    this.menu.focusFirstItem(this._openedByMouse ? 'mouse' : 'program');\n  }\n\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\n  private _setMenuElevation(): void {\n    if (this.menu.setElevation) {\n      let depth = 0;\n      let parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n\n  /**\n   * This method resets the menu when it's closed, most importantly restoring\n   * focus to the menu trigger if the menu was opened via the keyboard.\n   */\n  private _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    // We should reset focus if the user is navigating using a keyboard or\n    // if we have a top-level trigger which might cause focus to be lost\n    // when clicking on the backdrop.\n    if (!this._openedByMouse) {\n      // Note that the focus style will show up both for `program` and\n      // `keyboard` so we don't have to specify which one it is.\n      this.focus();\n    } else if (!this.triggersSubmenu()) {\n      this.focus('mouse');\n    }\n\n    this._openedByMouse = false;\n  }\n\n  // set state rather than toggle to support triggers sharing a menu\n  private _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n\n  /**\n   * This method checks that a valid instance of MatMenu has been passed into\n   * matMenuTriggerFor. If not, an exception is thrown.\n   */\n  private _checkMenu() {\n    if (!this.menu) {\n      throwMatMenuMissingError();\n    }\n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n      const config = this._getOverlayConfig();\n      this._subscribeToPositions(config.positionStrategy as FlexibleConnectedPositionStrategy);\n      this._overlayRef = this._overlay.create(config);\n    }\n\n    return this._overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getPosition(),\n      hasBackdrop: this.menu.hasBackdrop == null ? !this.triggersSubmenu() : this.menu.hasBackdrop,\n      backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n      scrollStrategy: this._scrollStrategy()\n    });\n  }\n\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n  private _subscribeToPositions(position: FlexibleConnectedPositionStrategy): void {\n    position.positionChanges.subscribe(change => {\n      const posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n      const posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n      this.menu.setPositionClasses(posX, posY);\n    });\n  }\n\n  /**\n   * This method builds the position strategy for the overlay, so the menu is properly connected\n   * to the trigger.\n   * @returns ConnectedPositionStrategy\n   */\n  private _getPosition(): FlexibleConnectedPositionStrategy {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    return this._overlay.position()\n        .flexibleConnectedTo(this._element)\n        .withPositions([\n          {originX, originY, overlayX, overlayY, offsetY},\n          {originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY},\n          {\n            originX,\n            originY: originFallbackY,\n            overlayX,\n            overlayY: overlayFallbackY,\n            offsetY: -offsetY\n          },\n          {\n            originX: originFallbackX,\n            originY: originFallbackY,\n            overlayX: overlayFallbackX,\n            overlayY: overlayFallbackY,\n            offsetY: -offsetY\n          }\n        ]);\n  }\n\n  /** Cleans up the active subscriptions. */\n  private _cleanUpSubscriptions(): void {\n    this._closeSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  private _menuClosingActions() {\n    const backdrop = this._overlayRef!.backdropClick();\n    const detachments = this._overlayRef!.detachments();\n    const parentClose = this._parentMenu ? this._parentMenu.close : observableOf();\n    const hover = this._parentMenu ? this._parentMenu._hovered().pipe(\n      filter(active => active !== this._menuItemInstance),\n      filter(() => this._menuOpen)\n    ) : observableOf();\n\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n\n  /** Handles mouse presses on the trigger. */\n  _handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      this._openedByMouse = true;\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  /** Handles key presses on the trigger. */\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (this.triggersSubmenu() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n      this.openMenu();\n    }\n  }\n\n  /** Handles click events on the trigger. */\n  _handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\n  /** Handles the cases where the user hovers over the trigger. */\n  private _handleHover() {\n    // Subscribe to changes in the hovered item in order to toggle the panel.\n    if (!this.triggersSubmenu()) {\n      return;\n    }\n\n    this._hoverSubscription = this._parentMenu._hovered()\n      // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\n      // with different data and triggers), we have to delay it by a tick to ensure that\n      // it won't be closed immediately after it is opened.\n      .pipe(\n        filter(active => active === this._menuItemInstance && !active.disabled),\n        delay(0, asapScheduler)\n      )\n      .subscribe(() => {\n        this._openedByMouse = true;\n\n        // If the same menu is used between multiple triggers, it might still be animating\n        // while the new trigger tries to re-open it. Wait for the animation to finish\n        // before doing so. Also interrupt if the user moves to another item.\n        if (this.menu instanceof MatMenu && this.menu._isAnimating) {\n          this.menu._animationDone\n            .pipe(take(1), takeUntil(this._parentMenu._hovered()))\n            .subscribe(() => this.openMenu());\n        } else {\n          this.openMenu();\n        }\n      });\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatMenuContent} from './menu-content';\nimport {MatMenu} from './menu-directive';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuTrigger} from './menu-trigger';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    MatRippleModule,\n    OverlayModule,\n  ],\n  exports: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent, MatCommonModule],\n  declarations: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent],\n})\nexport class MatMenuModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  animateChild,\n  group,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n */\nexport const matSelectAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      transform: 'scaleY(0)',\n      minWidth: '100%',\n      opacity: 0\n    })),\n    state('showing', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n      transform: 'scaleY(1)'\n    })),\n    state('showing-multiple', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n      transform: 'scaleY(1)'\n    })),\n    transition('void => *', group([\n      query('@fadeInContent', animateChild()),\n      animate('150ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n    ])),\n    transition('* => void', [\n      animate('250ms 100ms linear', style({opacity: 0}))\n    ])\n  ]),\n\n  /**\n   * This animation fades in the background color and text content of the\n   * select's options. It is time delayed to occur 100ms after the overlay\n   * panel has transformed in.\n   */\n  fadeInContent: trigger('fadeInContent', [\n    state('showing', style({opacity: 1})),\n    transition('void => showing', [\n      style({opacity: 0}),\n      animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const transformPanel = matSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const fadeInContent = matSelectAnimations.fadeInContent;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {SPACE, ENTER, HOME, END, UP_ARROW, DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  MatLine,\n  MatLineSetter,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Subscription} from 'rxjs';\n\n\n/** @docs-private */\nexport class MatSelectionListBase {}\nexport const _MatSelectionListMixinBase = mixinDisableRipple(mixinDisabled(MatSelectionListBase));\n\n/** @docs-private */\nexport class MatListOptionBase {}\nexport const _MatListOptionMixinBase = mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-focus]': '_hasFocus',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n\n  private _selected = false;\n  private _disabled = false;\n\n  /** Whether the option has focus. */\n  _hasFocus: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text') _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Value of the option */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  constructor(private _element: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              /** @docs-private */\n              @Inject(forwardRef(() => MatSelectionList)) public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    // List options that are selected at initialization can't be reported properly to the form\n    // control. This is because it takes some time until the selection-list knows about all\n    // available options. Also it can happen that the ControlValueAccessor has an initial value\n    // that should be used instead. Deferring the value change report to the next tick ensures\n    // that the form control value is not being overwritten.\n    const wasSelected = this._selected;\n\n    Promise.resolve().then(() => {\n      if (this._selected || wasSelected) {\n        this.selected = true;\n        this._changeDetector.markForCheck();\n      }\n    });\n  }\n\n  ngAfterContentInit() {\n    // TODO: consider turning the setter into a function, it doesn't do anything as a class.\n    // tslint:disable-next-line:no-unused-expression\n    new MatLineSetter(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => this.selected = false);\n    }\n\n    this.selectionList._removeOptionFromList(this);\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? this._text.nativeElement.textContent : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n    }\n  }\n\n  _handleFocus() {\n    this._hasFocus = true;\n    this.selectionList._setFocusedOption(this);\n  }\n\n  _handleBlur() {\n    this._hasFocus = false;\n    this.selectionList._onTouched();\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. Returns whether the value has changed. */\n  _setSelected(selected: boolean): boolean {\n    if (selected === this._selected) {\n      return false;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n    return true;\n  }\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'role': 'listbox',\n    '[tabIndex]': 'tabIndex',\n    'class': 'mat-selection-list',\n    '(focus)': 'focus()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_keydown($event)',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements FocusableOption,\n    CanDisable, CanDisableRipple, AfterContentInit, ControlValueAccessor, OnDestroy {\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /** Tabindex of the selection list. */\n  @Input() tabIndex: number = 0;\n\n  /**\n   * Function used for comparing an option against the selected value when determining which\n   * options should appear as selected. The first argument is the value of an options. The second\n   * one is a value from the selected value. A boolean must be returned.\n   */\n  @Input() compareWith: (o1: any, o2: any) => boolean;\n\n  /** The currently selected options. */\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Used for storing the values that were assigned before the options were initialized. */\n  private _tempValues: string[]|null;\n\n  private _modelChanges = Subscription.EMPTY;\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  _onTouched: () => void = () => {};\n\n  constructor(private _element: ElementRef, @Attribute('tabindex') tabIndex: string) {\n    super();\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options)\n      .withWrap()\n      .withTypeAhead()\n      // Allow disabled items to be focusable. For accessibility reasons, there must be a way for\n      // screenreader users, that allows reading the different options of the list.\n      .skipPredicate(() => false);\n\n    if (this._tempValues) {\n      this._setOptionsFromValues(this._tempValues);\n      this._tempValues = null;\n    }\n\n    // Sync external changes to the model back to the options.\n    this._modelChanges = this.selectedOptions.onChange!.subscribe(event => {\n      if (event.added) {\n        for (let item of event.added) {\n          item.selected = true;\n        }\n      }\n\n      if (event.removed) {\n        for (let item of event.removed) {\n          item.selected = false;\n        }\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this._modelChanges.unsubscribe();\n  }\n\n  /** Focuses the last active list option. */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this._setAllOptionsSelected(true);\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this._setAllOptionsSelected(false);\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItemIndex(this._getOptionIndex(option));\n  }\n\n  /** Removes an option from the selection list and updates the active item. */\n  _removeOptionFromList(option: MatListOption) {\n    if (option._hasFocus) {\n      const optionIndex = this._getOptionIndex(option);\n\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.setPreviousItemActive();\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.setNextItemActive();\n      }\n    }\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n    const previousFocusIndex = manager.activeItemIndex;\n\n    switch (keyCode) {\n      case SPACE:\n      case ENTER:\n        if (!this.disabled) {\n          this._toggleSelectOnFocusedOption();\n\n          // Always prevent space from scrolling the page since the list has focus\n          event.preventDefault();\n        }\n        break;\n      case HOME:\n      case END:\n        keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n        event.preventDefault();\n        break;\n      default:\n        manager.onKeydown(event);\n    }\n\n    if ((keyCode === UP_ARROW || keyCode === DOWN_ARROW) && event.shiftKey &&\n        manager.activeItemIndex !== previousFocusIndex) {\n      this._toggleSelectOnFocusedOption();\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    if (this.options) {\n      this._onChange(this._getSelectedOptionValues());\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    } else {\n      this._tempValues = values;\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    if (this.options) {\n      this.options.forEach(option => option.disabled = isDisabled);\n    }\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values\n      .map(value => {\n        return this.options.find(option =>\n            this.compareWith ? this.compareWith(option.value, value) : option.value === value);\n      })\n      .filter(Boolean)\n      .forEach(option => option!._setSelected(true));\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the selected state of the currently focused option. */\n  private _toggleSelectOnFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n      }\n    }\n  }\n\n  /**\n   * Sets the selected state on all of the options\n   * and emits an event if anything changed.\n   */\n  private _setAllOptionsSelected(isSelected: boolean) {\n    // Keep track of whether anything changed, because we only want to\n    // emit the changed event when something actually changed.\n    let hasChanged = false;\n\n    this.options.forEach(option => {\n      if (option._setSelected(isSelected)) {\n        hasChanged = true;\n      }\n    });\n\n    if (hasChanged) {\n      this._reportValueChange();\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  TemplateRef,\n  ComponentFactoryResolver,\n  ApplicationRef,\n  Injector,\n  ViewContainerRef,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {TemplatePortal, DomPortalOutlet} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\n\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\n@Directive({\n  selector: 'ng-template[matMenuContent]'\n})\nexport class MatMenuContent implements OnDestroy {\n  private _portal: TemplatePortal<any>;\n  private _outlet: DomPortalOutlet;\n\n  constructor(\n    private _template: TemplateRef<any>,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _appRef: ApplicationRef,\n    private _injector: Injector,\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(DOCUMENT) private _document: any) {}\n\n  /**\n   * Attaches the content with a particular context.\n   * @docs-private\n   */\n  attach(context: any = {}) {\n    if (!this._portal) {\n      this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n    }\n\n    this.detach();\n\n    if (!this._outlet) {\n      this._outlet = new DomPortalOutlet(this._document.createElement('div'),\n          this._componentFactoryResolver, this._appRef, this._injector);\n    }\n\n    const element: HTMLElement = this._template.elementRef.nativeElement;\n\n    // Because we support opening the same menu from different triggers (which in turn have their\n    // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n    // risk it staying attached to a pane that's no longer in the DOM.\n    element.parentNode!.insertBefore(this._outlet.outletElement, element);\n    this._portal.attach(this._outlet, context);\n  }\n\n  /**\n   * Detaches the content.\n   * @docs-private\n   */\n  detach() {\n    if (this._portal.isAttached) {\n      this._portal.detach();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._outlet) {\n      this._outlet.dispose();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  query,\n  group,\n  sequence,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n */\nexport const matMenuAnimations: {\n  readonly transformMenu: AnimationTriggerMetadata;\n  readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [\n    state('void', style({\n      opacity: 0,\n      // This starts off from 0.01, instead of 0, because there's an issue in the Angular animations\n      // as of 4.2, which causes the animation to be skipped if it starts from 0.\n      transform: 'scale(0.01, 0.01)'\n    })),\n    transition('void => enter', sequence([\n      query('.mat-menu-content', style({opacity: 0})),\n      animate('100ms linear', style({opacity: 1, transform: 'scale(1, 0.5)'})),\n      group([\n        query('.mat-menu-content', animate('400ms cubic-bezier(0.55, 0, 0.55, 0.2)',\n          style({opacity: 1})\n        )),\n        animate('300ms cubic-bezier(0.25, 0.8, 0.25, 1)', style({transform: 'scale(1, 1)'})),\n      ])\n    ])),\n    transition('* => void', animate('150ms 50ms linear', style({opacity: 0})))\n  ]),\n\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [\n    // TODO(crisbeto): this is inside the `transformMenu`\n    // now. Remove next time we do breaking changes.\n    state('showing', style({opacity: 1})),\n    transition('void => *', [\n      style({opacity: 0}),\n      animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const fadeInItems = matMenuAnimations.fadeInItems;\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const transformMenu = matMenuAnimations.transformMenu;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EventEmitter, TemplateRef, InjectionToken} from '@angular/core';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {Direction} from '@angular/cdk/bidi';\nimport {FocusOrigin} from '@angular/cdk/a11y';\nimport {MatMenuContent} from './menu-content';\n\n/**\n * Injection token used to provide the parent menu to menu-specific components.\n * @docs-private\n */\nexport const MAT_MENU_PANEL = new InjectionToken<MatMenuPanel>('MAT_MENU_PANEL');\n\n/**\n * Interface for a custom menu panel that can be used with `matMenuTriggerFor`.\n * @docs-private\n */\nexport interface MatMenuPanel<T = any> {\n  xPosition: MenuPositionX;\n  yPosition: MenuPositionY;\n  overlapTrigger: boolean;\n  templateRef: TemplateRef<any>;\n  close: EventEmitter<void | 'click' | 'keydown' | 'tab'>;\n  parentMenu?: MatMenuPanel | undefined;\n  direction?: Direction;\n  focusFirstItem: (origin?: FocusOrigin) => void;\n  resetActiveItem: () => void;\n  setPositionClasses: (x: MenuPositionX, y: MenuPositionY) => void;\n  setElevation?(depth: number): void;\n  lazyContent?: MatMenuContent;\n  backdropClass?: string;\n  hasBackdrop?: boolean;\n  addItem?: (item: T) => void;\n  removeItem?: (item: T) => void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nexport class MatMenuItemBase {}\nexport const _MatMenuItemMixinBase = mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-menu-item]',\n  exportAs: 'matMenuItem',\n  inputs: ['disabled', 'disableRipple'],\n  host: {\n    'role': 'menuitem',\n    'class': 'mat-menu-item',\n    '[class.mat-menu-item-highlighted]': '_highlighted',\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n    '(click)': '_checkDisabled($event)',\n    '(mouseenter)': '_handleMouseEnter()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  templateUrl: 'menu-item.html',\n})\nexport class MatMenuItem extends _MatMenuItemMixinBase\n    implements FocusableOption, CanDisable, CanDisableRipple, OnDestroy {\n\n  private _document: Document;\n\n  /** Stream that emits when the menu item is hovered. */\n  readonly _hovered: Subject<MatMenuItem> = new Subject<MatMenuItem>();\n\n  /** Whether the menu item is highlighted. */\n  _highlighted: boolean = false;\n\n  /** Whether the menu item acts as a trigger for a sub-menu. */\n  _triggersSubmenu: boolean = false;\n\n  constructor(\n    private _elementRef: ElementRef,\n    @Inject(DOCUMENT) document?: any,\n    private _focusMonitor?: FocusMonitor,\n    @Inject(MAT_MENU_PANEL) @Optional() private _parentMenu?: MatMenuPanel<MatMenuItem>) {\n\n    // @deletion-target 7.0.0 make `_focusMonitor` and `document` required params.\n    super();\n\n    if (_focusMonitor) {\n      // Start monitoring the element so it gets the appropriate focused classes. We want\n      // to show the focus style for menu items only when the focus was not caused by a\n      // mouse or touch interaction.\n      _focusMonitor.monitor(this._getHostElement(), false);\n    }\n\n    if (_parentMenu && _parentMenu.addItem) {\n      _parentMenu.addItem(this);\n    }\n\n    this._document = document;\n  }\n\n  /** Focuses the menu item. */\n  focus(origin: FocusOrigin = 'program'): void {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin);\n    } else {\n      this._getHostElement().focus();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._getHostElement());\n    }\n\n    if (this._parentMenu && this._parentMenu.removeItem) {\n      this._parentMenu.removeItem(this);\n    }\n\n    this._hovered.complete();\n  }\n\n  /** Used to set the `tabindex`. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Returns the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Prevents the default element actions if it is disabled. */\n  _checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /** Emits to the hover stream. */\n  _handleMouseEnter() {\n    this._hovered.next(this);\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n    let output = '';\n\n    if (element.childNodes) {\n      const length = element.childNodes.length;\n\n      // Go through all the top-level text nodes and extract their text.\n      // We skip anything that's not a text node to prevent the text from\n      // being thrown off by something like an icon.\n      for (let i = 0; i < length; i++) {\n        if (element.childNodes[i].nodeType === textNodeType) {\n          output += element.childNodes[i].textContent;\n        }\n      }\n    }\n\n    return output.trim();\n  }\n\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, MatLine, MatLineSetter, mixinDisableRipple} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nexport class MatListBase {}\nexport const _MatListMixinBase = mixinDisableRipple(MatListBase);\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nexport class MatListItemBase {}\nexport const _MatListItemMixinBase = mixinDisableRipple(MatListItemBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {'class': 'mat-list'},\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisableRipple {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-item, a[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item',\n    // @deletion-target 7.0.0 Remove `mat-list-item-avatar` in favor of `mat-list-item-with-avatar`.\n    '[class.mat-list-item-avatar]': '_avatar',\n    '[class.mat-list-item-with-avatar]': '_avatar',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple {\n  private _isNavList: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n\n  constructor(private _element: ElementRef,\n              @Optional() private _navList: MatNavList) {\n    super();\n    this._isNavList = !!_navList;\n  }\n\n  ngAfterContentInit() {\n    // TODO: consider turning the setter into a function, it doesn't do anything as a class.\n    // tslint:disable-next-line:no-unused-expression\n    new MatLineSetter(this._lines, this._element);\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return !this._isNavList || this.disableRipple || this._navList.disableRipple;\n  }\n\n  _handleFocus() {\n    this._element.nativeElement.classList.add('mat-list-item-focus');\n  }\n\n  _handleBlur() {\n    this._element.nativeElement.classList.remove('mat-list-item-focus');\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {HttpClient, HttpErrorResponse} from '@angular/common/http';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Optional,\n  SecurityContext,\n  SkipSelf,\n} from '@angular/core';\nimport {DomSanitizer, SafeResourceUrl, SafeHtml} from '@angular/platform-browser';\nimport {forkJoin, Observable, of as observableOf, throwError as observableThrow} from 'rxjs';\nimport {catchError, finalize, map, share, tap} from 'rxjs/operators';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeUrlError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeLiteralError(literal: SafeHtml): Error {\n  return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n               `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  url: SafeResourceUrl | null;\n  svgElement: SVGElement | null;\n\n  constructor(url: SafeResourceUrl);\n  constructor(svgElement: SVGElement);\n  constructor(data: SafeResourceUrl | SVGElement) {\n    // Note that we can't use `instanceof SVGElement` here,\n    // because it'll break during server-side rendering.\n    if (!!(data as any).nodeName) {\n      this.svgElement = data as SVGElement;\n    } else {\n      this.url = data as SafeResourceUrl;\n    }\n  }\n}\n\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable({providedIn: 'root'})\nexport class MatIconRegistry {\n  private _document: Document;\n\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /**\n   * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(\n    @Optional() private _httpClient: HttpClient,\n    private _sanitizer: DomSanitizer,\n    @Optional() @Inject(DOCUMENT) document: any) {\n      this._document = document;\n    }\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n\n  /**\n   * Registers an icon using an HTML string in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteral(iconName: string, literal: SafeHtml): this {\n    return this.addSvgIconLiteralInNamespace('', iconName, literal);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon using an HTML string in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteralInNamespace(namespace: string, iconName: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._createSvgElementForSingleIcon(sanitizedLiteral);\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the default namespace.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteral(literal: SafeHtml): this {\n    return this.addSvgIconSetLiteralInNamespace('', literal);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteralInNamespace(namespace: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._svgElementFromString(sanitizedLiteral);\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the `<mat-icon>` element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    const cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg)),\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const key = iconKey(namespace, name);\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(\n        tap(svg => config.svgElement = svg),\n        map(svg => cloneSvg(svg)),\n      );\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: HttpErrorResponse): Observable<SVGElement | null> => {\n            const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the\n            // combined Observable won't necessarily fail.\n            console.error(`Loading icon set URL: ${url} failed: ${err.message}`);\n            return observableOf(null);\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText)));\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    // If the SVG for this icon set has already been parsed, do nothing.\n    if (config.svgElement) {\n      return observableOf(config.svgElement);\n    }\n\n    return this._fetchUrl(config.url).pipe(map(svgText => {\n      // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n      // only needs to occur if the cache is yet unset.\n      if (!config.svgElement) {\n        config.svgElement = this._svgElementFromString(svgText);\n      }\n\n      return config.svgElement;\n    }));\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   */\n  private _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n    const iconSource = iconSet.querySelector('#' + iconName);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.removeAttribute('id');\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    const div = this._document.createElement('DIV');\n    div.innerHTML = str;\n    const svg = div.querySelector('svg') as SVGElement;\n\n    if (!svg) {\n      throw Error('<svg> tag not found');\n    }\n\n    return svg;\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    let svg = this._svgElementFromString('<svg></svg>');\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement): SVGElement {\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchUrl(safeUrl: SafeResourceUrl | null): Observable<string> {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    if (safeUrl == null) {\n      throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finalize` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share(),\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n\n  /**\n   * Registers an icon config by name in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param iconName Name under which to register the config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconConfig(namespace: string, iconName: string, config: SvgIconConfig): this {\n    this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n    return this;\n  }\n\n  /**\n   * Registers an icon set config in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconSetConfig(namespace: string, config: SvgIconConfig): this {\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n\n    return this;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n  parentRegistry: MatIconRegistry,\n  httpClient: HttpClient,\n  sanitizer: DomSanitizer,\n  document?: any) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer,\n    [new Optional(), DOCUMENT as InjectionToken<any>],\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {take} from 'rxjs/operators';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatIconRegistry} from './icon-registry';\n\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nexport class MatIconBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatIconMixinBase = mixinColor(MatIconBase);\n\n\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\n@Component({\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  exportAs: 'matIcon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon',\n    '[class.mat-icon-inline]': 'inline',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, CanColor {\n\n  /**\n   * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n   * the element the icon is contained in.\n   */\n  @Input()\n  get inline(): boolean {\n    return this._inline;\n  }\n  set inline(inline: boolean) {\n    this._inline = coerceBooleanProperty(inline);\n  }\n  private _inline: boolean = false;\n\n  /** Name of the icon in the SVG icon set. */\n  @Input() svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n  @Input()\n  get fontSet(): string { return this._fontSet; }\n  set fontSet(value: string) {\n    this._fontSet = this._cleanupFontValue(value);\n  }\n  private _fontSet: string;\n\n  /** Name of an icon within a font set. */\n  @Input()\n  get fontIcon(): string { return this._fontIcon; }\n  set fontIcon(value: string) {\n    this._fontIcon = this._cleanupFontValue(value);\n  }\n  private _fontIcon: string;\n\n  private _previousFontSetClass: string;\n  private _previousFontIconClass: string;\n\n  constructor(\n      elementRef: ElementRef,\n      private _iconRegistry: MatIconRegistry,\n      @Attribute('aria-hidden') ariaHidden: string) {\n    super(elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   `'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)`\n   */\n  private _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return <[string, string]>parts;\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    if (changes.svgIcon) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\n          svg => this._setSvgElement(svg),\n          (err: Error) => console.log(`Error retrieving icon: ${err.message}`)\n        );\n      } else {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  private _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n\n  private _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  private _clearSvgElement() {\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\n    const childCount = layoutElement.childNodes.length;\n\n    // Remove existing child nodes and add the new SVG element. Note that we can't\n    // use innerHTML, because IE will throw if the element has a data binding.\n    for (let i = 0; i < childCount; i++) {\n      layoutElement.removeChild(layoutElement.childNodes[i]);\n    }\n  }\n\n  private _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem: HTMLElement = this._elementRef.nativeElement;\n    const fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   */\n  private _cleanupFontValue(value: string) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n})\nexport class MatIconModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onBlur()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements AfterContentInit, ControlValueAccessor, OnDestroy,\n    Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    this.registerDatepicker(value);\n  }\n  _datepicker: MatDatepicker<D>;\n\n  private registerDatepicker(value: MatDatepicker<D>) {\n    if (value) {\n      this._datepicker = value;\n      this._datepicker._registerInput(this);\n    }\n  }\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(value: (date: D | null) => boolean) {\n    this._dateFilter = value;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null { return this._value; }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    const oldDate = this.value;\n    this._value = value;\n    this._formatValue(value);\n\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    const element = this._elementRef.nativeElement;\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n\n    // We need to null check the `blur` method, because it's undefined during SSR.\n    if (newValue && element.blur) {\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\n      // is problematic, because it would mean that it triggers another change detection cycle,\n      // which then causes a changed after checked error if the input element was focused before.\n      element.blur();\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() readonly dateChange: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() readonly dateInput: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D | null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngAfterContentInit() {\n    if (this._datepicker) {\n      this._datepickerSubscription = this._datepicker._selectedChanged.subscribe((selected: D) => {\n        this.value = selected;\n        this._cvaOnChange(selected);\n        this._onTouched();\n        this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n        this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  /** @docs-private */\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * @deprecated\n   * @deletion-target 7.0.0 Use `getConnectedOverlayOrigin` instead\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this.getConnectedOverlayOrigin();\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (event.altKey && event.keyCode === DOWN_ARROW) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n\n    if (!this._dateAdapter.sameDate(date, this._value)) {\n      this._value = date;\n      this._cvaOnChange(date);\n      this._valueChange.emit(date);\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    }\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /** Returns the palette used by the input's form field, if any. */\n  _getThemePalette() {\n    return this._formField ? this._formField.color : undefined;\n  }\n\n  /** Handles blur events on the input. */\n  _onBlur() {\n    // Reformat the input only if we have a valid value.\n    if (this.value) {\n      this._formatValue(this.value);\n    }\n\n    this._onTouched();\n  }\n\n  /** Formats a value and sets it on the input element. */\n  private _formatValue(value: D | null) {\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge, of as observableOf, Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\n@Directive({\n  selector: '[matDatepickerToggleIcon]'\n})\nexport class MatDatepickerToggleIcon {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  styleUrls: ['datepicker-toggle.css'],\n  host: {\n    'class': 'mat-datepicker-toggle',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n    '[class.mat-accent]': 'datepicker && datepicker.color === \"accent\"',\n    '[class.mat-warn]': 'datepicker && datepicker.color === \"warn\"',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(MatDatepickerToggleIcon) _customIcon: MatDatepickerToggleIcon;\n\n  constructor(public _intl: MatDatepickerIntl, private _changeDetectorRef: ChangeDetectorRef) {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.datepicker) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatCalendar, MatCalendarHeader} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {MatDatepicker, MatDatepickerContent} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle, MatDatepickerToggleIcon} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    OverlayModule,\n    A11yModule,\n    PortalModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  providers: [\n    MatDatepickerIntl,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n    MatCalendarHeader,\n  ]\n})\nexport class MatDatepickerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-divider',\n  host: {\n    'role': 'separator',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-divider-vertical]': 'vertical',\n    '[class.mat-divider-inset]': 'inset',\n    'class': 'mat-divider'\n  },\n  template: '',\n  styleUrls: ['divider.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDivider {\n  /** Whether the divider is vertically aligned. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Whether the divider is an inset divider. */\n  @Input()\n  get inset(): boolean { return this._inset; }\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\n  private _inset: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDivider} from './divider';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [MatDivider, MatCommonModule],\n  declarations: [MatDivider],\n})\nexport class MatDividerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  host: {\n    class: 'mat-accordion'\n  }\n})\nexport class MatAccordion extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private _hideToggle: boolean = false;\n\n  /**\n   * The display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the reset of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  SimpleChanges,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {filter, startWith, take} from 'rxjs/operators';\nimport {MatAccordion} from './accordion';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\n\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\n@Component({\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  }\n})\nexport class MatExpansionPanel extends CdkAccordionItem\n    implements AfterContentInit, OnChanges, OnDestroy {\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n  private _hideToggle = false;\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordion;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent) _lazyContent: MatExpansionPanelContent;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  constructor(@Optional() accordion: MatAccordion,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n  }\n\n  /** Whether the expansion indicator should be hidden. */\n  _getHideToggle(): boolean {\n    if (this.accordion) {\n      return this.accordion.hideToggle;\n    }\n    return this.hideToggle;\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._inputChanges.complete();\n  }\n\n  _bodyAnimation(event: AnimationEvent) {\n    const classList = event.element.classList;\n    const cssClass = 'mat-expanded';\n    const {phaseName, toState} = event;\n\n    // Toggle the body's `overflow: hidden` class when closing starts or when expansion ends in\n    // order to prevent the cases where switching too early would cause the animation to jump.\n    // Note that we do it directly on the DOM element to avoid the slight delay that comes\n    // with doing it via change detection.\n    if (phaseName === 'done' && toState === 'expanded') {\n      classList.add(cssClass);\n    } else if (phaseName === 'start' && toState === 'collapsed') {\n      classList.remove(cssClass);\n    }\n  }\n}\n\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge, Subscription} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanel} from './expansion-panel';\n\n\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n    matExpansionAnimations.expansionHeaderHeight\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'panel.disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n})\nexport class MatExpansionPanelHeader implements OnDestroy {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n    @Host() public panel: MatExpansionPanel,\n    private _element: ElementRef,\n    private _focusMonitor: FocusMonitor,\n    private _changeDetectorRef: ChangeDetectorRef) {\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to  subscribe and trigger change detection manually.\n    this._parentChangeSubscription = merge(\n      panel.opened,\n      panel.closed,\n      panel._inputChanges.pipe(filter(changes => !!(changes.hideToggle || changes.disabled)))\n    )\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    _focusMonitor.monitor(_element.nativeElement);\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    this.panel.toggle();\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        event.preventDefault();\n        this._toggle();\n        break;\n      default:\n        return;\n    }\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\n}\n\n/**\n * `<mat-panel-description>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host : {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * `<mat-panel-title>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host : {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanel, MatExpansionPanelActionRow} from './expansion-panel';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n})\nexport class MatExpansionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  Input,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatLine, MatLineSetter} from '@angular/material/core';\nimport {coerceToNumber} from './grid-list-measure';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile',\n  exportAs: 'matGridTile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n\n  constructor(private _element: ElementRef) {}\n\n  /** Amount of rows that the grid tile takes up. */\n  @Input()\n  get rowspan(): number { return this._rowspan; }\n  set rowspan(value: number) { this._rowspan = coerceToNumber(value); }\n\n  /** Amount of columns that the grid tile takes up. */\n  @Input()\n  get colspan(): number { return this._colspan; }\n  set colspan(value: number) { this._colspan = coerceToNumber(value); }\n\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property: string, value: any): void {\n    this._element.nativeElement.style[property] = value;\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridTileText implements AfterContentInit {\n  /**\n   *  Helper that watches the number of lines in a text area and sets\n   * a class on the host element that matches the line count.\n   */\n  _lineSetter: MatLineSetter;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  constructor(private _element: ElementRef) {}\n\n  ngAfterContentInit() {\n    this._lineSetter = new MatLineSetter(this._lines, this._element);\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-grid-avatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n})\nexport class MatGridAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n})\nexport class MatGridTileHeaderCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n})\nexport class MatGridTileFooterCssMatStyler {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {QueryList} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport class TileCoordinator {\n  /** Tracking array (see class description). */\n  tracker: number[];\n\n  /** Index at which the search for the next gap will start. */\n  columnIndex: number = 0;\n\n  /** The current row index. */\n  rowIndex: number = 0;\n\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount(): number { return this.rowIndex + 1; }\n\n  /**\n   * Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n   */\n  get rowspan() {\n    let lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n\n  /** The computed (row, col) position of each tile (the output). */\n  positions: TilePosition[];\n\n  constructor(numColumns: number, tiles: QueryList<MatGridTile>) {\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n\n  /** Calculates the row and col position of a tile. */\n  private _trackTile(tile: MatGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    let gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n\n  /** Finds the next available space large enough to fit the tile. */\n  private _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile.\n    } while (gapEndIndex - gapStartIndex < tileCols);\n\n    // If we still didn't manage to find a gap, ensure that the index is\n    // at least zero so the tile doesn't get pulled out of the grid.\n    return Math.max(gapStartIndex, 0);\n  }\n\n  /** Move \"down\" to the next row. */\n  private _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  private _findGapEndIndex(gapStartIndex: number): number {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n\n  /** Update the tile tracker to account for the given tile in the given space. */\n  private _markTilePosition(start: number, tile: MatGridTile): void {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport class TilePosition {\n  constructor(public row: number, public col: number) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridList} from './grid-list';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n\n\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n\n\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n\n\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'rtl' ? 'right' : 'left';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n\n  /**\n   * Sets the vertical placement of the tile in the list.\n   * This method will be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number);\n\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight(): [string, string] | null { return null; }\n\n  /**\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n   * @param list Grid list that the styler was attached to.\n   * @docs-private\n   */\n  abstract reset(list: MatGridList);\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n\n  constructor(public fixedRowHeight: string) { super(); }\n\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['height', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n\n  /** Ratio width:height given by user to determine row height. */\n  rowHeightRatio: number;\n  baseTileHeight: string;\n\n  constructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['paddingBottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('marginTop', null);\n      tile._setStyle('paddingTop', null);\n    });\n  }\n\n  private _parseRatio(value: string): void {\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nexport class FitTileStyler extends TileStyler {\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n  reset(list: MatGridList) {\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/** Wraps a CSS string in a calc function */\nfunction calc(exp: string): string { return `calc(${exp})`; }\n\n\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value: string): string {\n  return (value.match(/px|em|rem/)) ? value : value + 'px';\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  coerceToString,\n  coerceToNumber,\n} from './grid-list-measure';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst MAT_FIT_MODE = 'fit';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-list',\n  exportAs: 'matGridList',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridList implements OnInit, AfterContentChecked {\n  /** Number of columns being rendered. */\n  private _cols: number;\n\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  private _rowHeight: string;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  private _gutter: string = '1px';\n\n  /** Sets position and size styles for a tile */\n  private _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n  @ContentChildren(MatGridTile) _tiles: QueryList<MatGridTile>;\n\n  constructor(private _element: ElementRef, @Optional() private _dir: Directionality) {}\n\n  /** Amount of columns in the grid list. */\n  @Input()\n  get cols(): number { return this._cols; }\n  set cols(value: number) { this._cols = coerceToNumber(value); }\n\n  /** Size of the grid list's gutter in pixels. */\n  @Input()\n  get gutterSize(): string { return this._gutter; }\n  set gutterSize(value: string) { this._gutter = coerceToString(value); }\n\n  /** Set internal representation of row height from the user-provided value. */\n  @Input()\n  set rowHeight(value: string | number) {\n    const newValue = coerceToString(value);\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n\n  /** Throw a friendly error if cols property is missing */\n  private _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\n                  `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n\n  /** Default to equal width:height if rowHeight property is missing */\n  private _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  private _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n\n  /** Computes and applies the size and position for all children grid tiles. */\n  private _layoutTiles(): void {\n    const tracker = new TileCoordinator(this.cols, this._tiles);\n    const direction = this._dir ? this._dir.value : 'ltr';\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    this._tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      this._element.nativeElement.style[style[0]] = style[1];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\nimport {\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MatGridList} from './grid-list';\n\n\n@NgModule({\n  imports: [MatLineModule, MatCommonModule],\n  exports: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatLineModule,\n    MatCommonModule,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n})\nexport class MatGridListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMultiYearView<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !=\n        Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new year is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected year. This doesn't imply a change on the selected date */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: MatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n    let activeYear = this._dateAdapter.getYear(this._activeDate);\n    let activeOffset = activeYear % yearsPerPage;\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(activeYear - activeOffset + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n        this._yearSelected(this._dateAdapter.getYear(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  _getActiveCell(): number {\n    return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\n  }\n\n  /** Whether the given year is enabled. */\n  private _shouldEnableYear(year: number) {\n    // disable if the year is greater than maxDate lower than minDate\n    if (year === undefined || year === null ||\n        (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n        (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\n      return false;\n    }\n\n    // enable if it reaches here and there's no filter defined\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n\n    // If any date in the year is enabled count the year as enabled.\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected month. This doesn't imply a change on the selected date */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    const normalizedDate =\n          this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    this.monthSelected.emit(normalizedDate);\n\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n        this._monthSelected(this._dateAdapter.getMonth(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _shouldEnableMonth(month: number) {\n\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\n\n    if (month === undefined || month === null ||\n        this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n        this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n      return false;\n    }\n\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is after this.maxDate, considering\n   * just the month and year of this.maxDate\n   */\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\n    if (this.maxDate) {\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n\n      return year > maxYear || (year === maxYear && month > maxMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is before this.minDate, considering\n   * just the month and year of this.minDate\n   */\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\n    if (this.minDate) {\n      const minYear = this._dateAdapter.getYear(this.minDate);\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\n\n      return year < minYear || (year === minYear && month < minMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentPortal, ComponentType, Portal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView, yearsPerPage} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n/**\n * Possible views for the calendar.\n * @docs-private\n */\nexport type MatCalendarView = 'month' | 'year' | 'multi-year';\n\n/** Default header for MatCalendar */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar-header',\n  templateUrl: 'calendar-header.html',\n  exportAs: 'matCalendarHeader',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarHeader<D> {\n  constructor(private _intl: MatDatepickerIntl,\n              @Inject(forwardRef(() => MatCalendar)) public calendar: MatCalendar<D>,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    this.calendar.stateChanges.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  /** The label for the current calendar view. */\n  get periodButtonText(): string {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter\n          .format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel)\n              .toLocaleUpperCase();\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYearName(this.calendar.activeDate);\n    }\n    const activeYear = this._dateAdapter.getYear(this.calendar.activeDate);\n    const firstYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n    const lastYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n    return `${firstYearInView} \\u2013 ${lastYearInView}`;\n  }\n\n  get periodButtonLabel(): string {\n    return this.calendar.currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the the previous button. */\n  get prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** The label for the the next button. */\n  get nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** Handles user clicks on the period label. */\n  currentPeriodClicked(): void {\n    this.calendar.currentView = this.calendar.currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  previousClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate, this.calendar.currentView == 'year' ? -1 : -yearsPerPage\n            );\n  }\n\n  /** Handles user clicks on the next button. */\n  nextClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate,\n                    this.calendar.currentView == 'year' ? 1 : yearsPerPage\n            );\n  }\n\n  /** Whether the previous period button is enabled. */\n  previousEnabled(): boolean {\n    if (!this.calendar.minDate) {\n      return true;\n    }\n    return !this.calendar.minDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  nextEnabled(): boolean {\n    return !this.calendar.maxDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.maxDate);\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ==\n        Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\n  }\n}\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendar<D> implements AfterContentInit, AfterViewChecked, OnDestroy, OnChanges {\n  /** An input indicating the type of the header component, if set. */\n  @Input() headerComponent: ComponentType<any>;\n\n  /** A portal containing the header component type for this calendar. */\n  _calendarHeaderPortal: Portal<any>;\n\n  private _intlChanges: Subscription;\n\n  /**\n   * Used for scheduling that focus should be moved to the active cell on the next tick.\n   * We need to schedule it, rather than do it immediately, because we have to wait\n   * for Angular to re-evaluate the view children.\n   */\n  private _moveFocusOnNextTick = false;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: MatCalendarView = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when the currently selected date changes. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the year chosen in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the month chosen in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView) multiYearView: MatMultiYearView<D>;\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get activeDate(): D { return this._clampedActiveDate; }\n  set activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n    this.stateChanges.next();\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  get currentView(): MatCalendarView { return this._currentView; }\n  set currentView(value: MatCalendarView) {\n    this._currentView = value;\n    this._moveFocusOnNextTick = true;\n  }\n  private _currentView: MatCalendarView;\n\n  /**\n   * Emits whenever there is a state change that the header may need to respond to.\n   */\n  stateChanges = new Subject<void>();\n\n  constructor(_intl: MatDatepickerIntl,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => {\n      changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    });\n  }\n\n  ngAfterContentInit() {\n    this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || MatCalendarHeader);\n    this.activeDate = this.startAt || this._dateAdapter.today();\n\n    // Assign to the private property since we don't want to move focus on init.\n    this._currentView = this.startView;\n  }\n\n  ngAfterViewChecked() {\n    if (this._moveFocusOnNextTick) {\n      this._moveFocusOnNextTick = false;\n      this.focusActiveCell();\n    }\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n    this.stateChanges.complete();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change = changes.minDate || changes.maxDate || changes.dateFilter;\n\n    if (change && !change.firstChange) {\n      const view = this._getCurrentViewComponent();\n\n      if (view) {\n        view._init();\n      }\n    }\n\n    this.stateChanges.next();\n  }\n\n  focusActiveCell() {\n    this._getCurrentViewComponent()._focusActiveCell();\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  /** Handles year selection in the multiyear view. */\n  _yearSelectedInMultiYearView(normalizedYear: D) {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelectedInYearView(normalizedMonth: D) {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles year/month selection in the multi-year/year views. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this.activeDate = date;\n    this.currentView = view;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Returns the component instance that corresponds to the current calendar view. */\n  private _getCurrentViewComponent() {\n    return this.monthView || this.yearView || this.multiYearView;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n  group,\n  query,\n  animateChild,\n} from '@angular/animations';\n\n/** Animations used by the Material datepicker. */\nexport const matDatepickerAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInCalendar: AnimationTriggerMetadata;\n} = {\n  /** Transforms the height of the datepicker's calendar. */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({opacity: 0, transform: 'scale(1, 0)'})),\n    state('enter', style({opacity: 1, transform: 'scale(1, 1)'})),\n    transition('void => enter', group([\n      query('@fadeInCalendar', animateChild()),\n      animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n    ])),\n    transition('* => void', animate('100ms linear', style({opacity: 0})))\n  ]),\n\n  /** Fades in the content of the calendar. */\n  fadeInCalendar: trigger('fadeInCalendar', [\n    state('void', style({opacity: 0})),\n    state('enter', style({opacity: 1})),\n    transition('void => *', animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {take, filter} from 'rxjs/operators';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, DateAdapter, mixinColor, ThemePalette} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {merge, Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatCalendar} from './calendar';\nimport {matDatepickerAnimations} from './datepicker-animations';\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy', {\n      providedIn: 'root',\n      factory: MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY(): () => ScrollStrategy {\n  const overlay = inject(Overlay);\n  return () => overlay.scrollStrategies.reposition();\n}\n\n// Boilerplate for applying mixins to MatDatepickerContent.\n/** @docs-private */\nexport class MatDatepickerContentBase {\n  constructor(public _elementRef: ElementRef) { }\n}\nexport const _MatDatepickerContentMixinBase = mixinColor(MatDatepickerContentBase);\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[@transformPanel]': '\"enter\"',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n    '[class.mat-datepicker-content-above]': '_isAbove',\n  },\n  animations: [\n    matDatepickerAnimations.transformPanel,\n    matDatepickerAnimations.fadeInCalendar,\n  ],\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color'],\n})\nexport class MatDatepickerContent<D> extends _MatDatepickerContentMixinBase\n  implements AfterViewInit, CanColor, OnInit, OnDestroy {\n\n  /** Subscription to changes in the overlay's position. */\n  private _positionChange: Subscription|null;\n\n  /** Reference to the internal calendar component. */\n  @ViewChild(MatCalendar) _calendar: MatCalendar<D>;\n\n  /** Reference to the datepicker that created the overlay. */\n  datepicker: MatDatepicker<D>;\n\n  /** Whether the datepicker is above or below the input. */\n  _isAbove: boolean;\n\n  constructor(\n    elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone) {\n    super(elementRef);\n  }\n\n  ngOnInit() {\n    if (!this.datepicker._popupRef || this._positionChange) {\n      return;\n    }\n\n    const positionStrategy =\n      this.datepicker._popupRef.getConfig().positionStrategy! as FlexibleConnectedPositionStrategy;\n\n    this._positionChange = positionStrategy.positionChanges.subscribe(change => {\n      const isAbove = change.connectionPair.overlayY === 'bottom';\n\n      if (isAbove !== this._isAbove) {\n        this._ngZone.run(() => {\n          this._isAbove = isAbove;\n          this._changeDetectorRef.markForCheck();\n        });\n      }\n    });\n  }\n\n  ngAfterViewInit() {\n    this._calendar.focusActiveCell();\n  }\n\n  ngOnDestroy() {\n    if (this._positionChange) {\n      this._positionChange.unsubscribe();\n      this._positionChange = null;\n    }\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDatepicker<D> implements OnDestroy, CanColor {\n  /** An input indicating the type of the custom header component for the calendar, if set. */\n  @Input() calendarHeaderComponent: ComponentType<any>;\n\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' = 'month';\n\n  /** Color palette to use on the datepicker's calendar. */\n  @Input()\n  get color(): ThemePalette {\n    return this._color ||\n        (this._datepickerInput ? this._datepickerInput._getThemePalette() : undefined);\n  }\n  set color(value: ThemePalette) {\n    this._color = value;\n  }\n  _color: ThemePalette;\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean { return this._touchUi; }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits selected year in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected month in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { value ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id: string = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<MatDatepickerContent<D>> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** Reference to the component instantiated in popup mode. */\n  private _popupComponentRef: ComponentRef<MatDatepickerContent<D>> | null;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  /** Subscription to value changes in the associated input element. */\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  readonly _disabledChange = new Subject<boolean>();\n\n  /** Emits new selected date when selected date changes. */\n  readonly _selectedChanged = new Subject<D>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n      this._popupComponentRef = null;\n    }\n  }\n\n  /** Selects the given date */\n  _select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this._selectedChanged.next(date);\n    }\n  }\n\n  /** Emits the selected year in multiyear view */\n  _selectYear(normalizedYear: D): void {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Emits selected month in year view */\n  _selectMonth(normalizedMonth: D): void {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    this._dialogRef = this._dialog.open<MatDatepickerContent<D>>(MatDatepickerContent, {\n      direction: this._getDirection(),\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n    this._setColor();\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal<MatDatepickerContent<D>>(MatDatepickerContent,\n                                                                          this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      this._popupRef.setDirection(this._getDirection());\n      this._popupComponentRef = this._popupRef.attach(this._calendarPortal);\n      this._popupComponentRef.instance.datepicker = this;\n      this._setColor();\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._getDirection(),\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => {\n        // Closing on alt + up is only valid when there's an input associated with the datepicker.\n        return event.keyCode === ESCAPE ||\n               (this._datepickerInput && event.altKey && event.keyCode === UP_ARROW);\n      }))\n    ).subscribe(() => this.close());\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay.position()\n      .flexibleConnectedTo(this._datepickerInput.getPopupConnectionElementRef())\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8)\n      .withPush(false)\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom'\n        },\n        {\n          originX: 'end',\n          originY: 'bottom',\n          overlayX: 'end',\n          overlayY: 'top'\n        },\n        {\n          originX: 'end',\n          originY: 'top',\n          overlayX: 'end',\n          overlayY: 'bottom'\n        }\n      ]);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Passes the current theme color along to the calendar overlay. */\n  private _setColor(): void {\n    const color = this.color;\n    if (this._popupComponentRef) {\n      this._popupComponentRef.instance.color = color;\n    }\n    if (this._dialogRef) {\n      this._dialogRef.componentInstance.color = color;\n    }\n  }\n\n  /** Returns the layout direction of the datepicker. */\n  private _getDirection() {\n    return this._dir ? this._dir.value : 'ltr';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {AnimationEvent} from '@angular/animations';\nimport {matDialogAnimations} from './dialog-animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MatDialogConfig} from './dialog-config';\n\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport function throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [matDialogAnimations.slideDialog],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    '[attr.id]': '_id',\n    '[attr.role]': '_config?.role',\n    '[attr.aria-labelledby]': '_config?.ariaLabel ? null : _ariaLabelledBy',\n    '[attr.aria-label]': '_config?.ariaLabel',\n    '[attr.aria-describedby]': '_config?.ariaDescribedBy || null',\n    '[@slideDialog]': '_state',\n    '(@slideDialog.start)': '_onAnimationStart($event)',\n    '(@slideDialog.done)': '_onAnimationDone($event)',\n  },\n})\nexport class MatDialogContainer extends BasePortalOutlet {\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The class that traps and manages focus within the dialog. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n  /** The dialog configuration. */\n  _config: MatDialogConfig;\n\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** ID of the element that should be considered as the dialog's label. */\n  _ariaLabelledBy: string | null = null;\n\n  /** ID for the container DOM element. */\n  _id: string;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) private _document: any) {\n\n    super();\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the dialog opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the dialog was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Note that there is no focus method when rendering on the server.\n      if (this._elementRef.nativeElement.focus) {\n        // Move focus onto the dialog immediately in order to prevent the user from accidentally\n        // opening multiple dialogs at the same time. Needs to be async, because the element\n        // may not be focusable immediately.\n        Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n      }\n    }\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Callback, invoked when an animation on the host starts. */\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {GlobalPositionStrategy, OverlayRef} from '@angular/cdk/overlay';\nimport {Location} from '@angular/common';\nimport {Observable, Subject, Subscription, SubscriptionLike} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {DialogPosition} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T, R = any> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose: boolean | undefined = this._containerInstance._config.disableClose;\n\n  /** Subject for notifying the user that the dialog has finished opening. */\n  private readonly _afterOpen = new Subject<void>();\n\n  /** Subject for notifying the user that the dialog has finished closing. */\n  private readonly _afterClosed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the dialog has started closing. */\n  private readonly _beforeClose = new Subject<R | undefined>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  /** Subscription to changes in the user's location. */\n  private _locationChanges: SubscriptionLike = Subscription.EMPTY;\n\n  constructor(\n    private _overlayRef: OverlayRef,\n    public _containerInstance: MatDialogContainer,\n    location?: Location,\n    readonly id: string = `mat-dialog-${uniqueId++}`) {\n\n    // Pass the id along to the container.\n    _containerInstance._id = id;\n\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'enter'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpen.next();\n      this._afterOpen.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'exit'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._overlayRef.dispose();\n      this._locationChanges.unsubscribe();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = null!;\n    });\n\n    _overlayRef.keydownEvents()\n      .pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose))\n      .subscribe(() => this.close());\n\n    if (location) {\n      // Close the dialog when the user goes forwards/backwards in history or when the location\n      // hash changes. Note that this usually doesn't include clicking on links (unless the user\n      // is using the `HashLocationStrategy`).\n      this._locationChanges = location.subscribe(() => {\n        if (this._containerInstance._config.closeOnNavigation) {\n          this.close();\n        }\n      });\n    }\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'start'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._beforeClose.next(dialogResult);\n      this._beforeClose.complete();\n      this._overlayRef.detachBackdrop();\n    });\n\n    this._containerInstance._startExitAnimation();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpen(): Observable<void> {\n    return this._afterOpen.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this._afterClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClose(): Observable<R | undefined> {\n    return this._beforeClose.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string = 'auto', height: string = 'auto'): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayContainer,\n  OverlayRef,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {Location} from '@angular/common';\nimport {\n  ComponentRef,\n  Inject,\n  inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {defer, Observable, of as observableOf, Subject} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\n\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\n\n/** Injection token that can be used to specify default dialog options. */\nexport const MAT_DIALOG_DEFAULT_OPTIONS =\n    new InjectionToken<MatDialogConfig>('mat-dialog-default-options');\n\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport const MAT_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy', {\n      providedIn: 'root',\n      factory: MAT_DIALOG_SCROLL_STRATEGY_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_FACTORY(): ()  => ScrollStrategy {\n  const overlay = inject(Overlay);\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Service to open Material Design modal dialogs.\n */\n@Injectable()\nexport class MatDialog {\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\n  private readonly _afterAllClosedAtThisLevel = new Subject<void>();\n  private readonly _afterOpenAtThisLevel = new Subject<MatDialogRef<any>>();\n  private _ariaHiddenElements = new Map<Element, string|null>();\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpen(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpen : this._afterOpenAtThisLevel;\n  }\n\n  get _afterAllClosed() {\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  readonly afterAllClosed: Observable<void> = defer<void>(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      this._afterAllClosed.pipe(startWith(undefined)));\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() private _location: Location,\n      @Optional() @Inject(MAT_DIALOG_DEFAULT_OPTIONS) private _defaultOptions,\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) private _scrollStrategy,\n      @Optional() @SkipSelf() private _parentDialog: MatDialog,\n      private _overlayContainer: OverlayContainer) {}\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MatDialogConfig<D>): MatDialogRef<T, R> {\n\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef = this._attachDialogContent<T, R>(componentOrTemplateRef,\n                                                      dialogContainer,\n                                                      overlayRef,\n                                                      config);\n\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpen.next(dialogRef);\n\n    return dialogRef;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    let i = this.openDialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      this.openDialogs[i].close();\n    }\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\n    let containerPortal = new ComponentPortal(MatDialogContainer, config.viewContainerRef);\n    let containerRef: ComponentRef<MatDialogContainer> = overlay.attach(containerPortal);\n    containerRef.instance._config = config;\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T, R>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MatDialogContainer,\n      overlayRef: OverlayRef,\n      config: MatDialogConfig): MatDialogRef<T, R> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef =\n        new MatDialogRef<T, R>(overlayRef, dialogContainer, this._location, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\n          <any>{ $implicit: config.data, dialogRef }));\n    } else {\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const contentRef = dialogContainer.attachComponentPortal<T>(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: MatDialogConfig,\n      dialogRef: MatDialogRef<T>,\n      dialogContainer: MatDialogContainer): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap();\n\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n    // added to the injection tokens.\n    injectionTokens\n      .set(MatDialogContainer, dialogContainer)\n      .set(MAT_DIALOG_DATA, config.data)\n      .set(MatDialogRef, dialogRef);\n\n    if (!userInjector || !userInjector.get(Directionality, null)) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n        this._afterAllClosed.next();\n      }\n    }\n  }\n\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   */\n  private _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement();\n\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        let sibling = siblings[i];\n\n        if (sibling !== overlayContainer &&\n          sibling.nodeName !== 'SCRIPT' &&\n          sibling.nodeName !== 'STYLE' &&\n          !sibling.hasAttribute('aria-live')) {\n\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n\n  }\n\n}\n\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(\n    config?: MatDialogConfig, defaultOptions?: MatDialogConfig): MatDialogConfig {\n  return {...defaultOptions, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ElementRef,\n} from '@angular/core';\nimport {MatDialog} from './dialog';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: `button[mat-dialog-close], button[matDialogClose]`,\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel',\n    'type': 'button', // Prevents accidental form submits.\n  }\n})\nexport class MatDialogClose implements OnInit, OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string = 'Close dialog';\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  constructor(\n    @Optional() public dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes._matDialogClose || changes._matDialogCloseResult;\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  @Input() id = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    @Optional() private _dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n})\nexport class MatDialogContent {}\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n})\nexport class MatDialogActions {}\n\n\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef, openDialogs: MatDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MatDialog} from './dialog';\nimport {MatDialogContainer} from './dialog-container';\nimport {\n  MatDialogActions,\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n} from './dialog-content-directives';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n  ],\n  providers: [\n    MatDialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MatDialogContainer],\n})\nexport class MatDialogModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTextareaAutosize} from '@angular/cdk/text-field';\nimport {Directive, Input} from '@angular/core';\n\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deletion-target 7.0.0 deprecate in favor of `cdkTextareaAutosize`.\n */\n@Directive({\n  selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n  exportAs: 'matTextareaAutosize',\n  inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n  host: {\n    'class': 'cdk-textarea-autosize mat-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n    '(input)': '_noopInputHandler()',\n  },\n})\nexport class MatTextareaAutosize extends CdkTextareaAutosize {\n  @Input()\n  get matAutosizeMinRows(): number { return this.minRows; }\n  set matAutosizeMinRows(value: number) { this.minRows = value; }\n\n  @Input()\n  get matAutosizeMaxRows(): number { return this.maxRows; }\n  set matAutosizeMaxRows(value: number) { this.maxRows = value; }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport const MAT_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Self,\n  NgZone,\n} from '@angular/core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {CanUpdateErrorState, ErrorStateMatcher, mixinErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Subject} from 'rxjs';\nimport {AutofillMonitor} from '@angular/cdk/text-field';\nimport {getMatInputUnsupportedTypeError} from './input-errors';\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\n\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet nextUniqueId = 0;\n\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nexport class MatInputBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatInputMixinBase = mixinErrorState(MatInputBase);\n\n/** Directive that allows a native input to work inside a `MatFormField`. */\n@Directive({\n  selector: `input[matInput], textarea[matInput]`,\n  exportAs: 'matInput',\n  host: {\n    /**\n     * @deletion-target 7.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n     */\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    '[class.mat-input-server]': '_isServer',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[attr.id]': 'id',\n    '[attr.placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[readonly]': 'readonly',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-required]': 'required.toString()',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\n})\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\n    OnDestroy, OnInit, DoCheck, CanUpdateErrorState {\n  protected _uid = `mat-input-${nextUniqueId++}`;\n  protected _previousNativeValue: any;\n  private _inputValueAccessor: {value: any};\n  /** The aria-describedby attribute on the input for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Whether the component is being rendered on the server. */\n  _isServer = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  focused: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly stateChanges: Subject<void> = new Subject<void>();\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  controlType: string = 'mat-input';\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  autofilled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n  protected _disabled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) { this._id = value || this._uid; }\n  protected _id: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input() placeholder: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  protected _required = false;\n\n  /** Input type of the element. */\n  @Input()\n  get type(): string { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      this._elementRef.nativeElement.type = this._type;\n    }\n  }\n  protected _type = 'text';\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): string { return this._inputValueAccessor.value; }\n  set value(value: string) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly(): boolean { return this._readonly; }\n  set readonly(value: boolean) { this._readonly = coerceBooleanProperty(value); }\n  private _readonly = false;\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n\n  constructor(protected _elementRef: ElementRef,\n              protected _platform: Platform,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any,\n              private _autofillMonitor: AutofillMonitor,\n              ngZone: NgZone) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || this._elementRef.nativeElement;\n\n    this._previousNativeValue = this.value;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      ngZone.runOutsideAngular(() => {\n        _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\n          let el = event.target as HTMLInputElement;\n          if (!el.value && !el.selectionStart && !el.selectionEnd) {\n            // Note: Just setting `0, 0` doesn't fix the issue. Setting\n            // `1, 1` fixes it for the first time that you type text and\n            // then hold delete. Toggling to `1, 1` and then back to\n            // `0, 0` seems to completely fix it.\n            el.setSelectionRange(1, 1);\n            el.setSelectionRange(0, 0);\n          }\n        });\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n  }\n\n  ngOnInit() {\n    this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n      this.autofilled = event.isAutofilled;\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n    this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n\n    // We need to dirty-check the native element's value, because there are some cases where\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n    // updating the value using `emitEvent: false`).\n    this._dirtyCheckNativeValue();\n  }\n\n  /** Focuses the input. */\n  focus(): void { this._elementRef.nativeElement.focus(); }\n\n  /** Callback for the cases where the focused state of the input changes. */\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused && !this.readonly) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n\n  /** Does some manual dirty checking on the native input `value` property. */\n  protected _dirtyCheckNativeValue() {\n    const newValue = this.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Make sure the input is a supported type. */\n  protected _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n\n  /** Checks whether the input type is one of the types that are never empty. */\n  protected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n\n  /** Checks whether the input is invalid based on the native validation. */\n  protected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /** Determines if the component host is a textarea. */\n  protected _isTextarea() {\n    return this._elementRef.nativeElement.nodeName.toLowerCase() === 'textarea';\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n        !this.autofilled;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return this.focused || !this.empty; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() { this.focus(); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TextFieldModule} from '@angular/cdk/text-field';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatTextareaAutosize} from './autosize';\nimport {MatInput} from './input';\n\n\n@NgModule({\n  declarations: [MatInput, MatTextareaAutosize],\n  imports: [\n    CommonModule,\n    TextFieldModule,\n    MatFormFieldModule,\n  ],\n  exports: [\n    TextFieldModule,\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  providers: [ErrorStateMatcher],\n})\nexport class MatInputModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel: string = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel: string = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel: string = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel: string = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel: string = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel: string = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel: string = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel: string = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel: string = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation,\n  NgZone,\n} from '@angular/core';\nimport {take} from 'rxjs/operators';\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'attr.aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** Whether to allow selection of disabled cells. */\n  @Input() allowDisabledSelection = false;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n  constructor(private _elementRef: ElementRef, private _ngZone: NgZone) { }\n\n  _cellClicked(cell: MatCalendarCell): void {\n    if (!this.allowDisabledSelection && !cell.enabled) {\n      return;\n    }\n    this.selectedValueChange.emit(cell.value);\n  }\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  get _firstRowOffset(): number {\n    return this.rows && this.rows.length && this.rows[0].length ?\n        this.numCols - this.rows[0].length : 0;\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._elementRef.nativeElement.querySelector('.mat-calendar-body-active').focus();\n      });\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMonthView<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    const oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new date is selected. */\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n\n    const isRtl = this._isRtl();\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n              this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n          this._dateSelected(this._dateAdapter.getDate(this._activeDate));\n          this._userSelection.emit();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    const dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      const date = this._dateAdapter.createDate(\n            this._dateAdapter.getYear(this.activeDate),\n            this._dateAdapter.getMonth(this.activeDate), i + 1);\n      const enabled = this._shouldEnableDate(date);\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled));\n    }\n  }\n\n  /** Date filter for the month */\n  private _shouldEnableDate(date: D): boolean {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterViewInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nexport class MatCheckboxBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatCheckboxMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://material.io/design/components/selection-controls.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewInit, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  private _required: boolean;\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() readonly change: EventEmitter<MatCheckboxChange> =\n      new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\">` element */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** Reference to the ripple instance of the checkbox. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  _onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Reference to the focused state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              @Attribute('tabindex') tabIndex: string,\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\n                  private _clickAction: MatCheckboxClickAction) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (value != this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked: boolean = false;\n\n  /**\n   * Whether the checkbox is disabled. This fully overrides the implementation provided by\n   * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n   */\n  @Input()\n  get disabled() { return this._disabled; }\n  set disabled(value: any) {\n    if (value != this.disabled) {\n      this._disabled = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate(): boolean { return this._indeterminate; }\n  set indeterminate(value: boolean) {\n    const changed = value != this._indeterminate;\n    this._indeterminate = value;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n  private _indeterminate: boolean = false;\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the checkbox changes.\n    // Since the checkbox uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element: HTMLElement = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n    }\n  }\n\n  private _emitChangeEvent() {\n    let event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this.ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      this._removeFocusRipple();\n      this._onTouched();\n    }\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    let animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n\n  /** Fades out the focus state ripple. */\n  private _removeFocusRipple(): void {\n    if (this._focusRipple) {\n      this._focusRipple.fadeOut();\n      this._focusRipple = null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n@Directive({\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n})\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatCheckbox, MatCheckboxRequiredValidator, MatCommonModule],\n  declarations: [MatCheckbox, MatCheckboxRequiredValidator],\n})\nexport class MatCheckboxModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\n\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/** Event object emitted by MatChip when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChip,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nexport class MatChipBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatChipMixinBase =\n    mixinColor(mixinDisableRipple(mixinDisabled(MatChipBase)), 'primary');\n\nconst CHIP_ATTRIBUTE_NAMES = ['mat-basic-chip'];\n\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-avatar, [matChipAvatar]',\n  host: {'class': 'mat-chip-avatar'}\n})\nexport class MatChipAvatar {}\n\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n  host: {'class': 'mat-chip-trailing-icon'}\n})\nexport class MatChipTrailingIcon {}\n\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled', 'disableRipple'],\n  exportAs: 'matChip',\n  host: {\n    'class': 'mat-chip',\n    '[attr.tabindex]': 'disabled ? null : -1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[class.mat-chip-with-avatar]': 'avatar',\n    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n    '[class.mat-chip-disabled]': 'disabled',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n  },\n})\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n    CanDisable, CanDisableRipple, RippleTarget {\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /** Reference to the RippleRenderer for the chip. */\n  private _chipRipple: RippleRenderer;\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple;\n  }\n\n  /** Whether the chip has focus. */\n  _hasFocus: boolean = false;\n\n  /** Whether the chip list is selectable */\n  chipListSelectable: boolean = true;\n\n  /** The chip avatar */\n  @ContentChild(MatChipAvatar) avatar: MatChipAvatar;\n\n  /** The chip's trailing icon. */\n  @ContentChild(MatChipTrailingIcon) trailingIcon: MatChipTrailingIcon;\n\n  /** The chip's remove toggler. */\n  @ContentChild(forwardRef(() => MatChipRemove)) removeIcon: MatChipRemove;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) {\n    this._selected = coerceBooleanProperty(value);\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: value\n    });\n  }\n  protected _selected: boolean = false;\n\n  /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n  @Input()\n  get value(): any {\n    return this._value != undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n  set value(value: any) { this._value = value; }\n  protected _value: any;\n\n  /**\n   * Whether or not the chip is selectable. When a chip is not selectable,\n   * changes to it's selected state are always ignored. By default a chip is\n   * selectable, and it becomes non-selectable if it's parent chip list is\n   * not selectable.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable && this.chipListSelectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n  protected _selectable: boolean = true;\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (removed) events.\n   */\n  @Input()\n  get removable(): boolean { return this._removable; }\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n  protected _removable: boolean = true;\n\n  /** Emits when the chip is focused. */\n  readonly _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blured. */\n  readonly _onBlur = new Subject<MatChipEvent>();\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() readonly selectionChange: EventEmitter<MatChipSelectionChange> =\n      new EventEmitter<MatChipSelectionChange>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() readonly destroyed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** Emitted when a chip is to be removed. */\n  @Output() readonly removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** The ARIA selected applied to the chip. */\n  get ariaSelected(): string | null {\n    return this.selectable ? this.selected.toString() : null;\n  }\n\n  constructor(public _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions) {\n    super(_elementRef);\n\n    this._addHostClassName();\n\n    this._chipRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._chipRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    if (globalOptions) {\n      this.rippleConfig = {\n        speedFactor: globalOptions.baseSpeedFactor,\n        animation: globalOptions.animation,\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n      };\n    }\n  }\n\n  _addHostClassName() {\n    // Add class for the different chips\n    for (const attr of CHIP_ATTRIBUTE_NAMES) {\n      if (this._elementRef.nativeElement.hasAttribute(attr) ||\n        this._elementRef.nativeElement.tagName.toLowerCase() === attr) {\n        (this._elementRef.nativeElement as HTMLElement).classList.add(attr);\n        return;\n      }\n    }\n    (this._elementRef.nativeElement as HTMLElement).classList.add('mat-standard-chip');\n  }\n\n  ngOnDestroy() {\n    this.destroyed.emit({chip: this});\n    this._chipRipple._removeTriggerEvents();\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    this._selected = true;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: true\n    });\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    this._selected = false;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: false\n    });\n  }\n\n  /** Select this chip and emit selected event */\n  selectViaInteraction(): void {\n    this._selected = true;\n    // Emit select event when selected changes.\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: true,\n      selected: true\n    });\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n\n    return this.selected;\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    if (!this._hasFocus) {\n      this._elementRef.nativeElement.focus();\n      this._onFocus.next({chip: this});\n    }\n    this._hasFocus = true;\n  }\n\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Ensures events fire properly upon click. */\n  _handleClick(event: Event) {\n    // Check disabled\n    if (this.disabled) {\n      return;\n    }\n\n    event.preventDefault();\n    event.stopPropagation();\n  }\n\n  /** Handle custom key presses. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n\n  _blur(): void {\n    this._hasFocus = false;\n    this._onBlur.next({chip: this});\n  }\n}\n\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove mat-chip-trailing-icon',\n    '(click)': '_handleClick()',\n  }\n})\nexport class MatChipRemove {\n  constructor(protected _parentChip: MatChip) {\n  }\n\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(): void {\n    if (this._parentChip.removable) {\n      this._parentChip.remove();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** Default options, for the chips module, that can be overridden. */\nexport interface MatChipsDefaultOptions {\n  /** The list of key codes that will trigger a chipEnd event. */\n  separatorKeyCodes: number[];\n}\n\n/** Injection token to be used to override the default options for the chips module. */\nexport const MAT_CHIPS_DEFAULT_OPTIONS =\n    new InjectionToken<MatChipsDefaultOptions>('mat-chips-default-options');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BACKSPACE} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {CanUpdateErrorState, ErrorStateMatcher, mixinErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {merge, Observable, Subscription} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\nimport {MatChipInput} from './chip-input';\n\n\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nexport class MatChipListBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatChipListMixinBase = mixinErrorState(MatChipListBase);\n\n\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the chip list value has changed. */\nexport class MatChipListChange {\n  constructor(\n    /** Chip list that emitted the event. */\n    public source: MatChipList,\n    /** Value of the chip list when the event was emitted. */\n    public value: any) { }\n}\n\n\n/**\n * A material design chips component (named ChipList for it's similarity to the List component).\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'matChipList',\n  host: {\n    '[attr.tabindex]': '_tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.role]': 'role',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)',\n    '[id]': '_uid',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\n  ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly controlType: string = 'mat-chip-list';\n\n  /** When a chip is destroyed, we track the index so we can focus the appropriate next chip. */\n  protected _lastDestroyedIndex: number|null = null;\n\n  /** Track which chips we're listening to for focus/destruction. */\n  protected _chipSet: WeakMap<MatChip, boolean> = new WeakMap();\n\n  /** Subscription to tabbing out from the chip list. */\n  private _tabOutSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the chip list. */\n  private _changeSubscription: Subscription;\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription | null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription | null;\n\n  /** Subscription to selection changes in chips. */\n  private _chipSelectionSubscription: Subscription | null;\n\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription | null;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipInput;\n\n  /** Uid of the chip list */\n  _uid: string = `mat-chip-list-${nextUniqueId++}`;\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Tab index for the chip list. */\n  _tabIndex = 0;\n\n  /**\n   * User defined tab index.\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\n   */\n  _userTabIndex: number | null = null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /** Function when touched */\n  _onTouched = () => {};\n\n  /** Function when changed */\n  _onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MatChip>;\n\n  /** The array of selected chips inside chip list. */\n  get selected(): MatChip[] | MatChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The ARIA role applied to the chip list. */\n  get role(): string | null { return this.empty ? null : 'listbox'; }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n  private _multiple: boolean = false;\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith(): (o1: any, o2: any) => boolean { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    this.writeValue(value);\n    this._value = value;\n  }\n  protected _value: any;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get id(): string {\n    return this._chipInput ? this._chipInput.id : this._uid;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  protected _required: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get placeholder(): string {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  protected _placeholder: string;\n\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused(): boolean {\n    return this.chips.some(chip => chip._hasFocus) ||\n      (this._chipInput && this._chipInput.focused);\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  protected _disabled: boolean = false;\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip list is selectable. When a chip list is not selectable,\n   * the selected states for all the chips inside the chip list are always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n    if (this.chips) {\n      this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n    }\n  }\n  protected _selectable: boolean = true;\n\n  @Input()\n  set tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroyed));\n  }\n\n  /** Event emitted when the selected chip list value has been changed by the user. */\n  @Output() readonly change: EventEmitter<MatChipListChange> =\n      new EventEmitter<MatChipListChange>();\n\n  /**\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  /** The chip components contained within this chip list. */\n  @ContentChildren(MatChip) chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips)\n      .withWrap()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n\n    // Prevents the chip list from capturing focus and redirecting\n    // it back to the first chip when the user tabs out.\n    this._tabOutSubscription = this._keyManager.tabOut.subscribe(() => {\n      this._tabIndex = -1;\n      setTimeout(() => this._tabIndex = this._userTabIndex || 0);\n    });\n\n    // When the list changes, re-subscribe\n    this._changeSubscription = this.chips.changes.pipe(startWith(null)).subscribe(() => {\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabOutSubscription.unsubscribe();\n\n    if (this._changeSubscription) {\n      this._changeSubscription.unsubscribe();\n    }\n\n    if (this._chipRemoveSubscription) {\n      this._chipRemoveSubscription.unsubscribe();\n    }\n\n    this._dropSubscriptions();\n    this.stateChanges.complete();\n  }\n\n\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement: MatChipInput): void {\n    this._chipInput = inputElement;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._elementRef.nativeElement.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() { this.focus(); }\n\n  /**\n   * Focuses the the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus(): void {\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput();\n      this.stateChanges.next();\n    }\n  }\n\n  /** Attempt to focus an input if we have one. */\n  _focusInput() {\n    if (this._chipInput) {\n      this._chipInput.focus();\n    }\n  }\n\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event: KeyboardEvent) {\n    const target = event.target as HTMLElement;\n\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n    } else if (target && target.classList.contains('mat-chip')) {\n      this._keyManager.onKeydown(event);\n      this.stateChanges.next();\n    }\n  }\n\n\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  protected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n\n  /**\n   * Update key manager's active item when chip is deleted.\n   * If the deleted chip is the last chip in chip list, focus the new last chip.\n   * Otherwise focus the next chip in the list.\n   * Save `_lastDestroyedIndex` so we can set the correct focus.\n   */\n  protected _updateKeyManager(chip: MatChip) {\n    let chipIndex: number = this.chips.toArray().indexOf(chip);\n    if (this._isValidIndex(chipIndex)) {\n      if (chip._hasFocus) {\n        // Check whether the chip is not the last item\n        if (chipIndex < this.chips.length - 1) {\n          this._keyManager.setActiveItem(chipIndex);\n        } else if (chipIndex - 1 >= 0) {\n          this._keyManager.setActiveItem(chipIndex - 1);\n        }\n      }\n      if (this._keyManager.activeItemIndex === chipIndex) {\n        this._lastDestroyedIndex = chipIndex;\n      }\n    }\n  }\n\n  /**\n   * Checks to see if a focus chip was recently destroyed so that we can refocus the next closest\n   * one.\n   */\n  protected _updateFocusForDestroyedChips() {\n    let chipsArray = this.chips;\n\n    if (this._lastDestroyedIndex != null && chipsArray.length > 0 && this.focused) {\n      // Check whether the destroyed chip was the last item\n      const newFocusIndex = Math.min(this._lastDestroyedIndex, chipsArray.length - 1);\n      this._keyManager.setActiveItem(newFocusIndex);\n      let focusChip = this._keyManager.activeItem;\n      // Focus the chip\n      if (focusChip) {\n        focusChip.focus();\n      }\n    }\n\n    // Reset our destroyed index\n    this._lastDestroyedIndex = null;\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\n  private _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let input = element as HTMLInputElement;\n      return !input.value;\n    }\n\n    return false;\n  }\n\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChip);\n        }\n      }\n    }\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    this._keyManager.setActiveItem(-1);\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n\n\n  private _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n  private _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n      this._updateKeyManager(event.chip);\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Directive, ElementRef, EventEmitter, Input, Output, Inject} from '@angular/core';\nimport {MatChipList} from './chip-list';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n    '[id]': 'id',\n    '[attr.placeholder]': 'placeholder || null',\n  }\n})\nexport class MatChipInput {\n  /** Whether the control is focused. */\n  focused: boolean = false;\n  _chipList: MatChipList;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipList(value: MatChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur(): boolean { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  // TODO(tinayuangao): Support Set here\n  @Input('matChipInputSeparatorKeyCodes')\n  separatorKeyCodes: number[] = this._defaultOptions.separatorKeyCodes;\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\n\n  /**\n   * The input's placeholder text.\n   * @deprecated Bind to the `placeholder` attribute directly.\n   * @deletion-target 7.0.0\n   */\n  @Input() placeholder: string = '';\n\n  /** Unique id for the input. */\n  @Input() id: string = `mat-chip-list-input-${nextUniqueId++}`;\n\n  /** Whether the input is empty. */\n  get empty(): boolean { return !this._inputElement.value; }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(\n    protected _elementRef: ElementRef,\n    @Inject(MAT_CHIPS_DEFAULT_OPTIONS) private _defaultOptions: MatChipsDefaultOptions) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this.separatorKeyCodes.indexOf(event.keyCode) > -1) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n\n  /** Focuses the input. */\n  focus(): void { this._inputElement.focus(); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatChip, MatChipAvatar, MatChipRemove, MatChipTrailingIcon} from './chip';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipInput} from './chip-input';\nimport {MatChipList} from './chip-list';\n\nconst CHIP_DECLARATIONS = [\n  MatChipList,\n  MatChip,\n  MatChipInput,\n  MatChipRemove,\n  MatChipAvatar,\n  MatChipTrailingIcon,\n];\n\n@NgModule({\n  exports: CHIP_DECLARATIONS,\n  declarations: CHIP_DECLARATIONS,\n  providers: [\n    ErrorStateMatcher,\n    {\n      provide: MAT_CHIPS_DEFAULT_OPTIONS,\n      useValue: {\n        separatorKeyCodes: [ENTER]\n      } as MatChipsDefaultOptions\n    }\n  ]\n})\nexport class MatChipsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig<D = any> {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop, */\n  backdropClass?: string = '';\n\n  /** Whether the user can use escape or clicking outside to close a modal. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction;\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy?: ScrollStrategy;\n\n  /** Whether the dialog should close when the user goes backwards/forwards in history. */\n  closeOnNavigation?: boolean = true;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by MatDialog. */\nexport const matDialogAnimations: {\n  readonly slideDialog: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\n  slideDialog: trigger('slideDialog', [\n    // Note: The `enter` animation doesn't transition to something like `translate3d(0, 0, 0)\n    // scale(1)`, because for some reason specifying the transform explicitly, causes IE both\n    // to blur the dialog content and decimate the animation performance. Leaving it as `none`\n    // solves both issues.\n    state('enter', style({ transform: 'none', opacity: 1 })),\n    state('void', style({ transform: 'translate3d(0, 25%, 0) scale(0.9)', opacity: 0 })),\n    state('exit', style({ transform: 'translate3d(0, 25%, 0)', opacity: 0 })),\n    transition('* => *', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n/** Default color palette for flat buttons (mat-flat-button) */\nconst DEFAULT_FLAT_BUTTON_COLOR = 'primary';\n\n/**\n * List of classes to add to MatButton instances based on host attributes to\n * style as different variants.\n */\nconst BUTTON_HOST_ATTRIBUTES = [\n  'mat-button',\n  'mat-flat-button',\n  'mat-icon-button',\n  'mat-raised-button',\n  'mat-stroked-button',\n  'mat-mini-fab',\n  'mat-fab',\n];\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nexport class MatButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatButtonMixinBase = mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n\n\n/**\n * Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],\n             button[mat-flat-button]`,\n  exportAs: 'matButton',\n  host: {\n    '[disabled]': 'disabled || null',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends _MatButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\n\n  /** Whether the button is round. */\n  _isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  _isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  /** Reference to the MatRipple instance of the button. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated Platform checks for SSR are no longer needed\n               * @deletion-target 7.0.0\n               */\n              // tslint:disable-next-line:no-unused-variable\n              private _platform: Platform,\n              private _focusMonitor: FocusMonitor) {\n    super(elementRef);\n\n    // For each of the variant selectors that is prevent in the button's host\n    // attributes, add the correct corresponding class.\n    for (const attr of BUTTON_HOST_ATTRIBUTES) {\n      if (this._hasHostAttributes(attr)) {\n        (elementRef.nativeElement as HTMLElement).classList.add(attr);\n      }\n    }\n\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n\n    if (this._isRoundButton) {\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\n    } else if (this._hasHostAttributes('mat-flat-button')) {\n      this.color = DEFAULT_FLAT_BUTTON_COLOR;\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._getHostElement().focus();\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n}\n\n/**\n * Raised Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],\n             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    '[attr.tabindex]': 'disabled ? -1 : 0',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton {\n\n  constructor(platform: Platform, focusMonitor: FocusMonitor, elementRef: ElementRef) {\n    super(elementRef, platform, focusMonitor);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatAnchor, MatButton} from './button';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n  ],\n})\nexport class MatButtonModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {SelectionModel} from '@angular/cdk/collections';\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n// Boilerplate for applying mixins to MatButtonToggleGroup and MatButtonToggleGroupMultiple\n/** @docs-private */\nexport class MatButtonToggleGroupBase {}\nexport const _MatButtonToggleGroupMixinBase = mixinDisabled(MatButtonToggleGroupBase);\n\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n\n/**\n * @deprecated Use `MatButtonToggleGroup` instead.\n * @deletion-target 7.0.0\n */\nexport class MatButtonToggleGroupMultiple {}\n\nlet _uniqueIdCounter = 0;\n\n/** Change event object emitted by MatButtonToggle. */\nexport class MatButtonToggleChange {\n  constructor(\n    /** The MatButtonToggle that emits the event. */\n    public source: MatButtonToggle,\n\n    /** The value assigned to the MatButtonToggle. */\n    public value: any) {}\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n  selector: 'mat-button-toggle-group',\n  providers: [\n    MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n    {provide: MatButtonToggleGroupMultiple, useExisting: MatButtonToggleGroup},\n  ],\n  inputs: ['disabled'],\n  host: {\n    '[attr.role]': 'multiple ? \"group\" : \"radiogroup\"',\n    'class': 'mat-button-toggle-group',\n    '[class.mat-button-toggle-vertical]': 'vertical'\n  },\n  exportAs: 'matButtonToggleGroup',\n})\nexport class MatButtonToggleGroup extends _MatButtonToggleGroupMixinBase implements\n  ControlValueAccessor, CanDisable, OnInit, AfterContentInit {\n\n  private _vertical = false;\n  private _multiple = false;\n  private _selectionModel: SelectionModel<MatButtonToggle>;\n\n  /**\n   * Reference to the raw value that the consumer tried to assign. The real\n   * value will exaclude any values from this one that don't correspond to a\n   * toggle. Useful for the cases where the value is assigned before the toggles\n   * have been initialized or at the same that they're being swapped out.\n   */\n  private _rawValue: any;\n\n  /**\n   * The method to be called in order to update ngModel.\n   * Now `ngModel` binding is not supported in multiple selection mode.\n   */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  _onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\n\n  /** `name` attribute for the underlying `input` element. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle.name = this._name);\n    }\n  }\n  private _name = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n\n  /** Value of the toggle group. */\n  @Input()\n  get value(): any {\n    const selected = this._selectionModel ? this._selectionModel.selected : [];\n\n    if (this.multiple) {\n      return selected.map(toggle => toggle.value);\n    }\n\n    return selected[0] ? selected[0].value : undefined;\n  }\n  set value(newValue: any) {\n    this._setSelectionByValue(newValue);\n    this.valueChange.emit(this.value);\n  }\n\n  /**\n   * Event that emits whenever the value of the group changes.\n   * Used to facilitate two-way data binding.\n   * @docs-private\n   */\n  @Output() readonly valueChange = new EventEmitter<any>();\n\n  /** Selected button toggles in the group. */\n  get selected() {\n    const selected = this._selectionModel.selected;\n    return this.multiple ? selected : (selected[0] || null);\n  }\n\n  /** Whether multiple button toggles can be selected. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Event emitted when the group's value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatButtonToggle>(this.multiple, undefined, false);\n  }\n\n  ngAfterContentInit() {\n    this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle._markForCheck());\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    const selected = this.selected;\n    const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n    const event = new MatButtonToggleChange(source!, this.value);\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n\n  /**\n   * Syncs a button toggle's selected state with the model value.\n   * @param toggle Toggle to be synced.\n   * @param select Whether the toggle should be selected.\n   * @param isUserInput Whether the change was a result of a user interaction.\n   */\n  _syncButtonToggle(toggle: MatButtonToggle, select: boolean, isUserInput = false) {\n    // Deselect the currently-selected toggle, if we're in single-selection\n    // mode and the button being toggled isn't selected at the moment.\n    if (!this.multiple && this.selected && !toggle.checked) {\n      (this.selected as MatButtonToggle).checked = false;\n    }\n\n    if (select) {\n      this._selectionModel.select(toggle);\n    } else {\n      this._selectionModel.deselect(toggle);\n    }\n\n    // Only emit the change event for user input.\n    if (isUserInput) {\n      this._emitChangeEvent();\n    }\n\n    // Note: we emit this one no matter whether it was a user interaction, because\n    // it is used by Angular to sync up the two-way data binding.\n    this.valueChange.emit(this.value);\n  }\n\n  /** Checks whether a button toggle is selected. */\n  _isSelected(toggle: MatButtonToggle) {\n    return this._selectionModel.isSelected(toggle);\n  }\n\n  /** Determines whether a button toggle should be checked on init. */\n  _isPrechecked(toggle: MatButtonToggle) {\n    if (typeof this._rawValue === 'undefined') {\n      return false;\n    }\n\n    if (this.multiple && Array.isArray(this._rawValue)) {\n      return !!this._rawValue.find(value => toggle.value != null && value === toggle.value);\n    }\n\n    return toggle.value === this._rawValue;\n  }\n\n  /** Updates the selection state of the toggles in the group based on a value. */\n  private _setSelectionByValue(value: any|any[]) {\n    this._rawValue = value;\n\n    if (!this._buttonToggles) {\n      return;\n    }\n\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw Error('Value must be an array in multiple-selection mode.');\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n    } else {\n      this._clearSelection();\n      this._selectValue(value);\n    }\n  }\n\n  /** Clears the selected toggles. */\n  private _clearSelection() {\n    this._selectionModel.clear();\n    this._buttonToggles.forEach(toggle => toggle.checked = false);\n  }\n\n  /** Selects a value if there's a toggle that corresponds to it. */\n  private _selectValue(value: any) {\n    const correspondingOption = this._buttonToggles.find(toggle => {\n      return toggle.value != null && toggle.value === value;\n    });\n\n    if (correspondingOption) {\n      correspondingOption.checked = true;\n      this._selectionModel.select(correspondingOption);\n    }\n  }\n}\n\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/** @docs-private */\nexport class MatButtonToggleBase {}\nexport const _MatButtonToggleMixinBase = mixinDisableRipple(MatButtonToggleBase);\n\n/** Single button inside of a toggle group. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matButtonToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disableRipple'],\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    'class': 'mat-button-toggle',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatButtonToggle extends _MatButtonToggleMixinBase implements OnInit,\n  CanDisableRipple, OnDestroy {\n\n  private _isSingleSelector = false;\n  private _checked = false;\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\n\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MatButtonToggleGroup;\n\n  /** Unique ID for the underlying `input` element. */\n  get inputId(): string { return `${this.id}-input`; }\n\n  /** The unique ID for this button toggle. */\n  @Input() id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** MatButtonToggleGroup reads this to assign its own value. */\n  @Input() value: any;\n\n  /** Whether the button is checked. */\n  @Input()\n  get checked(): boolean {\n    return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n  }\n  set checked(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._checked) {\n      this._checked = newValue;\n\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n      }\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Whether the button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n  }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Event emitted when the group value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _elementRef: ElementRef<HTMLElement>,\n              private _focusMonitor: FocusMonitor) {\n    super();\n\n    this.buttonToggleGroup = toggleGroup;\n  }\n\n  ngOnInit() {\n    this._isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n    this._type = this._isSingleSelector ? 'radio' : 'checkbox';\n    this.id = this.id || `mat-button-toggle-${_uniqueIdCounter++}`;\n\n    if (this._isSingleSelector) {\n      this.name = this.buttonToggleGroup.name;\n    }\n\n    if (this.buttonToggleGroup && this.buttonToggleGroup._isPrechecked(this)) {\n      this.checked = true;\n    }\n\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._inputElement.nativeElement.focus();\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native input. */\n  _onInputChange(event: Event) {\n    event.stopPropagation();\n\n    this._checked = this._isSingleSelector ? true : !this._checked;\n\n    if (this.buttonToggleGroup) {\n      this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n      this.buttonToggleGroup._onTouched();\n    }\n\n    // Emit a change event when the native input does.\n    this.change.emit(new MatButtonToggleChange(this, this.value));\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When the group value changes, the button will not be notified.\n    // Use `markForCheck` to explicit update button toggle's status.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatButtonToggle, MatButtonToggleGroup} from './button-toggle';\n\n\n@NgModule({\n  imports: [MatCommonModule, MatRippleModule],\n  exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n  declarations: [MatButtonToggleGroup, MatButtonToggle],\n})\nexport class MatButtonToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive,\n  Input,\n} from '@angular/core';\n\n\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-content',\n  host: {'class': 'mat-card-content'}\n})\nexport class MatCardContent {}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n  host: {\n    'class': 'mat-card-title'\n  }\n})\nexport class MatCardTitle {}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n  host: {\n    'class': 'mat-card-subtitle'\n  }\n})\nexport class MatCardSubtitle {}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-actions',\n  exportAs: 'matCardActions',\n  host: {\n    'class': 'mat-card-actions',\n    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n  }\n})\nexport class MatCardActions {\n  /** Position of the actions inside the card. */\n  @Input() align: 'start' | 'end' = 'start';\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-footer',\n  host: {'class': 'mat-card-footer'}\n})\nexport class MatCardFooter {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-image], [matCardImage]',\n  host: {'class': 'mat-card-image'}\n})\nexport class MatCardImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-sm-image], [matCardImageSmall]',\n  host: {'class': 'mat-card-sm-image'}\n})\nexport class MatCardSmImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-md-image], [matCardImageMedium]',\n  host: {'class': 'mat-card-md-image'}\n})\nexport class MatCardMdImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-lg-image], [matCardImageLarge]',\n  host: {'class': 'mat-card-lg-image'}\n})\nexport class MatCardLgImage {}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-xl-image], [matCardImageXLarge]',\n  host: {'class': 'mat-card-xl-image'}\n})\nexport class MatCardXlImage {}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-avatar], [matCardAvatar]',\n  host: {'class': 'mat-card-avatar'}\n})\nexport class MatCardAvatar {}\n\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card',\n  exportAs: 'matCard',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card'}\n})\nexport class MatCard {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-header'}\n})\nexport class MatCardHeader {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a preset\n * layout that groups an image with a title section.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-title-group'}\n})\nexport class MatCardTitleGroup {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatCard,\n  MatCardActions,\n  MatCardAvatar,\n  MatCardContent,\n  MatCardFooter,\n  MatCardHeader,\n  MatCardImage,\n  MatCardLgImage,\n  MatCardMdImage,\n  MatCardSmImage,\n  MatCardSubtitle,\n  MatCardTitle,\n  MatCardTitleGroup,\n  MatCardXlImage,\n} from './card';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatCard,\n    MatCardHeader,\n    MatCardTitleGroup,\n    MatCardContent,\n    MatCardTitle,\n    MatCardSubtitle,\n    MatCardActions,\n    MatCardFooter,\n    MatCardSmImage,\n    MatCardMdImage,\n    MatCardLgImage,\n    MatCardImage,\n    MatCardXlImage,\n    MatCardAvatar,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n    MatCardXlImage, MatCardAvatar,\n  ],\n})\nexport class MatCardModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MAT_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {MatAutocomplete} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n} from './autocomplete-trigger';\n\n@NgModule({\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n  exports: [MatAutocomplete, MatOptionModule, MatAutocompleteTrigger, MatCommonModule],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger],\n})\nexport class MatAutocompleteModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AriaDescriber} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOCUMENT} from '@angular/common';\nimport {Directive, ElementRef, Inject, Input, NgZone, OnDestroy, Optional} from '@angular/core';\nimport {ThemePalette} from '@angular/material/core';\n\n\nlet nextId = 0;\n\nexport type MatBadgePosition = 'above after' | 'above before' | 'below before' | 'below after';\nexport type MatBadgeSize = 'small' | 'medium' | 'large';\n\n/** Directive to display a text badge. */\n@Directive({\n  selector: '[matBadge]',\n  host: {\n    'class': 'mat-badge',\n    '[class.mat-badge-overlap]': 'overlap',\n    '[class.mat-badge-above]': 'isAbove()',\n    '[class.mat-badge-below]': '!isAbove()',\n    '[class.mat-badge-before]': '!isAfter()',\n    '[class.mat-badge-after]': 'isAfter()',\n    '[class.mat-badge-small]': 'size === \"small\"',\n    '[class.mat-badge-medium]': 'size === \"medium\"',\n    '[class.mat-badge-large]': 'size === \"large\"',\n    '[class.mat-badge-hidden]': 'hidden',\n  },\n})\nexport class MatBadge implements OnDestroy {\n\n  /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n  @Input('matBadgeColor')\n  get color(): ThemePalette { return this._color; }\n  set color(value: ThemePalette) {\n    this._setColor(value);\n    this._color = value;\n  }\n  private _color: ThemePalette = 'primary';\n\n  /** Whether the badge should overlap its contents or not */\n  @Input('matBadgeOverlap')\n  get overlap(): boolean { return this._overlap; }\n  set overlap(val: boolean) {\n    this._overlap = coerceBooleanProperty(val);\n  }\n  private _overlap: boolean = true;\n\n  /**\n   * Position the badge should reside.\n   * Accepts any combination of 'above'|'below' and 'before'|'after'\n   */\n  @Input('matBadgePosition') position: MatBadgePosition = 'above after';\n\n  /** The content for the badge */\n  @Input('matBadge')\n  get content(): string { return this._content; }\n  set content(val: string) {\n    this._content = val;\n    this._updateTextContent();\n  }\n  private _content: string;\n\n  /** Message used to describe the decorated element via aria-describedby */\n  @Input('matBadgeDescription')\n  get description(): string { return this._description; }\n  set description(newDescription: string) {\n    if (newDescription !== this._description) {\n      this._updateHostAriaDescription(newDescription, this._description);\n      this._description = newDescription;\n    }\n  }\n  private _description: string;\n\n  /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n  @Input('matBadgeSize') size: MatBadgeSize = 'medium';\n\n  /** Whether the badge is hidden. */\n  @Input('matBadgeHidden')\n  get hidden(): boolean { return this._hidden; }\n  set hidden(val: boolean) {\n    this._hidden = coerceBooleanProperty(val);\n  }\n  private _hidden: boolean;\n\n  /** Unique id for the badge */\n  _id: number = nextId++;\n\n  private _badgeElement: HTMLElement;\n\n  constructor(\n      @Optional() @Inject(DOCUMENT) private _document: any,\n      private _ngZone: NgZone,\n      private _elementRef: ElementRef,\n      private _ariaDescriber: AriaDescriber) {}\n\n  /** Whether the badge is above the host or not */\n  isAbove(): boolean {\n    return this.position.indexOf('below') === -1;\n  }\n\n  /** Whether the badge is after the host or not */\n  isAfter(): boolean {\n    return this.position.indexOf('before') === -1;\n  }\n\n  ngOnDestroy() {\n    if (this.description && this._badgeElement) {\n      this._ariaDescriber.removeDescription(this._badgeElement, this.description);\n    }\n  }\n\n  /** Injects a span element into the DOM with the content. */\n  private _updateTextContent(): HTMLSpanElement {\n    if (!this._badgeElement) {\n      this._badgeElement = this._createBadgeElement();\n    } else {\n      this._badgeElement.textContent = this.content;\n    }\n    return this._badgeElement;\n  }\n\n  /** Creates the badge element */\n  private _createBadgeElement(): HTMLElement {\n    const badgeElement = this._document.createElement('span');\n    const activeClass = 'mat-badge-active';\n\n    badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n    badgeElement.classList.add('mat-badge-content');\n    badgeElement.textContent = this.content;\n\n    if (this.description) {\n      badgeElement.setAttribute('aria-label', this.description);\n    }\n\n    this._elementRef.nativeElement.appendChild(badgeElement);\n\n    // animate in after insertion\n    if (typeof requestAnimationFrame === 'function') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          badgeElement.classList.add(activeClass);\n        });\n      });\n    } else {\n      badgeElement.classList.add(activeClass);\n    }\n\n    return badgeElement;\n  }\n\n  /** Sets the aria-label property on the element */\n  private _updateHostAriaDescription(newDescription: string, oldDescription: string): void {\n    // ensure content available before setting label\n    const content = this._updateTextContent();\n\n    if (oldDescription) {\n      this._ariaDescriber.removeDescription(content, oldDescription);\n    }\n\n    if (newDescription) {\n      this._ariaDescriber.describe(content, newDescription);\n    }\n  }\n\n  /** Adds css theme class given the color to the component host */\n  private _setColor(colorPalette: ThemePalette) {\n    if (colorPalette !== this._color) {\n      if (this._color) {\n        this._elementRef.nativeElement.classList.remove(`mat-badge-${this._color}`);\n      }\n      if (colorPalette) {\n        this._elementRef.nativeElement.classList.add(`mat-badge-${colorPalette}`);\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatBadge} from './badge';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatBadge],\n  declarations: [MatBadge],\n})\nexport class MatBadgeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a bottom sheet. */\nexport const MAT_BOTTOM_SHEET_DATA = new InjectionToken<any>('MatBottomSheetData');\n\n/**\n * Configuration used when opening a bottom sheet.\n */\nexport class MatBottomSheetConfig<D = any> {\n  /** The view container to place the overlay for the bottom sheet into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** Extra CSS classes to be added to the bottom sheet container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the bottom sheet. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Whether the bottom sheet has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop. */\n  backdropClass?: string;\n\n  /** Whether the user can use escape or clicking outside to close the bottom sheet. */\n  disableClose?: boolean = false;\n\n  /** Aria label to assign to the bottom sheet element. */\n  ariaLabel?: string | null = null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {merge, Observable, Subject} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n/**\n * Reference to a bottom sheet dispatched from the bottom sheet service.\n */\nexport class MatBottomSheetRef<T = any, R = any> {\n  /** Instance of the component making up the content of the bottom sheet. */\n  instance: T;\n\n  /**\n   * Instance of the component into which the bottom sheet content is projected.\n   * @docs-private\n   */\n  containerInstance: MatBottomSheetContainer;\n\n  /** Subject for notifying the user that the bottom sheet has been dismissed. */\n  private readonly _afterDismissed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the bottom sheet has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Result to be passed down to the `afterDismissed` stream. */\n  private _result: R | undefined;\n\n  constructor(containerInstance: MatBottomSheetContainer, private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n\n    // Emit when opening animation completes\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'visible'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'hidden'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._overlayRef.dispose();\n      this._afterDismissed.next(this._result);\n      this._afterDismissed.complete();\n    });\n\n    if (!containerInstance.bottomSheetConfig.disableClose) {\n      merge(\n        _overlayRef.backdropClick(),\n        _overlayRef._keydownEvents.pipe(filter(event => event.keyCode === ESCAPE))\n      ).subscribe(() => this.dismiss());\n    }\n  }\n\n  /**\n   * Dismisses the bottom sheet.\n   * @param result Data to be passed back to the bottom sheet opener.\n   */\n  dismiss(result?: R): void {\n    if (!this._afterDismissed.closed) {\n      // Transition the backdrop in parallel to the bottom sheet.\n      this.containerInstance._animationStateChanged.pipe(\n        filter(event => event.phaseName === 'start'),\n        take(1)\n      ).subscribe(() => this._overlayRef.detachBackdrop());\n\n      this._result = result;\n      this.containerInstance.exit();\n    }\n  }\n\n  /** Gets an observable that is notified when the bottom sheet is finished closing. */\n  afterDismissed(): Observable<R | undefined> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the bottom sheet has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material bottom sheet. */\nexport const matBottomSheetAnimations: {\n  readonly bottomSheetState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a bottom sheet. */\n  bottomSheetState: trigger('state', [\n    state('void, hidden', style({transform: 'translateY(100%)'})),\n    state('visible', style({transform: 'translateY(0%)'})),\n    transition('visible => void, visible => hidden',\n        animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible',\n        animate(`${AnimationDurations.EXITING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  EventEmitter,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n  CdkPortalOutlet,\n} from '@angular/cdk/portal';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {MatBottomSheetConfig} from './bottom-sheet-config';\nimport {matBottomSheetAnimations} from './bottom-sheet-animations';\nimport {Subscription} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\n\n// TODO(crisbeto): consolidate some logic between this, MatDialog and MatSnackBar\n\n/**\n * Internal component that wraps user-provided bottom sheet content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-bottom-sheet-container',\n  templateUrl: 'bottom-sheet-container.html',\n  styleUrls: ['bottom-sheet-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matBottomSheetAnimations.bottomSheetState],\n  host: {\n    'class': 'mat-bottom-sheet-container',\n    'tabindex': '-1',\n    'role': 'dialog',\n    '[attr.aria-label]': 'bottomSheetConfig?.ariaLabel',\n    '[@state]': '_animationState',\n    '(@state.start)': '_onAnimationStart($event)',\n    '(@state.done)': '_onAnimationDone($event)'\n  },\n})\nexport class MatBottomSheetContainer extends BasePortalOutlet implements OnDestroy {\n  private _breakpointSubscription: Subscription;\n\n  /** The portal outlet inside of this container into which the content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The state of the bottom sheet animations. */\n  _animationState: 'void' | 'visible' | 'hidden' = 'void';\n\n  /** Emits whenever the state of the animation changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** The bottom sheet configuration. */\n  bottomSheetConfig: MatBottomSheetConfig;\n\n  /** The class that traps and manages focus within the bottom sheet. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the bottom sheet was opened. */\n  private _elementFocusedBeforeOpened: HTMLElement | null = null;\n\n  /** Server-side rendering-compatible reference to the global document object. */\n  private _document: Document;\n\n  /** Whether the component has been destroyed. */\n  private _destroyed: boolean;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    breakpointObserver: BreakpointObserver,\n    @Optional() @Inject(DOCUMENT) document: any) {\n    super();\n\n    this._document = document;\n    this._breakpointSubscription = breakpointObserver\n      .observe([Breakpoints.Medium, Breakpoints.Large, Breakpoints.XLarge])\n      .subscribe(() => {\n        this._toggleClass('mat-bottom-sheet-container-medium',\n            breakpointObserver.isMatched(Breakpoints.Medium));\n        this._toggleClass('mat-bottom-sheet-container-large',\n            breakpointObserver.isMatched(Breakpoints.Large));\n        this._toggleClass('mat-bottom-sheet-container-xlarge',\n            breakpointObserver.isMatched(Breakpoints.XLarge));\n      });\n  }\n\n  /** Attach a component portal as content to this bottom sheet container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this bottom sheet container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Begin animation of bottom sheet entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the bottom sheet exiting from view. */\n  exit(): void {\n    if (!this._destroyed) {\n      this._animationState = 'hidden';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._breakpointSubscription.unsubscribe();\n    this._destroyed = true;\n  }\n\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'visible') {\n      this._trapFocus();\n    } else if (event.toState === 'hidden') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  private _toggleClass(cssClass: string, add: boolean) {\n    const classList = this._elementRef.nativeElement.classList;\n    add ? classList.add(cssClass) : classList.remove(cssClass);\n  }\n\n  private _validatePortalAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach bottom sheet content after content is already attached');\n    }\n  }\n\n  private _setPanelClass() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClass = this.bottomSheetConfig.panelClass;\n\n    if (Array.isArray(panelClass)) {\n      // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n      panelClass.forEach(cssClass => element.classList.add(cssClass));\n    } else if (panelClass) {\n      element.classList.add(panelClass);\n    }\n  }\n\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    this._focusTrap.focusInitialElementWhenReady();\n  }\n\n  /** Restores focus to the element that was focused before the bottom sheet opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the bottom sheet was opened. */\n  private _savePreviouslyFocusedElement() {\n    this._elementFocusedBeforeOpened = this._document.activeElement as HTMLElement;\n\n    // The `focus` method isn't available during server-side rendering.\n    if (this._elementRef.nativeElement.focus) {\n      Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, TemplatePortal, ComponentType, PortalInjector} from '@angular/cdk/portal';\nimport {ComponentRef, TemplateRef, Injectable, Injector, Optional, SkipSelf} from '@angular/core';\nimport {MatBottomSheetConfig, MAT_BOTTOM_SHEET_DATA} from './bottom-sheet-config';\nimport {MatBottomSheetRef} from './bottom-sheet-ref';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\nimport {of as observableOf} from 'rxjs';\nimport {Directionality} from '@angular/cdk/bidi';\n\n/**\n * Service to trigger Material Design bottom sheets.\n */\n@Injectable()\nexport class MatBottomSheet {\n  private _bottomSheetRefAtThisLevel: MatBottomSheetRef<any> | null = null;\n\n  /** Reference to the currently opened bottom sheet. */\n  get _openedBottomSheetRef(): MatBottomSheetRef<any> | null {\n    const parent = this._parentBottomSheet;\n    return parent ? parent._openedBottomSheetRef : this._bottomSheetRefAtThisLevel;\n  }\n\n  set _openedBottomSheetRef(value: MatBottomSheetRef<any> | null) {\n    if (this._parentBottomSheet) {\n      this._parentBottomSheet._openedBottomSheetRef = value;\n    } else {\n      this._bottomSheetRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() @SkipSelf() private _parentBottomSheet: MatBottomSheet) {}\n\n  open<T, D = any, R = any>(component: ComponentType<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n  open<T, D = any, R = any>(template: TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R> {\n\n    const _config = _applyConfigDefaults(config);\n    const overlayRef = this._createOverlay(_config);\n    const container = this._attachContainer(overlayRef, _config);\n    const ref = new MatBottomSheetRef<T, R>(container, overlayRef);\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      container.attachTemplatePortal(new TemplatePortal<T>(componentOrTemplateRef, null!, {\n        $implicit: _config.data,\n        bottomSheetRef: ref\n      } as any));\n    } else {\n      const portal = new ComponentPortal(componentOrTemplateRef, undefined,\n            this._createInjector(_config, ref));\n      const contentRef = container.attachComponentPortal(portal);\n      ref.instance = contentRef.instance;\n    }\n\n    // When the bottom sheet is dismissed, clear the reference to it.\n    ref.afterDismissed().subscribe(() => {\n      // Clear the bottom sheet ref if it hasn't already been replaced by a newer one.\n      if (this._openedBottomSheetRef == ref) {\n        this._openedBottomSheetRef = null;\n      }\n    });\n\n    if (this._openedBottomSheetRef) {\n      // If a bottom sheet is already in view, dismiss it and enter the\n      // new bottom sheet after exit animation is complete.\n      this._openedBottomSheetRef.afterDismissed().subscribe(() => ref.containerInstance.enter());\n      this._openedBottomSheetRef.dismiss();\n    } else {\n      // If no bottom sheet is in view, enter the new bottom sheet.\n      ref.containerInstance.enter();\n    }\n\n    this._openedBottomSheetRef = ref;\n\n    return ref;\n  }\n\n  /**\n   * Dismisses the currently-visible bottom sheet.\n   */\n  dismiss(): void {\n    if (this._openedBottomSheetRef) {\n      this._openedBottomSheetRef.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the bottom sheet container component to the overlay.\n   */\n  private _attachContainer(overlayRef: OverlayRef,\n                           config: MatBottomSheetConfig): MatBottomSheetContainer {\n    const containerPortal = new ComponentPortal(MatBottomSheetContainer, config.viewContainerRef);\n    const containerRef: ComponentRef<MatBottomSheetContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.bottomSheetConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified bottom sheet config.\n   */\n  private _createOverlay(config: MatBottomSheetConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig({\n      direction: config.direction,\n      hasBackdrop: config.hasBackdrop,\n      maxWidth: '100%',\n      scrollStrategy: this._overlay.scrollStrategies.block(),\n      positionStrategy: this._overlay.position()\n        .global()\n        .centerHorizontally()\n        .bottom('0')\n    });\n\n    if (config.backdropClass) {\n      overlayConfig.backdropClass = config.backdropClass;\n    }\n\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a bottom sheet component.\n   * @param config Config that was used to create the bottom sheet.\n   * @param bottomSheetRef Reference to the bottom sheet.\n   */\n  private _createInjector<T>(config: MatBottomSheetConfig,\n                             bottomSheetRef: MatBottomSheetRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap();\n\n    injectionTokens.set(MatBottomSheetRef, bottomSheetRef);\n    injectionTokens.set(MAT_BOTTOM_SHEET_DATA, config.data);\n\n    if (!userInjector || !userInjector.get(Directionality, null)) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n\n/**\n * Applies default options to the bottom sheet config.\n * @param config The configuration to which the defaults will be applied.\n * @returns The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(config?: MatBottomSheetConfig): MatBottomSheetConfig {\n  return {...new MatBottomSheetConfig(), ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatBottomSheet} from './bottom-sheet';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PortalModule,\n  ],\n  exports: [MatBottomSheetContainer, MatCommonModule],\n  declarations: [MatBottomSheetContainer],\n  entryComponents: [MatBottomSheetContainer],\n  providers: [MatBottomSheet],\n})\nexport class MatBottomSheetModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {Subject} from 'rxjs';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n  AfterViewChecked,\n  OnDestroy,\n} from '@angular/core';\nimport {MatOptgroup} from './optgroup';\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by MatOption when selected or deselected. */\nexport class MatOptionSelectionChange {\n  constructor(\n    /** Reference to the option that emitted the event. */\n    public source: MatOption,\n    /** Whether the change in the option's value was a result of a user action. */\n    public isUserInput = false) { }\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface MatOptionParentComponent {\n  disableRipple?: boolean;\n  multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MAT_OPTION_PARENT_COMPONENT =\n    new InjectionToken<MatOptionParentComponent>('MAT_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-option',\n  exportAs: 'matOption',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  styleUrls: ['option.css'],\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatOption implements AfterViewChecked, OnDestroy {\n  private _selected = false;\n  private _active = false;\n  private _disabled = false;\n  private _id = `mat-option-${_uniqueIdCounter++}`;\n  private _mostRecentViewValue = '';\n\n  /** Whether the wrapping component is in multiple selection mode. */\n  get multiple() { return this._parent && this._parent.multiple; }\n\n  /** The unique ID of the option. */\n  get id(): string { return this._id; }\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean { return this._selected; }\n\n  /** The form value of the option. */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return (this.group && this.group.disabled) || this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Whether ripples for the option are disabled. */\n  get disableRipple() { return this._parent && this._parent.disableRipple; }\n\n  /** Event emitted when the option is selected or deselected. */\n  @Output() readonly onSelectionChange = new EventEmitter<MatOptionSelectionChange>();\n\n  /** Emits when the state of the option changes and any parents have to be notified. */\n  readonly _stateChanges = new Subject<void>();\n\n  constructor(\n    private _element: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(MAT_OPTION_PARENT_COMPONENT) private _parent: MatOptionParentComponent,\n    @Optional() readonly group: MatOptgroup) {}\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   */\n  get viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n\n  /** Selects the option. */\n  select(): void {\n    this._selected = true;\n    this._changeDetectorRef.markForCheck();\n    this._emitSelectionChangeEvent();\n  }\n\n  /** Deselects the option. */\n  deselect(): void {\n    this._selected = false;\n    this._changeDetectorRef.markForCheck();\n    this._emitSelectionChangeEvent();\n  }\n\n  /** Sets focus onto this option. */\n  focus(): void {\n    const element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus();\n    }\n  }\n\n  /**\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ENTER || event.keyCode === SPACE) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * `Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.`\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Gets the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  ngAfterViewChecked() {\n    // Since parent components could be using the option's label to display the selected values\n    // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n    // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n    // relatively cheap, however we still limit them only to selected options in order to avoid\n    // hitting the DOM too often.\n    if (this._selected) {\n      const viewValue = this.viewValue;\n\n      if (viewValue !== this._mostRecentViewValue) {\n        this._mostRecentViewValue = viewValue;\n        this._stateChanges.next();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n  }\n}\n\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nexport function _countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>,\n  optionGroups: QueryList<MatOptgroup>): number {\n\n  if (optionGroups.length) {\n    let optionsArray = options.toArray();\n    let groups = optionGroups.toArray();\n    let groupCounter = 0;\n\n    for (let i = 0; i < optionIndex + 1; i++) {\n      if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n        groupCounter++;\n      }\n    }\n\n    return groupCounter;\n  }\n\n  return 0;\n}\n\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionIndex Index of the option to be scrolled into the view.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nexport function _getOptionScrollPosition(optionIndex: number, optionHeight: number,\n    currentScrollPosition: number, panelHeight: number): number {\n  const optionOffset = optionIndex * optionHeight;\n\n  if (optionOffset < currentScrollPosition) {\n    return optionOffset;\n  }\n\n  if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n    return Math.max(0, optionOffset - panelHeight + optionHeight);\n  }\n\n  return currentScrollPosition;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatRippleModule} from '../ripple/index';\nimport {MatPseudoCheckboxModule} from '../selection/index';\nimport {MatOption} from './option';\nimport {MatOptgroup} from './optgroup';\n\n\n@NgModule({\n  imports: [MatRippleModule, CommonModule, MatPseudoCheckboxModule],\n  exports: [MatOption, MatOptgroup],\n  declarations: [MatOption, MatOptgroup]\n})\nexport class MatOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MAT_LABEL_GLOBAL_OPTIONS =\n  new InjectionToken<LabelOptions>('mat-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n  /**\n   * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n   * Default behavior is assumed to be `auto`.\n   */\n  float?: FloatLabelType;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Single error message to be shown underneath the form field. */\n@Directive({\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatError {\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the MatFormField. */\nexport const matFormFieldAnimations: {\n  readonly transitionMessages: AnimationTriggerMetadata\n} = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [\n    // TODO(mmalerba): Use angular animations for label animation as well.\n    state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n    transition('void => enter', [\n      style({ opacity: 0, transform: 'translateY(-100%)' }),\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n    ]),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\nimport {NgControl} from '@angular/forms';\n\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\nexport abstract class MatFormFieldControl<T> {\n  /** The value of the control. */\n  value: T | null;\n\n  /**\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges: Observable<void>;\n\n  /** The element ID for this control. */\n  readonly id: string;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the NgControl for this control. */\n  readonly ngControl: NgControl | null;\n\n  /** Whether the control is focused. */\n  readonly focused: boolean;\n\n  /** Whether the control is empty. */\n  readonly empty: boolean;\n\n  /** Whether the `MatFormField` label should try to float. */\n  readonly shouldLabelFloat: boolean;\n\n  /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is disabled. */\n  readonly disabled: boolean;\n\n  /** Whether the control is in an error state. */\n  readonly errorState: boolean;\n\n  /**\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n   * based on their control type. The form field will add a class,\n   * `mat-form-field-type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  /**\n   * Whether the input is currently in an autofilled state. If property is not present on the\n   * control it is assumed to be false.\n   */\n  readonly autofilled?: boolean;\n\n  /** Sets the list of element IDs that currently describe this control. */\n  abstract setDescribedByIds(ids: string[]): void;\n\n  /** Handles a click on the control's container. */\n  abstract onContainerClick(event: MouseEvent): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Hint text to be shown underneath the form field control. */\n@Directive({\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n})\nexport class MatHint {\n  /** Whether to align the hint label at the start or end of the line. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The floating label for a `mat-form-field`. */\n@Directive({\n  selector: 'mat-label'\n})\nexport class MatLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/**\n * The placeholder text for an `MatFormField`.\n * @deprecated Use `<mat-label>` to specify the label and the `placeholder` attribute to specify the\n *     placeholder.\n * @deletion-target 8.0.0\n */\n@Directive({\n  selector: 'mat-placeholder'\n})\nexport class MatPlaceholder {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Prefix to be placed the the front of the form field. */\n@Directive({\n  selector: '[matPrefix]',\n})\nexport class MatPrefix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Suffix to be placed at the end of the form field. */\n@Directive({\n  selector: '[matSuffix]',\n})\nexport class MatSuffix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  FloatLabelType,\n  LabelOptions,\n  MAT_LABEL_GLOBAL_OPTIONS,\n  mixinColor,\n} from '@angular/material/core';\nimport {EMPTY, fromEvent, merge} from 'rxjs';\nimport {startWith, take} from 'rxjs/operators';\nimport {MatError} from './error';\nimport {matFormFieldAnimations} from './form-field-animations';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  getMatFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {Platform} from '@angular/cdk/platform';\n\n\nlet nextUniqueId = 0;\nconst floatingLabelScale = 0.75;\nconst outlineGapPadding = 5;\n\n\n// Boilerplate for applying mixins to MatFormField.\n/** @docs-private */\nexport class MatFormFieldBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n\nexport const _MatFormFieldMixinBase = mixinColor(MatFormFieldBase, 'primary');\n\n\nexport type MatFormFieldAppearance = 'legacy' | 'standard' | 'fill' | 'outline';\n\n\nexport interface MatFormFieldDefaultOptions {\n  appearance?: MatFormFieldAppearance;\n}\n\nexport const MAT_FORM_FIELD_DEFAULT_OPTIONS =\n    new InjectionToken<MatFormFieldDefaultOptions>('MAT_FORM_FIELD_DEFAULT_OPTIONS');\n\n\n/** Container for form controls that applies Material Design styling and behavior. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-form-field',\n  exportAs: 'matFormField',\n  templateUrl: 'form-field.html',\n  // MatInput is a directive and can't have styles, so we need to include its styles here.\n  // The MatInput styles are fairly minimal so it shouldn't be a big deal for people who\n  // aren't using MatInput.\n  styleUrls: [\n    'form-field.css',\n    'form-field-fill.css',\n    'form-field-legacy.css',\n    'form-field-outline.css',\n    'form-field-standard.css',\n    '../input/input.css',\n  ],\n  animations: [matFormFieldAnimations.transitionMessages],\n  host: {\n    'class': 'mat-form-field',\n    '[class.mat-form-field-appearance-standard]': 'appearance == \"standard\"',\n    '[class.mat-form-field-appearance-fill]': 'appearance == \"fill\"',\n    '[class.mat-form-field-appearance-outline]': 'appearance == \"outline\"',\n    '[class.mat-form-field-appearance-legacy]': 'appearance == \"legacy\"',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-can-float]': '_canLabelFloat',\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n    '[class.mat-form-field-disabled]': '_control.disabled',\n    '[class.mat-form-field-autofilled]': '_control.autofilled',\n    '[class.mat-focused]': '_control.focused',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n  },\n  inputs: ['color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class MatFormField extends _MatFormFieldMixinBase\n    implements AfterContentInit, AfterContentChecked, AfterViewInit, CanColor {\n  private _labelOptions: LabelOptions;\n\n  /** The form-field appearance style. */\n  @Input()\n  get appearance(): MatFormFieldAppearance {\n    return this._appearance || this._defaultOptions && this._defaultOptions.appearance || 'legacy';\n  }\n  set appearance(value: MatFormFieldAppearance) {\n    this._appearance = value;\n  }\n  _appearance: MatFormFieldAppearance;\n\n  /** Whether the required marker should be hidden. */\n  @Input()\n  get hideRequiredMarker(): boolean { return this._hideRequiredMarker; }\n  set hideRequiredMarker(value: boolean) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  private _hideRequiredMarker: boolean;\n\n  /** Override for the logic that disables the label animation in certain cases. */\n  private _showAlwaysAnimate = false;\n\n  /** Whether the floating label should always float or not. */\n  get _shouldAlwaysFloat(): boolean {\n    return this.floatLabel === 'always' && !this._showAlwaysAnimate;\n  }\n\n  /** Whether the label can float or not. */\n  get _canLabelFloat(): boolean { return this.floatLabel !== 'never'; }\n\n  /** State of the mat-hint and mat-error animations. */\n  _subscriptAnimationState: string = '';\n\n  /** Text for the form field hint. */\n  @Input()\n  get hintLabel(): string { return this._hintLabel; }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\n\n  /**\n   * Whether the label should always float, never float or float as the user types.\n   *\n   * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\n   * way to make the floating label emulate the behavior of a standard input placeholder. However\n   * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\n   * appearances the `never` option has been disabled in favor of just using the placeholder.\n   */\n  @Input()\n  get floatLabel(): FloatLabelType {\n    return this.appearance !== 'legacy' && this._floatLabel === 'never' ? 'auto' : this._floatLabel;\n  }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || this._labelOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  _outlineGapWidth = 0;\n\n  _outlineGapStart = 0;\n\n  _initialGapCalculated = false;\n\n  /**\n   * @deprecated\n   * @deletion-target 7.0.0\n   */\n  @ViewChild('underline') underlineRef: ElementRef;\n\n  @ViewChild('connectionContainer') _connectionContainerRef: ElementRef;\n  @ViewChild('inputContainer') _inputContainerRef: ElementRef;\n  @ViewChild('label') private _label: ElementRef;\n  @ContentChild(MatFormFieldControl) _control: MatFormFieldControl<any>;\n  @ContentChild(MatPlaceholder) _placeholderChild: MatPlaceholder;\n  @ContentChild(MatLabel) _labelChild: MatLabel;\n  @ContentChildren(MatError) _errorChildren: QueryList<MatError>;\n  @ContentChildren(MatHint) _hintChildren: QueryList<MatHint>;\n  @ContentChildren(MatPrefix) _prefixChildren: QueryList<MatPrefix>;\n  @ContentChildren(MatSuffix) _suffixChildren: QueryList<MatSuffix>;\n\n  constructor(\n      public _elementRef: ElementRef,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions,\n      @Optional() private _dir: Directionality,\n      @Optional() @Inject(MAT_FORM_FIELD_DEFAULT_OPTIONS) private _defaultOptions:\n          MatFormFieldDefaultOptions,\n      // @deletion-target 7.0.0 _platform to be made required.\n      private _platform?: Platform) {\n    super(_elementRef);\n\n    this._labelOptions = labelOptions ? labelOptions : {};\n    this.floatLabel = this._labelOptions.float || 'auto';\n  }\n\n  /**\n   * Gets an ElementRef for the element that a overlay attached to the form-field should be\n   * positioned relative to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._connectionContainerRef || this._elementRef;\n  }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n    if (this._control.controlType) {\n      this._elementRef.nativeElement.classList\n          .add(`mat-form-field-type-${this._control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    this._control.stateChanges.pipe(startWith(null!)).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Run change detection if the value, prefix, or suffix changes.\n    const valueChanges = this._control.ngControl && this._control.ngControl.valueChanges || EMPTY;\n    merge(valueChanges, this._prefixChildren.changes, this._suffixChildren.changes)\n        .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n    if (!this._initialGapCalculated) {\n      Promise.resolve().then(() => this.updateOutlineGap());\n    }\n  }\n\n  ngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\n  _shouldForward(prop: string): boolean {\n    let ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && (ngControl as any)[prop];\n  }\n\n  _hasPlaceholder() {\n    return !!(this._control && this._control.placeholder || this._placeholderChild);\n  }\n\n  _hasLabel() {\n    return !!this._labelChild;\n  }\n\n  _shouldLabelFloat() {\n    return this._canLabelFloat && (this._control.shouldLabelFloat || this._shouldAlwaysFloat);\n  }\n\n  _hideControlPlaceholder() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this.appearance === 'legacy' && !this._hasLabel() ||\n        this._hasLabel() && !this._shouldLabelFloat();\n  }\n\n  _hasFloatingLabel() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this._hasLabel() || this.appearance === 'legacy' && this._hasPlaceholder();\n  }\n\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel(): void {\n    if (this._hasFloatingLabel() && this._canLabelFloat) {\n      this._showAlwaysAnimate = true;\n      this.floatLabel = 'always';\n\n      fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n        this._showAlwaysAnimate = false;\n      });\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n   * or child element with the `mat-placeholder` directive).\n   */\n  private _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n\n  /** Does any extra processing that is required when handling the hints. */\n  private _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n  private _validateHints() {\n    if (this._hintChildren) {\n      let startHint: MatHint;\n      let endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align === 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align === 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        let startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        let endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(error => error.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  /** Throws an error if the form field's control is missing. */\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n\n  /**\n   * Updates the width and position of the gap in the outline. Only relevant for the outline\n   * appearance.\n   */\n  updateOutlineGap() {\n    if (this.appearance === 'outline' && this._label && this._label.nativeElement.children.length) {\n      if (this._platform && !this._platform.isBrowser) {\n        // getBoundingClientRect isn't available on the server.\n        this._initialGapCalculated = true;\n        return;\n      }\n      if (!document.documentElement.contains(this._elementRef.nativeElement)) {\n        return;\n      }\n\n      const containerStart = this._getStartEnd(\n          this._connectionContainerRef.nativeElement.getBoundingClientRect());\n      const labelStart = this._getStartEnd(\n          this._label.nativeElement.children[0].getBoundingClientRect());\n      let labelWidth = 0;\n      for (const child of this._label.nativeElement.children) {\n        labelWidth += child.offsetWidth;\n      }\n      this._outlineGapStart = labelStart - containerStart - outlineGapPadding;\n      this._outlineGapWidth = labelWidth * floatingLabelScale + outlineGapPadding * 2;\n    } else {\n      this._outlineGapStart = 0;\n      this._outlineGapWidth = 0;\n    }\n    this._initialGapCalculated = true;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Gets the start end of the rect considering the current directionality. */\n  private _getStartEnd(rect: ClientRect): number {\n    return this._dir && this._dir.value === 'rtl' ? rect.right : rect.left;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatError} from './error';\nimport {MatFormField} from './form-field';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\n\n\n@NgModule({\n  declarations: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n  imports: [CommonModule],\n  exports: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n})\nexport class MatFormFieldModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  ElementRef,\n  Input,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n  EventEmitter,\n  Output,\n  InjectionToken,\n  Inject,\n} from '@angular/core';\nimport {\n  MatOption,\n  MatOptgroup,\n  MAT_OPTION_PARENT_COMPONENT,\n  mixinDisableRipple,\n  CanDisableRipple,\n} from '@angular/material/core';\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected. */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: MatAutocomplete,\n    /** Option that was selected. */\n    public option: MatOption) { }\n}\n\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nexport class MatAutocompleteBase {}\nexport const _MatAutocompleteMixinBase = mixinDisableRipple(MatAutocompleteBase);\n\n/** Default `mat-autocomplete` options that can be overridden. */\nexport interface MatAutocompleteDefaultOptions {\n  /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n  autoActiveFirstOption?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nexport const MAT_AUTOCOMPLETE_DEFAULT_OPTIONS =\n    new InjectionToken<MatAutocompleteDefaultOptions>('mat-autocomplete-default-options', {\n      providedIn: 'root',\n      factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY(): MatAutocompleteDefaultOptions {\n  return {autoActiveFirstOption: false};\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  inputs: ['disableRipple'],\n  host: {\n    'class': 'mat-autocomplete'\n  },\n  providers: [\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\n  ]\n})\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\n  CanDisableRipple {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel: boolean = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean { return this._isOpen && this.showPanel; }\n  _isOpen: boolean = false;\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** @docs-private */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** @docs-private */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /**\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n   */\n  @Input()\n  get autoActiveFirstOption(): boolean { return this._autoActiveFirstOption; }\n  set autoActiveFirstOption(value: boolean) {\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\n  }\n  private _autoActiveFirstOption: boolean;\n\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() readonly optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /** Event that is emitted when the autocomplete panel is opened. */\n  @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event that is emitted when the autocomplete panel is closed. */\n  @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(value: string) {\n    if (value && value.length) {\n      value.split(' ').forEach(className => this._classList[className.trim()] = true);\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _elementRef: ElementRef,\n    @Inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS) defaults: MatAutocompleteDefaultOptions) {\n    super();\n\n    this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\n    // Set the initial visibility state.\n    this._setVisibility();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._classList['mat-autocomplete-visible'] = this.showPanel;\n    this._classList['mat-autocomplete-hidden'] = !this.showPanel;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: MatOption): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n}\n\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode} from '@angular/core';\nimport {BidiModule} from '@angular/cdk/bidi';\n\n\n/** Injection token that configures whether the Material sanity checks are enabled. */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('mat-sanity-checks', {\n  providedIn: 'root',\n  factory: MATERIAL_SANITY_CHECKS_FACTORY,\n});\n\n/** @docs-private */\nexport function MATERIAL_SANITY_CHECKS_FACTORY(): boolean {\n  return true;\n}\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n  imports: [BidiModule],\n  exports: [BidiModule],\n})\nexport class MatCommonModule {\n  /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n  private _hasDoneGlobalChecks = false;\n\n  /** Whether we've already checked for HammerJs availability. */\n  private _hasCheckedHammer = false;\n\n  /** Reference to the global `document` object. */\n  private _document = typeof document === 'object' && document ? document : null;\n\n  /** Reference to the global 'window' object. */\n  private _window = typeof window === 'object' && window ? window : null;\n\n  constructor(@Optional() @Inject(MATERIAL_SANITY_CHECKS) private _sanityChecksEnabled: boolean) {\n    if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n      this._checkDoctypeIsDefined();\n      this._checkThemeIsPresent();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n\n  /** Whether any sanity checks are enabled */\n  private _areChecksEnabled(): boolean {\n    return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n  }\n\n  /** Whether the code is running in tests. */\n  private _isTestEnv() {\n    return this._window && (this._window['__karma__'] || this._window['jasmine']);\n  }\n\n  private _checkDoctypeIsDefined(): void {\n    if (this._document && !this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n\n  private _checkThemeIsPresent(): void {\n    if (this._document && typeof getComputedStyle === 'function') {\n      const testElement = this._document.createElement('div');\n\n      testElement.classList.add('mat-theme-loaded-marker');\n      this._document.body.appendChild(testElement);\n\n      const computedStyle = getComputedStyle(testElement);\n\n      // In some situations, the computed style of the test element can be null. For example in\n      // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n      // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n      if (computedStyle && computedStyle.display !== 'none') {\n        console.warn(\n          'Could not find Angular Material core theme. Most Material ' +\n          'components may not work as expected. For more info refer ' +\n          'to the theming guide: https://material.angular.io/guide/theming'\n        );\n      }\n\n      this._document.body.removeChild(testElement);\n    }\n  }\n\n  /** Checks whether HammerJS is available. */\n  _checkHammerIsAvailable(): void {\n    if (this._hasCheckedHammer || !this._window) {\n      return;\n    }\n\n    if (this._areChecksEnabled() && !this._window['Hammer']) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material components may not work correctly.');\n    }\n    this._hasCheckedHammer = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  /** Whether the component is disabled. */\n  disabled: boolean;\n}\n\n/** Mixin to augment a directive with a `disabled` property. */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): Constructor<CanDisable> & T {\n  return class extends base {\n    private _disabled: boolean = false;\n\n    get disabled() { return this._disabled; }\n    set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ElementRef} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  /** Theme color palette for the component. */\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport interface HasElementRef {\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values. */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(base: T,\n    defaultColor?: ThemePalette): Constructor<CanColor> & T {\n  return class extends base {\n    private _color: ThemePalette;\n\n    get color(): ThemePalette { return this._color; }\n    set color(value: ThemePalette) {\n      const colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  /** Whether ripples are disabled. */\n  disableRipple: boolean;\n}\n\n/** Mixin to augment a directive with a `disableRipple` property. */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T)\n    : Constructor<CanDisableRipple> & T {\n  return class extends base {\n    private _disableRipple: boolean = false;\n\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple() { return this._disableRipple; }\n    set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n/** @docs-private */\nexport interface HasTabIndex {\n  /** Tabindex of the component. */\n  tabIndex: number;\n}\n\n/** Mixin to augment a directive with a `tabIndex` property. */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : Constructor<HasTabIndex> & T {\n  return class extends base {\n    private _tabIndex: number = defaultTabIndex;\n\n    get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n    set tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : defaultTabIndex;\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ErrorStateMatcher} from '../error/error-options';\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Subject} from 'rxjs';\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n  updateErrorState();\n  readonly stateChanges: Subject<void>;\n  errorState: boolean;\n  errorStateMatcher: ErrorStateMatcher;\n}\n\n/** @docs-private */\nexport interface HasErrorState {\n  _parentFormGroup: FormGroupDirective;\n  _parentForm: NgForm;\n  _defaultErrorStateMatcher: ErrorStateMatcher;\n  ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n: Constructor<CanUpdateErrorState> & T {\n  return class extends base {\n    /** Whether the component is in an error state. */\n    errorState: boolean = false;\n\n    /**\n     * Stream that emits whenever the state of the input changes such that the wrapping\n     * `MatFormField` needs to run change detection.\n     */\n    readonly stateChanges = new Subject<void>();\n\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState() {\n      const oldState = this.errorState;\n      const parent = this._parentFormGroup || this._parentForm;\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      const control = this.ngControl ? this.ngControl.control as FormControl : null;\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n        this.stateChanges.next();\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable, Subscriber} from 'rxjs';\nimport {Constructor} from './constructor';\n\n\n/**\n * Mixin that adds an initialized property to a directive which, when subscribed to, will emit a\n * value once markInitialized has been called, which should be done during the ngOnInit function.\n * If the subscription is made after it has already been marked as initialized, then it will trigger\n * an emit immediately.\n * @docs-private\n */\nexport interface HasInitialized {\n  /** Stream that emits once during the directive/component's ngOnInit. */\n  initialized: Observable<void>;\n\n  /**\n   * Sets the state as initialized and must be called during ngOnInit to notify subscribers that\n   * the directive has been initialized.\n   * @docs-private\n   */\n  _markInitialized: () => void;\n}\n\n/** Mixin to augment a directive with an initialized property that will emits when ngOnInit ends. */\nexport function mixinInitialized<T extends Constructor<{}>>(base: T):\n    Constructor<HasInitialized> & T {\n  return class extends base {\n    /** Whether this directive has been marked as initialized. */\n    _isInitialized = false;\n\n    /**\n     * List of subscribers that subscribed before the directive was initialized. Should be notified\n     * during _markInitialized. Set to null after pending subscribers are notified, and should\n     * not expect to be populated after.\n     */\n    _pendingSubscribers: Subscriber<void>[] | null = [];\n\n    /**\n     * Observable stream that emits when the directive initializes. If already initialized, the\n     * subscriber is stored to be notified once _markInitialized is called.\n     */\n    initialized = new Observable<void>(subscriber => {\n      // If initialized, immediately notify the subscriber. Otherwise store the subscriber to notify\n      // when _markInitialized is called.\n      if (this._isInitialized) {\n        this._notifySubscriber(subscriber);\n      } else {\n        this._pendingSubscribers!.push(subscriber);\n      }\n    });\n\n    constructor(...args: any[]) { super(...args); }\n\n    /**\n     * Marks the state as initialized and notifies pending subscribers. Should be called at the end\n     * of ngOnInit.\n     * @docs-private\n     */\n    _markInitialized(): void {\n      if (this._isInitialized) {\n        throw Error('This directive has already been marked as initialized and ' +\n            'should not be called twice.');\n      }\n\n      this._isInitialized = true;\n\n      this._pendingSubscribers!.forEach(this._notifySubscriber);\n      this._pendingSubscribers = null;\n    }\n\n    /** Emits and completes the subscriber stream (should only emit once). */\n    _notifySubscriber(subscriber: Subscriber<void>): void {\n      subscriber.next();\n      subscriber.complete();\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {inject, InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE', {\n  providedIn: 'root',\n  factory: MAT_DATE_LOCALE_FACTORY,\n});\n\n/** @docs-private */\nexport function MAT_DATE_LOCALE_FACTORY(): string {\n  return inject(LOCALE_ID);\n}\n\n/**\n * No longer needed since MAT_DATE_LOCALE has been changed to a scoped injectable.\n * If you are importing and providing this in your code you can simply remove it.\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D> {\n  /** The locale to use for all dates. */\n  protected locale: any;\n\n  /** A stream that emits when the locale changes. */\n  get localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges = new Subject<void>();\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: D): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of it's `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nconst SUPPORTS_INTL_API = typeof Intl != 'undefined';\n\n\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n\n\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\n  private readonly _clampDate: boolean;\n\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   *\n   * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\n   * getting the string representation of a Date object from it's utc representation. We're keeping\n   * it here for sometime, just for precaution, in case we decide to revert some of these changes\n   * though.\n   */\n  useUtcForDisplay: boolean = true;\n\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string, platform: Platform) {\n    super();\n    super.setLocale(matDateLocale);\n\n    // IE does its own time zone correction, so we disable this on IE.\n    this.useUtcForDisplay = !platform.TRIDENT;\n    this._clampDate = platform.TRIDENT || platform.EDGE;\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {month: style, timeZone: 'utc'});\n      return range(12, i =>\n          this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric', timeZone: 'utc'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {weekday: style, timeZone: 'utc'});\n      return range(7, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric', timeZone: 'utc'});\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date: Date): Date {\n    return this.createDate(this.getYear(date), this.getMonth(date), this.getDate(date));\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n\n    if (SUPPORTS_INTL_API) {\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\n        date = this.clone(date);\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\n      }\n\n      displayFormat = {...displayFormat, timeZone: 'utc'};\n\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    const result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n  private _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n\n  /**\n   * When converting Date object to string, javascript built-in functions may return wrong\n   * results because it applies its internal DST rules. The DST rules around the world change\n   * very frequently, and the current valid rule is not always valid in previous years though.\n   * We work around this problem building a new Date object which has its internal UTC\n   * representation with the local date and time.\n   * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\n   *    timeZone set to 'utc' to work fine.\n   * @param date Date from which we want to get the string representation according to dtf\n   * @returns A Date object with its UTC representation based on the passed in date info\n   */\n  private _format(dtf: Intl.DateTimeFormat, date: Date) {\n    const d = new Date(Date.UTC(\n        date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n        date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n    return dtf.format(d);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform, supportsPassiveEventListeners} from '@angular/cdk/platform';\nimport {RippleRef, RippleState} from './ripple-ref';\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  persistent?: boolean;\n  animation?: RippleAnimationConfig;\n  terminateOnPointerUp?: boolean;\n  /**\n   * @deprecated Use the `animation` property instead.\n   * @deletion-target 7.0.0\n   */\n  speedFactor?: number;\n};\n\n/**\n * Interface that describes the configuration for the animation of a ripple.\n * There are two animation phases with different durations for the ripples.\n */\nexport interface RippleAnimationConfig {\n  /** Duration in milliseconds for the enter animation (expansion from point of contact). */\n  enterDuration?: number;\n  /** Duration in milliseconds for the exit animation (fade-out). */\n  exitDuration?: number;\n}\n\n/**\n * Interface that describes the target for launching ripples.\n * It defines the ripple configuration and disabled state for interaction ripples.\n * @docs-private\n */\nexport interface RippleTarget {\n  /** Configuration for ripples that are launched on pointer down. */\n  rippleConfig: RippleConfig;\n  /** Whether ripples on pointer down should be disabled. */\n  rippleDisabled: boolean;\n}\n\n/**\n * Default ripple animation configuration for ripples without an explicit\n * animation config specified.\n */\nexport const defaultRippleAnimationConfig = {\n  enterDuration: 450,\n  exitDuration: 400\n};\n\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst ignoreMouseEventsTimeout = 800;\n\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nexport class RippleRenderer {\n  /** Element where the ripples are being added to. */\n  private _containerElement: HTMLElement;\n\n  /** Element which triggers the ripple elements on mouse events. */\n  private _triggerElement: HTMLElement | null;\n\n  /** Whether the pointer is currently down or not. */\n  private _isPointerDown = false;\n\n  /** Events to be registered on the trigger element. */\n  private _triggerEvents = new Map<string, any>();\n\n  /** Set of currently active ripple references. */\n  private _activeRipples = new Set<RippleRef>();\n\n  /** Latest non-persistent ripple that was triggered. */\n  private _mostRecentTransientRipple: RippleRef | null;\n\n  /** Time in milliseconds when the last touchstart event happened. */\n  private _lastTouchStartEvent: number;\n\n  /** Options that apply to all the event listeners that are bound by the renderer. */\n  private _eventOptions = supportsPassiveEventListeners() ? ({passive: true} as any) : false;\n\n  /**\n   * Cached dimensions of the ripple container. Set when the first\n   * ripple is shown and cleared once no more ripples are visible.\n   */\n  private _containerRect: ClientRect | null;\n\n  constructor(private _target: RippleTarget,\n              private _ngZone: NgZone,\n              elementRef: ElementRef,\n              platform: Platform) {\n\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents.set('mousedown', this.onMousedown);\n      this._triggerEvents.set('mouseup', this.onPointerUp);\n      this._triggerEvents.set('mouseleave', this.onPointerUp);\n\n      this._triggerEvents.set('touchstart', this.onTouchStart);\n      this._triggerEvents.set('touchend', this.onPointerUp);\n    }\n  }\n\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param config Extra ripple options.\n   */\n  fadeInRipple(x: number, y: number, config: RippleConfig = {}): RippleRef {\n    const containerRect = this._containerRect =\n                          this._containerRect || this._containerElement.getBoundingClientRect();\n    const animationConfig = {...defaultRippleAnimationConfig, ...config.animation};\n\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    const offsetX = x - containerRect.left;\n    const offsetY = y - containerRect.top;\n    const duration = animationConfig.enterDuration / (config.speedFactor || 1);\n\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    const rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    if (!config.persistent) {\n      this._mostRecentTransientRipple = rippleRef;\n    }\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this.runTimeoutOutsideZone(() => {\n      const isMostRecentTransientRipple = rippleRef === this._mostRecentTransientRipple;\n\n      rippleRef.state = RippleState.VISIBLE;\n\n      // When the timer runs out while the user has kept their pointer down, we want to\n      // keep only the persistent ripples and the latest transient ripple. We do this,\n      // because we don't want stacked transient ripples to appear after their enter\n      // animation has finished.\n      if (!config.persistent && (!isMostRecentTransientRipple || !this._isPointerDown)) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n\n  /** Fades out a ripple reference. */\n  fadeOutRipple(rippleRef: RippleRef) {\n    const wasActive = this._activeRipples.delete(rippleRef);\n\n    if (rippleRef === this._mostRecentTransientRipple) {\n      this._mostRecentTransientRipple = null;\n    }\n\n    // Clear out the cached bounding rect if we have no more ripples.\n    if (!this._activeRipples.size) {\n      this._containerRect = null;\n    }\n\n    // For ripples that are not active anymore, don't re-un the fade-out animation.\n    if (!wasActive) {\n      return;\n    }\n\n    const rippleEl = rippleRef.element;\n    const animationConfig = {...defaultRippleAnimationConfig, ...rippleRef.config.animation};\n\n    rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;\n    rippleEl.style.opacity = '0';\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN;\n      rippleEl.parentNode!.removeChild(rippleEl);\n    }, animationConfig.exitDuration);\n  }\n\n  /** Fades out all currently active ripples. */\n  fadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n\n  /** Sets up the trigger event listeners */\n  setupTriggerEvents(element: HTMLElement) {\n    if (!element || element === this._triggerElement) {\n      return;\n    }\n\n    // Remove all previously registered event listeners from the trigger element.\n    this._removeTriggerEvents();\n\n    this._ngZone.runOutsideAngular(() => {\n      this._triggerEvents.forEach((fn, type) =>\n          element.addEventListener(type, fn, this._eventOptions));\n    });\n\n    this._triggerElement = element;\n  }\n\n  /** Function being called whenever the trigger is being pressed using mouse. */\n  private onMousedown = (event: MouseEvent) => {\n    const isSyntheticEvent = this._lastTouchStartEvent &&\n        Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;\n\n    if (!this._target.rippleDisabled && !isSyntheticEvent) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being pressed using touch. */\n  private onTouchStart = (event: TouchEvent) => {\n    if (!this._target.rippleDisabled) {\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n      // events will launch a second ripple if we don't ignore mouse events for a specific\n      // time after a touchstart event.\n      this._lastTouchStartEvent = Date.now();\n      this._isPointerDown = true;\n\n      this.fadeInRipple(\n          event.touches[0].clientX, event.touches[0].clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being released. */\n  private onPointerUp = () => {\n    if (!this._isPointerDown) {\n      return;\n    }\n\n    this._isPointerDown = false;\n\n    // Fade-out all ripples that are visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      // By default, only ripples that are completely visible will fade out on pointer release.\n      // If the `terminateOnPointerUp` option is set, ripples that still fade in will also fade out.\n      const isVisible = ripple.state === RippleState.VISIBLE ||\n        ripple.config.terminateOnPointerUp && ripple.state === RippleState.FADING_IN;\n\n      if (!ripple.config.persistent && isVisible) {\n        ripple.fadeOut();\n      }\n    });\n  }\n\n  /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\n  private runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n  /** Removes previously registered event listeners from the trigger element. */\n  _removeTriggerEvents() {\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => {\n        this._triggerElement!.removeEventListener(type, fn, this._eventOptions);\n      });\n    }\n  }\n}\n\n/** Enforces a style recalculation of a DOM element by computing its styles. */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n\n/** @docs-private */\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n\n/** @docs-private */\nexport function getMatFormFieldMissingControlError(): Error {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Converts values into strings. Falsy values become empty strings.\n * @docs-private\n */\nexport function coerceToString(value: string | number): string {\n  return `${value || ''}`;\n}\n\n/**\n * Converts a value that might be a string into a number.\n * @docs-private\n */\nexport function coerceToNumber(value: string | number): number {\n  return typeof value === 'string' ? parseInt(value, 10) : value;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nexport function throwMatMenuMissingError() {\n  throw Error(`mat-menu-trigger: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionX() {\n  throw Error(`x-position value must be either 'before' or after'.\n      Example: <mat-menu x-position=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionY() {\n  throw Error(`y-position value must be either 'above' or below'.\n      Example: <mat-menu y-position=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n\n/** @docs-private */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n\n/** @docs-private */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n\n/** @docs-private */\nexport function getSortInvalidDirectionError(direction: string): Error {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\n\n/** @docs-private */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MatDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatDateFormats} from './date-formats';\n\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {DateAdapter} from './date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n\n@NgModule({\n  imports: [PlatformModule],\n  providers: [\n    {provide: DateAdapter, useClass: NativeDateAdapter},\n  ],\n})\nexport class NativeDateModule {}\n\n\n@NgModule({\n  imports: [NativeDateModule],\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n})\nexport class MatNativeDateModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {FormGroupDirective, NgForm, FormControl} from '@angular/forms';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n  }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable({providedIn: 'root'})\nexport class ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken, Inject, Optional} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {\n  HammerStatic,\n  HammerInstance,\n  Recognizer,\n  RecognizerStatic,\n  HammerOptions,\n} from './gesture-annotations';\n\n/**\n * Injection token that can be used to provide options to the Hammerjs instance.\n * More info at http://hammerjs.github.io/api/.\n */\nexport const MAT_HAMMER_OPTIONS = new InjectionToken<HammerOptions>('MAT_HAMMER_OPTIONS');\n\n/** Adjusts configuration of our gesture library, Hammer. */\n@Injectable()\nexport class GestureConfig extends HammerGestureConfig {\n  private _hammer: HammerStatic = typeof window !== 'undefined' ? (window as any).Hammer : null;\n\n  /** List of new event names to add to the gesture support list */\n  events: string[] = this._hammer ? [\n    'longpress',\n    'slide',\n    'slidestart',\n    'slideend',\n    'slideright',\n    'slideleft'\n  ] : [];\n\n  constructor(\n    @Optional() @Inject(MAT_HAMMER_OPTIONS) private _hammerOptions?: HammerOptions,\n    @Optional() commonModule?: MatCommonModule) {\n    super();\n    if (commonModule) {\n      commonModule._checkHammerIsAvailable();\n    }\n  }\n\n  /**\n   * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n   *\n   * Our gesture names come from the Material Design gestures spec:\n   * https://material.io/design/#gestures-touch-mechanics\n   *\n   * More information on default recognizers can be found in Hammer docs:\n   * http://hammerjs.github.io/recognizer-pan/\n   * http://hammerjs.github.io/recognizer-press/\n   *\n   * @param element Element to which to assign the new HammerJS gestures.\n   * @returns Newly-created HammerJS instance.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const mc = new this._hammer(element, this._hammerOptions || undefined);\n\n    // Default Hammer Recognizers.\n    const pan = new this._hammer.Pan();\n    const swipe = new this._hammer.Swipe();\n    const press = new this._hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    const slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    const longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return mc as HammerInstance;\n  }\n\n  /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n  private _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let recognizer = new (base.constructor as RecognizerStatic)(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  NgModule,\n  Directive,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {MatCommonModule} from '../common-behaviors/common-module';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n  selector: '[mat-line], [matLine]',\n  host: {'class': 'mat-line'}\n})\nexport class MatLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport class MatLineSetter {\n  constructor(private _lines: QueryList<MatLine>, private _element: ElementRef) {\n    this._setLineClass(this._lines.length);\n\n    this._lines.changes.subscribe(() => {\n      this._setLineClass(this._lines.length);\n    });\n  }\n\n  private _setLineClass(count: number): void {\n    this._resetClasses();\n    if (count === 2 || count === 3) {\n      this._setClass(`mat-${count}-line`, true);\n    } else if (count > 3) {\n      this._setClass(`mat-multi-line`, true);\n    }\n  }\n\n  private _resetClasses(): void {\n    this._setClass('mat-2-line', false);\n    this._setClass('mat-3-line', false);\n    this._setClass('mat-multi-line', false);\n  }\n\n  private _setClass(className: string, isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add(className);\n    } else {\n      this._element.nativeElement.classList.remove(className);\n    }\n  }\n\n}\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatLine, MatCommonModule],\n  declarations: [MatLine],\n})\nexport class MatLineModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\n\n/** Possible states for a ripple element. */\nexport enum RippleState {\n  FADING_IN, VISIBLE, FADING_OUT, HIDDEN\n}\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n\n  /** Current state of the ripple reference. */\n  state: RippleState = RippleState.HIDDEN;\n\n  constructor(\n    private _renderer: RippleRenderer,\n    public element: HTMLElement,\n    public config: RippleConfig) {\n  }\n\n  /** Fades out the ripple element. */\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {RippleRef} from './ripple-ref';\nimport {RippleAnimationConfig, RippleConfig, RippleRenderer, RippleTarget} from './ripple-renderer';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Configurable options for `matRipple`. */\nexport interface RippleGlobalOptions {\n  /**\n   * Whether ripples should be disabled. Ripples can be still launched manually by using\n   * the `launch()` method. Therefore focus indicators will still show up.\n   */\n  disabled?: boolean;\n\n  /**\n   * Configuration for the animation duration of the ripples.\n   * There are two phases with different durations for the ripples.\n   */\n  animation?: RippleAnimationConfig;\n\n  /**\n   * If set, the default duration of the fade-in animation is divided by this value. For example,\n   * setting it to 0.5 will cause the ripple fade-in animation to take twice as long.\n   * A changed speedFactor will not affect the fade-out duration of the ripples.\n   * @deprecated Use the `animation` global option instead.\n   * @deletion-target 7.0.0\n   */\n  baseSpeedFactor?: number;\n\n  /**\n   * Whether ripples should start fading out immediately after the mouse our touch is released. By\n   * default, ripples will wait for the enter animation to complete and for mouse or touch release.\n   */\n  terminateOnPointerUp?: boolean;\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nexport const MAT_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('mat-ripple-global-options');\n\n@Directive({\n  selector: '[mat-ripple], [matRipple]',\n  exportAs: 'matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n})\nexport class MatRipple implements OnInit, OnDestroy, RippleTarget {\n\n  /** Custom color for all ripples. */\n  @Input('matRippleColor') color: string;\n\n  /** Whether the ripples should be visible outside the component's bounds. */\n  @Input('matRippleUnbounded') unbounded: boolean;\n\n  /**\n   * Whether the ripple always originates from the center of the host element's bounds, rather\n   * than originating from the location of the click event.\n   */\n  @Input('matRippleCentered') centered: boolean;\n\n  /**\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\n   * bounding rectangle.\n   */\n  @Input('matRippleRadius') radius: number = 0;\n\n  /**\n   * If set, the normal duration of ripple animations is divided by this value. For example,\n   * setting it to 0.5 will cause the animations to take twice as long.\n   * A changed speedFactor will not modify the fade-out duration of the ripples.\n   * @deprecated Use the [matRippleAnimation] binding instead.\n   * @deletion-target 7.0.0\n   */\n  @Input('matRippleSpeedFactor') speedFactor: number = 1;\n\n  /**\n   * Configuration for the ripple animation. Allows modifying the enter and exit animation\n   * duration of the ripples.\n   */\n  @Input('matRippleAnimation') animation: RippleAnimationConfig;\n\n  /**\n   * Whether click events will not trigger the ripple. Ripples can be still launched manually\n   * by using the `launch()` method.\n   */\n  @Input('matRippleDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * The element that triggers the ripple when click events are received.\n   * Defaults to the directive's host element.\n   */\n  @Input('matRippleTrigger')\n  get trigger() { return this._trigger || this._elementRef.nativeElement; }\n  set trigger(trigger: HTMLElement) {\n    this._trigger = trigger;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _trigger: HTMLElement;\n\n  /** Renderer for the ripple DOM manipulations. */\n  private _rippleRenderer: RippleRenderer;\n\n  /** Options that are set globally for all ripples. */\n  private _globalOptions: RippleGlobalOptions;\n\n  /** Whether ripple directive is initialized and the input bindings are set. */\n  private _isInitialized: boolean = false;\n\n  constructor(private _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string) {\n\n    this._globalOptions = globalOptions || {};\n    this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n    this._setupTriggerEventsIfEnabled();\n  }\n\n  ngOnDestroy() {\n    this._rippleRenderer._removeTriggerEvents();\n  }\n\n  /** Fades out all currently showing ripple elements. */\n  fadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n\n  /** Ripple configuration from the directive's input values. */\n  get rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      radius: this.radius,\n      color: this.color,\n      animation: this._animationMode === 'NoopAnimations' ?\n          {enterDuration: 0, exitDuration: 0} :\n          {...this._globalOptions.animation, ...this.animation},\n      terminateOnPointerUp: this._globalOptions.terminateOnPointerUp,\n      speedFactor: this.speedFactor * (this._globalOptions.baseSpeedFactor || 1),\n    };\n  }\n\n  /** Whether ripples on pointer-down are disabled or not. */\n  get rippleDisabled(): boolean {\n    return this.disabled || !!this._globalOptions.disabled;\n  }\n\n  /** Sets up the the trigger event listeners if ripples are enabled. */\n  private _setupTriggerEventsIfEnabled() {\n    if (!this.disabled && this._isInitialized) {\n      this._rippleRenderer.setupTriggerEvents(this.trigger);\n    }\n  }\n\n  /**\n   * Launches a manual ripple using the specified ripple configuration.\n   * @param config Configuration for the manual ripple.\n   */\n  launch(config: RippleConfig): RippleRef;\n\n  /**\n   * Launches a manual ripple at the specified coordinates within the element.\n   * @param x Coordinate within the element, along the X axis at which to fade-in the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to fade-in the ripple.\n   * @param config Optional ripple configuration for the manual ripple.\n   */\n  launch(x: number, y: number, config?: RippleConfig): RippleRef;\n\n  /** Launches a manual ripple at the specified coordinated or just by the ripple config. */\n  launch(configOrX: number | RippleConfig, y: number = 0, config?: RippleConfig): RippleRef {\n    if (typeof configOrX === 'number') {\n      return this._rippleRenderer.fadeInRipple(configOrX, y, {...this.rippleConfig, ...config});\n    } else {\n      return this._rippleRenderer.fadeInRipple(0, 0, {...this.rippleConfig, ...configOrX});\n    }\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatRipple} from './ripple';\n\nexport * from './ripple';\nexport * from './ripple-ref';\nexport * from './ripple-renderer';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatRipple, MatCommonModule],\n  declarations: [MatRipple],\n})\nexport class MatRippleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\n\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n  },\n})\nexport class MatPseudoCheckbox {\n  /** Display state of the checkbox. */\n  @Input() state: MatPseudoCheckboxState = 'unchecked';\n\n  /** Whether the checkbox is disabled. */\n  @Input() disabled: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n  exports: [MatPseudoCheckbox],\n  declarations: [MatPseudoCheckbox]\n})\nexport class MatPseudoCheckboxModule { }\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\nimport {mixinDisabled, CanDisable} from '../common-behaviors/disabled';\n\n// Boilerplate for applying mixins to MatOptgroup.\n/** @docs-private */\nexport class MatOptgroupBase { }\nexport const _MatOptgroupMixinBase = mixinDisabled(MatOptgroupBase);\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mat-option`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-optgroup',\n  exportAs: 'matOptgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  styleUrls: ['optgroup.css'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n})\nexport class MatOptgroup extends _MatOptgroupMixinBase implements CanDisable {\n  /** Label for the option group. */\n  @Input() label: string;\n\n  /** Unique id for the underlying label. */\n  _labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n}\n"],"names":["SELECT_PANEL_PADDING_X","labelBeforePos","labelAfterPos","selectedLabel","getOffsetWidth","beforeVisiblePos","this","scrollDistance","afterVisiblePos","viewLength","MatTabHeader","prototype","_checkPaginationEnabled","isEnabled","_tabList","nativeElement","scrollWidth","_elementRef","offsetWidth","_showPaginationControls","_changeDetectorRef","markForCheck","_checkScrollingControls","_disableScrollBefore","_disableScrollAfter","_getMaxScrollDistance","_tabListContainer","_alignInkBarToSelectedTab","selectedLabelWrapper","_labelWrappers","length","toArray","selectedIndex","elementRef","_inkBar","alignToElement","type","Component","args","selector","template","styles","inputs","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","host","class","[class.mat-tab-header-pagination-controls-enabled]","[class.mat-tab-header-rtl]","ViewportRuler","Directionality","decorators","Optional","propDecorators","ViewChild","Input","selectFocusedIndex","Output","indexFocused","nextId","MatTabChangeEvent","MatTabGroupBase","_MatTabGroupMixinBase","mixinColor","mixinDisableRipple","MatTabGroup","_this","_super","call","_indexToSelect","_tabBodyWrapperHeight","_tabsSubscription","Subscription","EMPTY","_tabLabelSubscription","_dynamicHeight","_selectedIndex","headerPosition","selectedIndexChange","EventEmitter","focusChange","animationDone","selectedTabChange","_groupId","tslib_1.__extends","Object","defineProperty","value","coerceBooleanProperty","coerceNumberProperty","_backgroundColor","classList","remove","backgroundColor","add","ngAfterContentChecked","indexToSelect","Math","min","_tabs","max","tabChangeEvent","_createChangeEvent","emit","Promise","resolve","then","forEach","tab","index","position","isActive","origin","ngAfterContentInit","_subscribeToTabLabels","changes","subscribe","ngOnDestroy","unsubscribe","realignInkBar","_tabHeader","_focusChanged","event","merge","apply","map","_disableChange","concat","_labelChange","_getTabLabelId","i","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","wrapper","_tabBodyWrapper","style","height","offsetHeight","_removeTabBodyWrapperHeight","clientHeight","_handleClick","tabHeader","idx","disabled","focusIndex","_getTabIndex","exportAs","[class.mat-tab-group-dynamic-height]","[class.mat-tab-group-inverted-header]","dynamicHeight","MatTabNavBase","_MatTabNavMixinBase","MatTabNav","_dir","_ngZone","_viewportRuler","_onDestroy","Subject","updateActiveLink","element","_activeLinkChanged","runOutsideAngular","dirChange","change","observableOf","pipe","takeUntil","_alignInkBar","activeTab","_tabLinks","find","active","_activeLinkElement","next","complete","show","hide","NgZone","ChangeDetectorRef","MatTabLinkBase","_MatTabLinkMixinBase","mixinTabIndex","mixinDisabled","_tabNavBar","_tabLinkRipple","setupTriggerEvents","tabIndex","parseInt","globalOptions","rippleConfig","terminateOnPointerUp","speedFactor","baseSpeedFactor","animation","get","_isActive","enumerable","configurable","preventDefault","MatTabLink","Directive","[attr.aria-disabled]","[attr.tabIndex]","[class.mat-tab-disabled]","[class.mat-tab-label-active]","(click)","Platform","undefined","Inject","MAT_RIPPLE_GLOBAL_OPTIONS","Attribute","NgModule","imports","CommonModule","MatCommonModule","PortalModule","MatRippleModule","ObserversModule","exports","MatTabLabel","MatTab","MatTabContent","declarations","MatInkBar","MatTabLabelWrapper","MatTabBody","MatTabBodyPortal","MatTabsModule","MatToolbarBase","_MatToolbarMixinBase","MatToolbarRow","MatToolbar","_platform","document","_document","ngAfterViewInit","isDevMode","isBrowser","_checkToolbarMixedModes","_toolbarRows","slice","childNodes","filter","node","contains","nodeType","COMMENT_NODE","some","textContent","trim","throwToolbarMixedModesError","[class.mat-toolbar-multiple-rows]","[class.mat-toolbar-single-row]","DOCUMENT","MatToolbarModule","MatTreeNodeOutlet","viewContainer","ViewContainerRef","_MatTreeNodeMixinBase","CdkTreeNode","_MatNestedTreeNodeMixinBase","CdkNestedTreeNode","MatTreeNode","_tree","role","Number","[attr.aria-expanded]","[attr.aria-level]","[attr.role]","providers","provide","useExisting","ElementRef","CdkTree","MatTreeNodeDef","CdkTreeNodeDef","data","MatNestedTreeNode","_differs","IterableDiffers","nodeOutlet","ContentChildren","MatTreeNodePadding","CdkTreeNodePadding","level","indent","MatTree","recursive","MatTreeNodeToggle","CdkTreeNodeToggle","MAT_TREE_DIRECTIVES","CdkTreeModule","MatTreeModule","MatTreeFlattener","transformFunction","getLevel","isExpandable","getChildren","_flattenNode","resultNodes","parentMap","flatNode","push","take","children","child","childParentMap","flattenNodes","structuredData","expandFlattenedNodes","nodes","treeControl","results","currentExpand","expand","isExpanded","MatTreeFlatDataSource","treeFlattener","initialData","_flattenedData","BehaviorSubject","_expandedData","_data","dataNodes","connect","collectionViewer","viewChange","expansionModel","disconnect","DataSource","MatTreeNestedDataSource","VERSION","Version","MatStepHeader","iconOverrides","selected","optional","matStepperAnimations","horizontalStepTransition","trigger","state","transform","visibility","transition","animate","verticalStepTransition","MatStepperIcon","templateRef","TemplateRef","name","MatStep","stepper","_errorStateMatcher","isErrorState","control","form","originalErrorState","customErrorState","invalid","interacted","ErrorStateMatcher","MatStepper","arguments","icons","_icons","override","icon","_iconOverrides","_steps","_destroyed","_stateChanged","MatHorizontalStepper","aria-orientation","animations","MatVerticalStepper","ctorParameters","MatStepperNext","[type]","CdkStepper","CdkStepperNext","MatStepperPrevious","CdkStepperPrevious","MatButtonModule","CdkStepperModule","MatIconModule","MatStepLabel","MatStepperIntl","MatStepperModule","MatTable","CDK_TABLE_TEMPLATE","MatCellDef","CdkCellDef","MatHeaderCellDef","CdkHeaderCellDef","MatFooterCellDef","CdkFooterCellDef","MatColumnDef","CdkColumnDef","MatHeaderCell","columnDef","cssClassFriendlyName","CdkHeaderCell","MatFooterCell","CdkFooterCell","MatCell","CdkCell","MatHeaderRowDef","CdkHeaderRowDef","MatFooterRowDef","CdkFooterRowDef","MatRowDef","CdkRowDef","MatHeaderRow","CDK_ROW_TEMPLATE","MatFooterRow","CdkFooterRow","MatRow","CdkRow","EXPORTED_DECLARATIONS","CdkTableModule","MatTableModule","MatTableDataSource","_renderData","_filter","sortingDataAccessor","sortHeaderId","_isNumberValue","sortData","sort","direction","a","b","valueA","valueB","comparatorResult","filterPredicate","accumulator","currentTerm","key","dataStr","keys","reduce","toLowerCase","transformedFilter","indexOf","_updateChangeSubscription","_sort","_paginator","paginator","sortChange","initialized","pageChange","page","_renderChangesSubscription","dataStream","filteredData","combineLatest","_a","_filterData","orderedData","_orderData","_pageData","obj","_updatePaginator","startIndex","pageIndex","pageSize","splice","filteredDataLength","lastPageIndex","ceil","_MAT_INK_BAR_POSITIONER","InjectionToken","providedIn","factory","_MAT_INK_BAR_POSITIONER_FACTORY","_inkBarPositioner","requestAnimationFrame","_setStyles","positions","inkBar","left","width","viewContainerRef","CdkPortal","MatTabBase","_MatTabMixinBase","_viewContainerRef","textLabel","_contentPortal","ngOnChanges","hasOwnProperty","ngOnInit","TemplatePortal","_explicitContent","_implicitContent","matTabsAnimations","translateTab","componentFactoryResolver","_host","_centeringSub","_leavingSub","_beforeCentering","startWith","_isCenterPosition","_position","isCentering","hasAttached","attach","_content","_afterLeavingCenter","detach","ComponentFactoryResolver","forwardRef","CdkPortalOutlet","_onCentering","_onCentered","_getLayoutDirection","dir","_origin","_onTranslateTabStarted","e","toState","_onTranslateTabComplete","fromState","_portalHost","PortalHostDirective","MatTabLabelWrapperBase","_MatTabLabelWrapperMixinBase","focus","getOffsetLeft","offsetLeft","MatTabHeaderBase","_MatTabHeaderMixinBase","_focusIndex","_scrollDistance","_selectedIndexChanged","_realignInkBar","_tabLabelCount","_updatePagination","_scrollToLabel","_scrollDistanceChanged","_updateTabScrollPosition","_handleKeydown","keyCode","RIGHT_ARROW","_focusNextTab","LEFT_ARROW","_focusPreviousTab","HOME","_focusFirstTab","END","_focusLastTab","ENTER","SPACE","resize","realign","_onContentChanges","_isValidIndex","_setTabFocus","containerEl","scrollLeft","_moveFocus","offset","tabs","translateX","v","_scrollHeader","scrollDir","labelIndex","MatSlider","step","thumbLabel","tickInterval","displayWith","vertical","input","_sliderWrapper","HAMMER_GESTURE_CONFIG","useClass","GestureConfig","MatSliderModule","MatSnackBarRef","containerInstance","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","dismiss","_onExit","_finishDismiss","closed","exit","clearTimeout","_durationTimeoutId","dismissWithAction","closeWithAction","_dismissAfter","duration","setTimeout","_open","dispose","dismissedByAction","afterDismissed","asObservable","afterOpened","_onEnter","MAT_SNACK_BAR_DATA","MatSnackBarConfig","politeness","announcementMessage","horizontalPosition","verticalPosition","matSnackBarAnimations","contentFade","opacity","AnimationDurations","COMPLEX","AnimationCurves","STANDARD_CURVE","snackBarState","EXITING","ACCELERATION_CURVE","ENTERING","DECELERATION_CURVE","SimpleSnackBar","snackBarRef","action","[@contentFade]","MatSnackBarContainer","_animationState","attachComponentPortal","portal","_assertNotAttached","_applySnackBarClasses","_portalOutlet","attachTemplatePortal","onAnimationEnd","startsWith","_completeExit","onEnter_1","run","enter","snackBarConfig","detectChanges","onMicrotaskEmpty","panelClasses","panelClass","Array","isArray","cssClass","Error","[@state]","(@state.done)","MAT_SNACK_BAR_DEFAULT_OPTIONS","MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY","MatSnackBar","_overlay","_live","_injector","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","parent","_openedSnackBarRef","openFromComponent","component","config","_attach","openFromTemplate","open","message","_config","tslib_1.__assign","_attachSnackBarContainer","overlayRef","containerPortal","ComponentPortal","containerRef","instance","content","userConfig","_createOverlay","container","$implicit","injector","_createInjector","contentRef","observe","Breakpoints","Handset","detachments","matches","overlayElement","_animateSnackBar","announce","overlayConfig","OverlayConfig","positionStrategy","global","isRtl","isLeft","isRight","right","centerHorizontally","top","bottom","create","userInjector","injectionTokens","WeakMap","set","PortalInjector","Injectable","Overlay","LiveAnnouncer","Injector","BreakpointObserver","SkipSelf","OverlayModule","entryComponents","MatSnackBarModule","MatSortBase","_MatSortMixinBase","mixinInitialized","sortables","Map","_stateChanges","start","_direction","MatSort","getSortInvalidDirectionError","_disableClear","register","sortable","id","getSortHeaderMissingIdError","has","getSortDuplicateSortableIdError","deregister","delete","getNextSortDirection","disableClear","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","_markInitialized","SORT_ANIMATION_TRANSITION","matSortAnimations","indicator","leftPointer","rightPointer","arrowOpacity","arrowPosition","keyframes","allowChildren","query","animateChild","sortButtonLabel","MatSortHeaderIntl","MAT_SORT_HEADER_INTL_PROVIDER","deps","useFactory","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","MatSortHeaderBase","_MatSortHeaderMixinBase","MatSortHeader","_intl","changeDetectorRef","_cdkColumnDef","_showIndicatorHint","_arrowDirection","_disableViewStateAnimation","getSortHeaderNotContainedWithinSortError","_rerenderSubscription","_isSorted","_updateArrowDirection","_viewState","_setAnimationTransitionState","_setIndicatorHintVisible","visible","_isDisabled","viewState","_getArrowDirectionState","_getArrowViewState","_getAriaSortAttribute","(mouseenter)","(longpress)","(mouseleave)","[attr.aria-sort]","[class.mat-sort-header-disabled]","MatSortModule","CdkStepLabel","optionalLabel","_focusMonitor","_element","monitor","_intlSubscription","stopMonitoring","_stringLabel","label","_templateLabel","_getHostElement","_getIconContext","MatDrawerContainer","_drawers","MatDrawer","ContentChild","MatDrawerContent","autosize","hasBackdrop","MatSidenavContent","[style.margin-left.px]","[style.margin-right.px]","MatSidenav","_fixedBottomGap","matDrawerAnimations","transformDrawer","[@transform]","(@transform.start)","(@transform.done)","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[class.mat-drawer-side]","[class.mat-sidenav-fixed]","[style.top.px]","[style.bottom.px]","fixedInViewport","MatSidenavContainer","[class.mat-drawer-container-explicit-backdrop]","MatSidenavModule","ScrollDispatchModule","PlatformModule","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","MatSlideToggle","multi","MatSlideToggleChange","source","checked","MatSlideToggleBase","_MatSlideToggleMixinBase","onChange","_","onTouched","_uniqueId","_required","_checked","_dragging","labelPosition","ariaLabel","ariaLabelledby","_inputElement","focusOrigin","_onInputFocusChange","_onChangeEvent","stopPropagation","_emitChangeEvent","_onInputClick","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","focusVia","toggle","_focusRipple","fadeOut","_ripple","launch","persistent","_getDragPercentage","distance","percentage","_thumbBarWidth","_previousChecked","_onDragStart","thumbEl","_thumbEl","_thumbBarEl","clientWidth","_onDrag","_dragPercentage","deltaX","dragX","_onDragEnd","newCheckedValue","_onLabelTextChange","[id]","[class.mat-checked]","[class.mat-disabled]","[class.mat-slide-toggle-label-before]","FocusMonitor","required","MatRipple","MatSlideToggleModule","MAT_SLIDER_VALUE_ACCESSOR","MatSliderChange","MatSliderBase","_MatSliderMixinBase","_invert","_max","_min","_step","_thumbLabel","_tickInterval","_value","_vertical","_percent","_isSliding","_tickIntervalPercent","_sliderDimensions","_controlValueAccessorChangeFn","_dirChangeSubscription","_calculatePercentage","_roundToDecimal","toString","split","pop","toFixed","_focusHostElement","blur","_blurHostElement","_clamp","invert","percent","_isMinValue","axis","_invertMouseCoords","_thumbGap","tickSize","backgroundSize","sign","rotate","_invertAxis","_onMouseenter","_getSliderDimensions","_updateTickIntervalPercent","_onClick","oldValue","_updateValueFromPosition","x","clientX","y","clientY","_emitInputEvent","_onSlide","_onSlideStart","center","_valueOnSlideStart","_onSlideEnd","_onFocus","_onBlur","_onKeydown","PAGE_UP","_increment","PAGE_DOWN","UP_ARROW","DOWN_ARROW","_onKeyup","numSteps","pos","size","posComponent","exactValue","_calculateValue","closestValue","round","parseFloat","trackSize","pixelsPerStep","stepsPerTick","pixelsPerTick","getBoundingClientRect","(focus)","(blur)","(keydown)","(keyup)","(slide)","(slideend)","(slidestart)","[tabIndex]","[attr.aria-valuemax]","[attr.aria-valuemin]","[attr.aria-valuenow]","[attr.aria-orientation]","[class.mat-slider-disabled]","[class.mat-slider-has-ticks]","[class.mat-slider-horizontal]","[class.mat-slider-axis-inverted]","[class.mat-slider-sliding]","[class.mat-slider-thumb-label-showing]","[class.mat-slider-vertical]","[class.mat-slider-min-value]","[class.mat-slider-hide-last-tick]","MatProgressSpinner","mode","platform","[style.width.px]","[style.height.px]","MatSpinner","MatProgressSpinnerModule","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","MatRadioGroup","MatRadioChange","MatRadioGroupBase","_MatRadioGroupMixinBase","_changeDetector","_name","_selected","_isInitialized","_labelPosition","_disabled","_updateRadioButtonNames","_markRadiosForCheck","newValue","_updateSelectedRadioFromValue","_checkSelectedRadioButton","_touch","_radios","radio","isAlreadySelected","_markForCheck","MatRadioButton","descendants","MatRadioButtonBase","_MatRadioButtonMixinBase","radioGroup","_radioDispatcher","_removeUniqueSelectionListener","listen","newCheckedState","notify","newDisabledState","_isRippleDisabled","disableRipple","_onInputChange","groupValueChanged","[class.mat-radio-checked]","[class.mat-radio-disabled]","[attr.id]","UniqueSelectionDispatcher","ariaDescribedby","MatRadioModule","box-shadow","MAT_DRAWER_DEFAULT_AUTOSIZE","MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY","_container","_contentMarginChanges","_focusTrapFactory","_doc","_elementFocusedBeforeDrawerWasOpened","_mode","_disableClose","_autoFocus","openedChange","opened","_isFocusTrapEnabled","_focusTrap","_trapFocus","_restoreFocus","close","onPositionChanged","_modeChanged","focusInitialElementWhenReady","hasMovedFocus","activeEl","activeElement","HTMLElement","_openedVia","enabled","destroy","isOpen","openedVia","_opened","_enableAnimations","_openedStream","openedStart","_closedStream","closedStart","_animationMode","backdropClick","_doCheckSubject","_autosize","defaultAutosize","drawer","_watchDrawerToggle","_watchDrawerPosition","_watchDrawerMode","_isDrawerOpen","_start","_end","_updateContentMargins","debounceTime","ngDoCheck","_setContainerClass","throwMatDuplicatedDrawerError","_right","_left","_closeModalDrawer","disableClose","_canHaveBackdrop","_isShowingBackdrop","_width","_contentMargins","optionGroups","MatOptgroup","customTrigger","MatSelectTrigger","placeholder","multiple","disableOptionCentering","compareWith","errorStateMatcher","selectionChange","valueChange","MatSelect","MatOptionModule","MatFormFieldModule","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","MatSelectModule","matTooltipAnimations","tooltipState","SCROLL_THROTTLE_MS","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY","MAT_TOOLTIP_DEFAULT_OPTIONS","MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY","MatTooltip","_scrollDispatcher","_ariaDescriber","_scrollStrategy","_defaultOptions","showDelay","hideDelay","_message","_manualListeners","IOS","nodeName","webkitUserSelect","userSelect","listener","addEventListener","_updatePosition","_tooltipInstance","updatePosition","removeDescription","_isTooltipVisible","_updateTooltipMessage","describe","_tooltipClass","_setTooltipClass","removeEventListener","clear","delay","_detach","_portal","TooltipComponent","afterHidden","isVisible","ESCAPE","_handleTouchend","touchendHideDelay","_getOrigin","overlay","_getOverlayPosition","strategy","flexibleConnectedTo","withFlexibleDimensions","withViewportMargin","withPositions","main","fallback","scrollableAncestors","getAncestorScrollContainers","withScrollableContainers","positionChanges","scrollableViewProperties","isOverlayClipped","_setTransformOrigin","connectionPair","scrollStrategy","getConfig","originPosition","isLtr","originX","originY","getMatTooltipInvalidPositionError","_invertPosition","overlayPosition","overlayX","overlayY","tooltipClass","(touchend)","ScrollDispatcher","AriaDescriber","_visibility","_closeOnInteraction","_transformOrigin","_onHide","_isHandset","_hideTimeoutId","_showTimeoutId","_animationStart","_animationDone","_handleBodyInteraction","aria-hidden","MatTooltipModule","itemsPerPageLabel","nextPageLabel","previousPageLabel","firstPageLabel","lastPageLabel","getRangeLabel","MatPaginatorIntl","MAT_PAGINATOR_INTL_PROVIDER","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","PageEvent","MatPaginatorBase","_MatPaginatorBase","MatPaginator","_pageIndex","_length","_pageSizeOptions","_hidePageSize","_showFirstLastButtons","_intlChanges","_pageSize","_updateDisplayedPageSizeOptions","p","_initialized","nextPage","hasNextPage","previousPageIndex","_emitPageEvent","previousPage","hasPreviousPage","firstPage","lastPage","getNumberOfPages","numberOfPages","_changePageSize","floor","pageSizeOptions","_displayedPageSizeOptions","hidePageSize","showFirstLastButtons","MatPaginatorModule","MatProgressBarBase","_MatProgressBarMixinBase","progressbarId","MatProgressBar","_bufferValue","clamp","_primaryTransform","_bufferTransform","bufferValue","aria-valuemin","aria-valuemax","[attr.mode]","MatProgressBarModule","BASE_SIZE","MatProgressSpinnerBase","_MatProgressSpinnerMixinBase","INDETERMINATE_ANIMATION_TEMPLATE","_fallbackAnimation","_diameter","EDGE","TRIDENT","animationClass","diameters","_attachStyleNode","_strokeWidth","diameter","viewBox","_circleRadius","strokeWidth","PI","_strokeCircumference","styleTag","createElement","head","appendChild","sheet","insertRule","_getAnimationText","replace","Set","_itemChanges","_items","MatMenu","removeItem","item","_startAnimation","_panelAnimationState","_resetAnimation","_onAnimationDone","_isAnimating","matMenuAnimations","transformMenu","fadeInItems","MAT_MENU_PANEL","MAT_MENU_DEFAULT_OPTIONS","yPosition","items","MatMenuItem","lazyContent","MatMenuContent","overlapTrigger","MAT_MENU_SCROLL_STRATEGY","MAT_MENU_SCROLL_STRATEGY_FACTORY","MatMenuTrigger","_parentMenu","_menuItemInstance","_menuOpen","_closeSubscription","_hoverSubscription","_openedByMouse","menuOpened","onMenuOpen","menuClosed","onMenuClose","_triggersSubmenu","triggersSubmenu","menu","_checkMenu","reason","_destroyMenu","_handleHover","_cleanUpSubscriptions","toggleMenu","closeMenu","openMenu","setDirection","menuData","_menuClosingActions","_initMenu","menuOpen","_resetMenu","parentMenu","_setMenuElevation","_setIsMenuOpen","focusFirstItem","setElevation","depth","_highlighted","throwMatMenuMissingError","_getOverlayConfig","_subscribeToPositions","_getPosition","backdropClass","posX","posY","setPositionClasses","xPosition","originFallbackX","_b","overlayFallbackY","_c","originFallbackY","_d","overlayFallbackX","offsetY","backdrop","parentClose","hover","_hovered","_handleMousedown","isFakeMousedownFromScreenReader","asapScheduler","aria-haspopup","(mousedown)","Self","_deprecatedMatMenuTriggerFor","MatMenuModule","matSelectAnimations","transformPanel","minWidth","group","fadeInContent","MAT_SELECT_SCROLL_STRATEGY","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MatSelectChange","MatSelectBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinErrorState","_parentFormField","_scrollStrategyFactory","_panelOpen","_scrollTop","_multiple","_compareWith","o1","o2","_uid","_destroy","_triggerFontSize","_onChange","_onTouched","_optionIds","_panelDoneAnimating","_offsetY","_positions","_disableOptionCentering","focused","controlType","optionSelectionChanges","defer","options","option","onSelectionChange","onStable","switchMap","o","valueAccessor","_placeholder","stateChanges","_selectionModel","getMatSelectDynamicMultipleError","getMatSelectNonFunctionValueError","_initializeSelection","_id","SelectionModel","_initKeyManager","_resetOptions","updateErrorState","panelOpen","_triggerRect","getComputedStyle","_keyManager","withHorizontalOrientation","_calculateOverlayPosition","_highlightCorrectOption","overlayDir","fontSize","_isRtl","_setSelectionByValue","empty","selectedOptions","viewValue","reverse","join","_handleOpenKeydown","_handleClosedKeydown","isArrowKey","altKey","onKeydown","manager","setFirstItemActive","setLastItemActive","activeItem","previouslyFocusedIndex","activeItemIndex","shiftKey","_selectViaInteraction","_onPanelDone","offsetX","_onFadeInDone","_onAttached","positionChange","_calculateOverlayOffsetX","panel","scrollTop","_getPanelTheme","color","isEmpty","isUserInput","getMatSelectNonArrayValueError","_clearSelection","currentValue","_selectValue","_sortValues","correspondingOption","setActiveItem","error","console","warn","select","skip","deselect","ActiveDescendantKeyManager","withTypeAhead","withVerticalOrientation","tabOut","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","_setOptionIds","wasSelected","isSelected","_propagateChanges","fallbackValue","valueToEmit","activeOptionIndex","labelCount","_countGroupLabelsBeforeOption","_getOptionScrollPosition","_getItemHeight","_getOptionIndex","result","current","itemHeight","_getItemCount","panelHeight","scrollContainerHeight","maxScroll","selectedOptionOffset","scrollBuffer","_calculateOverlayScroll","_calculateOverlayOffsetY","_checkOverlayWithinViewport","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","_getAriaActiveDescendant","overlayRect","viewportSize","getViewportSize","paddingWidth","SELECT_MULTIPLE_PANEL_PADDING_X","first","leftOverflow","rightOverflow","optionOffsetFromPanelTop","optionHeightAdjustment","maxOptionsDisplayed","firstDisplayedIndex","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","bottomSpaceAvailable","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","setDescribedByIds","ids","_ariaDescribedby","onContainerClick","[attr.tabindex]","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","MatFormFieldControl","MAT_OPTION_PARENT_COMPONENT","NgForm","FormGroupDirective","MatFormField","NgControl","CdkConnectedOverlay","MatOption","MatSelectionList","MAT_SELECTION_LIST_VALUE_ACCESSOR","MatListOption","_MatSelectionListMixinBase","MatLineModule","MatPseudoCheckboxModule","MatList","MatNavList","MatListItem","MatListAvatarCssMatStyler","MatListIconCssMatStyler","MatListSubheaderCssMatStyler","MatDividerModule","MatListModule","_template","_componentFactoryResolver","_appRef","context","_outlet","DomPortalOutlet","insertBefore","outletElement","isAttached","ApplicationRef","sequence","MatMenuItemBase","_MatMenuItemMixinBase","addItem","_checkDisabled","_handleMouseEnter","getLabel","textNodeType","TEXT_NODE","output","length_1","[class.mat-menu-item-highlighted]","[class.mat-menu-item-submenu-trigger]","[attr.disabled]","MAT_MENU_DEFAULT_OPTIONS_FACTORY","_xPosition","_yPosition","_tabSubscription","_classList","_overlapTrigger","_hasBackdrop","throwMatMenuInvalidPositionX","throwMatMenuInvalidPositionY","classes","className","FocusKeyManager","withWrap","setFocusOrigin","resetActiveItem","newElevation","customElevation","c","_previousElevation","_MatListMixinBase","_navList","_isNavList","_handleFocus","_handleBlur","[class.mat-list-item-avatar]","[class.mat-list-item-with-avatar]","MatSelectionListBase","MatListOptionBase","_MatListOptionMixinBase","MatSelectionListChange","selectionList","_hasFocus","checkboxPosition","_setSelected","_reportValueChange","MatLineSetter","_lines","_removeOptionFromList","_text","_setFocusedOption","tabindex","[class.mat-list-item-disabled]","[class.mat-list-item-focus]","[attr.aria-selected]","skipPredicate","_tempValues","_setOptionsFromValues","_modelChanges","_i","added","removed","optionIndex","setNextItemActive","previousFocusIndex","_toggleSelectOnFocusedOption","_getSelectedOptionValues","values","Boolean","focusedOption","focusedIndex","hasChanged","svgElement","_fetchUrl","url","svgText","_svgElementFromString","MatIconRegistry","_createSvgElementForSingleIcon","responseText","svg","_setSvgAttributes","_extractSvgIconFromSet","iconSet","iconName","iconSource","querySelector","iconElement","cloneNode","removeAttribute","_toSvgElement","str","div","innerHTML","ELEMENT_NODE","setAttribute","safeUrl","_httpClient","getMatIconNoHttpProviderError","_sanitizer","sanitize","SecurityContext","RESOURCE_URL","getMatIconFailedToSanitizeUrlError","inProgressFetch","_inProgressUrlFetches","req","responseType","finalize","share","_addSvgIconConfig","namespace","_svgIconConfigs","iconKey","_addSvgIconSetConfig","configNamespace","_iconSetConfigs","HttpClient","DomSanitizer","ICON_REGISTRY_PROVIDER","ICON_REGISTRY_PROVIDER_FACTORY","MatIconBase","_MatIconMixinBase","MatIcon","_iconRegistry","ariaHidden","_inline","inline","_fontSet","_cleanupFontValue","_fontIcon","_splitIconName","parts","svgIcon","getNamedSvgIcon","_setSvgElement","err","log","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","layoutElement","childCount","removeChild","elem","fontSetClass","fontSet","classNameForFontAlias","getDefaultFontSetClass","_previousFontSetClass","fontIcon","_previousFontIconClass","[class.mat-icon-inline]","MatListBase","MatListItemBase","_MatListItemMixinBase","_disabledChange","MatDatepickerInput","_datepicker","_datepickerSubscription","_selectedChanged","_cvaOnChange","dateInput","MatDatepickerInputEvent","dateChange","_localeSubscription","_valueChange","registerOnValidatorChange","_validatorOnChange","validate","_validator","getPopupConnectionElementRef","getConnectedOverlayOrigin","_formField","_onInput","date","_dateAdapter","parse","_dateFormats","_lastValueValid","isValid","_getValidDateOrNull","sameDate","_getThemePalette","_formatValue","format","display","isDateInstance","MAT_DATEPICKER_VALUE_ACCESSOR","MAT_DATEPICKER_VALIDATORS","MAT_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","DateAdapter","MAT_DATE_FORMATS","matDatepicker","matDatepickerFilter","MatDatepickerToggleIcon","MatDatepickerToggle","datepicker","_watchStateChanges","datepickerDisabled","inputDisabled","_datepickerInput","datepickerToggled","openedStream","closedStream","[class.mat-datepicker-toggle-active]","[class.mat-accent]","[class.mat-warn]","_customIcon","MatDialogModule","A11yModule","MatCalendar","MatCalendarBody","MatDatepicker","MatDatepickerContent","MatMonthView","MatYearView","MatMultiYearView","MatCalendarHeader","MatDatepickerIntl","MatDatepickerModule","_inset","MatDivider","[class.mat-divider-vertical]","[class.mat-divider-inset]","_hideToggle","displayMode","MatAccordion","hideToggle","CdkAccordion","matExpansionAnimations","indicatorRotate","expansionHeaderHeight","params","collapsedHeight","expandedHeight","bodyExpansion","MatExpansionPanelContent","uniqueId","MatExpansionPanel","accordion","_uniqueSelectionDispatcher","_inputChanges","_headerId","_getHideToggle","_hasSpacing","expanded","_getExpandedState","_lazyContent","_bodyAnimation","phaseName","outputs","[class.mat-expanded]","[class.mat-expansion-panel-spacing]","MatExpansionPanelActionRow","MatExpansionPanelHeader","_parentChangeSubscription","_toggle","_isExpanded","_getPanelId","_showToggle","_keydown","[attr.aria-controls]","[@expansionHeight]","MatExpansionPanelDescription","MatExpansionPanelTitle","CdkAccordionModule","MatExpansionModule","MatGridTile","_rowspan","_colspan","coerceToNumber","_setStyle","property","MatGridTileText","MatGridAvatarCssMatStyler","MatGridTileHeaderCssMatStyler","MatGridTileFooterCssMatStyler","TileCoordinator","numColumns","tiles","columnIndex","rowIndex","tracker","fill","tile","_trackTile","lastRowMax","rowCount","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","TilePosition","tileCols","gapEndIndex","_nextRow","_findGapEndIndex","rowspan","row","col","TileStyler","_rows","init","gutterSize","cols","_gutterSize","normalizeUnits","_cols","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","calc","getTileSize","span","setStyle","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","side","getGutterSpan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","fixedRowHeight","reset","list","_setListStyle","_tiles","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","FitTileStyler","gutterHeightPerTile","MatGridList","_gutter","coerceToString","_rowHeight","_setTileStyler","_checkCols","_checkRowHeight","_layoutTiles","rowHeight","_tileStyler","MatGridListModule","SvgIconConfig","_cachedIconsByUrl","_fontCssClassesByAlias","_defaultFontSetClass","addSvgIcon","addSvgIconInNamespace","addSvgIconLiteral","literal","addSvgIconLiteralInNamespace","sanitizedLiteral","HTML","getMatIconFailedToSanitizeLiteralError","addSvgIconSet","addSvgIconSetInNamespace","addSvgIconSetLiteral","addSvgIconSetLiteralInNamespace","registerFontClassAlias","alias","setDefaultFontSetClass","getSvgIconFromUrl","cachedIcon","cloneSvg","_loadSvgIconFromConfig","tap","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","observableThrow","getMatIconNameNotFoundError","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","iconSetConfig","_loadSvgIconSetFromConfig","catchError","forkJoin","foundIcon","MatCalendarCell","year","yearName","_shouldEnableYear","maxDate","getYear","minDate","dateFilter","firstOfYear","createDate","addCalendarDays","selectedChange","yearSelected","_matCalendarBody","monthSelected","createMissingDateImplError","_activeDate","today","oldActiveDate","validDate","deserialize","clampDate","_init","_selectedMonth","_getMonthInCurrentYear","_minDate","_maxDate","_monthSelected","month","normalizedDate","activeDate","daysInMonth","getNumDaysInMonth","getDate","_handleCalendarBodyKeydown","addCalendarMonths","getMonth","addCalendarYears","_focusActiveCell","_todayMonth","_yearLabel","getYearName","monthNames","getMonthNames","_months","_createCellForMonth","monthName","monthYearA11yLabel","toLocaleUpperCase","_shouldEnableMonth","activeYear","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","firstOfMonth","maxYear","maxMonth","minYear","minMonth","calendar","currentView","monthYearLabel","switchToMultiYearViewLabel","switchToMonthViewLabel","prevMonthLabel","prevYearLabel","multi-year","prevMultiYearLabel","nextMonthLabel","nextYearLabel","nextMultiYearLabel","currentPeriodClicked","previousClicked","nextClicked","previousEnabled","_isSameView","nextEnabled","date1","date2","_moveFocusOnNextTick","startAt","_currentView","startView","focusActiveCell","firstChange","view","_getCurrentViewComponent","headerComponent","_userSelection","monthView","yearView","multiYearView","matDatepickerAnimations","fadeInCalendar","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY","MatDatepickerContentBase","_MatDatepickerContentMixinBase","_popupRef","_positionChange","isAbove","_isAbove","_calendar","[@transformPanel]","[class.mat-datepicker-content-touch]","[class.mat-datepicker-content-above]","_inputSubscription","_popupComponentRef","_focusedElementBeforeOpen","touchUi","_openAsDialog","_openAsPopup","_dialogRef","_calendarPortal","completeClose","afterClosed","componentInstance","_setColor","_createPopup","_getDirection","keydownEvents","withPush","MatDialog","calendarHeaderComponent","NG_VALIDATORS","target","targetElement","_parseValidator","matDatepickerParse","text","_minValidator","controlValue","compareDate","matDatepickerMin","actual","_maxValidator","matDatepickerMax","_filterValidator","_dateFilter","Validators","compose","localeChanges","registerDatepicker","_registerInput","oldDate","[@slideDialog]","(@slideDialog.start)","(@slideDialog.done)","MatDialogContainer","MatDialogRef","_containerInstance","location","_afterOpen","_afterClosed","_beforeClose","_locationChanges","_animationStateChanged","_result","closeOnNavigation","dialogResult","detachBackdrop","_startExitAnimation","afterOpen","beforeClose","_getPositionStrategy","centerVertically","updateSize","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_FACTORY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","_location","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenAtThisLevel","_ariaHiddenElements","afterAllClosed","openDialogs","_afterAllClosed","componentOrTemplateRef","_applyConfigDefaults","MatDialogConfig","getDialogById","dialogContainer","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","closeAll","dialog","dialogConfig","minHeight","maxWidth","maxHeight","previousValue","overlayContainer","getContainerElement","parentElement","siblings","sibling","hasAttribute","getAttribute","Location","OverlayContainer","dialogElementUid","MatDialogClose","_dialog","getClosestDialog","proxiedChange","_matDialogClose","MatDialogTitle","_ariaLabelledBy","MatDialogContent","MatDialogActions","MatTextareaAutosize","minRows","maxRows","rows","matAutosizeMinRows","matAutosizeMaxRows","CdkTextareaAutosize","MAT_INPUT_INVALID_TYPES","MatInputBase","_MatInputMixinBase","MatInput","inputValueAccessor","_autofillMonitor","ngZone","_isServer","autofilled","_type","_readonly","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","el","selectionStart","selectionEnd","setSelectionRange","_validateType","_isTextarea","isAutofilled","_dirtyCheckNativeValue","isFocused","readonly","getMatInputUnsupportedTypeError","_isNeverEmpty","_isBadInput","validity","badInput","[class.mat-input-server]","[attr.placeholder]","[required]","[readonly]","AutofillMonitor","TextFieldModule","MatInputModule","calendarLabel","openCalendarLabel","displayValue","numCols","allowDisabledSelection","activeCell","cellAspectRatio","selectedValueChange","_cellClicked","cell","_isActiveCell","cellNumber","_firstRowOffset","attr.aria-readonly","todayValue","selectedValue","labelMinRequiredCells","activeDateChange","firstDayOfWeek","getFirstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","_weekdays","_hasSameMonthAndYear","_selectedDate","_getDateInCurrentMonth","_dateSelected","selectedYear","selectedMonth","selectedDate","_todayDate","_monthLabel","_firstWeekOffset","getDayOfWeek","_createWeekCells","dateNames","getDateNames","_weeks","_shouldEnableDate","dateA11yLabel","d1","d2","_selectedYear","_todayYear","activeOffset","_years","_createCellForYear","_yearSelected","yearsPerPage","_getActiveCell","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","[class.mat-checkbox-disabled]","[class.mat-checkbox-label-before]","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","MAT_CHECKBOX_CLICK_ACTION","MatCheckbox","indeterminateChange","ripple","indeterminate","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","MatCheckboxModule","MatChipSelectionChange","MatChipBase","_MatChipMixinBase","CHIP_ATTRIBUTE_NAMES","MatChipAvatar","MatChipTrailingIcon","MatChip","chipListSelectable","_selectable","_removable","destroyed","_addHostClassName","_chipRipple","RippleRenderer","selectable","CHIP_ATTRIBUTE_NAMES_1","attr","tagName","chip","_removeTriggerEvents","selectViaInteraction","toggleSelected","removable","DELETE","BACKSPACE","_blur","[class.mat-chip-selected]","[class.mat-chip-with-avatar]","[class.mat-chip-with-trailing-icon]","[class.mat-chip-disabled]","avatar","trailingIcon","removeIcon","MatChipRemove","_parentChip","MAT_CHIPS_DEFAULT_OPTIONS","MatChipListBase","_MatChipListMixinBase","MatChipListChange","MatChipList","_lastDestroyedIndex","_chipSet","_tabOutSubscription","_tabIndex","_userTabIndex","ariaOrientation","_chipInput","chips","_changeSubscription","_resetChips","_updateTabIndex","_updateFocusForDestroyedChips","_chipRemoveSubscription","_dropSubscriptions","registerInput","inputElement","_focusInput","_isInputEmpty","_updateKeyManager","chipIndex","chipsArray","newFocusIndex","focusChip","correspondingChip","_markAsTouched","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","chipSelectionChanges","chipFocusChanges","updateActiveItemIndex","chipBlurChanges","chipRemoveChanges","[class.mat-chip-list-disabled]","[class.mat-chip-list-invalid]","[class.mat-chip-list-required]","MatChipInput","_addOnBlur","separatorKeyCodes","chipEnd","_chipList","_emitChipEnd","addOnBlur","_focus","chipList","CHIP_DECLARATIONS","ɵ0","useValue","MatChipsModule","ariaDescribedBy","autoFocus","matDialogAnimations","slideDialog","_elementFocusedBeforeDialogWasOpened","_state","throwMatDialogContentAlreadyAttachedError","_savePreviouslyFocusedElement","toFocus","_onAnimationStart","MatAnchor","MatButton","MatButtonToggleGroupBase","_MatButtonToggleGroupMixinBase","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MatButtonToggleGroup","MatButtonToggleGroupMultiple","_uniqueIdCounter","MatButtonToggleChange","_buttonToggles","_syncButtonToggle","_isSelected","_isPrechecked","_rawValue","[class.mat-button-toggle-vertical]","MatButtonToggle","MatButtonToggleBase","_MatButtonToggleMixinBase","toggleGroup","_isSingleSelector","buttonToggleGroup","[class.mat-button-toggle-standalone]","[class.mat-button-toggle-checked]","[class.mat-button-toggle-disabled]","MatButtonToggleModule","MatCardContent","MatCardTitle","MatCardSubtitle","align","[class.mat-card-actions-align-end]","MatCardActions","MatCardFooter","MatCardImage","MatCardSmImage","MatCardMdImage","MatCardLgImage","MatCardXlImage","MatCardAvatar","MatCard","MatCardHeader","MatCardTitleGroup","MatCardModule","MatCheckboxChange","MatCheckboxBase","_MatCheckboxMixinBase","_clickAction","_currentAnimationClass","_currentCheckState","TransitionCheckState","Init","_indeterminate","changed","_transitionCheckState","Indeterminate","Checked","Unchecked","_getAriaChecked","newState","oldState","_getAnimationClassForCheckStateTransition","_removeFocusRipple","_onInteractionEvent","animSuffix","MatAutocompleteTrigger","_setTriggerValue","_resetActiveItem","_closeKeyEventStream","activeOption","prevActiveItem","autocomplete","TAB","_canOpen","openPanel","_scrollToOption","_handleInput","_previousValue","_attachOverlay","_floatLabel","shouldAnimate","floatLabel","_animateAndLockLabel","_manuallyFloatingLabel","_resetLabel","newScrollPosition","_getScrollTop","_setScrollTop","_subscribeToClosingActions","firstStable","_zone","optionChanges","_positionStrategy","reapplyLastPosition","_setVisibility","panelClosingActions","_setValueAndClose","_destroyPanel","closePanel","toDisplay","inputValue","_control","_clearPreviousSelectedOption","_emitSelectEvent","getMatAutocompleteMissingPanelError","_getHostWidth","_viewportSubscription","_closingActionsSubscription","wasOpen","_isOpen","_overlayAttached","_getConnectedElement","autoActiveFirstOption","readOnly","aria-autocomplete","(focusin)","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","Host","MatAutocomplete","MatAutocompleteModule","MatBadge","_color","_overlap","val","_updateTextContent","_description","newDescription","_updateHostAriaDescription","_hidden","isAfter","description","_badgeElement","_createBadgeElement","badgeElement","oldDescription","colorPalette","[class.mat-badge-overlap]","[class.mat-badge-above]","[class.mat-badge-below]","[class.mat-badge-before]","[class.mat-badge-after]","[class.mat-badge-small]","[class.mat-badge-medium]","[class.mat-badge-large]","[class.mat-badge-hidden]","overlap","hidden","MatBadgeModule","MAT_BOTTOM_SHEET_DATA","MatBottomSheetConfig","MatBottomSheetRef","bottomSheetConfig","_keydownEvents","matBottomSheetAnimations","bottomSheetState","MatBottomSheetContainer","breakpointObserver","_elementFocusedBeforeOpened","_breakpointSubscription","Medium","Large","XLarge","_toggleClass","isMatched","_validatePortalAttached","_setPanelClass","(@state.start)","FocusTrapFactory","MatBottomSheet","_parentBottomSheet","_bottomSheetRefAtThisLevel","_openedBottomSheetRef","_attachContainer","ref","bottomSheetRef","scrollStrategies","block","MatBottomSheetModule","DEFAULT_ROUND_BUTTON_COLOR","DEFAULT_FLAT_BUTTON_COLOR","BUTTON_HOST_ATTRIBUTES","MatButtonBase","_MatButtonMixinBase","_isRoundButton","_hasHostAttributes","_isIconButton","BUTTON_HOST_ATTRIBUTES_1","attributes","attribute","focusMonitor","stopImmediatePropagation","_emitSelectionChangeEvent","setActiveStyles","_active","setInactiveStyles","ngAfterViewChecked","_mostRecentViewValue","MatOptionSelectionChange","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[class.mat-option-disabled]","MAT_LABEL_GLOBAL_OPTIONS","MatError","matFormFieldAnimations","transitionMessages","[class.mat-right]","MatHint","MatLabel","MatPlaceholder","MatPrefix","MatSuffix","MatFormFieldBase","_MatFormFieldMixinBase","MAT_FORM_FIELD_DEFAULT_OPTIONS","labelOptions","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_outlineGapWidth","_outlineGapStart","_initialGapCalculated","_labelOptions","float","_appearance","appearance","_hideRequiredMarker","_processHints","_connectionContainerRef","_validateControlChild","_validatePlaceholders","_syncDescribedByIds","valueChanges","_prefixChildren","_suffixChildren","_hintChildren","_errorChildren","updateOutlineGap","_shouldForward","prop","_hasPlaceholder","_placeholderChild","_hasLabel","_labelChild","_shouldLabelFloat","_canLabelFloat","shouldLabelFloat","_shouldAlwaysFloat","_hideControlPlaceholder","_hasFloatingLabel","_getDisplayedMessages","errorState","fromEvent","_label","getMatFormFieldPlaceholderConflictError","_validateHints","startHint_1","endHint_1","hint","hintLabel","getMatFormFieldDuplicatedHintError","startHint","endHint","getMatFormFieldMissingControlError","documentElement","containerStart","_getStartEnd","labelStart","labelWidth","outlineGapPadding","rect","[class.mat-form-field-appearance-standard]","[class.mat-form-field-appearance-fill]","[class.mat-form-field-appearance-outline]","[class.mat-form-field-appearance-legacy]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","[class.mat-form-field-should-float]","[class.mat-form-field-hide-placeholder]","[class.mat-form-field-disabled]","[class.mat-form-field-autofilled]","[class.mat-focused]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","hideRequiredMarker","underlineRef","_inputContainerRef","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","MatAutocompleteBase","_MatAutocompleteMixinBase","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","defaults","showPanel","optionSelected","_autoActiveFirstOption","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","_componentDestroyed","optionSelections","_outsideClickStream","clickTarget","formField","__extends","d","__","constructor","extendStatics","MATERIAL_SANITY_CHECKS_FACTORY","base","class_1","defaultColor","_disableRipple","defaultTabIndex","matcher","_pendingSubscribers","Observable","subscriber","_notifySubscriber","MAT_DATE_LOCALE_FACTORY","inject","LOCALE_ID","range","valueFunction","valuesArray","enforceStyleRecalculation","window","getPropertyValue","distanceToFurthestCorner","distX","distY","sqrt","optionsArray","groups","groupCounter","optionOffset","currentScrollPosition","optionHeight","reposition","defaultOptions","provider","exp","match","parentRegistry","httpClient","sanitizer","scrollThrottle","parentIntl","sortOrder","setPrototypeOf","__proto__","__assign","assign","s","n","SHARP_CURVE","MATERIAL_SANITY_CHECKS","_sanityChecksEnabled","_hasDoneGlobalChecks","_hasCheckedHammer","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_isTestEnv","doctype","testElement","body","computedStyle","_checkHammerIsAvailable","BidiModule","MAT_DATE_LOCALE","MAT_DATE_LOCALE_PROVIDER","_localeChanges","setLocale","locale","second","firstValid","secondValid","SUPPORTS_INTL_API","Intl","DEFAULT_MONTH_NAMES","short","String","DEFAULT_DATE_NAMES","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","NativeDateAdapter","matDateLocale","useUtcForDisplay","_clampDate","getFullYear","getDay","dtf_1","DateTimeFormat","timeZone","_stripDirectionalityCharacters","_format","Date","dtf_2","day","dtf_3","weekday","dtf","_createDateWithOverflow","clone","displayFormat","setFullYear","toDateString","years","months","newDate","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","test","isNaN","getTime","NaN","UTC","getHours","getMinutes","getSeconds","getMilliseconds","MAT_NATIVE_DATE_FORMATS","NativeDateModule","MatNativeDateModule","ShowOnDirtyErrorStateMatcher","dirty","submitted","touched","MAT_HAMMER_OPTIONS","_hammerOptions","commonModule","_hammer","Hammer","events","buildHammer","mc","pan","Pan","swipe","Swipe","press","Press","slide","_createRecognizer","threshold","longpress","time","recognizeWith","inheritances","recognizer","HammerGestureConfig","MatLine","_setLineClass","count","_resetClasses","_setClass","isAdd","RippleRef","_renderer","RippleState","HIDDEN","fadeOutRipple","defaultRippleAnimationConfig","enterDuration","exitDuration","ignoreMouseEventsTimeout","_target","_isPointerDown","_triggerEvents","_activeRipples","_eventOptions","supportsPassiveEventListeners","passive","onMousedown","isSyntheticEvent","_lastTouchStartEvent","now","rippleDisabled","fadeInRipple","onTouchStart","touches","onPointerUp","VISIBLE","FADING_IN","_containerElement","containerRect","_containerRect","animationConfig","centered","radius","transitionDuration","rippleRef","_mostRecentTransientRipple","runTimeoutOutsideZone","isMostRecentTransientRipple","wasActive","rippleEl","FADING_OUT","fadeOutAll","_triggerElement","_globalOptions","_rippleRenderer","_setupTriggerEventsIfEnabled","_trigger","configOrX","[class.mat-ripple-unbounded]","ANIMATION_MODULE_TYPE","unbounded","[class.mat-pseudo-checkbox-indeterminate]","[class.mat-pseudo-checkbox-checked]","[class.mat-pseudo-checkbox-disabled]","MatPseudoCheckbox","MatOptgroupBase","_MatOptgroupMixinBase","_uniqueOptgroupIdCounter","_labelId","[class.mat-optgroup-disabled]","_parent"],"mappings":";;;;;;;6+D8JoBA,SAAgB4rF,GAAUC,EAAGzwE,GAEzB,QAAS0wE,KAAOxrF,KAAKyrF,YAAcF,EADnCG,GAAcH,EAAGzwE,GAEjBywE,EAAElrF,UAAkB,OAANya,EAAa3V,OAAOknB,OAAOvR,IAAM0wE,EAAGnrF,UAAYya,EAAEza,UAAW,GAAImrF,ICJnF,QAAAG,KACE,OAAO,ECFT,QAAAtgF,GAAyDugF,GACvD,MAAF,UAAA3nF,GAMI,QAAJ4nF,KAAA,IAAgB,GAAhB7pF,MAAA2lD,EAAA,EAAgBA,EAAhBlxC,UAAAjV,OAAgBmmD,IAAA3lD,EAAhB2lD,GAAAlxC,UAAAkxC,EAAI,IAAJ3jD,GAAAC,EAAAyD,MAAA1H,KAA2CgC,IAA3ChC,WALAgE,GAAAy7B,WAAiC,IApBjC,MAmBuBv6B,GAAvB2mF,EAAA5nF,GAGIkB,OAAJC,eAAQymF,EAARxrF,UAAA,gBAAI,WAAiB,MAAOL,MAAKy/B,eAC7B,SAAap6B,GAAcrF,KAAKy/B,UAAYn6B,EAAAA,sBAAsBD,oCAvBtEwmF,GAmBuBD,GCOvB,QAAA/nF,GAAiE+nF,EAC7DE,GACF,MAAF,UAAA7nF,GAmBI,QAAJ4nF,KAAA,IAAgB,GAAhB7pF,MAAA2lD,EAAA,EAAgBA,EAAhBlxC,UAAAjV,OAAgBmmD,IAAA3lD,EAAhB2lD,GAAAlxC,UAAAkxC,EAAI,IAAJ3jD,GAAAC,EAAAyD,MAAA1H,KACegC,IADfhC,WAIMgE,GAAKi4C,MAAQ6vC,IAnDnB,MA4BuB5mF,GAAvB2mF,EAAA5nF,GAGIkB,OAAJC,eAAQymF,EAARxrF,UAAA,aAAI,WAA4B,MAAOL,MAAK0/E,YACxC,SAAUr6E,GACR,GAAMm7E,GAAen7E,GAASymF,CAE1BtL,KAAiBxgF,KAAK0/E,SACpB1/E,KAAK0/E,QACP1/E,KAAKW,YAAYF,cAAcgF,UAAUC,OAAO,OAAO1F,KAAK0/E,QAE1Dc,GACFxgF,KAAKW,YAAYF,cAAcgF,UAAUG,IAAI,OAAO46E,GAGtDxgF,KAAK0/E,OAASc,oCA3CtBqL,GA4BuBD,GCVvB,QAAA9nF,GAA8D8nF,GAE5D,MAAF,UAAA3nF,GAOI,QAAJ4nF,KAAA,IAAgB,GAAhB7pF,MAAA2lD,EAAA,EAAgBA,EAAhBlxC,UAAAjV,OAAgBmmD,IAAA3lD,EAAhB2lD,GAAAlxC,UAAAkxC,EAAI,IAAJ3jD,GAAAC,EAAAyD,MAAA1H,KAA2CgC,IAA3ChC,WANAgE,GAAA+nF,gBAAsC,IArBtC,MAoBuB7mF,GAAvB2mF,EAAA5nF,GAIIkB,OAAJC,eAAQymF,EAARxrF,UAAA,qBAAI,WAAsB,MAAOL,MAAK+rF,oBAClC,SAAkB1mF,GAAcrF,KAAK+rF,eAAiBzmF,EAAAA,sBAAsBD,oCAzBhFwmF,GAoBuBD,GCFvB,QAAAxgF,GAAiEwgF,EAASI,GAExE,WAFF,KAAAA,IAA0EA,EAA1E,GAEA,SAAA/nF,GASI,QAAJ4nF,KAAA,IAAgB,GAAhB7pF,MAAA2lD,EAAA,EAAgBA,EAAhBlxC,UAAAjV,OAAgBmmD,IAAA3lD,EAAhB2lD,GAAAlxC,UAAAkxC,EAAI,IAAJ3jD,GAAAC,EAAAyD,MAAA1H,KACegC,IADfhC,WARAgE,GAAAuwE,UAAgCyX,IArBhC,MAoBuB9mF,GAAvB2mF,EAAA5nF,GAGIkB,OAAJC,eAAQymF,EAARxrF,UAAA,gBAAI,WAAyB,MAAOL,MAAK8I,UAAY,EAAI9I,KAAKu0E,eAC1D,SAAalvE,GAEXrF,KAAKu0E,UAAqB,MAATlvE,EAAgBA,EAAQ2mF,mCA1B/CH,GAoBuBD,GCavB,QAAA10C,GAAsE00C,GAEpE,MAAF,UAAA3nF,GAyBI,QAAJ4nF,KAAA,IAAgB,GAAhB7pF,MAAA2lD,EAAA,EAAgBA,EAAhBlxC,UAAAjV,OAAgBmmD,IAAA3lD,EAAhB2lD,GAAAlxC,UAAAkxC,EAAI,IAAJ3jD,GAAAC,EAAAyD,MAAA1H,KACegC,IADfhC,WAvBAgE,GAAA6jF,YAA0B,EAM1B7jF,EAAAi1C,aAA4B,GAAIrvC,GAAAA,UA3ChC,MAmCuB1E,GAAvB2mF,EAAA5nF,GAYI4nF,EAAJxrF,UAAAq5C,iBAAI,WACE,GAAMkiC,GAAW57E,KAAK6nF,WAChBp+D,EAASzpB,KAAK+2C,kBAAoB/2C,KAAK82C,YACvCm1C,EAAUjsF,KAAK8lC,mBAAqB9lC,KAAK62C,0BACzC5gC,EAAUjW,KAAKg3C,UAAYh3C,KAAKg3C,UAAgC,QAAG,KACnE2kC,EAAWsQ,EAAQj2E,aAAaC,EAASwT,EAE3CkyD,KAAaC,IACf57E,KAAK6nF,WAAalM,EAClB37E,KAAKi5C,aAAaruC,SAxD1BihF,GAmCuBD,GCHvB,QAAAt+D,GAA4Ds+D,GAE1D,MAAF,UAAA3nF,GAyBI,QAAJ4nF,KAAA,IAAgB,GAAhB7pF,MAAA2lD,EAAA,EAAgBA,EAAhBlxC,UAAAjV,OAAgBmmD,IAAA3lD,EAAhB2lD,GAAAlxC,UAAAkxC,EAAI,IAAJ3jD,GAAAC,EAAAyD,MAAA1H,KAA2CgC,IAA3ChC,WAvBAgE,GAAAu7B,gBAAqB,EAOrBv7B,EAAAkoF,uBAMAloF,EAAAiY,YAAkB,GAAIkwE,GAAAA,WAAiB,SAAAC,GAG7BpoF,EAAKu7B,eACPv7B,EAAKqoF,kBAAkBD,GAEvBpoF,EAAwB,oBAAE6O,KAAKu5E,OAvDvC,MAkCuBlnF,GAAvB2mF,EAAA5nF,GAgCI4nF,EAAJxrF,UAAAuuB,iBAAI,WACE,GAAI5uB,KAAKu/B,eACP,KAAM3W,OAAM,wFAId5oB,MAAKu/B,gBAAiB,EAEtBv/B,KAAwB,oBAAEyG,QAAQzG,KAAKqsF,mBACvCrsF,KAAKksF,oBAAsB,MAI7BL,EAAJxrF,UAAAgsF,kBAAI,SAAkBD,GAChBA,EAAWxhF,OACXwhF,EAAWvhF,YAjFjBghF,GAkCuBD,GChBvB,QAAAU,KACE,MAAOC,GAAAA,OAAOC,EAAAA,WC+BhB,QAAAC,GAAkBjrF,EAAgBkrF,GAEhC,IAAK,GADCC,GAAclkE,MAAMjnB,GACjBwG,EAAI,EAAGA,EAAIxG,EAAQwG,IAC1B2kF,EAAY3kF,GAAK0kF,EAAc1kF,EAEjC,OAAO2kF,GC6PT,QAAAC,GAAmC9iF,GAIjC+iF,OAAOhzC,iBAAiB/vC,GAASgjF,iBAAiB,WAMpD,QAAAC,GAAkC7xD,EAAWE,EAAW4tD,GACtD,GAAMgE,GAAQjnF,KAAKG,IAAIH,KAAKs6C,IAAInlB,EAAI8tD,EAAKhrE,MAAOjY,KAAKs6C,IAAInlB,EAAI8tD,EAAK/8D,QAC5DghE,EAAQlnF,KAAKG,IAAIH,KAAKs6C,IAAIjlB,EAAI4tD,EAAK78D,KAAMpmB,KAAKs6C,IAAIjlB,EAAI4tD,EAAK58D,QACjE,OAAOrmB,MAAKmnF,KAAKF,EAAQA,EAAQC,EAAQA,kCxBvDvC,IAAJ,GALAE,GAAA10C,EAAAh3C,UAG2B2rF,EAA3B9nD,EAAA7jC,UACQ4rF,EAAe,EACvBrlF,EAAiB,EAAjBA,EAAA8/C,EAAA,EAAA9/C,IACAmlF,EAAQnlF,GAARuuC,OAAoB42C,EAApBnlF,GAAAuuC,QAAA62C,EAAAC,IAEAA,GAGA,OAAAA,GAGA,MAAA,gCAcA,OAAAC,GAAAC,EAEAD,EAGIA,EAAJE,EAAAD,EAAA/uC,EACAz4C,KAAAG,IAAA,EAAAonF,EAAA9uC,EAAAgvC,GAGAD,EyBjSA,QAAAvF,KACE,MAAOp/D,OAAM,gEAIf,QAAA0/D,GAAmDxO,GACjD,MAAOlxD,OAAM,4CAA2CkxD,EAA1D,QAIA,QAAA2O,KACE,MAAO7/D,OAAM,sDZiDf,QAAA+hE,KACE,OAAQ3L,uBAAuB,G5IFjC,QAAAgM,KACE,GAAM/hD,GAAUsjD,EAAAA,OAAO3/D,EAAAA,QACvB,OAAO,YAAM,MAAAqc,GAAQ+5C,iBAAiByK,cAgBxC,QAAAjP,KACE,MAAO51D,OAAM,6M6H6Ef,QAAA2/C,GAA8B1+C,GAC5B,MAAFM,OAAa,GAAIm3D,IAA2Bz3D,GpC9H5C,QAAAiuD,KACE,KAAMlvD,OAAM,yEEWd,QAAA6+C,KACE,GAAMx+B,GAAUsjD,EAAAA,OAAO3/D,EAAAA,QACvB,OAAO,YAAM,MAAAqc,GAAQ+5C,iBAAiBC,SAIxC,QAAAtb,GAA4D1+B,GAE1D,MAAO,YAAM,MAAAA,GAAQ+5C,iBAAiBC,SA+SxC,QAAA1a,GACI1+C,EAA0B6jE,GAC5B,MAAFvjE,OAAaujE,EAAmB7jE,GCxOhC,QAAAsgD,GAA0BrgE,EAAqBs+D,GAG7C,IAFA,GAAI3+C,GAA6B3f,EAAQrJ,cAAcgpE,cAEhDhgD,IAAWA,EAAOhkB,UAAU0J,SAAS,yBAC1Csa,EAASA,EAAOggD,aAGlB,OAAOhgD,GAAS2+C,EAAY39D,KAAK,SAAAw+D,GAAU,MAAAA,GAAOh7C,KAApD,EAAmEA,KAAM,K6DlIzE,QAAA0+C,GAAgD7qE,GAC9C,MAAO8mB,OAAM,eAAe9mB,EAA9B,mCCDA,QAAAg8D,GAA2C6vB,GACzC,MAAO/kE,OACH,wCAAwC+kE,EAD9C,0JlEoDA,QAAA7qB,MACE,GAAM75B,GAAUsjD,EAAAA,OAAO3/D,EAAAA,QACvB,OAAO,YAAM,MAAAqc,GAAQ+5C,iBAAiByK,cmEpDxC,QAAAxzB,IAA+B50D,GAC7B,MAAO,IAAGA,GAAS,IAOrB,QAAAgwD,IAA+BhwD,GAC7B,MAAwB,gBAAVA,GAAqBqG,SAASrG,EAAO,IAAMA,E1E8P3D,QAAA2yD,IAAc41B,GAAuB,MAAO,QAAQA,EAApD,IAIA,QAAAn2B,IAAwBpyD,GACtB,MAAQA,GAAMwoF,MAAM,aAAgBxoF,EAAQA,EAAQ,Kf5PtD,QAAAi3D,IAA4ClT,GAC1C,MAAOxgC,OAAM,sCAAsCwgC,EAArD,KASA,QAAAc,MACE,MAAOthC,OAAM,8JAWf,QAAA2hC,IAAmD7B,GACjD,MAAO9/B,OAAM,yHACkD8/B,EAAjE,MAQA,QAAA2S,IAAuDJ,GACrD,MAAOryC,OAAM,2HACkDqyC,EAAjE,MAihBA,QAAAzP,IACEsiC,EACAC,EACAC,EACAx/E,GACA,MAAOs/E,IAAkB,GAAIjlC,IAAgBklC,EAAYC,EAAWx/E,GAiBtE,QAAAutD,IAAkB/S,GAChB,MAAOA,GAAIQ,WAAU,GAIvB,QAAAyB,IAAiBF,EAAmBn1C,GAClC,MAAOm1C,GAAY,IAAMn1C,E0F/lB3B,QAAA2+B,MACE,KAAM3rB,OAAM,yKAYd,QAAAs8B,MACE,KAAMt8B,OAAM,oIASd,QAAAu8B,MACE,KAAMv8B,OAAM,kIrGgCd,QAAA+7B,MACE,OACE1S,gBAAgB,EAChB8C,UAAW,QACXnD,UAAW,QACX+C,cAAe,oCCrBnB,QAAAxC,MACE,GAAMlJ,GAAUsjD,EAAAA,OAAO3/D,EAAAA,QACvB,OAAO,YAAM,MAAAqc,GAAQ+5C,iBAAiByK,cqGzCxC,QAAAt0C,MACE,MAAOvwB,OAAM,iEASf,QAAAwzB,MACE,MAAOxzB,OAAM,sDAQf,QAAAwwB,MACE,MAAOxwB,OAAM,qC9K8Ff,QAAA8tB,IAA4DzN,GAE1D,MAAO,YAAM,MAAAA,GAAQ+5C,iBAAiByK,cCxExC,QAAAjjD,IAAkD5jC,GAChD,MAAOgiB,OAAM,qBAAqBhiB,EAApC,iBAWA,QAAA8/B,MACE,GAAMuC,GAAUsjD,EAAAA,OAAO3/D,EAAAA,QACvB,OAAO,YAAM,MAAAqc,GAAQ+5C,iBAAiByK,YAAYQ,eAAgBznD,MAiBpE,QAAAI,MACE,OACEM,UAAW,EACXC,UAAW,EACX4B,kBAAmB,MkEnCvB,QAAAsD,IAAoD6hD,GAClD,MAAOA,IAAc,GAAI/hD,uBG0CD,6BAAF,KAAxBjmC,IAA4CA,EAA5C,KAAAH,KAAAG,IAAAF,EAAAD,KAAAC,IAAAE,EAAAmd,IhBxDA,QAAAwhB,IAA8Cj+B,GAC5C,KAAMgiB,OAAM,iDAAgDhiB,EAA9D,OAeA,QAAA+6B,MACE,OAAO,ETvBT,QAAA3Y,MACE,MAAO,IAAI/C,IkI9Bb,QAAAmI,IAAgDH,GAC9C,MAAOrF,OAAM,kDAAkDqF,EAAjE,MAIA,QAAAsC,MACE,MAAO3H,OAAM,oFAIf,QAAAsF,MACE,MAAOtF,OAAM,oDAIf,QAAAiF,IAA6CjT,GAC3C,MAAOgO,OAAShO,EAAlB,qDhI0IA,QAAA8T,IAA+BhB,EACAc,GAC7B,GAAI2/D,IAA8B,MAAO,OAIzC,OAHa,QAATzgE,GAAmBygE,EAAU1zC,UAC5BjsB,GAAgB2/D,EAAUt7E,KAAK,IAE7Bs7E,EE5IT,QAAAt+D,IAAsDq+D,GACpD,MAAOA,IAAc,GAAIz+D,IlBC3B,QAAA/R,MAME,MALe,UAAC5T,GAAyB,OACvCkU,KAAMlU,GAAWA,EAAQoX,YAAc,GAAK,KAAO,IACnDjD,MAAOnU,GAAWA,EAAQlJ,aAAe,GAAK,KAAO,kO+HlBzD,GAAI8qF,IAAgBvmF,OAAOipF,iBACpBC,uBAA2B5lE,QAAS,SAAU8iE,EAAGzwE,GAAKywE,EAAE8C,UAAYvzE,IACvE,SAAUywE,EAAGzwE,GAAK,IAAK,GAAIoyB,KAAKpyB,GAAOA,EAAE4D,eAAewuB,KAAIq+C,EAAEr+C,GAAKpyB,EAAEoyB,KAQ9DohD,GAAWnpF,OAAOopF,QAAU,SAAkB1iB,GACrD,IAAK,GAAI2iB,GAAGxmF,EAAI,EAAGymF,EAAIh4E,UAAUjV,OAAQwG,EAAIymF,EAAGzmF,IAAK,CACjDwmF,EAAI/3E,UAAUzO,EACd,KAAK,GAAIklC,KAAKshD,GAAOrpF,OAAO9E,UAAUqe,eAAexa,KAAKsqF,EAAGthD,KAAI2+B,EAAE3+B,GAAKshD,EAAEthD,IAE9E,MAAO2+B,gCkB/BX,MAUAllD,GAAAC,eAA0B,8BAC1BD,EAAAM,mBAA8B,8BAC9BN,EAAAI,mBAA8B,4BAC9BJ,EAAA+nE,YAAuB,8BAbvB/nE,iCAAA,MAmBAF,GAAAC,QAAmB,QACnBD,EAAAO,SAAoB,QACpBP,EAAAK,QAAmB,QArBnBL,KjBaakoE,GAAyB,GAAIpxE,GAAAA,eAAwB,qBAChEC,WAAY,OACZC,QAASkuE,kBA+BT,QAAFt+E,GAAkEuhF,GAAA5uF,KAAlE4uF,qBAAkEA,EAXlE5uF,KAAA6uF,sBAAiC,EAGjC7uF,KAAA8uF,mBAA8B,EAG9B9uF,KAAAyO,UAA0C,gBAAbD,WAAyBA,SAAWA,SAAW,KAG5ExO,KAAA+uF,QAAsC,gBAAXlC,SAAuBA,OAASA,OAAS,KAG5D7sF,KAAKgvF,sBAAwBhvF,KAAK6uF,uBACpC7uF,KAAKivF,yBACLjvF,KAAKkvF,uBACLlvF,KAAK6uF,sBAAuB,GAlDlC,MAuDUxhF,GAAVhN,UAAA2uF,6BACI,MAAOhvF,MAAK4uF,sBAAwBjgF,EAAAA,cAAgB3O,KAAKmvF,cAInD9hF,EAAVhN,UAAA8uF,sBACI,MAAOnvF,MAAK+uF,UAAY/uF,KAAK+uF,QAAmB,WAAK/uF,KAAK+uF,QAAiB,UAGrE1hF,EAAVhN,UAAA4uF,kCACQjvF,KAAKyO,YAAczO,KAAKyO,UAAU2gF,SACpCxyC,QAAQC,KACN,yHAMExvC,EAAVhN,UAAA6uF,gCACI,GAAIlvF,KAAKyO,WAAyC,kBAArBorC,kBAAiC,CAC5D,GAAMw1C,GAAcrvF,KAAKyO,UAAU4hC,cAAc,MAEjDg/C,GAAY5pF,UAAUG,IAAI,2BAC1B5F,KAAKyO,UAAU6gF,KAAK/+C,YAAY8+C,EAEhC,IAAME,GAAgB11C,iBAAiBw1C,EAKnCE,IAA2C,SAA1BA,EAAc7/B,SACjC9S,QAAQC,KACN,sLAMJ78C,KAAKyO,UAAU6gF,KAAKviC,YAAYsiC,KAKpChiF,EAAFhN,UAAAmvF,wBAAE,YACMxvF,KAAK8uF,mBAAsB9uF,KAAK+uF,UAIhC/uF,KAAKgvF,sBAAwBhvF,KAAK+uF,QAAgB,QACpDnyC,QAAQC,KACN,wFAEJ78C,KAAK8uF,mBAAoB,mBA9E7BhtF,KAACoL,EAAAA,SAADlL,OACEmL,SAAUsiF,EAAAA,YACVhiF,SAAUgiF,EAAAA,oDAeZ3tF,SAAAgL,GAAA7J,aAAAnB,KAAeoB,EAAAA,WAAfpB,KAA2BiL,EAAAA,OAA3B/K,MAAkC2sF,SA9ClCthF,KOYaqiF,GAAkB,GAAInyE,GAAAA,eAAuB,mBACxDC,WAAY,OACZC,QAAS6uE,IAcEqD,IAA4B9+E,QAAS6+E,GAAiB5+E,YAAa07E,EAAAA,WAGhFn8B,GAAA,wBAMArwD,KAAA4vF,eAA6B,GAAIhmF,GAAAA,QArCjC,MAoCEzE,QAAFC,eAAMirD,EAANhwD,UAAA,qBAAE,WAAwC,MAAOL,MAAK4vF,gDAqLpDv/B,EAAFhwD,UAAA89D,YAAE,SAAY94D,GACV,MAAa,OAATA,GAAiBrF,KAAK2vD,eAAetqD,IAAUrF,KAAKovD,QAAQ/pD,GACvDA,EAEFrF,KAAKqW,WAOdg6C,EAAFhwD,UAAAwvF,UAAE,SAAUC,GACR9vF,KAAK8vF,OAASA,EACd9vF,KAAK4vF,eAAehlF,QAUtBylD,EAAFhwD,UAAA8kE,YAAE,SAAY1lB,EAAUswC,GACpB,MAAO/vF,MAAKo9D,QAAQ3d,GAASz/C,KAAKo9D,QAAQ2yB,IACtC/vF,KAAKm/D,SAAS1f,GAASz/C,KAAKm/D,SAAS4wB,IACrC/vF,KAAKg/D,QAAQvf,GAASz/C,KAAKg/D,QAAQ+wB,IAUzC1/B,EAAFhwD,UAAAivD,SAAE,SAAS7P,EAAiBswC,GACxB,GAAItwC,GAASswC,EAAQ,CACnB,GAAIC,GAAahwF,KAAKovD,QAAQ3P,GAC1BwwC,EAAcjwF,KAAKovD,QAAQ2gC,EAC/B,OAAIC,IAAcC,GACRjwF,KAAKmlE,YAAY1lB,EAAOswC,GAE3BC,GAAcC,EAEvB,MAAOxwC,IAASswC,GAWlB1/B,EAAFhwD,UAAA+9D,UAAE,SAAUrP,EAAS/oD,EAAgBE,GACjC,MAAIF,IAAOhG,KAAKmlE,YAAYpW,EAAM/oD,GAAO,EAChCA,EAELE,GAAOlG,KAAKmlE,YAAYpW,EAAM7oD,GAAO,EAChCA,EAEF6oD,GAxRXsB,KWwBaC,GAAmB,GAAI/yC,GAAAA,eAA+B,oBVV7D2yE,GAAmC,mBAARC,MAI3BC,IACJrhB,MACE,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAAU,YAC1E,UAAW,WAAY,YAEzBshB,OAAU,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OACvFrhB,QAAW,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,MAKpEqI,GAAqC,SAAArvE,GAAK,MAAAsoF,QAAOtoF,EAAI,IAA/CuoF,GAAqB9D,EAAM,GAAjCpV,IAIMmZ,IACJzhB,MAAS,SAAU,SAAU,UAAW,YAAa,WAAY,SAAU,YAC3EshB,OAAU,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OACpDrhB,QAAW,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,MASrCyhB,GACF,oGA+BF,QAAFC,GAAmDC,EAAuBjyD,GAAxE,GAAF16B,GACIC,EADJC,KAAAlE,OAAAA,WAFAgE,GAAA4sF,kBAA8B,EAI1B3sF,EAAJ5D,UAAUwvF,UAAV3rF,KAAAF,EAAoB2sF,GAGhB3sF,EAAK4sF,kBAAoBlyD,EAAS+Q,QAClCzrC,EAAK6sF,WAAanyD,EAAS+Q,SAAW/Q,EAAS8Q,OAnFnD,MA4DuCtqC,GAAvCwrF,EAAAzsF,GA0BEysF,EAAFrwF,UAAA+8D,QAAE,SAAQrO,GACN,MAAOA,GAAK+hC,eAGdJ,EAAFrwF,UAAA8+D,SAAE,SAASpQ,GACP,MAAOA,GAAKoQ,YAGduxB,EAAFrwF,UAAA2+D,QAAE,SAAQjQ,GACN,MAAOA,GAAKiQ,WAGd0xB,EAAFrwF,UAAAuvE,aAAE,SAAa7gB,GACX,MAAOA,GAAKgiC,UAGdL,EAAFrwF,UAAAq/D,cAAE,SAAcp3D,GAAd,GAAFtE,GAAAhE,IACI,IAAIkwF,GAAmB,CACrB,GAAMc,GAAM,GAAIb,MAAKc,eAAejxF,KAAK8vF,QAASnxB,MAAOr2D,EAAO4oF,SAAU,OAC1E,OAAOzE,GAAM,GAAI,SAAAzkF,GACb,MAAAhE,GAAKmtF,+BAA+BntF,EAAKotF,QAAQJ,EAAK,GAAIK,MAAK,KAAMrpF,EAAG,OAE9E,MAAOooF,IAAoB9nF,IAG7BooF,EAAFrwF,UAAA0vE,aAAE,WAAA,GAAF/rE,GAAAhE,IACI,IAAIkwF,GAAmB,CACrB,GAAMoB,GAAM,GAAInB,MAAKc,eAAejxF,KAAK8vF,QAASyB,IAAK,UAAWL,SAAU,OAC5E,OAAOzE,GAAM,GAAI,SAAAzkF,GAAK,MAAAhE,GAAKmtF,+BACvBntF,EAAKotF,QAAQE,EAAK,GAAID,MAAK,KAAM,EAAGrpF,EAAI,OAE9C,MAAOuoF,KAGTG,EAAFrwF,UAAAuuE,kBAAE,SAAkBtmE,GAAlB,GAAFtE,GAAAhE,IACI,IAAIkwF,GAAmB,CACrB,GAAMsB,GAAM,GAAIrB,MAAKc,eAAejxF,KAAK8vF,QAAS2B,QAASnpF,EAAO4oF,SAAU,OAC5E,OAAOzE,GAAM,EAAG,SAAAzkF,GAAK,MAAAhE,GAAKmtF,+BACtBntF,EAAKotF,QAAQI,EAAK,GAAIH,MAAK,KAAM,EAAGrpF,EAAI,OAE9C,MAAOwoF,IAA0BloF,IAGnCooF,EAAFrwF,UAAAm/D,YAAE,SAAYzQ,GACV,GAAImhC,GAAmB,CACrB,GAAMwB,GAAM,GAAIvB,MAAKc,eAAejxF,KAAK8vF,QAAS9yB,KAAM,UAAWk0B,SAAU,OAC7E,OAAOlxF,MAAKmxF,+BAA+BnxF,KAAKoxF,QAAQM,EAAK3iC,IAE/D,MAAOuhC,QAAOtwF,KAAKo9D,QAAQrO,KAG7B2hC,EAAFrwF,UAAAquE,kBAAE,WAEE,MAAO,IAGTgiB,EAAFrwF,UAAA0+D,kBAAE,SAAkBhQ,GAChB,MAAO/uD,MAAKg/D,QAAQh/D,KAAK2xF,wBACrB3xF,KAAKo9D,QAAQrO,GAAO/uD,KAAKm/D,SAASpQ,GAAQ,EAAG,KAGnD2hC,EAAFrwF,UAAAuxF,MAAE,SAAM7iC,GACJ,MAAO/uD,MAAKw9D,WAAWx9D,KAAKo9D,QAAQrO,GAAO/uD,KAAKm/D,SAASpQ,GAAO/uD,KAAKg/D,QAAQjQ,KAG/E2hC,EAAFrwF,UAAAm9D,WAAE,SAAWR,EAAc2B,EAAe5P,GAGtC,GAAI4P,EAAQ,GAAKA,EAAQ,GACvB,KAAM/1C,OAAM,wBAAwB+1C,EAA1C,6CAGI,IAAI5P,EAAO,EACT,KAAMnmC,OAAM,iBAAiBmmC,EAAnC,oCAGI,IAAI3Q,GAASp+C,KAAK2xF,wBAAwB30B,EAAM2B,EAAO5P,EAEvD,IAAI3Q,EAAO+gB,YAAcR,EACvB,KAAM/1C,OAAM,iBAAiBmmC,EAAnC,2BAAkE4P,EAAlE,KAGI,OAAOvgB,IAGTsyC,EAAFrwF,UAAA29D,MAAE,WACE,MAAO,IAAIqzB,OAGbX,EAAFrwF,UAAA4uD,MAAE,SAAM5pD,GAGJ,MAAoB,gBAATA,GACF,GAAIgsF,MAAKhsF,GAEXA,EAAQ,GAAIgsF,MAAKA,KAAKpiC,MAAM5pD,IAAU,MAG/CqrF,EAAFrwF,UAAAovD,OAAE,SAAOV,EAAY8iC,GACjB,IAAK7xF,KAAKovD,QAAQL,GAChB,KAAMnmC,OAAM,iDAGd,IAAIsnE,GAAmB,CAGjBlwF,KAAK6wF,aAAe9hC,EAAK+hC,cAAgB,GAAK/hC,EAAK+hC,cAAgB,QACrE/hC,EAAO/uD,KAAK4xF,MAAM7iC,GAClBA,EAAK+iC,YAAY/rF,KAAKG,IAAI,EAAGH,KAAKC,IAAI,KAAM+oD,EAAK+hC,kBAGnDe,EAAN1nE,MAA0B0nE,GAAeX,SAAU,OAE7C,IAAMQ,GAAM,GAAIvB,MAAKc,eAAejxF,KAAK8vF,OAAQ+B,EACjD,OAAO7xF,MAAKmxF,+BAA+BnxF,KAAKoxF,QAAQM,EAAK3iC,IAE/D,MAAO/uD,MAAKmxF,+BAA+BpiC,EAAKgjC,iBAGlDrB,EAAFrwF,UAAA++D,iBAAE,SAAiBrQ,EAAYijC,GAC3B,MAAOhyF,MAAKk/D,kBAAkBnQ,EAAc,GAARijC,IAGtCtB,EAAFrwF,UAAA6+D,kBAAE,SAAkBnQ,EAAYkjC,GAC5B,GAAIC,GAAUlyF,KAAK2xF,wBACf3xF,KAAKo9D,QAAQrO,GAAO/uD,KAAKm/D,SAASpQ,GAAQkjC,EAAQjyF,KAAKg/D,QAAQjQ,GAUnE,OAJI/uD,MAAKm/D,SAAS+yB,MAAclyF,KAAKm/D,SAASpQ,GAAQkjC,GAAU,GAAK,IAAM,KACzEC,EAAUlyF,KAAK2xF,wBAAwB3xF,KAAKo9D,QAAQ80B,GAAUlyF,KAAKm/D,SAAS+yB,GAAU,IAGjFA,GAGTxB,EAAFrwF,UAAAo9D,gBAAE,SAAgB1O,EAAYojC,GAC1B,MAAOnyF,MAAK2xF,wBACR3xF,KAAKo9D,QAAQrO,GAAO/uD,KAAKm/D,SAASpQ,GAAO/uD,KAAKg/D,QAAQjQ,GAAQojC,IAGpEzB,EAAFrwF,UAAA+xF,UAAE,SAAUrjC,GACR,OACEA,EAAKsjC,iBACLryF,KAAKsyF,QAAQvjC,EAAKwjC,cAAgB,GAClCvyF,KAAKsyF,QAAQvjC,EAAKyjC,eAClB93C,KAAK,MAQTg2C,EAAFrwF,UAAA89D,YAAE,SAAY94D,GACV,GAAqB,gBAAVA,GAAoB,CAC7B,IAAKA,EACH,MAAO,KAIT,IAAIorF,GAAegC,KAAKptF,GAAQ,CAC9B,GAAI0pD,GAAO,GAAIsiC,MAAKhsF,EACpB,IAAIrF,KAAKovD,QAAQL,GACf,MAAOA,IAIb,MAAO9qD,GAAX5D,UAAiB89D,YAAjBj6D,KAAAlE,KAA6BqF,IAG3BqrF,EAAFrwF,UAAAsvD,eAAE,SAAe9yC,GACb,MAAOA,aAAew0E,OAGxBX,EAAFrwF,UAAA+uD,QAAE,SAAQL,GACN,OAAQ2jC,MAAM3jC,EAAK4jC,YAGrBjC,EAAFrwF,UAAAgW,QAAE,WACE,MAAO,IAAIg7E,MAAKuB,MAIVlC,EAAVrwF,UAAAsxF,wBAAA,SAAkC30B,EAAc2B,EAAe5P,GAC3D,GAAM3Q,GAAS,GAAIizC,MAAKr0B,EAAM2B,EAAO5P,EAOrC,OAHIiO,IAAQ,GAAKA,EAAO,KACtB5e,EAAO0zC,YAAY9xF,KAAKo9D,QAAQhf,GAAU,MAErCA,GAQDsyC,EAAVrwF,UAAAiyF,QAAA,SAAkB7D,GACd,OAAQ,KAAOA,GAAG1/E,OAAO,IAUnB2hF,EAAVrwF,UAAA8wF,+BAAA,SAAyCxnC,GACrC,MAAOA,GAAIhZ,QAAQ,kBAAmB,KAchC+/C,EAAVrwF,UAAA+wF,QAAA,SAAkBM,EAA0B3iC,GACxC,GAAMw8B,GAAI,GAAI8F,MAAKA,KAAKwB,IACpB9jC,EAAK+hC,cAAe/hC,EAAKoQ,WAAYpQ,EAAKiQ,UAAWjQ,EAAK+jC,WAC1D/jC,EAAKgkC,aAAchkC,EAAKikC,aAAcjkC,EAAKkkC,mBAC/C,OAAOvB,GAAIjiC,OAAO87B,mBAnQtBzpF,KAAC6qB,EAAAA,iDAkBD7qB,SAAAgL,GAAA7J,aAAAnB,KAAeoB,EAAAA,WAAfpB,KAA2BiL,EAAAA,OAA3B/K,MAAkC0tF,QArElC5tF,KAAQ+K,EAAAA,YARR6jF,GA4DuCrgC,IWjD1B6iC,IACXjkC,OACEf,UAAW,MAEbwB,SACExB,WAAY8O,KAAM,UAAW2B,MAAO,UAAW4yB,IAAK,WACpD5wB,gBAAiB3D,KAAM,UAAW2B,MAAO,SACzCuR,eAAgBlT,KAAM,UAAW2B,MAAO,OAAQ4yB,IAAK,WACrDzxB,oBAAqB9C,KAAM,UAAW2B,MAAO,sCCnBjD,sBAqBA78D,KAACoL,EAAAA,SAADlL,OACEmL,SAAUgnB,EAAAA,gBACVvjB,YACGC,QAASw/C,GAAansC,SAAUwsE,SAxBrCyC,KAgCA9b,GAAoD6b,+BAhCpD,sBA8BApxF,KAACoL,EAAAA,SAADlL,OACEmL,SAAUgmF,IACVviF,YAAaC,QAASy/C,GAAkBgnB,SAA1CD,SAhCA+b,iCCAA,MAcEC,GAAFhzF,UAAA2V,aAAE,SAAaC,EAA6BC,GACxC,SAAUD,GAAWA,EAAQI,UAAYJ,EAAQq9E,OAAUp9E,GAAQA,EAAKq9E,4BAH5EzxF,KAAC6qB,EAAAA,aAZD0mE,iCAAA,MAsBE98E,GAAFlW,UAAA2V,aAAE,SAAaC,EAA6BC,GACxC,SAAUD,GAAWA,EAAQI,UAAYJ,EAAQu9E,SAAYt9E,GAAQA,EAAKq9E,4BAH9EzxF,KAAC6qB,EAAAA,WAAD3qB,OAAawb,WAAY,8GApBzBjH,KCuBak9E,GAAqB,GAAIl2E,GAAAA,eAA8B,qCAiBlE,QAAF4G,GACoDuvE,EACpCC,GAFd,GAAF3vF,GAGIC,EAHJC,KAAAlE,OAAAA,WACoDgE,GAApD0vF,eAAoDA,EAbpD1vF,EAAA4vF,QAAoD,mBAAX/G,QAAyB,OAAgBgH,OAAS,KAG3F7vF,EAAA8vF,OAAqB9vF,EAAK4vF,SACtB,YACA,QACA,aACA,WACA,aACA,gBAOID,GACFA,EAAanE,4BA7CnB,MA2BmCtqF,GAAnCif,EAAAlgB,GAmCEkgB,EAAF9jB,UAAA0zF,YAAE,SAAYjqF,GACV,GAAMkqF,GAAK,GAAIh0F,MAAK4zF,QAAQ9pF,EAAS9J,KAAK0zF,oBAAkB5mF,IAGtDmnF,EAAM,GAAIj0F,MAAK4zF,QAAQM,IACvBC,EAAQ,GAAIn0F,MAAK4zF,QAAQQ,MACzBC,EAAQ,GAAIr0F,MAAK4zF,QAAQU,MAKzBC,EAAQv0F,KAAKw0F,kBAAkBP,GAAMzsF,MAAO,QAASitF,UAAW,GAAIN,GACpEO,EAAY10F,KAAKw0F,kBAAkBH,GAAQ7sF,MAAO,YAAamtF,KAAM,KAQ3E,OALAV,GAAIW,cAAcT,GAGlBH,EAAGpuF,KAAKuuF,EAAOE,EAAOJ,EAAKM,EAAOG,IAElC,GAIMvwE,EAAV9jB,UAAAm0F,kBAAA,SAA4B5I,EAAkBnzC,GAA9C,IAA4D,GAA5Do8C,MAAAltC,EAAA,EAA4DA,EAA5DlxC,UAAAjV,OAA4DmmD,IAAAktC,EAA5DltC,EAAA,GAAAlxC,UAAAkxC,EACI,IAAImtC,GAAa,GAAKlJ,GAAoC,YAAEnzC,EAK5D,OAHAo8C,GAAahiF,KAAK+4E,GAClBiJ,EAAapuF,QAAQ,SAAAwqC,GAAQ,MAAA6jD,GAAWF,cAAc3jD,KAE/C6jD,kBAlEXhzF,KAAC6qB,EAAAA,iDAeD7qB,SAAAgL,GAAA7J,aAAAnB,KAAKoB,EAAAA,WAALpB,KAAiBiL,EAAAA,OAAjB/K,MAAwByxF,QA/BxB3xF,KAAQuL,GAARpK,aAAAnB,KAgCKoB,EAAAA,cA1CLihB,GA2BmC4wE,EAAAA,iDC3BnC,sBAsBAjzF,KAACyK,EAAAA,UAADvK,OACEC,SAAU,wBACVU,MAAOC,MAAS,gBAxBlBoyF,KAgCAluC,GAAA,WACE,QAAFA,GAAsBC,EAAoCl1B,GAAxD,GAAF7tB,GAAAhE,IAAsBA,MAAtB+mD,OAAsBA,EAAoC/mD,KAA1D6xB,SAA0DA,EACtD7xB,KAAKi1F,cAAcj1F,KAAK+mD,OAAOvlD,QAE/BxB,KAAK+mD,OAAO9/C,QAAQC,UAAU,WAC5BlD,EAAKixF,cAAcjxF,EAAK+iD,OAAOvlD,UArCrC,MAyCUslD,GAAVzmD,UAAA40F,cAAA,SAAwBC,GACpBl1F,KAAKm1F,gBACS,IAAVD,GAAyB,IAAVA,EACjBl1F,KAAKo1F,UAAU,OAAOF,EAA5B,SAA0C,GAC3BA,EAAQ,GACjBl1F,KAAKo1F,UAAU,kBAAkB,IAI7BtuC,EAAVzmD,UAAA80F,yBACIn1F,KAAKo1F,UAAU,cAAc,GAC7Bp1F,KAAKo1F,UAAU,cAAc,GAC7Bp1F,KAAKo1F,UAAU,kBAAkB,IAG3BtuC,EAAVzmD,UAAA+0F,UAAA,SAAoB/vC,EAAmBgwC,GAC/BA,EACFr1F,KAAK6xB,SAASpxB,cAAcgF,UAAUG,IAAIy/C,GAE1CrlD,KAAK6xB,SAASpxB,cAAcgF,UAAUC,OAAO2/C,IA5DnDyB,iCAAA,sBAkEAhlD,KAACoL,EAAAA,SAADlL,OACEmL,SAAUE,IACVI,SAAUunF,GAAS3nF,IACnBQ,cAAemnF,QArEjBvyC,iKCkBA,IAAA6yC,IAAA,WAKE,QAAFA,GACYC,EACDzrF,EACA+f,GAFC7pB,KAAZu1F,UAAYA,EACDv1F,KAAX8J,QAAWA,EACA9J,KAAX6pB,OAAWA,EALX7pB,KAAAmV,MAAuBqgF,GAAYC,OArBnC,MA8BEH,GAAFj1F,UAAAm2B,QAAE,WACEx2B,KAAKu1F,UAAUG,cAAc11F,OA/BjCs1F,KfoDaK,IACXC,cAAe,IACfC,aAAc,KAOVC,GAA2B,IASjCrjB,GAAA,WA+BE,QAAFA,GAAsBsjB,EACAtsF,EACR9H,EACA+8B,GAHZ,GAAF16B,GAAAhE,IAAsBA,MAAtB+1F,QAAsBA,EACA/1F,KAAtByJ,QAAsBA,EAxBtBzJ,KAAAg2F,gBAA2B,EAG3Bh2F,KAAAi2F,eAA2B,GAAIzoE,KAG/BxtB,KAAAk2F,eAA2B,GAAItlD,KAS/B5wC,KAAAm2F,gBAA0BC,EAAAA,kCAAoCC,SAAS,GA0JvEr2F,KAAAs2F,YAAwB,SAAC9uF,GACrB,GAAM+uF,GAAmBvyF,EAAKwyF,sBAC1BnF,KAAKoF,MAAQzyF,EAAKwyF,qBAAuBV,EAExC9xF,GAAK+xF,QAAQW,gBAAmBH,IACnCvyF,EAAKgyF,gBAAiB,EACtBhyF,EAAK2yF,aAAanvF,EAAM2zB,QAAS3zB,EAAM6zB,QAASr3B,EAAK+xF,QAAQnqF,gBAKnE5L,KAAA42F,aAAyB,SAACpvF,GACjBxD,EAAK+xF,QAAQW,iBAIhB1yF,EAAKwyF,qBAAuBnF,KAAKoF,MACjCzyF,EAAKgyF,gBAAiB,EAEtBhyF,EAAK2yF,aACDnvF,EAAMqvF,QAAQ,GAAG17D,QAAS3zB,EAAMqvF,QAAQ,GAAGx7D,QAASr3B,EAAK+xF,QAAQnqF,gBAK3E5L,KAAA82F,YAAwB,WACf9yF,EAAKgyF,iBAIVhyF,EAAKgyF,gBAAiB,EAGtBhyF,EAAKkyF,eAAezvF,QAAQ,SAAA4qE,GAG1B,GAAMzoC,GAAYyoC,EAAOl8D,QAAUqgF,GAAYuB,SAC7C1lB,EAAOxnD,OAAOhe,sBAAwBwlE,EAAOl8D,QAAUqgF,GAAYwB,WAEhE3lB,EAAOxnD,OAAO8M,YAAciS,GAC/ByoC,EAAO76C,cApLPkI,EAAS9vB,YACX5O,KAAKi3F,kBAAoBt1F,EAAWlB,cAGpCT,KAAKi2F,eAAexpE,IAAI,YAAazsB,KAAKs2F,aAC1Ct2F,KAAKi2F,eAAexpE,IAAI,UAAWzsB,KAAK82F,aACxC92F,KAAKi2F,eAAexpE,IAAI,aAAczsB,KAAK82F,aAE3C92F,KAAKi2F,eAAexpE,IAAI,aAAczsB,KAAK42F,cAC3C52F,KAAKi2F,eAAexpE,IAAI,WAAYzsB,KAAK82F,cApH/C,MA8HErkB,GAAFpyE,UAAAs2F,aAAE,SAAaz7D,EAAWE,EAAWvR,GAAnC,GAAF7lB,GAAAhE,SAAA,KAAA6pB,IAAqCA,KACjC,IAAMqtE,GAAgBl3F,KAAKm3F,eACLn3F,KAAKm3F,gBAAkBn3F,KAAKi3F,kBAAkB/5D,wBAC9Dk6D,EAAVjtE,MAAgCwrE,GAAiC9rE,EAAO7d,UAEhE6d,GAAOwtE,WACTn8D,EAAIg8D,EAAcl5E,KAAOk5E,EAAcj5E,MAAQ,EAC/Cmd,EAAI87D,EAAc/qE,IAAM+qE,EAAc3uF,OAAS,EAGjD,IAAM+uF,GAASztE,EAAOytE,QAAUvK,EAAyB7xD,EAAGE,EAAG87D,GACzDz7C,EAAUvgB,EAAIg8D,EAAcl5E,KAC5Bu3B,EAAUna,EAAI87D,EAAc/qE,IAC5B5G,EAAW6xE,EAAgBxB,eAAiB/rE,EAAO/d,aAAe,GAElEulE,EAAS7iE,SAAS6hC,cAAc,MACtCghC,GAAO5rE,UAAUG,IAAI,sBAErByrE,EAAO/oE,MAAM0V,KAAUy9B,EAAU67C,EAArC,KACIjmB,EAAO/oE,MAAM6jB,IAASopB,EAAU+hD,EAApC,KACIjmB,EAAO/oE,MAAMC,OAAqB,EAAT+uF,EAA7B,KACIjmB,EAAO/oE,MAAM2V,MAAoB,EAATq5E,EAA5B,KAGIjmB,EAAO/oE,MAAM3C,gBAAkBkkB,EAAOoyB,OAAS,KAC/Co1B,EAAO/oE,MAAMivF,mBAAwBhyE,EAAzC,KAEIvlB,KAAKi3F,kBAAkB1mD,YAAY8gC,GAInCub,EAA0Bvb,GAE1BA,EAAO/oE,MAAM8M,UAAY,UAGzB,IAAMoiF,GAAY,GAAIlC,IAAUt1F,KAAMqxE,EAAQxnD,EA2B9C,OAzBA2tE,GAAUriF,MAAQqgF,GAAYwB,UAG9Bh3F,KAAKk2F,eAAetwF,IAAI4xF,GAEnB3tE,EAAO8M,aACV32B,KAAKy3F,2BAA6BD,GAKpCx3F,KAAK03F,sBAAsB,WACzB,GAAMC,GAA8BH,IAAcxzF,EAAKyzF,0BAEvDD,GAAUriF,MAAQqgF,GAAYuB,QAMzBltE,EAAO8M,YAAgBghE,GAAgC3zF,EAAKgyF,gBAC/DwB,EAAUhhE,WAEXjR,GAEIiyE,GAIT/kB,EAAFpyE,UAAAq1F,cAAE,SAAc8B,GACZ,GAAMI,GAAY53F,KAAKk2F,eAAe5nE,OAAOkpE,EAY7C,IAVIA,IAAcx3F,KAAKy3F,6BACrBz3F,KAAKy3F,2BAA6B,MAI/Bz3F,KAAKk2F,eAAe35D,OACvBv8B,KAAKm3F,eAAiB,MAInBS,EAAL,CAIA,GAAMC,GAAWL,EAAU1tF,QACrBstF,EAAVjtE,MAAgCwrE,GAAiC6B,EAAU3tE,OAAO7d,UAE9E6rF,GAASvvF,MAAMivF,mBAAwBH,EAAgBvB,aAA3D,KACIgC,EAASvvF,MAAMke,QAAU,IACzBgxE,EAAUriF,MAAQqgF,GAAYsC,WAG9B93F,KAAK03F,sBAAsB,WACzBF,EAAUriF,MAAQqgF,GAAYC,OAC9BoC,EAAmB,WAAE9qC,YAAY8qC,IAChCT,EAAgBvB,gBAIrBpjB,EAAFpyE,UAAA03F,WAAE,WACE/3F,KAAKk2F,eAAezvF,QAAQ,SAAA4qE,GAAU,MAAAA,GAAO76C,aAI/Ci8C,EAAFpyE,UAAAmL,mBAAE,SAAmB1B,GAAnB,GAAF9F,GAAAhE,IACS8J,IAAWA,IAAY9J,KAAKg4F,kBAKjCh4F,KAAK+yE,uBAEL/yE,KAAKyJ,QAAQO,kBAAkB,WAC7BhG,EAAKiyF,eAAexvF,QAAQ,SAACwvB,EAAIn0B,GAC7B,MAAAgI,GAAQ69B,iBAAiB7lC,EAAMm0B,EAAIjyB,EAAKmyF,mBAG9Cn2F,KAAKg4F,gBAAkBluF,IAkDjB2oE,EAAVpyE,UAAAq3F,sBAAA,SAAgCzhE,EAAcsS,OAA9C,KAAAA,IAA8CA,EAA9C,GACIvoC,KAAKyJ,QAAQO,kBAAkB,WAAM,MAAAwb,YAAWyQ,EAAIsS,MAItDkqC,EAAFpyE,UAAA0yE,qBAAE,WAAA,GAAF/uE,GAAAhE,IACQA,MAAKg4F,iBACPh4F,KAAKi2F,eAAexvF,QAAQ,SAACwvB,EAAIn0B,GAC/BkC,EAAoB,gBAAEqkC,oBAAoBvmC,EAAMm0B,EAAIjyB,EAAKmyF,kBA7SjE1jB,KgBuDazlE,GACT,GAAIuQ,GAAAA,eAAoC,2CA+E1C,QAAF4a,GAAsBx3B,EACR4qE,EACA7sC,EAC+C/yB,EACIk4B,GAJ3C7jC,KAAtBW,YAAsBA,EAI2CX,KAAjE6jC,eAAiEA,EAtDjE7jC,KAAAs3F,OAA6C,EAS7Ct3F,KAAA8L,YAAuD,EAkBvD9L,KAAAy/B,WAA+B,EAqB/Bz/B,KAAAu/B,gBAAoC,EAQhCv/B,KAAKi4F,eAAiBtsF,MACtB3L,KAAKk4F,gBAAkB,GAAIzlB,IAAezyE,KAAMurE,EAAQ5qE,EAAa+9B,GA9IzE,MA2GAv5B,QAAAC,eAAM+yB,EAAN93B,UAAA,gBAAA,WAAmB,MAAOL,MAAKy/B,eAC7B,SAAap6B,GACXrF,KAAKy/B,UAAYp6B,EACjBrF,KAAKm4F,gEASThzF,OAAAC,eAAM+yB,EAAN93B,UAAA,eAAA,WAAkB,MAAOL,MAAKo4F,UAAYp4F,KAAKW,YAAYF,mBACzD,SAAYyU,GACVlV,KAAKo4F,SAAWljF,EAChBlV,KAAKm4F,gEAuBPhgE,EAAF93B,UAAAse,SAAE,WACE3e,KAAKu/B,gBAAiB,EACtBv/B,KAAKm4F,gCAGPhgE,EAAF93B,UAAA8G,YAAE,WACEnH,KAAKk4F,gBAAgBnlB,wBAIvB56C,EAAF93B,UAAA03F,WAAE,WACE/3F,KAAKk4F,gBAAgBH,cAIvB5yF,OAAFC,eAAM+yB,EAAN93B,UAAA,oBAAE,WACE,OACEg3F,SAAUr3F,KAAKq3F,SACfC,OAAQt3F,KAAKs3F,OACbr7C,MAAOj8C,KAAKi8C,MACZjwC,UAAmC,mBAAxBhM,KAAK6jC,gBACX+xD,cAAe,EAAGC,aAAc,GAA3C1rE,MACcnqB,KAAKi4F,eAAejsF,UAAchM,KAAKgM,WAC/CH,qBAAsB7L,KAAKi4F,eAAepsF,qBAC1CC,YAAa9L,KAAK8L,aAAe9L,KAAKi4F,eAAelsF,iBAAmB,qCAK5E5G,OAAFC,eAAM+yB,EAAN93B,UAAA,sBAAE,WACE,MAAOL,MAAK8I,YAAc9I,KAAKi4F,eAAenvF,0CAIxCqvB,EAAV93B,UAAA83F,yCACSn4F,KAAK8I,UAAY9I,KAAKu/B,gBACzBv/B,KAAKk4F,gBAAgB1sF,mBAAmBxL,KAAKkV,UAmBjDijB,EAAF93B,UAAAq2B,OAAE,SAAO2hE,EAAkCj9D,EAAevR,GACtD,WADJ,KAAAuR,IAA2CA,EAA3C,GAC6B,gBAAdi9D,GACFr4F,KAAKk4F,gBAAgBvB,aAAa0B,EAAWj9D,EAA1DjR,MAAiEnqB,KAAK4L,aAAiBie,IAE1E7pB,KAAKk4F,gBAAgBvB,aAAa,EAAG,EAAlDxsE,MAAyDnqB,KAAK4L,aAAiBysF,oBAlJ/Ev2F,KAACyK,EAAAA,UAADvK,OACEC,SAAU,4BACVgH,SAAU,YACVtG,MACEC,MAAS,aACT01F,+BAAgC,qDApDpCx2F,KAAEiP,EAAAA,aAIFjP,KAAEkJ,EAAAA,SAPFlJ,KAAQ+K,EAAAA,WAkIR/K,SAAAgL,GAAA7J,aAAAnB,KAAeoB,EAAAA,WAAfpB,KAA2BiL,EAAAA,OAA3B/K,MAAkCgL,QAClClL,SAAAgL,GAAA7J,aAAAnB,KAAeoB,EAAAA,WAAfpB,KAA2BiL,EAAAA,OAA3B/K,MAAkCu2F,EAAAA,8CAtElCt8C,QAAAn6C,KAAGuB,EAAAA,MAAHrB,MAAS,oBAGTw2F,YAAA12F,KAAGuB,EAAAA,MAAHrB,MAAS,wBAMTq1F,WAAAv1F,KAAGuB,EAAAA,MAAHrB,MAAS,uBAOTs1F,SAAAx1F,KAAGuB,EAAAA,MAAHrB,MAAS,qBAST8J,cAAAhK,KAAGuB,EAAAA,MAAHrB,MAAS,0BAMTgK,YAAAlK,KAAGuB,EAAAA,MAAHrB,MAAS,wBAMT8G,WAAAhH,KAAGuB,EAAAA,MAAHrB,MAAS,uBAYTkT,UAAApT,KAAGuB,EAAAA,MAAHrB,MAAS,uBAtHTm2B,iCCAA,sBAiBAr2B,KAACoL,EAAAA,SAADlL,OACEmL,SAAUE,GAAiB8mB,EAAAA,gBAC3B1mB,SAAU0qB,GAAW9qB,IACrBQ,cAAesqB,QApBjB5qB,gCCyCAvN,KAAAmV,MAA2C,YAG3CnV,KAAA8I,UAA+B,EAA/B,sBAnBAhH,KAACC,EAAAA,UAADC,OAAAK,cAAAC,EAAAA,kBAAAC,KACEC,gBAAiBC,EAAAA,wBAAnBC,OACET,SAAF,sBACEE,QAAF,g0BACED,SAAU,GACVS,MACFC,MAAA,sBACM61F,4CAAN,4BACIC,sCAAJ,sBACIC,uCAAJ,oFAUAC,iCC5CA,sBAYA92F,KAACoL,EAAAA,SAADlL,OACEyL,SAAUmrF,IACV/qF,cAAe+qF,QAdjBl2C,KCaAm2C,GAAA,yBAbA,MAAAA,MAcaC,GAAwBztF,EAAcwtF,IAG/CE,GAA2B,kFA2B/B/0F,GAAAg1F,SAAqB,sBAAsBD,OAH3C,MAFiC7zF,GAAjCqgC,EAAAthC,kBAjBAnC,KAACC,EAAAA,UAADC,OAAAC,SAAA,eACEgH,SAAU,cACV/G,SAAU,mIACVG,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,OACEN,QAAF,YACED,QAAF,ojBACEQ,MACFC,MAAA,eACM2N,KAAN,QACI0oF,gCAAJ,WACIzsF,uBAAJ,sBACI20C,yBAAJ,0DAOA5b,O5CRIkzC,GAAmB,EAGvB6L,GAAA,WACE,QAAFA,GAEW5vD,EAEAynB,sBAFAn8C,KAAX00B,OAAWA,EAEA10B,KAAXm8C,YAAWA,EAzCX,MAAAmoC,MAyDaxiC,GACT,GAAIvkC,GAAAA,eAAyC,6CA6D/C,QAAF6kC,GACYvwB,EACA/wB,EACiDo4F,EACpC3iD,GAHbv2C,KAAZ6xB,SAAYA,EACA7xB,KAAZc,mBAAYA,EACiDd,KAA7Dk5F,QAA6DA,EACpCl5F,KAAzBu2C,MAAyBA,EApCzBv2C,KAAAs/B,WAAsB,EACtBt/B,KAAAkkF,SAAoB,EACpBlkF,KAAAy/B,WAAsB,EACtBz/B,KAAAs5C,IAAgB,cAAcm/B,KAC9Bz4E,KAAAqkF,qBAAiC,GAuBjCrkF,KAAA24C,kBAAyC,GAAI9zC,GAAAA,aAG7C7E,KAAAytB,cAA2B,GAAI7jB,GAAAA,QAH/B,MApBEzE,QAAFC,eAAMg9C,EAAN/hD,UAAA,gBAAE,WAAiB,MAAOL,MAAKk5F,SAAWl5F,KAAKk5F,QAAQvzD,0CAGrDxgC,OAAFC,eAAMg9C,EAAN/hD,UAAA,UAAE,WAAmB,MAAOL,MAAKs5C,qCAG/Bn0C,OAAFC,eAAMg9C,EAAN/hD,UAAA,gBAAE,WAA0B,MAAOL,MAAKs/B,2CAOxCn6B,OAAAC,eAAMg9C,EAAN/hD,UAAA,gBAAA,WAAmB,MAAQL,MAAKu2C,OAASv2C,KAAKu2C,MAAMztC,UAAa9I,KAAKy/B,eACpE,SAAap6B,GAAcrF,KAAKy/B,UAAYn6B,EAAAA,sBAAsBD,oCAGlEF,OAAFC,eAAMg9C,EAAN/hD,UAAA,qBAAE,WAAsB,MAAOL,MAAKk5F,SAAWl5F,KAAKk5F,QAAQl4D,+CAoB1D77B,OAAFC,eAAMg9C,EAAN/hD,UAAA,cAAE,WACE,MAAOL,MAAKkkF,yCAOd/+E,OAAFC,eAAMg9C,EAAN/hD,UAAA,iBAAE,WAEE,OAAQL,KAAKoyB,kBAAkB7iB,aAAe,IAAIC;uFAIpD4yC,EAAF/hD,UAAAy8C,OAAE,WACE98C,KAAKs/B,WAAY,EACjBt/B,KAAKc,mBAAmBC,eACxBf,KAAKgkF,6BAIP5hC,EAAF/hD,UAAA28C,SAAE,WACEh9C,KAAKs/B,WAAY,EACjBt/B,KAAKc,mBAAmBC,eACxBf,KAAKgkF,6BAIP5hC,EAAF/hD,UAAA2gB,MAAE,WACE,GAAMlX,GAAU9J,KAAKoyB,iBAEQ,mBAAlBtoB,GAAQkX,OACjBlX,EAAQkX,SASZohC,EAAF/hD,UAAA4jF,gBAAE,WACOjkF,KAAKkkF,UACRlkF,KAAKkkF,SAAU,EACflkF,KAAKc,mBAAmBC,iBAS5BqhD,EAAF/hD,UAAA8jF,kBAAE,WACMnkF,KAAKkkF,UACPlkF,KAAKkkF,SAAU,EACflkF,KAAKc,mBAAmBC,iBAK5BqhD,EAAF/hD,UAAA8jD,SAAE,WACE,MAAOnkD,MAAKw6C,WAId4H,EAAF/hD,UAAAyhB,eAAE,SAAeta,GACTA,EAAMua,UAAYS,EAAAA,OAAShb,EAAMua,UAAYU,EAAAA,QAC/CziB,KAAKu7C,wBAGL/zC,EAAM6E,mBAQV+1C,EAAF/hD,UAAAk7C,sBAAE,WACOv7C,KAAK8I,WACR9I,KAAKs/B,WAAYt/B,KAAK2lC,WAAY3lC,KAAKs/B,UACvCt/B,KAAKc,mBAAmBC,eACxBf,KAAKgkF,2BAA0B,KAKnC5hC,EAAF/hD,UAAA2I,aAAE,WACE,MAAOhJ,MAAK8I,SAAW,KAAO,KAIhCs5C,EAAF/hD,UAAA+xB,gBAAE,WACE,MAAOpyB,MAAK6xB,SAASpxB,eAGvB2hD,EAAF/hD,UAAA+jF,mBAAE,WAME,GAAIpkF,KAAKs/B,UAAW,CAClB,GAAMkb,GAAYx6C,KAAKw6C,SAEnBA,KAAcx6C,KAAKqkF,uBACrBrkF,KAAKqkF,qBAAuB7pC,EAC5Bx6C,KAAKytB,cAAc7iB,UAKzBw3C,EAAF/hD,UAAA8G,YAAE,WACEnH,KAAKytB,cAAc5iB,YAIbu3C,EAAV/hD,UAAA2jF,0BAAA,SAAoC7nC,OAApC,KAAAA,IAAoCA,GAApC,GACIn8C,KAAK24C,kBAAkBtyC,KAAK,GAAIi+E,IAAyBtkF,KAAMm8C,oBA3LnEr6C,KAACC,EAAAA,UAADC,OAAAC,SAAA,aACEgH,SAAU,YACVtG,MACF4N,KAAA,SACM0wC,kBAAN,iBACIsjC,uBAAJ,WACIC,8BAAJ,WACIC,qBAAsB,SACtB5sD,OAAJ,KACIyvB,uBAAJ,sBACI96C,uBAAJ,sBACIk4E,8BAAJ,WACI93E,UAAJ,0BACIywB,YAAJ,yBACIz6B,MAAS,cAEbT,QAAA,m0CACAD,SAAA,qWACEG,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,8FAnEAZ,SAAEgL,GAAF7J,aAAAnB,KAAAoB,EAAAA,WAAApB,KAAAiL,EAAAA,OAAA/K,MAAA8/C,QAFAhgD,KAAEyjC,GAAFtiC,aAAAnB,KAAAoB,EAAAA,cAcAk/C,EAAAj/C,iEA4EAw1C,oBAAA72C,KAAAyB,EAAAA,UAWA6+C,iCClHA,sBAgBAtgD,KAACoL,EAAAA,SAADlL,OACEmL,SAAUI,GAAiBH,EAAAA,aAAcs1C,IACzCj1C,SAAU20C,GAAW7c,IACrB13B,cAAeu0C,GAAW7c,QAnB5BW,KCWay+C,GACX,GAAIpnE,GAAAA,eAA6B,4BCD/B6W,GAAe,6BAanBp0B,KAAAiuB,GAAwB,aAAamG,KAxBrC,sBAeAtyB,KAACyK,EAAAA,UAADvK,OACEC,SAAU,YACVU,MACEC,MAAS,YACT2N,KAAQ,QACR8wB,YAAa,4BAIjBpT,KAAAnsB,KAAGuB,EAAAA,SAxBHuhF,KCiBaC,IAIXC,mBAAoB5vE,EAAAA,QAAQ,sBAE1BC,EAAAA,MAAM,QAAS7M,EAAAA,OAAQke,QAAS,EAAGpR,UAAW,oBAC9CE,EAAAA,WAAW,iBACThN,EAAAA,OAAQke,QAAS,EAAGpR,UAAW,sBAC/BG,EAAAA,QAAQ,+CCbdssC,GAAA,yBAbA,MAAAA,MCWIztB,GAAe,6BAgBnBp0B,KAAA85E,MAAoC,QAGpC95E,KAAAiuB,GAAwB,YAAYmG,KA9BpC,sBAeAtyB,KAACyK,EAAAA,UAADvK,OACEC,SAAU,WACVU,MACEC,MAAS,WACTmiF,oBAAqB,iBACrB1jD,YAAa,KAEb9N,eAAgB,8BAKpBumD,QAAAh4E,KAAGuB,EAAAA,QAGH4qB,KAAAnsB,KAAGuB,EAAAA,SA9BH2hF,iCCAA,sBAYAljF,KAACyK,EAAAA,UAADvK,OACEC,SAAU,gBAbZgjF,iCCAA,sBAiBAnjF,KAACyK,EAAAA,UAADvK,OACEC,SAAU,sBAlBZijF,iCCAA,sBAYApjF,KAACyK,EAAAA,UAADvK,OACEC,SAAU,kBAbZkjF,iCCAA,sBAYArjF,KAACyK,EAAAA,UAADvK,OACEC,SAAU,kBAbZmjF,KCqDIhxD,GAAe,EAOnBixD,GAAA,WACE,QAAFA,GAAqB1kF,GAAAX,KAArBW,YAAqBA,EA7DrB,MAAA0kF,MAiEaC,GAAyBzhF,EAAWwhF,GAAkB,WAUtDE,GACT,GAAIhoE,GAAAA,eAA2C,iDA4IjD,QAAF0kC,GACathD,EACCG,EACsC0kF,EAC1Bh8E,EACwCy9B,EAGpD14B,GARZ,GAAFvK,GASIC,EATJC,KAAAlE,KASUW,IATVX,WACagE,GAAbrD,YAAaA,EACCqD,EAAdlD,mBAAcA,EAEYkD,EAA1BwF,KAA0BA,EACwCxF,EAAlEijC,gBAAkEA,EAGpDjjC,EAAduK,UAAcA,EA5EdvK,EAAAyhF,oBAA+B,EAW/BzhF,EAAA0hF,yBAAqC,GASrC1hF,EAAA2hF,WAAuB,GAGvB3hF,EAAA4hF,aAAyB,YAAYxxD,KAsBrCpwB,EAAA6hF,iBAAqB,EAErB7hF,EAAA8hF,iBAAqB,EAErB9hF,EAAA+hF,uBAA0B,EA8BtB/hF,EAAKgiF,cAAgBR,MACrBxhF,EAAKi5E,WAAaj5E,EAAKgiF,cAAcC,OAAS,SArBlD,MAlFkC/gF,GAAlC+8C,EAAAh+C,GAMAkB,OAAAC,eAAM68C,EAAN5hD,UAAA,6BACI,MAAOL,MAAKkmF,aAAelmF,KAAKinC,iBAAmBjnC,KAAKinC,gBAAgBk/C,YAAc,cAExF,SAAe9gF,GACbrF,KAAKkmF,YAAc7gF,mCAMvBF,OAAAC,eAAM68C,EAAN5hD,UAAA,0BAAA,WAAsC,MAAOL,MAAKomF,yBAChD,SAAuB/gF,GACrBrF,KAAKomF,oBAAsB9gF,EAAAA,sBAAsBD,oCAQnDF,OAAFC,eAAM68C,EAAN5hD,UAAA,0BAAE,WACE,MAA2B,WAApBL,KAAKi9E,aAA4Bj9E,KAAKylF,oDAI/CtgF,OAAFC,eAAM68C,EAAN5hD,UAAA,sBAAE,WAAgC,MAA2B,UAApBL,KAAKi9E,4CAO9C93E,OAAAC,eAAM68C,EAAN5hD,UAAA,iBAAA,WAA4B,MAAOL,MAAK2lF,gBACtC,SAActgF,GACZrF,KAAK2lF,WAAatgF,EAClBrF,KAAKqmF,iDAgBTlhF,OAAAC,eAAM68C,EAAN5hD,UAAA,6BACI,MAA2B,WAApBL,KAAKmmF,YAAgD,UAArBnmF,KAAK+8E,YAA0B,OAAS/8E,KAAK+8E,iBAEtF,SAAe13E,GACTA,IAAUrF,KAAK+8E,cACjB/8E,KAAK+8E,YAAc13E,GAASrF,KAAKgmF,cAAcC,OAAS,OACxDjmF,KAAKc,mBAAmBC,iDA+C5BkhD,EAAF5hD,UAAAuuD,0BAAE,WACE,MAAO5uD,MAAKsmF,yBAA2BtmF,KAAKW,aAG9CshD,EAAF5hD,UAAA0G,mBAAE,WAAA,GAAF/C,GAAAhE,IACIA,MAAKumF,wBACDvmF,KAAKq+E,SAAS/lC,aAChBt4C,KAAKW,YAAYF,cAAcgF,UAC1BG,IAAI,uBAAuB5F,KAAKq+E,SAAS/lC,aAIhDt4C,KAAKq+E,SAASplC,aAAa7uC,KAAKkV,EAAAA,UAAS,OAASpY,UAAU,WAC1DlD,EAAKwiF,wBACLxiF,EAAKyiF,sBACLziF,EAAKlD,mBAAmBC,gBAI1B,IAAM2lF,GAAe1mF,KAAKq+E,SAASrnC,WAAah3C,KAAKq+E,SAASrnC,UAAU0vC,cAAgBniF,EAAAA,KACxFkD,GAAAA,MAAMi/E,EAAc1mF,KAAK2mF,gBAAgB1/E,QAASjH,KAAK4mF,gBAAgB3/E,SAClEC,UAAU,WAAM,MAAAlD,GAAKlD,mBAAmBC,iBAG7Cf,KAAK6mF,cAAc5/E,QAAQmD,KAAKkV,EAAAA,UAAU,OAAOpY,UAAU,WACzDlD,EAAKqiF,gBACLriF,EAAKlD,mBAAmBC,iBAI1Bf,KAAK8mF,eAAe7/E,QAAQmD,KAAKkV,EAAAA,UAAU,OAAOpY,UAAU,WAC1DlD,EAAKyiF,sBACLziF,EAAKlD,mBAAmBC,kBAI5BkhD,EAAF5hD,UAAAwF,sBAAE,WAAA,GAAF7B,GAAAhE,IACIA,MAAKumF,wBACAvmF,KAAK+lF,uBACRz/E,QAAQC,UAAUC,KAAK,WAAM,MAAAxC,GAAK+iF,sBAItC9kC,EAAF5hD,UAAAqO,gBAAE,WAEE1O,KAAK0lF,yBAA2B,QAChC1lF,KAAKc,mBAAmBunB,iBAI1B45B,EAAF5hD,UAAA2mF,eAAE,SAAeC,GACb,GAAIjwC,GAAYh3C,KAAKq+E,SAAWr+E,KAAKq+E,SAASrnC,UAAY,IAC1D,OAAOA,IAAa,EAAmBiwC,IAGzChlC,EAAF5hD,UAAA6mF,gBAAE,WACE,SAAUlnF,KAAKq+E,UAAYr+E,KAAKq+E,SAAS34C,aAAe1lC,KAAKmnF,oBAG/DllC,EAAF5hD,UAAA+mF,UAAE,WACE,QAASpnF,KAAKqnF,aAGhBplC,EAAF5hD,UAAAinF,kBAAE,WACE,MAAOtnF,MAAKunF,iBAAmBvnF,KAAKq+E,SAASmJ,kBAAoBxnF,KAAKynF,qBAGxExlC,EAAF5hD,UAAAqnF,wBAAE,WAEE,MAA2B,WAApB1nF,KAAKmmF,aAA4BnmF,KAAKonF,aACzCpnF,KAAKonF,cAAgBpnF,KAAKsnF,qBAGhCrlC,EAAF5hD,UAAAsnF,kBAAE,WAEE,MAAO3nF,MAAKonF,aAAmC,WAApBpnF,KAAKmmF,YAA2BnmF,KAAKknF,mBAIlEjlC,EAAF5hD,UAAAunF,sBAAE,WACE,MAAQ5nF,MAAK8mF,gBAAkB9mF,KAAK8mF,eAAetlF,OAAS,GACxDxB,KAAKq+E,SAASwJ,WAAc,QAAU,QAI5C5lC,EAAF5hD,UAAA68E,qBAAE,WAAA,GAAFl5E,GAAAhE,IACQA,MAAK2nF,qBAAuB3nF,KAAKunF,iBACnCvnF,KAAKylF,oBAAqB,EAC1BzlF,KAAKi9E,WAAa,SAElB6K,EAAAA,UAAU9nF,KAAK+nF,OAAOtnF,cAAe,iBAAiB2J,KAAK0I,EAAAA,KAAK,IAAI5L,UAAU,WAC5ElD,EAAKyhF,oBAAqB,IAG5BzlF,KAAKc,mBAAmBC,iBAQpBkhD,EAAV5hD,UAAAmmF,iCACI,GAAIxmF,KAAKq+E,SAAS34C,aAAe1lC,KAAKmnF,kBACpC,KAAMa,MAKF/lC,EAAV5hD,UAAAgmF,yBACIrmF,KAAKioF,iBACLjoF,KAAKymF,uBAOCxkC,EAAV5hD,UAAA4nF,oCACI,IAAIjoF,KAAK6mF,cAAe,CACtB,GAAIqB,GACAC,CACJnoF,MAAK6mF,cAAcpgF,QAAQ,SAAC2hF,GAC1B,GAAmB,UAAfA,EAAKtO,MAAmB,CAC1B,GAAIoO,GAAalkF,EAAKqkF,UACpB,KAAMC,GAAmC,QAE3CJ,GAAYE,MACP,IAAmB,QAAfA,EAAKtO,MAAiB,CAC/B,GAAIqO,EACF,KAAMG,GAAmC,MAE3CH,GAAUC,OAUVnmC,EAAV5hD,UAAAomF,+BACI,GAAIzmF,KAAKq+E,SAAU,CACjB,GAAIv9B,KAEJ,IAAqC,SAAjC9gD,KAAK4nF,wBAAoC,CAC3C,GAAIW,GAAYvoF,KAAK6mF,cACjB7mF,KAAK6mF,cAAcp8E,KAAK,SAAA29E,GAAQ,MAAe,UAAfA,EAAKtO,QAAqB,KAC1D0O,EAAUxoF,KAAK6mF,cACf7mF,KAAK6mF,cAAcp8E,KAAK,SAAA29E,GAAQ,MAAe,QAAfA,EAAKtO,QAAmB,IAExDyO,GACFznC,EAAIjuC,KAAK01E,EAAUt6D,IACVjuB,KAAK2lF,YACd7kC,EAAIjuC,KAAK7S,KAAK4lF,cAGZ4C,GACF1nC,EAAIjuC,KAAK21E,EAAQv6D,QAEVjuB,MAAK8mF,iBACdhmC,EAAM9gD,KAAK8mF,eAAen/E,IAAI,SAAAg1C,GAAS,MAAAA,GAAM1uB,KAG/CjuB,MAAKq+E,SAASx9B,kBAAkBC,KAK1BmB,EAAZ5hD,UAAAkmF,sBAAE,WACE,IAAKvmF,KAAKq+E,SACR,KAAMoK,MAQVxmC,EAAF5hD,UAAA0mF,iBAAE,WACE,GAAwB,YAApB/mF,KAAKmmF,YAA4BnmF,KAAK+nF,QAAU/nF,KAAK+nF,OAAOtnF,cAAcsS,SAASvR,OAAQ,CAC7F,GAAIxB,KAAKuO,YAAcvO,KAAKuO,UAAUK,UAGpC,YADA5O,KAAK+lF,uBAAwB,EAG/B,KAAKv3E,SAASk6E,gBAAgBv5E,SAASnP,KAAKW,YAAYF,eACtD,MAQF,KAAoB,GALdkoF,GAAiB3oF,KAAK4oF,aACxB5oF,KAAKsmF,wBAAwB7lF,cAAcy8B,yBACzC2rD,EAAa7oF,KAAK4oF,aACpB5oF,KAAK+nF,OAAOtnF,cAAcsS,SAAS,GAAGmqB,yBACtC4rD,EAAa,EACvBnhC,EAAA,EAA0BnrC,EAAAxc,KAAK+nF,OAAOtnF,cAAcsS,SAA1B40C,EAA1BnrC,EAAAhb,OAA0BmmD,IAA1B,CACQmhC,GADRtsE,EAAAmrC,GAC4B/mD,YAEtBZ,KAAK8lF,iBAAmB+C,EAAaF,EA3XjB,EA4XpB3oF,KAAK6lF,iBA7XgB,IA6XGiD,EAAkCC,OAE1D/oF,MAAK8lF,iBAAmB,EACxB9lF,KAAK6lF,iBAAmB,CAE1B7lF,MAAK+lF,uBAAwB,EAC7B/lF,KAAKc,mBAAmBC,gBAIlBkhD,EAAV5hD,UAAAuoF,aAAA,SAAuBI,GACnB,MAAOhpF,MAAKwJ,MAA4B,QAApBxJ,KAAKwJ,KAAKnE,MAAkB2jF,EAAK/8D,MAAQ+8D,EAAKhrE,qBA9WtElc,KAACC,EAAAA,UAADC,OAAAC,SAAA,iBACEgH,SAAU,eACV/G,SAAU,kqXAMVS,MACEC,MAAJ,iBACIqmF,6CAAJ,2BACIC,yCAAJ,uBACIC,4CAAJ,0BACIC,2CAAJ,yBACIC,iCAAJ,sBACAC,mCAAA,iBACAC,sCAAA,sBACMC,0CAAN,4BACIC,kCAAJ,oBACIC,oCAAJ,sBACIC,sBAAJ,mBACIv4B,qBAAJ,oBACIC,mBAAJ,kBACIu4B,uBAAJ,8BACIC,qBAAJ,4BACIC,sBAAJ,6BACIC,mBAAJ,0BACIC,mBAAJ,0BACIC,qBAAJ,4BACIC,qBAAJ,6BAEA9nF,QAAA,SACAC,cAAAC,EAAAA,kBAAAC,KACAC,gBAAAC,EAAAA,wBAAAC,WAIAu/C,EAAA3qC,eAAA,WAAA,QACAxV,KAAAiP,EAAAA,aACAjP,KAAAmJ,EAAAA,oBACAnJ,SAAAgL,GAAA7J,aAAAnB,KAAAoB,EAAAA,WAAApB,KAAAiL,EAAAA,OAAA/K,MAAA2iF,QACA7iF,KAAAkB,EAAAA,eAAAC,aAAAnB,KAAmCoB,EAAAA,aACnCpB,SAAAgL,GAAA7J,aAAAnB,KAAAoB,EAAAA,WAAApB,KAAAiL,EAAAA,OAAA/K,MAAAujF,QACAzjF,KAAA+K,EAAAA,0DAxGAs9E,qBAAAroF,KAAAuB,EAAAA,QAJAglF,YAAAvmF,KAAAuB,EAAAA,QA4MA45E,aAAAn7E,KAAAuB,EAAAA,QAnNA+mF,eAAAtoF,KAAAsB,EAAAA,UAAApB,MAAA,eAqNAskF,0BAAAxkF,KAAAsB,EAAAA,UAAApB,MAAA,yBA3KAqoF,qBAAAvoF,KAAAsB,EAAAA,UAAApB,MAAA,0GAgFAmlF,oBAAArlF,KAAA2wB,EAAAA,aAAAzwB,MAAAkjF,MAUAmC,cAAAvlF,KAAA2wB,EAAAA,aAAAzwB,MAAAijF,MAsBA6B,iBAAAhlF,KAAQ0P,EAAAA,gBAARxP,MAAA4iF,MAmBAiC,gBAAA/kF,KAAA0P,EAAAA,gBAAAxP,MAAAgjF,MAsBA2B,kBAAA7kF,KAAA0P,EAAAA,gBAAAxP,MAAAmjF,MAEAyB,kBAAA9kF,KAAA0P,EAAAA,gBAAYxP,MAAZojF,OAEAnjC,GACAqjC,gCChNA,sBAmBAxjF,KAACoL,EAAAA,SAADlL,OACE6L,cACE+2E,GACA3iC,GACA+iC,GACAC,GACAC,GACAC,GACAC,IAEFj4E,SAAUC,EAAAA,cACVK,SACEm3E,GACA3iC,GACA+iC,GACAC,GACAC,GACAC,GACAC,QArCJj/C,KCuCImkD,GAA+B,EAGnCC,GAAA,WACE,QAAFA,GAEW71D,EAEAgkB,GAFA14C,KAAX00B,OAAWA,EAEA10B,KAAX04C,OAAWA,EA/CX,MAAA6xC,MAoDAC,GAAA,yBApDA,MAAAA,MAqDaC,GAA4B3mF,EAAmB0mF,IAS/CE,GACT,GAAIntE,GAAAA,eAA8C,oCAChDC,WAAY,OACZC,QAASktE,mBA0Fb,QAAFpL,GACYz+E,EACAH,EACkCiqF,GAH5C,GAAF5mF,GAIIC,EAJJC,KAAAlE,OAAAA,WACYgE,GAAZlD,mBAAYA,EACAkD,EAAZrD,YAAYA,EA7DZqD,EAAA6mF,WAAuB,EAIvB7mF,EAAA66E,SAAqB,EAerB76E,EAAA6f,YAA0D,KAgB1D7f,EAAA8mF,eAAM,GAAIjmF,GAAAA,aAGVb,EAAAq+B,OAAkD,GAAIx9B,GAAAA,aAGtDb,EAAAghB,OAAkD,GAAIngB,GAAAA,aAatDb,EAAA+gD,cAGA/gD,EAAAiqB,GAAe,oBAAoBq8D,KAQ/BtmF,EAAK+mF,yBAA2BH,EAAS5L,wBAlB7C,MAtDqC95E,GAArCq6E,EAAAt7E,GAUEkB,OAAFC,eAAMm6E,EAANl/E,UAAA,cAAE,WAAwB,MAAOL,MAAK6+E,SAAW7+E,KAAK6qF,2CAuBtD1lF,OAAAC,eAAMm6E,EAANl/E,UAAA,6BAAA,WAAyC,MAAOL,MAAK+qF,4BACnD,SAA0B1lF,GACxBrF,KAAK+qF,uBAAyBzlF,EAAAA,sBAAsBD,oCAoBxDF,OAAAC,eAAMm6E,EAANl/E,UAAA,iBAAA,SAAgBgF,aACRA,IAASA,EAAM7D,SACjB6D,EAAMq0B,MAAM,KAAKjzB,QAAQ,SAAA4+C,GAAa,MAAArhD,GAAK+gD,WAAWM,EAAU71C,SAAU,IAC1ExP,KAAKW,YAAYF,cAAc4kD,UAAY,qCAiB/Ck6B,EAAFl/E,UAAA0G,mBAAE,WACE/G,KAAK85C,YAAc,GAAImD,GAAAA,2BAAsCj9C,KAAKy4C,SAAS8M,WAE3EvlD,KAAK89E,kBAOPyB,EAAFl/E,UAAAk9E,cAAE,SAAcxhC,GACR/7C,KAAK87C,QACP97C,KAAK87C,MAAMr7C,cAAcs7C,UAAYA,IAKzCwjC,EAAFl/E,UAAAi9E,cAAE,WACE,MAAOt9E,MAAK87C,MAAQ97C,KAAK87C,MAAMr7C,cAAcs7C,UAAY,GAI3DwjC,EAAFl/E,UAAAy9E,eAAE,WACE99E,KAAK6qF,YAAc7qF,KAAKy4C,QAAQj3C,OAChCxB,KAAK+kD,WAAW,4BAA8B/kD,KAAK6qF,UACnD7qF,KAAK+kD,WAAW,4BAA8B/kD,KAAK6qF,UACnD7qF,KAAKc,mBAAmBC,gBAI1Bw+E,EAAFl/E,UAAAk+E,iBAAE,SAAiB7lC,GACf,GAAMlxC,GAAQ,GAAI+iF,IAA6BvqF,KAAM04C,EACrD14C,MAAK8qF,eAAezkF,KAAKmB,mBA3H7B1F,KAACC,EAAAA,UAADC,OAAAC,SAAA,mBACEC,SAAU,wJACVC,QAAF,qjBACEE,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,OACEuG,SAAF,kBACE7G,QAAF,iBACEO,MACFC,MAAA,oBAEAgO,YACAC,QAAAixC,GAAAhxC,YAAAyuE,2FAnEAz9E,SAAEgL,GAAF7J,aAAAnB,KAAAiL,EAAAA,OAAA/K,MAAA0oF,SA6IAnL,EAAAp8E,6GAvDAs1C,UAAA32C,KAAA0P,EAAAA,gBAAAxP,MAAAogD,IAAA/hB,aAAA,MAGAiF,eAAAxjC,KAAA0P,EAAAA,gBAAAxP,MAAAujC,MAGA1hB,cAAA/hB,KAAAuB,EAAAA,QAGA27E,wBAAAl9E,KAAAuB,EAAAA,QAGAynF,iBAAAhpF,KAAAyB,EAAAA,SAMA8+B,SAAAvgC,KAAAyB,EAAAA,SASAyhB,SAAAljB,KAAAyB,EAAAA,SAIAkC,YAAA3D,KAAAuB,EAAAA,MAAArB,MAAA,YASAu9E,O5IlFaF,GACT,GAAI9hE,GAAAA,eAAqC,oCACvCC,WAAY,OACZC,QAASutE,IAaF5L,IACXvuE,QAASyjB,EAAAA,kBACTxjB,YAAakP,EAAAA,WAAW,WAAM,MAAAi8D,MAC9BznD,OAAO,iBA+DP,QAAFynD,GAAsBpqD,EAA8B3I,EAC9B5K,EACAo/D,EACA58E,EAC0CkmC,EAC9Bx9B,EACQqlD,EACUpgD,EAE9B/E,GATpB,GAAF1F,GAAAhE,IAAsBA,MAAtB6xB,SAAsBA,EAA8B7xB,KAApDkpB,SAAoDA,EAC9BlpB,KAAtBse,kBAAsBA,EACAte,KAAtB09E,MAAsBA,EACA19E,KAAtBc,mBAAsBA,EAC0Cd,KAAhEgnC,gBAAgEA,EAC9BhnC,KAAlCwJ,KAAkCA,EACQxJ,KAA1C6uD,WAA0CA,EACU7uD,KAApDyO,UAAoDA,EAE9BzO,KAAtB0J,eAAsBA,EAtCtB1J,KAAAirF,qBAAgC,EAShCjrF,KAAAm9E,wBAAmC,EAMnCn9E,KAAA0+E,sBAAkCp6E,EAAAA,aAAaC,MAG/CvE,KAAAo8E,qBAA0C,GAAIxyE,GAAAA,QAG9C5J,KAAA83C,UAAoC,aAGpC93C,KAAA+3C,WAAe,aA2Bf/3C,KAAA8+E,kBAAsC,EAwDtC9+E,KAAAkrF,iBAAoE1yC,EAAAA,MAAM,WACtE,MAAIx0C,GAAKu4E,cAAgBv4E,EAAKu4E,aAAa9jC,QACnChxC,EAAAA,MAAZC,UAAA,GAAqB1D,EAAKu4E,aAAa9jC,QAAQ9wC,IAAI,SAAA+wC,GAAU,MAAAA,GAAOC,qBAKzD30C,EAAK05E,MAAM9kC,SACb/yB,eACAzb,KAAK0I,EAAAA,KAAK,GAAI+lC,EAAAA,UAAU,WAAM,MAAA70C,GAAKknF,sBAtO5C,MA0JEjP,GAAF57E,UAAA8G,YAAE,WACEnH,KAAK0+E,sBAAsBt3E,cAC3BpH,KAAKirF,qBAAsB,EAC3BjrF,KAAKi+E,gBACLj+E,KAAKo8E,qBAAqBvxE,YAI5B1F,OAAFC,eAAM62E,EAAN57E,UAAA,iBAAE,WACE,MAAOL,MAAK8+E,kBAAoB9+E,KAAKu8E,aAAasO,2CAKpD5O,EAAF57E,UAAAq8E,UAAE,WACE18E,KAAK88E,iBACL98E,KAAK+8E,eAIPd,EAAF57E,UAAA69E,WAAE,WACEl+E,KAAKo9E,cAEAp9E,KAAK8+E,mBAIN9+E,KAAK25C,WAEP35C,KAAKu8E,aAAav3D,OAAO3e,OAG3BrG,KAAKu8E,aAAasC,QAAU7+E,KAAK8+E,kBAAmB,EAEhD9+E,KAAKukB,aAAevkB,KAAKukB,YAAY7E,gBACvC1f,KAAKukB,YAAYzE,SACjB9f,KAAK2+E,4BAA4Bv3E,eAK9BpH,KAAKirF,qBAKRjrF,KAAKc,mBAAmBunB,kBAQ5BljB,OAAFC,eAAM62E,EAAN57E,UAAA,2BAAE,WAAA,GAAF2D,GAAAhE,IACI,OAAOyH,GAAAA,MACLzH,KAAKkrF,iBACLlrF,KAAKu8E,aAAaziC,YAAYsD,OAAOhzC,KAAK6E,EAAAA,OAAO,WAAM,MAAAjL,GAAK86E,oBAC5D9+E,KAAKo8E,qBACLp8E,KAAKmrF,oBACLnrF,KAAKukB,YACDvkB,KAAKukB,YAAY8G,cAAcjhB,KAAK6E,EAAAA,OAAO,WAAM,MAAAjL,GAAK86E,oBACtD30E,EAAAA,uCAkBRhF,OAAFC,eAAM62E,EAAN57E,UAAA,oBAAE,WACE,MAAIL,MAAKu8E,cAAgBv8E,KAAKu8E,aAAaziC,YAClC95C,KAAKu8E,aAAaziC,YAAYqB,WAGhC,sCAIXh2C,OAAAC,eAAc62E,EAAd57E,UAAA,gDACI,OAAKL,MAAKyO,UAIHhH,EAAAA,MACLqgF,EAAAA,UAAU9nF,KAAKyO,UAAW,SAC1Bq5E,EAAAA,UAAU9nF,KAAKyO,UAAW,aAE3BrE,KAAK6E,EAAAA,OAAO,SAACzH,GACZ,GAAM4jF,GAAc5jF,EAA2B,OACzC6jF,EAAYrnF,EAAK6qD,WACnB7qD,EAAK6qD,WAAWluD,YAAYF,cAAgB,IAEhD,OAAOuD,GAAK86E,kBACJsM,IAAgBpnF,EAAK6tB,SAASpxB,iBAC5B4qF,IAAcA,EAAUl8E,SAASi8E,OAChCpnF,EAAKugB,cAAgBvgB,EAAKugB,YAAYgH,eAAepc,SAASi8E;8IAflEjhF,EAAAA,GAAa,uCAoBxB8xE,EAAF57E,UAAA01B,WAAE,SAAW1wB,GAAX,GAAFrB,GAAAhE,IACIsG,SAAQC,QAAQ,MAAMC,KAAK,WAAM,MAAAxC,GAAKk4E,iBAAiB72E,MAIzD42E,EAAF57E,UAAA21B,iBAAE,SAAiBC,GACfj2B,KAAK83C,UAAY7hB,GAInBgmD,EAAF57E,UAAA61B,kBAAE,SAAkBD,GAChBj2B,KAAK+3C,WAAa9hB,GAIpBgmD,EAAF57E,UAAA81B,iBAAE,SAAiBC,GACfp2B,KAAK6xB,SAASpxB,cAAcqI,SAAWstB,GAGzC6lD,EAAF57E,UAAAyhB,eAAE,SAAeta,GACb,GAAMua,GAAUva,EAAMua,OAYtB,IANIA,IAAY8mB,EAAAA,QACdrhC,EAAM6E,iBAKJrM,KAAK25C,YAAc53B,IAAY8mB,EAAAA,QAAW9mB,IAAYma,EAAAA,UAAY10B,EAAMszC,QAC1E96C,KAAKm8E,mBACLn8E,KAAKo8E,qBAAqBxxE,OAC1BpD,EAAMouB,sBACD,IAAI51B,KAAKq8E,cAAgBt6D,IAAYS,EAAAA,OAASxiB,KAAK25C,UACxD35C,KAAKq8E,aAAa9gC,wBAClBv7C,KAAKm8E,mBACL30E,EAAM6E,qBACD,CACL,GAAMiwE,GAAiBt8E,KAAKu8E,aAAaziC,YAAYqB,WAC/CN,EAAa94B,IAAYma,EAAAA,UAAYna,IAAYoa,EAAAA,UAEnDn8B,MAAK25C,WAAa53B,IAAYy6D,EAAAA,IAChCx8E,KAAKu8E,aAAaziC,YAAYiB,UAAUvzC,GAC/BqzC,GAAc76C,KAAKy8E,YAC5Bz8E,KAAK08E,aAGH7hC,GAAc76C,KAAKu8E,aAAaziC,YAAYqB,aAAemhC,IAC7Dt8E,KAAK28E,oBAKXV,EAAF57E,UAAAu8E,aAAE,SAAap1E,GACX,GAAIo9D,GAASp9D,EAAgC,OACzCnC,EAAgCu/D,EAAOv/D,KAGvB,YAAhBu/D,EAAO9iE,OACTuD,EAAiB,IAATA,EAAc,KAAOw3B,WAAWx3B,IAQtCrF,KAAKy8E,YAAcz8E,KAAK68E,iBAAmBx3E,GAC7CmJ,SAASw0B,gBAAkBx7B,EAAMo9D,SACjC5kE,KAAK68E,eAAiBx3E,EACtBrF,KAAK83C,UAAUzyC,GACfrF,KAAK08E,cAITT,EAAF57E,UAAA4lD,aAAE,WACMjmD,KAAKy8E,aACPz8E,KAAK68E,eAAiB78E,KAAK6xB,SAASpxB,cAAc4E,MAClDrF,KAAK88E,iBACL98E,KAAK+8E,aAAY,KAUbd,EAAV57E,UAAA08E,YAAA,SAAsBC,OAAtB,KAAAA,IAAsBA,GAAtB,GACQh9E,KAAK6uD,YAA6C,SAA/B7uD,KAAK6uD,WAAWouB,aACjCD,EACFh9E,KAAK6uD,WAAWquB,uBAEhBl9E,KAAK6uD,WAAWouB,WAAa,SAG/Bj9E,KAAKm9E,wBAAyB,IAK1BlB,EAAV57E,UAAA+8E,uBACQp9E,KAAKm9E,yBACPn9E,KAAK6uD,WAAWouB,WAAa,OAC7Bj9E,KAAKm9E,wBAAyB,IAa1BlB,EAAV57E,UAAAs8E,2BACI,GAAMh2E,GAAQ3G,KAAKu8E,aAAaziC,YAAYuB,iBAAmB,EACzD0C,EAAaC,EAA8Br3C,EAC7C3G,KAAKu8E,aAAa9jC,QAASz4C,KAAKu8E,aAAaj3C,cAE3C+3C,EAAoBp/B,EACxBt3C,EAAQo3C,EAjV4B,GAmVpC/9C,KAAKu8E,aAAae,gBAhViB,IAoVrCt9E,MAAKu8E,aAAagB,cAAcF,IAO1BpB,EAAV57E,UAAAm9E,iDACUC,EAAcz9E,KAAK09E,MAAM9kC,SAAS/yB,eAAezb,KAAK0I,EAAAA,KAAK,IAC3D6qE,EAAgB39E,KAAKu8E,aAAa9jC,QAAQxxC,QAAQmD,KACtD6xD,EAAAA,IAAI,WAAM,MAAAj4D,GAAK45E,kBAAkBC,wBAGjCt1C,EAAAA,MAAM,GAIR,OAAO9gC,GAAAA,MAAMg2E,EAAaE,GACvBvzE,KAGCyuC,EAAAA,UAAU,WAGR,MAFA70C,GAAKm4E,mBACLn4E,EAAKu4E,aAAauB,iBACX95E,EAAK+5E,sBAGdjrE,EAAAA,KAAK,IAGN5L,UAAU,SAAAM,GAAS,MAAAxD,GAAKg6E,kBAAkBx2E,MAIvCy0E,EAAV57E,UAAA49E,yBACQj+E,KAAKukB,cACPvkB,KAAKk+E,aACLl+E,KAAKukB,YAAYmB,UACjB1lB,KAAKukB,YAAc,OAIf03D,EAAV57E,UAAA67E,iBAAA,SAA2B72E,GACvB,GAAM84E,GAAYn+E,KAAKu8E,cAAgBv8E,KAAKu8E,aAAa14D,YACvD7jB,KAAKu8E,aAAa14D,YAAYxe,GAC9BA,EAII+4E,EAA0B,MAAbD,EAAoBA,EAAY,EAI/Cn+E,MAAK6uD,WACP7uD,KAAK6uD,WAAWwvB,SAASh5E,MAAQ+4E,EAEjCp+E,KAAK6xB,SAASpxB,cAAc4E,MAAQ+4E,GAShCnC,EAAV57E,UAAA29E,kBAAA,SAA4Bx2E,GACpBA,GAASA,EAAMktB,SACjB10B,KAAKs+E,6BAA6B92E,EAAMktB,QACxC10B,KAAKk8E,iBAAiB10E,EAAMktB,OAAOrvB,OACnCrF,KAAK83C,UAAUtwC,EAAMktB,OAAOrvB,OAC5BrF,KAAK6xB,SAASpxB,cAAcugB,QAC5BhhB,KAAKu8E,aAAagC,iBAAiB/2E,EAAMktB,SAG3C10B,KAAKk+E,cAMCjC,EAAV57E,UAAAi+E,6BAAA,SAAuCvhC,GACnC/8C,KAAKu8E,aAAa9jC,QAAQhyC,QAAQ,SAAAiyC,GAC5BA,GAAUqE,GAAQrE,EAAO5jC,UAC3B4jC,EAAOsE,cAKLi/B,EAAV57E,UAAAy8E,oCACI,KAAK98E,KAAKu8E,aACR,KAAMiC,IAGHx+E,MAAKukB,aAaRvkB,KAAKukB,YAAY8iD,YAAYppD,MAAOje,KAAKy+E,kBACzCz+E,KAAKukB,YAAYmvB,aAAa1zC,KAAKskE,mBAbnCtkE,KAAKyoC,QAAU,GAAI7pB,GAAAA,eAAe5e,KAAKu8E,aAAar6E,SAAUlC,KAAKse,mBACnEte,KAAKukB,YAAcvkB,KAAKkpB,SAASmD,OAAOrsB,KAAKw0C,qBAEzCx0C,KAAK0J,iBACP1J,KAAK0+E,sBAAwB1+E,KAAK0J,eAAeQ,SAAShD,UAAU,WAC9DlD,EAAK21C,WAAa31C,EAAKugB,aACzBvgB,EAAKugB,YAAY8iD,YAAYppD,MAAOja,EAAKy6E,sBAU7Cz+E,KAAKukB,cAAgBvkB,KAAKukB,YAAY7E,gBACxC1f,KAAKukB,YAAY5E,OAAO3f,KAAKyoC,SAC7BzoC,KAAK2+E,4BAA8B3+E,KAAKw9E,6BAG1C,IAAMoB,GAAU5+E,KAAK25C,SAErB35C,MAAKu8E,aAAauB,iBAClB99E,KAAKu8E,aAAasC,QAAU7+E,KAAK8+E,kBAAmB,EAIhD9+E,KAAK25C,WAAailC,IAAY5+E,KAAK25C,WACrC35C,KAAKu8E,aAAal6C,OAAOh8B,QAIrB41E,EAAV57E,UAAAm0C,6BACI,MAAO,IAAI7oB,GAAAA,eACTC,iBAAkB5rB,KAAKkpC,sBACvBgB,eAAgBlqC,KAAKgnC,kBACrB/oB,MAAOje,KAAKy+E,gBACZ7jE,UAAW5a,KAAKskE,mBAIZ2X,EAAV57E,UAAA6oC,+BAUI,MATAlpC,MAAK49E,kBAAoB59E,KAAKkpB,SAAStiB,WACpCwiC,oBAAoBppC,KAAK++E,wBACzB11C,wBAAuB,GACvBm7B,UAAS,GACTj7B,gBACEe,QAAS,QAASC,QAAS,SAAUI,SAAU,QAASC,SAAU,QAClEN,QAAS,QAASC,QAAS,MAAOI,SAAU,QAASC,SAAU,YAG7D5qC,KAAK49E,mBAGN3B,EAAV57E,UAAAikE,yBACI,MAAOtkE,MAAKwJ,KAAOxJ,KAAKwJ,KAAKnE,MAAQ,OAG/B42E,EAAV57E,UAAA0+E,gCACI,MAAO/+E,MAAK6uD,WAAa7uD,KAAK6uD,WAAWD,4BAA8B5uD,KAAK6xB,UAItEoqD,EAAV57E,UAAAo+E,yBACI,MAAOz+E,MAAK++E,uBAAuBt+E,cAAcy8B,wBAAwBjf,OAOnEg+D,EAAV57E,UAAA87E,4BACIn8E,KAAKu8E,aAAaziC,YAAY4C,cAAc18C,KAAKu8E,aAAayC,sBAAwB,GAAK,IAIrF/C,EAAV57E,UAAAo8E,oBACI,GAAM3yE,GAA4B9J,KAAK6xB,SAASpxB,aAChD,QAAQqJ,EAAQm1E,WAAan1E,EAAQhB,yBA/dzChH,KAACyK,EAAAA,UAADvK,OACEC,SAAU,oDACVU,MACE4N,KAAQ,WACRgsE,aAAgB,MAChB2C,oBAAqB,OACrBz9B,+BAAgC,mBAChChxC,uBAAwB,uBACxB6wC,mBAAoB,mBAGpB69B,YAAa,iBACb/hD,SAAU,eACV+yB,UAAW,uBACX9yB,YAAa,0BAEfp0B,SAAU,yBACV2H,WAAYwuE,4CArFdt9E,KAAEiP,EAAAA,aAbFjP,KAAE8qB,EAAAA,UAuBF9qB,KAAEkO,EAAAA,mBAHFlO,KAAEkJ,EAAAA,SATFlJ,KAAEmJ,EAAAA,oBA6HFnJ,SAAAgL,GAAA7J,aAAAnB,KAAeiL,EAAAA,OAAf/K,MAAsBq9E,QA5ItBv9E,KAAQkB,EAAAA,eAARC,aAAAnB,KA6IeoB,EAAAA,aAzGfpB,KAAQmgD,GAARh/C,aAAAnB,KA0GeoB,EAAAA,WA1GfpB,KA0G2Bw9E,EAAAA,SAC3Bx9E,SAAAgL,GAAA7J,aAAAnB,KAAeoB,EAAAA,WAAfpB,KAA2BiL,EAAAA,OAA3B/K,MAAkC4N,EAAAA,cAtIlC9N,KAAEiB,EAAAA,mCA6HFw5E,eAAAz6E,KAAGuB,EAAAA,MAAHrB,MAAS,sBA7ITi6E,iCsHAA,sBAiBAn6E,KAACoL,EAAAA,SAADlL,OACEmL,SAAU+4B,GAAiBjZ,EAAAA,cAAe5f,GAAiBD,EAAAA,cAC3DK,SAAU8xE,GAAiBr5C,GAAiB+1C,GAAwB5uE,IACpEQ,cAAe0xE,GAAiBtD,QApBlCuD,KCeI/7E,GAAS,gBAkFX,QAAFg8E,GAC4ChxE,EAC9BhF,EACA9I,EACAomC,GAH8B/mC,KAA5CyO,UAA4CA,EAC9BzO,KAAdyJ,QAAcA,EACAzJ,KAAdW,YAAcA,EACAX,KAAd+mC,eAAcA,EAxDd/mC,KAAA0/E,OAAiC,UAQjC1/E,KAAA2/E,UAA8B,EAM9B3/E,KAAA4G,SAA0D,cAuB1D5G,KAAAu8B,KAA8C,SAW9Cv8B,KAAAs5C,IAAgB71C,KA7FhB,MAwCA0B,QAAAC,eAAMq6E,EAANp/E,UAAA,aAAA,WAA8B,MAAOL,MAAK0/E,YACxC,SAAUr6E,GACRrF,KAAKokE,UAAU/+D,GACfrF,KAAK0/E,OAASr6E,mCAMlBF,OAAAC,eAAMq6E,EAANp/E,UAAA,eAAA,WAA2B,MAAOL,MAAK2/E,cACrC,SAAYC,GACV5/E,KAAK2/E,SAAWr6E,EAAAA,sBAAsBs6E,oCAY1Cz6E,OAAAC,eAAMq6E,EAANp/E,UAAA,eAAA,WAA0B,MAAOL,MAAK4f,cACpC,SAAYggE,GACV5/E,KAAK4f,SAAWggE,EAChB5/E,KAAK6/E,sDAMT16E,OAAAC,eAAMq6E,EAANp/E,UAAA,mBAAA,WAA8B,MAAOL,MAAK8/E,kBACxC,SAAgBC,GACVA,IAAmB//E,KAAK8/E,eAC1B9/E,KAAKggF,2BAA2BD,EAAgB//E,KAAK8/E,cACrD9/E,KAAK8/E,aAAeC,oCAU1B56E,OAAAC,eAAMq6E,EAANp/E,UAAA,cAAA,WAA0B,MAAOL,MAAKigF,aACpC,SAAWL,GACT5/E,KAAKigF,QAAU36E,EAAAA,sBAAsBs6E,oCAgBvCH,EAAFp/E,UAAA8iE,QAAE,WACE,OAA2C,IAApCnjE,KAAK4G,SAAS+U,QAAQ,UAI/B8jE,EAAFp/E,UAAA6/E,QAAE,WACE,OAA4C,IAArClgF,KAAK4G,SAAS+U,QAAQ,WAG/B8jE,EAAFp/E,UAAA8G,YAAE,WACMnH,KAAKmgF,aAAengF,KAAKogF,eAC3BpgF,KAAK+mC,eAAegB,kBAAkB/nC,KAAKogF,cAAepgF,KAAKmgF,cAK3DV,EAAVp/E,UAAAw/E,8BAMI,MALK7/E,MAAKogF,cAGRpgF,KAAKogF,cAAc7wE,YAAcvP,KAAK0qB,QAFtC1qB,KAAKogF,cAAgBpgF,KAAKqgF,sBAIrBrgF,KAAKogF,eAINX,EAAVp/E,UAAAggF,+BACI,GAAMC,GAAetgF,KAAKyO,UAAU4hC,cAAc,OAwBlD,OArBAiwC,GAAav2B,aAAa,KAAM,qBAAqB/pD,KAAKs5C,KAC1DgnC,EAAa76E,UAAUG,IAAI,qBAC3B06E,EAAa/wE,YAAcvP,KAAK0qB,QAE5B1qB,KAAKmgF,aACPG,EAAav2B,aAAa,aAAc/pD,KAAKmgF,aAG/CngF,KAAKW,YAAYF,cAAc8vC,YAAY+vC,GAGN,kBAA1B1iE,uBACT5d,KAAKyJ,QAAQO,kBAAkB,WAC7B4T,sBAAsB,WACpB0iE,EAAa76E,UAAUG,IAhBT,wBAoBlB06E,EAAa76E,UAAUG,IApBL,oBAuBb06E,GAIDb,EAAVp/E,UAAA2/E,2BAAA,SAAqCD,EAAwBQ,GAEzD,GAAM71D,GAAU1qB,KAAK6/E,oBAEjBU,IACFvgF,KAAK+mC,eAAegB,kBAAkBrd,EAAS61D,GAG7CR,GACF//E,KAAK+mC,eAAemB,SAASxd,EAASq1D,IAKlCN,EAAVp/E,UAAA+jE,UAAA,SAAoBoc,GACZA,IAAiBxgF,KAAK0/E,SACpB1/E,KAAK0/E,QACP1/E,KAAKW,YAAYF,cAAcgF,UAAUC,OAAO,aAAa1F,KAAK0/E,QAEhEc,GACFxgF,KAAKW,YAAYF,cAAcgF,UAAUG,IAAI,aAAa46E,oBA9JlE1+E,KAACyK,EAAAA,UAADvK,OACEC,SAAU,aACVU,MACEC,MAAS,YACT69E,4BAA6B,UAC7BC,0BAA2B,YAC3BC,0BAA2B,aAC3BC,2BAA4B,aAC5BC,0BAA2B,YAC3BC,0BAA2B,mBAC3BC,2BAA4B,oBAC5BC,0BAA2B,mBAC3BC,2BAA4B,kDAiEhCn/E,SAAAgL,GAAA7J,aAAAnB,KAAOoB,EAAAA,WAAPpB,KAAmBiL,EAAAA,OAAnB/K,MAA0B4N,EAAAA,cAvF1B9N,KAA8CkJ,EAAAA,SAA9ClJ,KAAmBiP,EAAAA,aAHnBjP,KAAQkpC,EAAAA,mCA+BRiR,QAAAn6C,KAAGuB,EAAAA,MAAHrB,MAAS,mBASTk/E,UAAAp/E,KAAGuB,EAAAA,MAAHrB,MAAS,qBAWT4E,WAAA9E,KAAGuB,EAAAA,MAAHrB,MAAS,sBAGT0oB,UAAA5oB,KAAGuB,EAAAA,MAAHrB,MAAS,cASTm+E,cAAAr+E,KAAGuB,EAAAA,MAAHrB,MAAS,yBAWTu6B,OAAAz6B,KAAGuB,EAAAA,MAAHrB,MAAS,kBAGTm/E,SAAAr/E,KAAGuB,EAAAA,MAAHrB,MAAS,qBArFTy9E,iCCAA,sBAaA39E,KAACoL,EAAAA,SAADlL,OACEmL,SAAUE,IACVI,SAAUgyE,IACV5xE,cAAe4xE,QAhBjB2B,KCYaC,GAAwB,GAAI9jE,GAAAA,eAAoB,sBAK7D+jE,GAAA,wBAWAthF,KAAAmR,KAAoB,KAGpBnR,KAAA4yB,aAA0B,EAM1B5yB,KAAAilC,cAA2B,EAG3BjlC,KAAAs1B,UAA8B,KAxC9B,MAAAgsD,MCkBAC,GAAA,WAmBE,QAAFA,GAAcj9D,EAAoDC,GAAhE,GAAFvgB,GAAAhE,IAAkEA,MAAlEukB,YAAkEA,EARlEvkB,KAAAwkB,gBAAqC,GAAI5a,GAAAA,QAGzC5J,KAAAykB,aAAkC,GAAI7a,GAAAA,QAMlC5J,KAAKskB,kBAAoBA,EAGzBA,EAAkBqiD,uBAAuBv8D,KACvC6E,EAAAA,OAAO,SAAAzH,GAAS,MAAoB,SAApBA,EAAMwsD,WAA0C,YAAlBxsD,EAAMiZ,UACpD3N,EAAAA,KAAK,IAEN5L,UAAU,WACTlD,EAAKygB,aAAa7Z,OAClB5G,EAAKygB,aAAa5Z,aAIpByZ,EAAkBqiD,uBAAuBv8D,KACvC6E,EAAAA,OAAO,SAAAzH,GAAS,MAAoB,SAApBA,EAAMwsD,WAA0C,WAAlBxsD,EAAMiZ,UACpD3N,EAAAA,KAAK,IAEN5L,UAAU,WACTlD,EAAKugB,YAAYmB,UACjB1hB,EAAKwgB,gBAAgB5Z,KAAK5G,EAAK4iE,SAC/B5iE,EAAKwgB,gBAAgB3Z,aAGlByZ,EAAkBk9D,kBAAkBv8C,cACvCx9B,EAAAA,MACE8c,EAAYuf,gBACZvf,EAAYk9D,eAAer3E,KAAK6E,EAAAA,OAAO,SAAAzH,GAAS,MAAAA,GAAMua,UAAY8mB,EAAAA,WAClE3hC,UAAU,WAAM,MAAAlD,GAAK6gB,YAjE7B,MAyEE08D,GAAFlhF,UAAAwkB,QAAE,SAAQu5B,GAAR,GAAFp6C,GAAAhE,IACSA,MAAKwkB,gBAAgBQ,SAExBhlB,KAAKskB,kBAAkBqiD,uBAAuBv8D,KAC5C6E,EAAAA,OAAO,SAAAzH,GAAS,MAAoB,UAApBA,EAAMwsD,YACtBlhD,EAAAA,KAAK,IACL5L,UAAU,WAAM,MAAAlD,GAAKugB,YAAYwiD,mBAEnC/mE,KAAK4mE,QAAUxoB,EACfp+C,KAAKskB,kBAAkBW,SAK3Bs8D,EAAFlhF,UAAAulB,eAAE,WACE,MAAO5lB,MAAKwkB,gBAAgBqB,gBAI9B07D,EAAFlhF,UAAAylB,YAAE,WACE,MAAO9lB,MAAKykB,aAAaoB,gBAM3B07D,EAAFlhF,UAAAyjC,cAAE,WACE,MAAO9jC,MAAKukB,YAAYuf,iBAM1By9C,EAAFlhF,UAAAkkE,cAAE,WACE,MAAOvkE,MAAKukB,YAAYggD,iBA3G5Bgd,KCkBaG,IAIXC,iBAAkBzsE,EAAAA,QAAQ,SACxBC,EAAAA,MAAM,eAAgB7M,EAAAA,OAAO8M,UAAW,sBACxCD,EAAAA,MAAM,UAAW7M,EAAAA,OAAO8M,UAAW,oBACnCE,EAAAA,WAAW,qCACPC,EAAAA,QAAWkR,GAAmBC,QADtC,IACiDC,GAAgBI,qBAC7DzR,EAAAA,WAAW,kBACPC,EAAAA,QAAWkR,GAAmBK,QADtC,IACiDH,GAAgBM,uCC2D/D,QAAF26D,GACYjhF,EACAG,EACAghC,EACR+/C,EAC8BrzE,GALhC,GAAFxK,GAMIC,EANJC,KAAAlE,OAAAA,WACYgE,GAAZrD,YAAYA,EACAqD,EAAZlD,mBAAYA,EACAkD,EAAZ89B,kBAAYA,EAvBZ99B,EAAAujB,gBAAmD,OAGnDvjB,EAAA2iE,uBAA2B,GAAI9hE,GAAAA,aAS/Bb,EAAA89E,4BAA4D,KAgBxD99E,EAAKyK,UAAYD,EACjBxK,EAAK+9E,wBAA0BF,EAC5B32D,SAASC,EAAAA,YAAY62D,OAAQ72D,EAAAA,YAAY82D,MAAO92D,EAAAA,YAAY+2D,SAC5Dh7E,UAAU,WACTlD,EAAKm+E,aAAa,oCACdN,EAAmBO,UAAUj3D,EAAAA,YAAY62D,SAC7Ch+E,EAAKm+E,aAAa,mCACdN,EAAmBO,UAAUj3D,EAAAA,YAAY82D,QAC7Cj+E,EAAKm+E,aAAa,oCACdN,EAAmBO,UAAUj3D,EAAAA,YAAY+2D,aAxCrD,MAJ6Ch9E,GAA7C08E,EAAA39E,GAiDE29E,EAAFvhF,UAAAmnB,sBAAE,SAAyBC,GAIvB,MAHAznB,MAAKqiF,0BACLriF,KAAKsiF,iBACLtiF,KAAK+3E,gCACE/3E,KAAK4nB,cAAcJ,sBAAsBC,IAIlDm6D,EAAFvhF,UAAAwnB,qBAAE,SAAwBJ,GAItB,MAHAznB,MAAKqiF,0BACLriF,KAAKsiF,iBACLtiF,KAAK+3E,gCACE/3E,KAAK4nB,cAAcC,qBAAqBJ,IAIjDm6D,EAAFvhF,UAAA8nB,MAAE,WACOnoB,KAAKgX,aACRhX,KAAKunB,gBAAkB,UACvBvnB,KAAKc,mBAAmBunB,kBAK5Bu5D,EAAFvhF,UAAA4kB,KAAE,WACOjlB,KAAKgX,aACRhX,KAAKunB,gBAAkB,SACvBvnB,KAAKc,mBAAmBC,iBAI5B6gF,EAAFvhF,UAAA8G,YAAE,WACEnH,KAAK+hF,wBAAwB36E,cAC7BpH,KAAKgX,YAAa,GAGpB4qE,EAAFvhF,UAAAgxC,iBAAE,SAAiB7pC,GACO,YAAlBA,EAAMiZ,QACRzgB,KAAKwiC,aACsB,WAAlBh7B,EAAMiZ,SACfzgB,KAAKyiC,gBAGPziC,KAAK2mE,uBAAuBtgE,KAAKmB,IAGnCo6E,EAAFvhF,UAAA43E,kBAAE,SAAkBzwE,GAChBxH,KAAK2mE,uBAAuBtgE,KAAKmB,IAG3Bo6E,EAAVvhF,UAAA8hF,aAAA,SAAuBx5D,EAAkB/iB,GACrC,GAAMH,GAAYzF,KAAKW,YAAYF,cAAcgF,SACjDG,GAAMH,EAAUG,IAAI+iB,GAAYljB,EAAUC,OAAOijB,IAG3Ci5D,EAAVvhF,UAAAgiF,mCACI,GAAIriF,KAAK4nB,cAAclI,cACrB,KAAMkJ,OAAM,gFAIRg5D,EAAVvhF,UAAAiiF,0BACI,GAAMx4E,GAAuB9J,KAAKW,YAAYF,cACxC+nB,EAAaxoB,KAAKwhF,kBAAkBh5D,UAEtCC,OAAMC,QAAQF,GAEhBA,EAAW/hB,QAAQ,SAAAkiB,GAAY,MAAA7e,GAAQrE,UAAUG,IAAI+iB,KAC5CH,GACT1e,EAAQrE,UAAUG,IAAI4iB,IAMlBo5D,EAAVvhF,UAAAmiC,sBACSxiC,KAAKuiC,aACRviC,KAAKuiC,WAAaviC,KAAK8hC,kBAAkBzV,OAAOrsB,KAAKW,YAAYF,gBAGnET,KAAKuiC,WAAWM,gCAIV++C,EAAVvhF,UAAAoiC,yBACI,GAAMu1C,GAAUh4E,KAAK8hF,2BAGjB9J,IAAoC,kBAAlBA,GAAQh3D,OAC5Bg3D,EAAQh3D,QAGNhhB,KAAKuiC,YACPviC,KAAKuiC,WAAWa,WAKZw+C,EAAVvhF,UAAA03E,mDACI/3E,MAAK8hF,4BAA8B9hF,KAAKyO,UAAsC,cAG1EzO,KAAKW,YAAYF,cAAcugB,OACjC1a,QAAQC,UAAUC,KAAK,WAAM,MAAAxC,GAAKrD,YAAYF,cAAcugB,0BA1KlElf,KAACC,EAAAA,UAADC,OAAAC,SAAA,6BACEC,SAAU,8CACVC,QAAF,okBACEK,gBAAFC,EAAAA,wBAAAC,OACEL,cAAFC,EAAAA,kBAAAC,KACE6U,YAAFsqE,GAAAC,kBACEh/E,MACFC,MAAe,6BACTukD,SAAN,KACI52C,KAAJ,SACI2wC,oBAAJ,+BACIr4B,WAAJ,kBACI05D,iBAAJ,4BACIz5D,gBAAJ,mHAzCAhnB,KAAE0gF,EAAAA,mBAGF1gF,KAAEirB,EAAAA,qBAiBFjrB,SAAmBgL,GAAnB7J,aAAAnB,KAAAoB,EAAAA,WAAApB,KAAAiL,EAAAA,OAAA/K,MAAA4N,EAAAA,eA0DAgyE,EAAAz+E,6EA5BAy+E,qCC1BE,QAAFa,GACcv5D,EACAE,EACwBs5D,GAFxB1iF,KAAdkpB,SAAcA,EACAlpB,KAAdopB,UAAcA,EACwBppB,KAAtC0iF,mBAAsCA,EAnBtC1iF,KAAA2iF,2BAAsE,KAtBtE,MAyBEx9E,QAAFC,eAAMq9E,EAANpiF,UAAA,6BAAE,WACE,GAAMopB,GAASzpB,KAAK0iF,kBACpB,OAAOj5D,GAASA,EAAOm5D,sBAAwB5iF,KAAK2iF,gCAGtD,SAA0Bt9E,GACpBrF,KAAK0iF,mBACP1iF,KAAK0iF,mBAAmBE,sBAAwBv9E,EAEhDrF,KAAK2iF,2BAA6Bt9E,mCActCo9E,EAAFpiF,UAAA2pB,KAAE,SAA0Bs+C,EACTz+C,GADjB,GAAF7lB,GAAAhE,KAGUkqB,EAAUq+C,EAAqB1+C,GAC/BQ,EAAarqB,KAAK4qB,eAAeV,GACjCW,EAAY7qB,KAAK6iF,iBAAiBx4D,EAAYH,GAC9C44D,EAAM,GAAIvB,IAAwB12D,EAAWR,EAEnD,IAAIi+C,YAAkC3yD,GAAAA,YACpCkV,EAAUhD,qBAAqB,GAAIjJ,GAAAA,eAAkB0pD,EAAsB,MACzEx9C,UAAWZ,EAAQ/Y,KACnB4xE,eAAgBD,SAEb,CACL,GAAMr7D,GAAS,GAAI8C,GAAAA,gBAAgB+9C,MAAwBx7D,GACrD9M,KAAKgrB,gBAAgBd,EAAS44D,IAC9B73D,EAAaJ,EAAUrD,sBAAsBC,EACnDq7D,GAAIr4D,SAAWQ,EAAWR,SAuB5B,MAnBAq4D,GAAIl9D,iBAAiB1e,UAAU,WAEzBlD,EAAK4+E,uBAAyBE,IAChC9+E,EAAK4+E,sBAAwB,QAI7B5iF,KAAK4iF,uBAGP5iF,KAAK4iF,sBAAsBh9D,iBAAiB1e,UAAU,WAAM,MAAA47E,GAAIx+D,kBAAkB6D,UAClFnoB,KAAK4iF,sBAAsB/9D,WAG3Bi+D,EAAIx+D,kBAAkB6D,QAGxBnoB,KAAK4iF,sBAAwBE,EAEtBA,GAMTL,EAAFpiF,UAAAwkB,QAAE,WACM7kB,KAAK4iF,uBACP5iF,KAAK4iF,sBAAsB/9D,WAOvB49D,EAAVpiF,UAAAwiF,iBAAA,SAA2Bx4D,EACAR,GACvB,GAAMS,GAAkB,GAAIC,GAAAA,gBAAgBq3D,GAAyB/3D,EAAO3L,kBACtEsM,EAAsDH,EAAW1K,OAAO2K,EAE9E,OADAE,GAAaC,SAAS+2D,kBAAoB33D,EACnCW,EAAaC,UAOdg4D,EAAVpiF,UAAAuqB,eAAA,SAAyBf,GACrB,GAAM6B,GAAgB,GAAIC,GAAAA,eACxB/Q,UAAWiP,EAAOjP,UAClBgY,YAAa/I,EAAO+I,YACpBw2C,SAAU,OACVl/B,eAAgBlqC,KAAKkpB,SAAS85D,iBAAiBC,QAC/Cr3D,iBAAkB5rB,KAAKkpB,SAAStiB,WAC7BilB,SACAK,qBACAE,OAAO,MAOZ,OAJIvC,GAAO8qB,gBACTjpB,EAAcipB,cAAgB9qB,EAAO8qB,eAGhC30C,KAAKkpB,SAASmD,OAAOX,IAQtB+2D,EAAVpiF,UAAA2qB,gBAAA,SAA6BnB,EACAk5D,GAEzB,GAAMz2D,GAAezC,GAAUA,EAAO3L,kBAAoB2L,EAAO3L,iBAAiB6M,SAC5EwB,EAAkB,GAAIC,QAY5B,OAVAD,GAAgBE,IAAI80D,GAAmBwB,GACvCx2D,EAAgBE,IAAI40D,GAAuBx3D,EAAO1Y,MAE7Cmb,GAAiBA,EAAargB,IAAIjJ,EAAAA,eAAgB,OACrDupB,EAAgBE,IAAIzpB,EAAAA,gBAClBqC,MAAOwkB,EAAOjP,UACd1Q,OAAQC,EAAAA,OAIL,GAAIuiB,GAAAA,eAAeJ,GAAgBtsB,KAAKopB,UAAWmD,mBAvI9DzqB,KAAC6qB,EAAAA,iDAZD7qB,KAAQ8qB,EAAAA,UAER9qB,KAA+CgrB,EAAAA,WAW/ChrB,KAAa2gF,EAAbx/E,aAAAnB,KAoBOoB,EAAAA,WApBPpB,KAoBmBkrB,EAAAA,cAzCnBy1D,iCCAA,sBAiBA3gF,KAACoL,EAAAA,SAADlL,OACEmL,SACEC,EAAAA,aACA6f,EAAAA,cACA5f,GACAC,EAAAA,cAEFG,SAAUm0E,GAAyBv0E,IACnCQ,cAAe+zE,IACf10D,iBAAkB00D,IAClBhxE,WAAY6xE,QA3BdS,Kf6BMC,GAA6B,SAG7BC,GAA4B,UAM5BC,IACJ,aACA,kBACA,kBACA,oBACA,qBACA,eACA,WAKFC,GAAA,WACE,QAAFA,GAAqB3iF,GAAAX,KAArBW,YAAqBA,EAnDrB,MAAA2iF,MAqDaC,GAAsB1/E,EAAWwH,EAAcvH,EAAmBw/E,qBAiC7E,QAAFnL,GAAcx2E,EAMQ4M,EACAqjB,GAPpB,GAAF5tB,GAQIC,EARJC,KAAAlE,KAQU2B,IARV3B,IAMsBgE,GAAtBuK,UAAsBA,EACAvK,EAAtB4tB,cAAsBA,EAftB5tB,EAAAw/E,eAA4Bx/E,EAAKy/E,mBAAmB,UAAW,gBAG/Dz/E,EAAA0/E,cAA2B1/E,EAAKy/E,mBAAmB,kBAiB/C,KAAmB,GAAvB97B,GAAA,EAAuBg8B,EAAvBN,GAAuB17B,EAAvBg8B,EAAAniF,OAAuBmmD,IAAvB,CAAS,GAAMirB,GAAf+Q,EAAAh8B,EACU3jD,GAAKy/E,mBAAmB7Q,IACzBjxE,EAAuC,cAAE8D,UAAUG,IAAIgtE,SAI5D5uE,GAAK4tB,cAAcE,QAAQ9tB,EAAKrD,YAAYF,eAAe,GAEvDuD,EAAKw/E,eACPx/E,EAAKi4C,MAAQknC,GACJn/E,EAAKy/E,mBAAmB,qBACjCz/E,EAAKi4C,MAAQmnC,MAzBnB,MAV+Bl+E,GAA/BizE,EAAAl0E,GAuCEk0E,EAAF93E,UAAA8G,YAAE,WACEnH,KAAK4xB,cAAcI,eAAehyB,KAAKW,YAAYF,gBAIrD03E,EAAF93E,UAAA2gB,MAAE,WACEhhB,KAAKoyB,kBAAkBpR,SAGzBm3D,EAAF93E,UAAA+xB,gBAAE,WACE,MAAOpyB,MAAKW,YAAYF,eAG1B03E,EAAF93E,UAAA0gC,kBAAE,WACE,MAAO/gC,MAAKghC,eAAiBhhC,KAAK8I,UAIpCqvE,EAAF93E,UAAAojF,mBAAE,WAAF,IAAqB,GAArBz/E,GAAAhE,KAAA4jF,KAAAj8B,EAAA,EAAqBA,EAArBlxC,UAAAjV,OAAqBmmD,IAAAi8B,EAArBj8B,GAAAlxC,UAAAkxC,EACI,OAAOi8B,GAAWt0E,KAAK,SAAAu0E,GAAa,MAAA7/E,GAAKouB,kBAAkBw3C,aAAaia,qBAzE5E/hF,KAACC,EAAAA,UAADC,OAAAC,SAAA,iMACEgH,SAAU,YACVtG,MAGFutD,aAAA,oBAEAhuD,SAAA,sVACAC,QAAA,2sOACEC,QAAF,WAAA,gBAAA,SACEC,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,qFAzDAZ,KAAEm2B,EAAAA,gBALFkgD,EAAAh1E,uDA4EAg1E,wCAwEA,MAAAl0E,GAAAC,KAAAlE,KAAA2B,EAAA+8B,EAAAolD,IAAA9jF,KAnJA,0DAyJAA,KAAA8I,8BAEQtB,EAARu8E,6BAGA7L,EAAAj1E,aACAnB,KAAAC,EAAAA,UAAAC,OAAAC,SAAA,gLA7BAU,MACAs+C,kBAAA,oBACAyD,kBAAA,mBAEAl4C,uBAAA,sBACMI,UAAN,+BAEAxK,QAAA,WAAqB,gBAArB,SACAF,SAAA,sVACAC,QAAA;mtOACAE,cAAAC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,WAIAw1E,EAAA5gE,eAAA,WAAA,QACAxV,KAAA+K,EAAAA,sDAlJAqrE,GADAC,gCCRA,sBAcAr2E,KAACoL,EAAAA,SAADlL,OACEmL,SACEC,EAAAA,aACAG,GACAF,IAEFI,SACE0qE,GACAD,GACA7qE,IAEFQ,cACEsqE,GACAD,QA3BJrgE,KC2CAugE,GAAA,yBA3CA,MAAAA,MA4CaC,GAAiChtE,EAAc+sE,IAO/CE,IACXznE,QAASyjB,EAAAA,kBACTxjB,YAAakP,EAAAA,WAAW,WAAM,MAAAu4D,MAC9B/jD,OAAO,GAOTgkD,GAAA,yBA7DA,MAAAA,MA+DIC,GAAmB,EAGvBC,GAAA,WACE,QAAFA,GAEWhkD,EAGArvB,GAHArF,KAAX00B,OAAWA,EAGA10B,KAAXqF,MAAWA,EAxEX,MAAAqzE,qBAgLE,QAAFH,GAAsBn5C,GAApB,GAAFp7B,GACIC,EADJC,KAAAlE,OAAAA,WAAsBgE,GAAtBo7B,gBAAsBA,EAnFtBp7B,EAAAg1B,WAAsB,EACtBh1B,EAAAuzC,WAAsB,EAetBvzC,EAAAq1B,8BAAwD,aAGxDr1B,EAAA+zC,WAA0B,aAe1B/zC,EAAAq7B,MAAkB,2BAA2Bo5C,KA8B7Cz0E,EAAAgiC,YAAmC,GAAInhC,GAAAA,aAiBvCb,EAAAkG,OAAM,GAAIrF,GAAAA,eA9KV,MA0F0CK,GAA1CqzE,EAAAt0E,GA6BAkB,OAAAC,eAAMmzE,EAANl4E,UAAA,YAAA,WAAuB,MAAOL,MAAKq/B,WACjC,SAASh6B,GAAT,GAAFrB,GAAAhE,IACIA,MAAKq/B,MAAQh6B,EAETrF,KAAK24E,gBACP34E,KAAK24E,eAAelyE,QAAQ,SAAA6vB,GAAU,MAAAA,GAAO1gB,KAAO5R,EAAKq7B,yCAO/Dl6B,OAAAC,eAAMmzE,EAANl4E,UAAA,gBAAA,WAA4B,MAAOL,MAAKg5B,eACtC,SAAa3zB,GACXrF,KAAKg5B,UAAY1zB,EAAAA,sBAAsBD,oCAK3CF,OAAAC,eAAMmzE,EAANl4E,UAAA,wBACI,GAAMyU,GAAW9U,KAAKk5C,gBAAkBl5C,KAAKk5C,gBAAgBpkC,WAE7D,OAAI9U,MAAK2lC,SACA7wB,EAASnN,IAAI,SAAA2uB,GAAU,MAAAA,GAAOjxB,QAGhCyP,EAAS,GAAKA,EAAS,GAAGzP,UAAQyH,QAE3C,SAAU8yB,GACR5/B,KAAKq6C,qBAAqBza,GAC1B5/B,KAAKgmC,YAAY3/B,KAAKrG,KAAKqF,wCAW7BF,OAAFC,eAAMmzE,EAANl4E,UAAA,gBAAE,WACE,GAAMyU,GAAW9U,KAAKk5C,gBAAgBpkC,QACtC,OAAO9U,MAAK2lC,SAAW7wB,EAAYA,EAAS,IAAM,sCAKtD3P,OAAAC,eAAMmzE,EAANl4E,UAAA,gBAAA,WAA4B,MAAOL,MAAKu3C,eACtC,SAAalyC,GACXrF,KAAKu3C,UAAYjyC,EAAAA,sBAAsBD,oCAWzCkzE,EAAFl4E,UAAAse,SAAE,WACE3e,KAAKk5C,gBAAkB,GAAIK,GAAAA,eAAgCv5C,KAAK2lC,aAAU74B,IAAW,IAGvFyrE,EAAFl4E,UAAA0G,mBAAE,YACEyV,EAAAxc,KAAKk5C,iBAAgB4D,OAAzBp1C,MAAA8U,EAAmCxc,KAAK24E,eAAe1pE,OAAO,SAAAqnB,GAAU,MAAAA,GAAO3B,kBAO7E4jD,EAAFl4E,UAAA01B,WAAE,SAAW1wB,GACTrF,KAAKqF,MAAQA,EACbrF,KAAKo/B,gBAAgBr+B,gBAIvBw3E,EAAFl4E,UAAA21B,iBAAE,SAAiBC,GACfj2B,KAAKq5B,8BAAgCpD,GAIvCsiD,EAAFl4E,UAAA61B,kBAAE,SAAkBD,GAChBj2B,KAAK+3C,WAAa9hB,GAIpBsiD,EAAFl4E,UAAA81B,iBAAE,SAAiBC,GACfp2B,KAAK8I,SAAWstB,EAEZp2B,KAAK24E,gBACP34E,KAAK24E,eAAelyE,QAAQ,SAAA6vB,GAAU,MAAAA,GAAO6J,mBAKjDo4C,EAAFl4E,UAAAw1B,iBAAE,WACE,GAAM/gB,GAAW9U,KAAK8U,SAChB4f,EAASjM,MAAMC,QAAQ5T,GAAYA,EAASA,EAAStT,OAAS,GAAKsT,EACnEtN,EAAQ,GAAIkxE,IAAqB,EAAU14E,KAAKqF,MACtDrF,MAAKq5B,8BAA8B7xB,EAAMnC,OACzCrF,KAAKkK,OAAO7D,KAAKmB,IASnB+wE,EAAFl4E,UAAAu4E,kBAAE,SAAkBtiD,EAAyBwmB,EAAiBX,OAA9D,KAAAA,IAA8DA,GAA9D,GAGSn8C,KAAK2lC,WAAY3lC,KAAK8U,UAAawhB,EAAO3B,UAC5C30B,KAAgC,SAAE20B,SAAU,GAG3CmoB,EACF98C,KAAKk5C,gBAAgB4D,OAAOxmB,GAE5Bt2B,KAAKk5C,gBAAgB8D,SAAS1mB,GAI5B6lB,GACFn8C,KAAK61B,mBAKP71B,KAAKgmC,YAAY3/B,KAAKrG,KAAKqF,QAI7BkzE,EAAFl4E,UAAAw4E,YAAE,SAAYviD,GACV,MAAOt2B,MAAKk5C,gBAAgBwE,WAAWpnB,IAIzCiiD,EAAFl4E,UAAAy4E,cAAE,SAAcxiD,GACZ,WAA8B,KAAnBt2B,KAAK+4E,YAIZ/4E,KAAK2lC,UAAYld,MAAMC,QAAQ1oB,KAAK+4E,aAC7B/4E,KAAK+4E,UAAUtuE,KAAK,SAAApF,GAAS,MAAgB,OAAhBixB,EAAOjxB,OAAiBA,IAAUixB,EAAOjxB,QAG1EixB,EAAOjxB,QAAUrF,KAAK+4E,YAIvBR,EAAVl4E,UAAAg6C,qBAAA,SAA+Bh1C,aAG3B,IAFArF,KAAK+4E,UAAY1zE,EAEZrF,KAAK24E,eAIV,GAAI34E,KAAK2lC,UAAYtgC,EAAO,CAC1B,IAAKojB,MAAMC,QAAQrjB,GACjB,KAAMujB,OAAM,qDAGd5oB,MAAKq8C,kBACLh3C,EAAMoB,QAAQ,SAAC61C,GAAsB,MAAAt4C,GAAKu4C,aAAaD,SAEvDt8C,MAAKq8C,kBACLr8C,KAAKu8C,aAAal3C,IAKdkzE,EAAVl4E,UAAAg8C,2BACIr8C,KAAKk5C,gBAAgB5Q,QACrBtoC,KAAK24E,eAAelyE,QAAQ,SAAA6vB,GAAU,MAAAA,GAAO3B,SAAU,KAIjD4jD,EAAVl4E,UAAAk8C,aAAA,SAAuBl3C,GACnB,GAAMo3C,GAAsBz8C,KAAK24E,eAAeluE,KAAK,SAAA6rB,GACnD,MAAuB,OAAhBA,EAAOjxB,OAAiBixB,EAAOjxB,QAAUA,GAG9Co3C,KACFA,EAAoB9nB,SAAU,EAC9B30B,KAAKk5C,gBAAgB4D,OAAOL,oBAvOlC36C,KAACyK,EAAAA,UAADvK,OACEC,SAAU,0BACV2O,WACE0nE,IACCznE,QAAS2nE,GAA8B1nE,YAAaynE,IAEvDn2E,QAAS,YACTO,MACEgO,cAAe,oCACf/N,MAAS,0BACTo2E,qCAAsC,YAExC/vE,SAAU,+DA3EZnH,KAAEmJ,EAAAA,uCAsGF0tE,iBAAA72E,KAAG0P,EAAAA,gBAAHxP,MAAmBge,EAAAA,WAAW,WAAM,MAAAi5D,SAGpCrjE,OAAA9T,KAAGuB,EAAAA,QAYHygB,WAAAhiB,KAAGuB,EAAAA,QAOHgC,QAAAvD,KAAGuB,EAAAA,QAoBH2iC,cAAAlkC,KAAGyB,EAAAA,SASHoiC,WAAA7jC,KAAGuB,EAAAA,QAOH6G,SAAApI,KAAGyB,EAAAA,UA7KHg1E,GA0F0CF,IAgO1Ca,GAAA,yBA1TA,MAAAA,MA2TaC,GAA4Br1E,EAAmBo1E,mBAwF1D,QAAFD,GAA0BG,EACJt4E,EACAH,EACAixB,GAHpB,GAAF5tB,GAIIC,EAJJC,KAAAlE,OAAAA,WACsBgE,GAAtBlD,mBAAsBA,EACAkD,EAAtBrD,YAAsBA,EACAqD,EAAtB4tB,cAAsBA,EApEtB5tB,EAAAq1E,mBAA8B,EAC9Br1E,EAAAmxB,UAAqB,EAWrBnxB,EAAAuxB,eAA4D,KA+C5DvxB,EAAAy7B,WAA+B,EAI/Bz7B,EAAAkG,OAAM,GAAIrF,GAAAA,aAQNb,EAAKs1E,kBAAoBF,IAT7B,MAjEqCl0E,GAArC+zE,EAAAh1E,GA0BEkB,OAAFC,eAAM6zE,EAAN54E,UAAA,eAAE,WAAwB,MAAUL,MAAKiuB,GAAzC,0CAaA9oB,OAAAC,eAAM6zE,EAAN54E,UAAA,0BACI,MAAOL,MAAKs5E,kBAAoBt5E,KAAKs5E,kBAAkBT,YAAY74E,MAAQA,KAAKm1B,cAElF,SAAY9vB,GACV,GAAMu6B,GAAWt6B,EAAAA,sBAAsBD,EAEnCu6B,KAAa5/B,KAAKm1B,WACpBn1B,KAAKm1B,SAAWyK,EAEZ5/B,KAAKs5E,mBACPt5E,KAAKs5E,kBAAkBV,kBAAkB54E,KAAMA,KAAKm1B,UAGtDn1B,KAAKc,mBAAmBC,iDAM9BoE,OAAAC,eAAM6zE,EAAN54E,UAAA,2BACI,MAAOL,MAAKy/B,WAAcz/B,KAAKs5E,mBAAqBt5E,KAAKs5E,kBAAkBxwE,cAE7E,SAAazD,GAAkBrF,KAAKy/B,UAAYn6B,EAAAA,sBAAsBD,oCAgBtE4zE,EAAF54E,UAAAse,SAAE,WACE3e,KAAKq5E,kBAAoBr5E,KAAKs5E,oBAAsBt5E,KAAKs5E,kBAAkB3zC,SAC3E3lC,KAAK0rE,MAAQ1rE,KAAKq5E,kBAAoB,QAAU,WAChDr5E,KAAKiuB,GAAKjuB,KAAKiuB,IAAM,qBAAqBwqD,KAEtCz4E,KAAKq5E,oBACPr5E,KAAK4V,KAAO5V,KAAKs5E,kBAAkB1jE,MAGjC5V,KAAKs5E,mBAAqBt5E,KAAKs5E,kBAAkBR,cAAc94E,QACjEA,KAAK20B,SAAU,GAGjB30B,KAAK4xB,cAAcE,QAAQ9xB,KAAKW,YAAYF,eAAe,IAG7Dw4E,EAAF54E,UAAA8G,YAAE,WACEnH,KAAK4xB,cAAcI,eAAehyB,KAAKW,YAAYF,gBAIrDw4E,EAAF54E,UAAA2gB,MAAE,WACEhhB,KAAKw1B,cAAc/0B,cAAcugB,SAInCi4D,EAAF54E,UAAA4gC,eAAE,SAAez5B,GACbA,EAAMouB,kBAEN51B,KAAKm1B,WAAWn1B,KAAKq5E,oBAA4Br5E,KAAKm1B,SAElDn1B,KAAKs5E,oBACPt5E,KAAKs5E,kBAAkBV,kBAAkB54E,KAAMA,KAAKm1B,UAAU,GAC9Dn1B,KAAKs5E,kBAAkBvhC,cAIzB/3C,KAAKkK,OAAO7D,KAAK,GAAIqyE,IAAsB14E,KAAMA,KAAKqF,SAGxD4zE,EAAF54E,UAAAy1B,cAAE,SAActuB,GAQZA,EAAMouB,mBAQRqjD,EAAF54E,UAAA8/B,cAAE,WAGEngC,KAAKc,mBAAmBC,+BAzJ5Be,KAACC,EAAAA,UAADC,OAAAC,SAAA,oBACEC,SAAU,qoBACVC,QAAF,m9CACEE,cAAFC,EAAAA,kBAAmCC,KACjC0G,SAAF,kBACEzG,gBAAFC,EAAAA,wBAAAC,OACEN,QAAF,iBACEO,MACF42E,uCAAA,qBACMC,oCAAN,UACIC,qCAAsC,WACtC72E,MAAJ,oBACIy+B,YAAJ,kHAhPAv/B,KAAaiP,EAAAA,aA7EbjP,KAAEm2B,EAAAA,gBALFghD,EAAA91E,wHAiVAqyB,gBAAA1zB,KAAAsB,EAAAA,UAAApB,MAAA,WAKAisB,KAAAnsB,KAAAuB,EAAAA,QAKAuS,OAAA9T,KAAAuB,EAAAA,QASAgC,QAAAvD,KAAAuB,EAAAA,QAGAsxB,UAAA7yB,KAAAuB,EAAAA,QAGAyF,WAAAhH,KAAAuB,EAAAA,QAGA6G,SAAApI,KAAAyB,EAAAA,UA2BA01E,mCChZA,sBAaAn3E,KAACoL,EAAAA,SAADlL,OACEmL,SAAUE,GAAiBE,IAC3BE,SAAUJ,GAAiBkrE,GAAsBU,IACjDprE,cAAe0qE,GAAsBU,QAhBvCS,iCCAA,sBAqBA53E,KAACyK,EAAAA,UAADvK,OACEC,SAAU,mBACVU,MAAOC,MAAS,wBAvBlB+2E,iCAAA,sBA+BA73E,KAACyK,EAAAA,UAADvK,OACEC,SAAU,mDACVU,MACEC,MAAS,sBAlCbg3E,iCAAA,sBA2CA93E,KAACyK,EAAAA,UAADvK,OACEC,SAAU,4DACVU,MACEC,MAAS,yBA9Cbi3E,gCAiEA75E,KAAA85E,MAAoC,QAjEpC,sBAuDAh4E,KAACyK,EAAAA,UAADvK,OACEC,SAAU,mBACVgH,SAAU,iBACVtG,MACEC,MAAS,mBACTm3E,qCAAsC,yCAK1CD,QAAAh4E,KAAGuB,EAAAA,SAjEH22E,iCAAA,sBAwEAl4E,KAACyK,EAAAA,UAADvK,OACEC,SAAU,kBACVU,MAAOC,MAAS,uBA1ElBq3E,iCAAA,sBAkFAn4E,KAACyK,EAAAA,UAADvK,OACEC,SAAU,mCACVU,MAAOC,MAAS,sBApFlBs3E,iCAAA,sBA4FAp4E,KAACyK,EAAAA,UAADvK,OACEC,SAAU,2CACVU,MAAOC,MAAS,yBA9FlBu3E,iCAAA,sBAsGAr4E,KAACyK,EAAAA,UAADvK,OACEC,SAAU,4CACVU,MAAOC,MAAS,yBAxGlBw3E,iCAAA,sBAgHAt4E,KAACyK,EAAAA,UAADvK,OACEC,SAAU,2CACVU,MAAOC,MAAS,yBAlHlBy3E,iCAAA,sBA0HAv4E,KAACyK,EAAAA,UAADvK,OACEC,SAAU,4CACVU,MAAOC,MAAS,yBA5HlB03E,iCAAA,sBAoIAx4E,KAACyK,EAAAA,UAADvK,OACEC,SAAU,qCACVU,MAAOC,MAAS,uBAtIlB23E,iCA+JA,sBATAz4E,KAACC,EAAAA,UAADC,OAAAC,SAAA,WACEgH,SAAU,UACV/G,SAAU,8EACVC,QAAF,q9EACEE,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,OACEC,MAAFC,MAAA,gBAGA43E,iCAcA,yWALAn4E,cAAAC,EAAAA,kBAAAC,KACEC,gBAAiBC,EAAAA,wBAAnBC,OACEC,MAAQC,MAAV,uBAGA63E,iCAcA,0YAHA93E,MAAAC,MAAA,4BAGA83E,iCC3LA,sBA4BA54E,KAACoL,EAAAA,SAADlL,OACEmL,SAAUE,IACVI,SACE+sE,GACAC,GACAC,GACAf,GACAC,GACAC,GACAG,GACAC,GACAE,GACAC,GACAC,GACAH,GACAI,GACAC,GACAltE,IAEFQ,cACE2sE,GAASC,GAAeC,GAAmBf,GAAgBC,GAAcC,GACzEG,GAAgBC,GAAeE,GAAgBC,GAAgBC,GAAgBH,GAC/EI,GAAgBC,QAlDpBI,KCsBazJ,GACT,GAAI3zD,GAAAA,eAAuC,6BhBqB3C6W,GAAe,EAON68C,IACXpgE,QAASyjB,EAAAA,kBACTxjB,YAAakP,EAAAA,WAAW,WAAM,MAAAmxD,MAC9B38C,OAAO,kKAmBT,IAAAomD,IAAA,yBAzEA,MAAAA,MAkFAC,GAAA,WACE,QAAFA,GAAqBl6E,GAAAX,KAArBW,YAAqBA,EAnFrB,MAAAk6E,MAqFaC,GACX1vE,EAAcvH,EAAWC,EAAmBuH,EAAcwvE,KAAmB,0BA+F7E,QAAF1J,GAAcxvE,EACQb,EACA8wB,EACenmB,EAEXsvE,GALxB,GAAF/2E,GAMIC,EANJC,KAAAlE,KAMU2B,IANV3B,WACsBgE,GAAtBlD,mBAAsBA,EACAkD,EAAtB4tB,cAAsBA,EAGI5tB,EAA1B+2E,aAA0BA,EA/D1B/2E,EAAAsxB,UAA2C,GAK3CtxB,EAAAuxB,eAA4D,KAE5DvxB,EAAAixB,UAA8B,mBAAkBb,GAGhDpwB,EAAAiqB,GAAwBjqB,EAAKixB,UAY7BjxB,EAAAqxB,cAA+C,QAG/CrxB,EAAA4R,KAAiC,KAIjC5R,EAAAkG,OAAM,GAAIrF,GAAAA,aAGVb,EAAAotE,oBAAkE,GAAIvsE,GAAAA,aAetEb,EAAA+zC,WAA0B,aAE1B/zC,EAAAg3E,uBAA2C,GAE3Ch3E,EAAAi3E,mBAAqDC,GAAqBC,KAE1En3E,EAAAq1B,8BAAgE,aAqChEr1B,EAAAmxB,UAA8B,EAc9BnxB,EAAAy7B,WAA+B,EAwB/Bz7B,EAAAo3E,gBAAoC,EA9DhCp3E,EAAKyH,SAAWC,SAASD,IAAa,IA8C1C,MAvHiCvG,GAAjCisE,EAAAltE,GAoBEkB,OAAFC,eAAM+rE,EAAN9wE,UAAA,eAAE,WAAwB,OAAUL,KAAKiuB,IAAMjuB,KAAKi1B,WAApD,0CAIA9vB,OAAAC,eAAM+rE,EAAN9wE,UAAA,gBAAA,WAA4B,MAAOL,MAAKk1B,eACtC,SAAa7vB,GAAkBrF,KAAKk1B,UAAY5vB,EAAAA,sBAAsBD,oCAmDtE8rE,EAAF9wE,UAAAqO,gBAAE,WAAA,GAAF1K,GAAAhE,IACIA,MAAK4xB,cACFE,QAAQ9xB,KAAKw1B,cAAc/0B,eAC3ByG,UAAU,SAAAuuB,GAAe,MAAAzxB,GAAK0xB,oBAAoBD,MAGvD07C,EAAF9wE,UAAA8G,YAAE,WACEnH,KAAK4xB,cAAcI,eAAehyB,KAAKw1B,cAAc/0B,gBAOzD0E,OAAAC,eAAM+rE,EAAN9wE,UAAA,eAAA,WAA2B,MAAOL,MAAKm1B,cACrC,SAAY9vB,GACNA,GAASrF,KAAK20B,UAChB30B,KAAKm1B,SAAW9vB,EAChBrF,KAAKc,mBAAmBC,iDAU9BoE,OAAAC,eAAM+rE,EAAN9wE,UAAA,gBAAA,WAAmB,MAAOL,MAAKy/B,eAC7B,SAAap6B,GACPA,GAASrF,KAAK8I,WAChB9I,KAAKy/B,UAAYp6B,EACjBrF,KAAKc,mBAAmBC,iDAY9BoE,OAAAC,eAAM+rE,EAAN9wE,UAAA,qBAAA,WAAiC,MAAOL,MAAKo7E,oBAC3C,SAAkB/1E,GAChB,GAAMg2E,GAAUh2E,GAASrF,KAAKo7E,cAC9Bp7E,MAAKo7E,eAAiB/1E,EAElBg2E,IACEr7E,KAAKo7E,eACPp7E,KAAKs7E,sBAAsBJ,GAAqBK,eAEhDv7E,KAAKs7E,sBACHt7E,KAAK20B,QAAUumD,GAAqBM,QAAUN,GAAqBO,WAEvEz7E,KAAKoxE,oBAAoB/qE,KAAKrG,KAAKo7E,kDAKvCjK,EAAF9wE,UAAA0gC,kBAAE,WACE,MAAO/gC,MAAKghC,eAAiBhhC,KAAK8I,UAIpCqoE,EAAF9wE,UAAAu3B,mBAAE,WAIE53B,KAAKc,mBAAmBC,gBAI1BowE,EAAF9wE,UAAA01B,WAAE,SAAW1wB,GACTrF,KAAK20B,UAAYtvB,GAInB8rE,EAAF9wE,UAAA21B,iBAAE,SAAiBC,GACfj2B,KAAKq5B,8BAAgCpD,GAIvCk7C,EAAF9wE,UAAA61B,kBAAE,SAAkBD,GAChBj2B,KAAK+3C,WAAa9hB,GAIpBk7C,EAAF9wE,UAAA81B,iBAAE,SAAiBC,GACfp2B,KAAK8I,SAAWstB,GAGlB+6C,EAAF9wE,UAAAq7E,gBAAE,WACE,MAAO17E,MAAK20B,QAAU,OAAU30B,KAAKsxE,cAAgB,QAAU,SAGzDH,EAAV9wE,UAAAi7E,sBAAA,SAAgCK,GAC5B,GAAIC,GAAW57E,KAAKi7E,mBAChBnxE,EAAuB9J,KAAKW,YAAYF,aAExCm7E,KAAaD,IAGb37E,KAAKg7E,uBAAuBx5E,OAAS,GACvCsI,EAAQrE,UAAUC,OAAO1F,KAAKg7E,wBAGhCh7E,KAAKg7E,uBAAyBh7E,KAAK67E,0CAC/BD,EAAUD,GACd37E,KAAKi7E,mBAAqBU,EAEtB37E,KAAKg7E,uBAAuBx5E,OAAS,GACvCsI,EAAQrE,UAAUG,IAAI5F,KAAKg7E,0BAIvB7J,EAAV9wE,UAAAw1B,4BACI,GAAIruB,GAAQ,GAAIozE,GAChBpzE,GAAMktB,OAAS10B,KACfwH,EAAMmtB,QAAU30B,KAAK20B,QAErB30B,KAAKq5B,8BAA8Br5B,KAAK20B,SACxC30B,KAAKkK,OAAO7D,KAAKmB,IAIX2pE,EAAV9wE,UAAAq1B,oBAAA,SAA8BD,GAErBz1B,KAAKu2B,cAAgC,aAAhBd,EAEdA,IACVz1B,KAAK87E,qBACL97E,KAAK+3C,cAHL/3C,KAAKu2B,aAAev2B,KAAKqxE,OAAO36C,OAAO,EAAG,GAAIC,YAAY,KAQ9Dw6C,EAAF9wE,UAAAi2B,OAAE,WACEt2B,KAAK20B,SAAW30B,KAAK20B,SAUvBw8C,EAAF9wE,UAAAy1B,cAAE,SAActuB,GAAd,GAAFxD,GAAAhE,IAQIwH,GAAMouB,kBAGD51B,KAAK8I,UAAkC,SAAtB9I,KAAK+6E,aAkBf/6E,KAAK8I,UAAkC,SAAtB9I,KAAK+6E,eAGhC/6E,KAAKw1B,cAAc/0B,cAAck0B,QAAU30B,KAAK20B,QAChD30B,KAAKw1B,cAAc/0B,cAAc6wE,cAAgBtxE,KAAKsxE,gBApBlDtxE,KAAKsxE,eAAuC,UAAtBtxE,KAAK+6E,cAE7Bz0E,QAAQC,UAAUC,KAAK,WACrBxC,EAAKo3E,gBAAiB,EACtBp3E,EAAKotE,oBAAoB/qE,KAAKrC,EAAKo3E,kBAIvCp7E,KAAKs2B,SACLt2B,KAAKs7E,sBACDt7E,KAAKm1B,SAAW+lD,GAAqBM,QAAUN,GAAqBO,WAKxEz7E,KAAK61B,qBAUTs7C,EAAF9wE,UAAA2gB,MAAE,WACEhhB,KAAK4xB,cAAcyE,SAASr2B,KAAKw1B,cAAc/0B,cAAe,aAGhE0wE,EAAF9wE,UAAA07E,oBAAE,SAAoBv0E,GAIlBA,EAAMouB,mBAGAu7C,EAAV9wE,UAAAw7E,0CACA,SAAMD,EAAgCD,GAClC,GAAIK,GAAqB,EAEzB,QAAQJ,GACN,IAAKV,IAAqBC,KAGxB,GAAIQ,IAAaT,GAAqBM,QACpCQ,EAAa,wBACR,CAAA,GAAIL,GAAYT,GAAqBK,cAG1C,MAAO,EAFPS,GAAa,0BAIf,KACF,KAAKd,IAAqBO,UACxBO,EAAaL,IAAaT,GAAqBM,QAC3C,oBAAsB,yBAC1B,MACF,KAAKN,IAAqBM,QACxBQ,EAAaL,IAAaT,GAAqBO,UAC3C,oBAAsB,uBAC1B,MACF,KAAKP,IAAqBK,cACxBS,EAAaL,IAAaT,GAAqBM,QAC3C,wBAA0B,0BAIlC,MAAO,qBAAqBQ,GAItB7K,EAAV9wE,UAAAy7E,8BACQ97E,KAAKu2B,eACPv2B,KAAKu2B,aAAaC,UAClBx2B,KAAKu2B,aAAe,sBA1U1Bz0B,KAACC,EAAAA,UAADC,OAAAC,SAAA,eACEC,SAAU,g3CACVC,QAAF;u2KACE8G,SAAF,cACEtG,MACFC,MAAA,eACMi1B,OAAN,KACIg5C,qCAAJ,gBACIC,+BAAJ,UACIC,gCAAJ,WACIC,oCAAJ,6BAEApgE,WAAAqgE,IACA7uE,QAAA,gBAAA,QAAA,YACEC,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,8FAhGAZ,KAAEm2B,EAAAA,eAFFn2B,SAAEgL,GAAF7J,aAAAnB,KAAAmL,EAAAA,UAAAjL,MAAA,gBANAF,SAAQgL,GAAR7J,aAAAnB,KAAAoB,EAAAA,WAAApB,KAAAiL,EAAAA,OAAA/K,MAAAkvE,SAiLAC,EAAAhuE,wHA9DA8qB,KAAAnsB,KAAAuB,EAAAA,QAKA60B,WAAAp2B,KAAAuB,EAAAA,QAKAgyB,gBAAQvzB,KAARuB,EAAAA,QAMAuS,OAAA9T,KAAAuB,EAAAA,QAMA6G,SAAApI,KAAAyB,EAAAA,SAGA6tE,sBAAAtvE,KAAAyB,EAAAA,SAGA8B,QAAAvD,KAAAuB,EAAAA,QAIAmyB,gBAAA1zB,KAAAsB,EAAAA,UAAApB,MAAA,WAGAqvE,SAAAvvE,KAAAsB,EAAAA,UAAApB,MAAAm2B,MAGAxD,UAAA7yB,KAAAuB,EAAAA,QAGAyF,WAAAhH,KAAAuB,EAAAA,QAyCAiuE,gBAAGxvE,KAAHuB,EAAAA,SA8BA8tE,OCzNaI,IACX1gE,QAAS8zD,EAAAA,cACT7zD,YAAakP,EAAAA,WAAW,WAAM,MAAAwxD,MAC9Bh9C,OAAO,8EArBT,MAmCkDtvB,GAAlDssE,EAAAvtE,kBANAnC,KAACyK,EAAAA,UAADvK,OACEC,SAAU,8HAEV2O,WAAY2gE,IACZ5uE,MAAO8uE,kBAAmB,4BAjC5BD,GAmCkDE,EAAAA,uDCnClD,sBAgBA5vE,KAACoL,EAAAA,SAADlL,OACEmL,SAAUC,EAAAA,aAAcG,GAAiBF,GAAiBG,EAAAA,iBAC1DC,SAAU0jE,GAAaK,GAA8BnkE,IACrDQ,cAAesjE,GAAaK,QAnB9BG,KCgDAC,GAAA,WACE,QAAFA,GAEWl9C,EAEA5f,EAEAqnC,sBAJAn8C,KAAX00B,OAAWA,EAEA10B,KAAX8U,SAAWA,EAEA9U,KAAXm8C,YAAWA,EAvDX,MAAAy1B,MA6DAC,GAAA,WACE,QAAFA,GAAqBlxE,GAAAX,KAArBW,YAAqBA,EA9DrB,MAAAkxE,MAiEaC,GACTjuE,EAAWC,EAAmBuH,EAAcwmE,KAAe,WAEzDE,IAAwB,8CApE9B,sBA0EAjwE,KAACyK,EAAAA,UAADvK,OACEC,SAAU,mCACVU,MAAOC,MAAS,uBA5ElBovE,iCAAA,sBAoFAlwE,KAACyK,EAAAA,UAADvK,OACEC,SAAU,gDACVU,MAAOC,MAAS,8BAtFlBqvE,oBAuNE,QAAFC,GAAqBvxE,EACP4qE,EACA7sC,EAC+C/yB,GAH3D,GAAF3H,GAIIC,EAJJC,KAAAlE,KAIUW,IAJVX,WAAqBgE,GAArBrD,YAAqBA,EA/FrBqD,EAAA4H,gBAcA5H,EAAA0iD,WAAuB,EAGvB1iD,EAAAmuE,oBAAgC,EAsBhCnuE,EAAAs7B,WAAiC,EAuBjCt7B,EAAAouE,aAAmC,EAUnCpuE,EAAAquE,YAAkC,EAGlCruE,EAAA43B,SAAsB,GAAIhyB,GAAAA,QAG1B5F,EAAA63B,QAAqB,GAAIjyB,GAAAA,QAIzB5F,EAAA+hC,gBAAM,GAAIlhC,GAAAA,aAGVb,EAAAsuE,UAA6D,GAAIztE,GAAAA,aAGjEb,EAAA6jD,QAA2D,GAAIhjD,GAAAA,aAa3Db,EAAKuuE,oBAELvuE,EAAKwuE,YAAc,GAAIC,IAAezuE,EAAMunE,EAAQ5qE,EAAa+9B,GACjE16B,EAAKwuE,YAAYhnE,mBAAmB7K,EAAYF,eAE5CkL,IACF3H,EAAK4H,cACHE,YAAaH,EAAcI,gBAC3BC,UAAWL,EAAcK,UACzBH,qBAAsBF,EAAcE,yBAtO5C,MAkH6B3G,GAA7BgtE,EAAAjuE,GAeEkB,OAAFC,eAAM8sE,EAAN7xE,UAAA,sBAAE,WACE,MAAOL,MAAK8I,UAAY9I,KAAKghC,+CAoBjC77B,OAAAC,eAAM8sE,EAAN7xE,UAAA,gBAAA,WAA4B,MAAOL,MAAKs/B,eACtC,SAAaj6B,GACXrF,KAAKs/B,UAAYh6B,EAAAA,sBAAsBD,GACvCrF,KAAK+lC,gBAAgB1/B,MACnBquB,OAAQ10B,KACRm8C,aAAa,EACbrnC,SAAUzP,qCAOhBF,OAAAC,eAAM8sE,EAAN7xE,UAAA,wBACI,WAAsByM,IAAf9M,KAAK+4B,OACR/4B,KAAK+4B,OACL/4B,KAAKW,YAAYF,cAAc8O,iBAErC,SAAUlK,GAAcrF,KAAK+4B,OAAS1zB,mCAUxCF,OAAAC,eAAM8sE,EAAN7xE,UAAA,kBAAA,WAA8B,MAAOL,MAAKoyE,aAAepyE,KAAKmyE,wBAC5D,SAAe9sE,GACbrF,KAAKoyE,YAAc9sE,EAAAA,sBAAsBD,oCAQ7CF,OAAAC,eAAM8sE,EAAN7xE,UAAA,iBAAA,WAA6B,MAAOL,MAAKqyE,gBACvC,SAAchtE,GACZrF,KAAKqyE,WAAa/sE,EAAAA,sBAAsBD,oCAqB1CF,OAAFC,eAAM8sE,EAAN7xE,UAAA,oBAAE,WACE,MAAOL,MAAK0yE,WAAa1yE,KAAK8U,SAAS2kB,WAAa,sCAuBtDy4C,EAAF7xE,UAAAkyE,kBAAE,WAEE,IAAmB,GAAvB5qB,GAAA,EAAuBgrB,EAAvBZ,GAAuBpqB,EAAvBgrB,EAAAnxE,OAAuBmmD,IAAvB,CAAS,GAAMirB,GAAfD,EAAAhrB,EACM,IAAI3nD,KAAKW,YAAYF,cAAcmpE,aAAagJ,IAC9C5yE,KAAKW,YAAYF,cAAcoyE,QAAQp3D,gBAAkBm3D,EAEzD,WADC5yE,MAAKW,YAAwC,cAAE8E,UAAUG,IAAIgtE,GAIjE5yE,KAAKW,YAAwC,cAAE8E,UAAUG,IAAI,sBAGhEssE,EAAF7xE,UAAA8G,YAAE,WACEnH,KAAKsyE,UAAUjsE,MAAMysE,KAAM9yE,OAC3BA,KAAKwyE,YAAYO,wBAInBb,EAAF7xE,UAAAy8C,OAAE,WACE98C,KAAKs/B,WAAY,EACjBt/B,KAAK+lC,gBAAgB1/B,MACnBquB,OAAQ10B,KACRm8C,aAAa,EACbrnC,UAAU,KAKdo9D,EAAF7xE,UAAA28C,SAAE,WACEh9C,KAAKs/B,WAAY,EACjBt/B,KAAK+lC,gBAAgB1/B,MACnBquB,OAAQ10B,KACRm8C,aAAa,EACbrnC,UAAU,KAKdo9D,EAAF7xE,UAAA2yE,qBAAE,WACEhzE,KAAKs/B,WAAY,EAEjBt/B,KAAK+lC,gBAAgB1/B,MACnBquB,OAAQ10B,KACRm8C,aAAa,EACbrnC,UAAU,KAKdo9D,EAAF7xE,UAAA4yE,eAAE,SAAe92B,GASb,WATJ,KAAAA,IAAiBA,GAAjB,GACIn8C,KAAKs/B,WAAat/B,KAAK8U,SAEvB9U,KAAK+lC,gBAAgB1/B,MACnBquB,OAAQ10B,KACRm8C,YAANA,EACMrnC,SAAU9U,KAAKs/B,YAGVt/B,KAAK8U,UAIdo9D,EAAF7xE,UAAA2gB,MAAE,WACOhhB,KAAK0mD,YACR1mD,KAAKW,YAAYF,cAAcugB,QAC/BhhB,KAAK47B,SAAShxB,MAAMkoE,KAAM9yE,QAE5BA,KAAK0mD,WAAY,GASnBwrB,EAAF7xE,UAAAqF,OAAE,WACM1F,KAAKkzE,WACPlzE,KAAK6nD,QAAQxhD,MAAMysE,KAAM9yE,QAK7BkyE,EAAF7xE,UAAAsI,aAAE,SAAanB,GAEPxH,KAAK8I,WAITtB,EAAM6E,iBACN7E,EAAMouB,oBAIRs8C,EAAF7xE,UAAAyhB,eAAE,SAAeta,GACb,IAAIxH,KAAK8I,SAIT,OAAQtB,EAAMua,SACZ,IAAKoxD,GAAAA,OACL,IAAKC,GAAAA,UAEHpzE,KAAK0F,SAEL8B,EAAM6E,gBACN,MACF,KAAKoW,GAAAA,MAECziB,KAAK0yE,YACP1yE,KAAKizE,gBAAe,GAItBzrE,EAAM6E,mBAKZ6lE,EAAF7xE,UAAAgzE,MAAE,WACErzE,KAAK0mD,WAAY,EACjB1mD,KAAK67B,QAAQjxB,MAAMkoE,KAAM9yE,uBAvQ7B8B,KAACyK,EAAAA,UAADvK,OACEC,SAAU,yDACVG,QAAS,QAAS,WAAY,iBAC9B6G,SAAU,UACVtG,MACEC,MAAS,WACTq+C,kBAAmB,uBACnB1wC,KAAQ,SACR+iE,4BAA6B,WAC7BC,+BAAgC,SAChCC,sCAAuC,6BACvCC,4BAA6B,WAC7B/uB,kBAAmB,mBACnBl4C,uBAAwB,sBACxB86C,uBAAwB,eACxB16C,UAAW,uBACXywB,YAAa,yBACbF,UAAW,UACXC,SAAU,mDAhGdt7B,KAAEiP,EAAAA,aAKFjP,KAAEkJ,EAAAA,SATFlJ,KAAQ+K,EAAAA,WA+MR/K,SAAAgL,GAAA7J,aAAAnB,KAAeoB,EAAAA,WAAfpB,KAA2BiL,EAAAA,OAA3B/K,MAAkCgL,2BA9ElC0mE,SAAA5xE,KAAG2wB,EAAAA,aAAHzwB,MAAgBgwE,MAGhB2B,eAAA7xE,KAAG2wB,EAAAA,aAAHzwB,MAAgBiwE,MAGhB2B,aAAA9xE,KAAG2wB,EAAAA,aAAHzwB,MAAgBge,EAAAA,WAAW,WAAM,MAAA6zD,SAGjC/+D,WAAAhT,KAAGuB,EAAAA,QAaHgC,QAAAvD,KAAGuB,EAAAA,QAeHqvE,aAAA5wE,KAAGuB,EAAAA,QAUH6vE,YAAApxE,KAAGuB,EAAAA,QAcH0iC,kBAAAjkC,KAAGyB,EAAAA,SAIH+uE,YAAAxwE,KAAGyB,EAAAA,SAGHskD,UAAA/lD,KAAGyB,EAAAA,UAhNH2uE,GAkH6BJ,kBA4Q3B,QAAF+B,GAAwBC,GAAA9zE,KAAxB8zE,YAAwBA,EA9XxB,MAkYED,GAAFxzE,UAAAsI,aAAE,WACM3I,KAAK8zE,YAAYZ,WACnBlzE,KAAK8zE,YAAYpuE,yBAdvB5D,KAACyK,EAAAA,UAADvK,OACEC,SAAU,kBACVU,MACEC,MAAS,yCACTgK,UAAW,0DAxQf9K,KAAaowE,MAlHb2B,KCiBaE,GACT,GAAIx2D,GAAAA,eAAuC,6BCwB/Cy2D,GAAA,WACE,QAAFA,GAAqBn9B,EACAC,EACAC,EAEAC,GAJAh3C,KAArB62C,0BAAqBA,EACA72C,KAArB82C,YAAqBA,EACA92C,KAArB+2C,iBAAqBA,EAEA/2C,KAArBg3C,UAAqBA,EA/CrB,MAAAg9B,MAiDaC,GAAwB/8B,EAAgB88B,IAIjD5/C,GAAe,EAGnB8/C,GAAA,WACE,QAAFA,GAEWx/C,EAEArvB,GAFArF,KAAX00B,OAAWA,EAEA10B,KAAXqF,MAAWA,EA7DX,MAAA6uE,qBAoUE,QAAFC,GAAwBxzE,EACFG,EACY0I,EACRstC,EACAC,EACZF,EAE2BG,GAPvC,GAAFhzC,GAQIC,EARJC,KAAAlE,KAQU62C,EAA2BC,EAAaC,EAAkBC,IARpEh3C,WAAwBgE,GAAxBrD,YAAwBA,EACFqD,EAAtBlD,mBAAsBA,EACYkD,EAAlCwF,KAAkCA,EAKOxF,EAAzCgzC,UAAyCA,EArOzChzC,EAAAs0C,YAAiC,gBAGjCt0C,EAAAowE,oBAA+C,KAG/CpwE,EAAAqwE,SAAkD,GAAI7nD,SAGtDxoB,EAAAswE,oBAAgChwE,EAAAA,aAAaC,MAqB7CP,EAAA2zC,KAAiB,iBAAiBvjB,KAMlCpwB,EAAAuwE,UAAc,EAMdvwE,EAAAwwE,cAAiC,KAMjCxwE,EAAA+zC,WAAe,aAGf/zC,EAAA8zC,UAAoC,aAqBpC9zC,EAAAuzC,WAA+B,EAgB/BvzC,EAAAwzC,aAAyB,SAACC,EAASC,GAAY,MAAAD,KAAOC,GAgCtD1zC,EAAAkxB,WAAiC,EA2CjClxB,EAAAy7B,WAAiC,EAGjCz7B,EAAAywE,gBAA0E,aAc1EzwE,EAAAouE,aAAmC,EA8BnCpuE,EAAAkG,OAAM,GAAIrF,GAAAA,aAOVb,EAAAgiC,YAAsD,GAAInhC,GAAAA,aAclDb,EAAKgzC,YACPhzC,EAAKgzC,UAAU+B,cAAgB/0C,KAZrC,MAlOiCkB,GAAjCivE,EAAAlwE,GA8DEkB,OAAFC,eAAM+uE,EAAN9zE,UAAA,gBAAE,WACE,MAAOL,MAAK2lC,SAAW3lC,KAAKk5C,gBAAgBpkC,SAAW9U,KAAKk5C,gBAAgBpkC,SAAS,oCAIvF3P,OAAFC,eAAM+uE,EAAN9zE,UAAA,YAAE,WAA4B,MAAOL,MAAKs6C,MAAQ,KAAO,2CAOzDn1C,OAAAC,eAAM+uE,EAAN9zE,UAAA,gBAAA,WAA4B,MAAOL,MAAKu3C,eACtC,SAAalyC,GACXrF,KAAKu3C,UAAYjyC,EAAAA,sBAAsBD,oCAU3CF,OAAAC,eAAM+uE,EAAN9zE,UAAA,mBAAA,WAAqD,MAAOL,MAAKw3C,kBAC/D,SAAgBvhB,GACdj2B,KAAKw3C,aAAevhB,EAChBj2B,KAAKk5C,iBAEPl5C,KAAKq5C,wDAUXl0C,OAAAC,eAAM+uE,EAAN9zE,UAAA,aAAA,WAAqB,MAAOL,MAAK+4B,YAC/B,SAAU1zB,GACRrF,KAAK+1B,WAAW1wB,GAChBrF,KAAK+4B,OAAS1zB,mCAQhBF,OAAFC,eAAM+uE,EAAN9zE,UAAA,UAAE,WACE,MAAOL,MAAK00E,WAAa10E,KAAK00E,WAAWzmD,GAAKjuB,KAAK23C,sCAQvDxyC,OAAAC,eAAM+uE,EAAN9zE,UAAA,gBAAA,WAA4B,MAAOL,MAAKk1B,eACtC,SAAa7vB,GACXrF,KAAKk1B,UAAY5vB,EAAAA,sBAAsBD,GACvCrF,KAAKi5C,aAAaruC,wCAStBzF,OAAAC,eAAM+uE,EAAN9zE,UAAA,8BACI,MAAOL,MAAK00E,WAAa10E,KAAK00E,WAAWhvC,YAAc1lC,KAAKg5C,kBAE9D,SAAgB3zC,GACdrF,KAAKg5C,aAAe3zC,EACpBrF,KAAKi5C,aAAaruC,wCAKpBzF,OAAFC,eAAM+uE,EAAN9zE,UAAA,eAAE,WACE,MAAOL,MAAK20E,MAAMrlE,KAAK,SAAAwjE,GAAQ,MAAAA,GAAKpsB,aACjC1mD,KAAK00E,YAAc10E,KAAK00E,WAAWr8B,yCAOxClzC,OAAFC,eAAM+uE,EAAN9zE,UAAA,aAAE,WACE,QAASL,KAAK00E,YAAc10E,KAAK00E,WAAWp6B,QAAgC,IAAtBt6C,KAAK20E,MAAMnzE,wCAOnE2D,OAAFC,eAAM+uE,EAAN9zE,UAAA,wBAAE,WAAkC,OAAQL,KAAKs6C,OAASt6C,KAAKq4C,yCAO/DlzC,OAAAC,eAAM+uE,EAAN9zE,UAAA,gBAAA,WAA4B,MAAOL,MAAKg3C,YAAch3C,KAAKg3C,UAAUluC,SAAW9I,KAAKy/B,eACnF,SAAap6B,GAAkBrF,KAAKy/B,UAAYn6B,EAAAA,sBAAsBD,oCAWxEF,OAAAC,eAAM+uE,EAAN9zE,UAAA,kBAAA,WAA8B,MAAOL,MAAKoyE,iBACxC,SAAe/sE,GAAf,GAAFrB,GAAAhE,IACIA,MAAKoyE,YAAc9sE,EAAAA,sBAAsBD,GACrCrF,KAAK20E,OACP30E,KAAK20E,MAAMluE,QAAQ,SAAAqsE,GAAQ,MAAAA,GAAKX,mBAAqBnuE,EAAKouE,+CAMhEjtE,OAAAC,eAAM+uE,EAAN9zE,UAAA,gBAAA,SAAegF,GACXrF,KAAKw0E,cAAgBnvE,EACrBrF,KAAKu0E,UAAYlvE,mCAInBF,OAAFC,eAAM+uE,EAAN9zE,UAAA,4BAAE,WACE,MAAOoH,GAAAA,MAAXC,UAAA,GAAoB1H,KAAK20E,MAAMhtE,IAAI,SAAAmrE,GAAQ,MAAAA,GAAK/sC,oDAI9C5gC,OAAFC,eAAM+uE,EAAN9zE,UAAA,wBAAE,WACE,MAAOoH,GAAAA,MAAXC,UAAA,GAAoB1H,KAAK20E,MAAMhtE,IAAI,SAAAmrE,GAAQ,MAAAA,GAAKl3C,6CAI9Cz2B,OAAFC,eAAM+uE,EAAN9zE,UAAA,uBAAE,WACE,MAAOoH,GAAAA,MAAXC,UAAA,GAAoB1H,KAAK20E,MAAMhtE,IAAI,SAAAmrE,GAAQ,MAAAA,GAAKj3C,4CAI9C12B,OAAFC,eAAM+uE,EAAN9zE,UAAA,yBAAE,WACE,MAAOoH,GAAAA,MAAXC,UAAA,GAAoB1H,KAAK20E,MAAMhtE,IAAI,SAAAmrE,GAAQ,MAAAA,GAAKR,8CA+B9C6B,EAAF9zE,UAAA0G,mBAAE,WAAA,GAAF/C,GAAAhE,IACIA,MAAK85C,YAAc,GAAIwL,GAAAA,gBAAyBtlD,KAAK20E,OAClDpvB,WACApI,0BACApD,0BAA0B/5C,KAAKwJ,KAAOxJ,KAAKwJ,KAAKnE,MAAQ,OAI3DrF,KAAKs0E,oBAAsBt0E,KAAK85C,YAAYsD,OAAOl2C,UAAU,WAC3DlD,EAAKuwE,WAAa,EAClB/uD,WAAW,WAAM,MAAAxhB,GAAKuwE,UAAYvwE,EAAKwwE,eAAiB,MAI1Dx0E,KAAK40E,oBAAsB50E,KAAK20E,MAAM1tE,QAAQmD,KAAKkV,EAAAA,UAAU,OAAOpY,UAAU,WAC5ElD,EAAK6wE,cAGL7wE,EAAKq1C,uBAGLr1C,EAAK8wE,kBAGL9wE,EAAK+wE,gCAEL/wE,EAAKi1C,aAAaruC,UAItBupE,EAAF9zE,UAAAse,SAAE,WACE3e,KAAKk5C,gBAAkB,GAAIK,GAAAA,eAAwBv5C,KAAK2lC,aAAU74B,IAAW,GAC7E9M,KAAKi5C,aAAaruC,QAGpBupE,EAAF9zE,UAAAskC,UAAE,WACM3kC,KAAKg3C,WAIPh3C,KAAK05C,oBAITy6B,EAAF9zE,UAAA8G,YAAE,WACEnH,KAAKs0E,oBAAoBltE,cAErBpH,KAAK40E,qBACP50E,KAAK40E,oBAAoBxtE,cAGvBpH,KAAKg1E,yBACPh1E,KAAKg1E,wBAAwB5tE,cAG/BpH,KAAKi1E,qBACLj1E,KAAKi5C,aAAapuC,YAKpBspE,EAAF9zE,UAAA60E,cAAE,SAAcC,GACZn1E,KAAK00E,WAAaS,GAOpBhB,EAAF9zE,UAAAwgD,kBAAE,SAAkBC,GAAiB9gD,KAAK+gD,iBAAmBD,EAAIpG,KAAK,MAGpEy5B,EAAF9zE,UAAA01B,WAAE,SAAW1wB,GACLrF,KAAK20E,OACP30E,KAAKq6C,qBAAqBh1C,GAAO,IAKrC8uE,EAAF9zE,UAAA21B,iBAAE,SAAiBC,GACfj2B,KAAK83C,UAAY7hB,GAInBk+C,EAAF9zE,UAAA61B,kBAAE,SAAkBD,GAChBj2B,KAAK+3C,WAAa9hB,GAIpBk+C,EAAF9zE,UAAA81B,iBAAE,SAAiBC,GACfp2B,KAAK8I,SAAWstB,EAChBp2B,KAAKW,YAAYF,cAAcqI,SAAWstB,EAC1Cp2B,KAAKi5C,aAAaruC,QAOpBupE,EAAF9zE,UAAA2gD,iBAAE,WAAqBhhD,KAAKghB,SAM1BmzD,EAAF9zE,UAAA2gB,MAAE,WAGMhhB,KAAK00E,YAAc10E,KAAK00E,WAAWr8B,UAE5Br4C,KAAK20E,MAAMnzE,OAAS,GAC7BxB,KAAK85C,YAAYmB,qBACjBj7C,KAAKi5C,aAAaruC,SAElB5K,KAAKo1E,cACLp1E,KAAKi5C,aAAaruC,UAKtBupE,EAAF9zE,UAAA+0E,YAAE,WACMp1E,KAAK00E,YACP10E,KAAK00E,WAAW1zD,SAOpBmzD,EAAF9zE,UAAAs0D,SAAE,SAASntD,GACP,GAAMo9D,GAASp9D,EAA2B,MAGtCA,GAAMua,UAAYqxD,EAAAA,WAAapzE,KAAKq1E,cAAczQ,IACpD5kE,KAAK85C,YAAYoB,oBACjB1zC,EAAM6E,kBACGu4D,GAAUA,EAAOn/D,UAAU0J,SAAS,cAC7CnP,KAAK85C,YAAYiB,UAAUvzC,GAC3BxH,KAAKi5C,aAAaruC,SAQZupE,EAAZ9zE,UAAAy0E,gBAAE,WAEE90E,KAAKu0E,UAAYv0E,KAAKw0E,gBAAwC,IAAtBx0E,KAAK20E,MAAMnzE,QAAgB,EAAI,IAS/D2yE,EAAZ9zE,UAAAi1E,kBAAE,SAA4BxC,GAC1B,GAAIyC,GAAoBv1E,KAAK20E,MAAMlzE,UAAUka,QAAQm3D,EACjD9yE,MAAK6iB,cAAc0yD,KACjBzC,EAAKpsB,YAEH6uB,EAAYv1E,KAAK20E,MAAMnzE,OAAS,EAClCxB,KAAK85C,YAAY4C,cAAc64B,GACtBA,EAAY,GAAK,GAC1Bv1E,KAAK85C,YAAY4C,cAAc64B,EAAY,IAG3Cv1E,KAAK85C,YAAYuB,kBAAoBk6B,IACvCv1E,KAAKo0E,oBAAsBmB,KASvBpB,EAAZ9zE,UAAA00E,8BAAE,WACE,GAAIS,GAAax1E,KAAK20E,KAEtB,IAAgC,MAA5B30E,KAAKo0E,qBAA+BoB,EAAWh0E,OAAS,GAAKxB,KAAKq4C,QAAS,CAE7E,GAAMo9B,GAAgB1vE,KAAKC,IAAIhG,KAAKo0E,oBAAqBoB,EAAWh0E,OAAS,EAC7ExB,MAAK85C,YAAY4C,cAAc+4B,EAC/B,IAAIC,GAAY11E,KAAK85C,YAAYqB,UAE7Bu6B,IACFA,EAAU10D,QAKdhhB,KAAKo0E,oBAAsB,MASrBD,EAAV9zE,UAAAwiB,cAAA,SAAwBlc,GACpB,MAAOA,IAAS,GAAKA,EAAQ3G,KAAK20E,MAAMnzE,QAGlC2yE,EAAV9zE,UAAAg1E,cAAA,SAAwBvrE,GACpB,GAAIA,GAA8C,UAAnCA,EAAQy9B,SAAS9rB,cAA2B,CAEzD,OADS,EACKpW,MAGhB,OAAO,GAGT8uE,EAAF9zE,UAAAg6C,qBAAE,SAAqBh1C,EAAY82C,GAAjC,GAAFn4C,GAAAhE,IAII,QAJJ,KAAAm8C,IAAmCA,GAAnC,GACIn8C,KAAKq8C,kBACLr8C,KAAK20E,MAAMluE,QAAQ,SAAAqsE,GAAQ,MAAAA,GAAK91B,aAE5Bv0B,MAAMC,QAAQrjB,GAChBA,EAAMoB,QAAQ,SAAA61C,GAAgB,MAAAt4C,GAAKu4C,aAAaD,EAAcH,KAC9Dn8C,KAAKw8C,kBACA,CACL,GAAMm5B,GAAoB31E,KAAKu8C,aAAal3C,EAAO82C,EAI/Cw5B,IACEx5B,GACFn8C,KAAK85C,YAAY4C,cAAci5B,KAU/BxB,EAAV9zE,UAAAk8C,aAAA,SAAuBl3C,EAAY82C,kBAAnC,KAAAA,IAAmCA,GAAnC,EAEI,IAAMw5B,GAAoB31E,KAAK20E,MAAMlqE,KAAK,SAAAqoE,GACxC,MAAqB,OAAdA,EAAKztE,OAAiBrB,EAAKwzC,aAAas7B,EAAKztE,MAAQA,IAQ9D,OALIswE,KACFx5B,EAAcw5B,EAAkB3C,uBAAyB2C,EAAkB74B,SAC3E98C,KAAKk5C,gBAAgB4D,OAAO64B,IAGvBA,GAGDxB,EAAV9zE,UAAAg5C,0CAGI/yC,SAAQC,UAAUC,KAAK,YACjBxC,EAAKgzC,WAAahzC,EAAK+0B,UACzB/0B,EAAKq2C,qBAAqBr2C,EAAKgzC,UAAYhzC,EAAKgzC,UAAU3xC,MAAQrB,EAAK+0B,QAAQ,GAC/E/0B,EAAKi1C,aAAaruC,WAShBupE,EAAV9zE,UAAAg8C,gBAAA,SAA0BU,GACtB/8C,KAAKk5C,gBAAgB5Q,QACrBtoC,KAAK20E,MAAMluE,QAAQ,SAAAqsE,GACbA,IAAS/1B,GACX+1B,EAAK91B,aAGTh9C,KAAKi5C,aAAaruC,QAOZupE,EAAV9zE,UAAAm8C,iCACQx8C,MAAKu3C,YACPv3C,KAAKk5C,gBAAgB5Q,QAErBtoC,KAAK20E,MAAMluE,QAAQ,SAAAqsE,GACbA,EAAKh+D,UACP9Q,EAAKk1C,gBAAgB4D,OAAOg2B,KAGhC9yE,KAAKi5C,aAAaruC,SAKdupE,EAAV9zE,UAAAs9C,kBAAA,SAA4BC,GACxB,GAAIC,GAAmB,IAGrBA,GADEp1B,MAAMC,QAAQ1oB,KAAK8U,UACP9U,KAAK8U,SAASnN,IAAI,SAAAmrE,GAAQ,MAAAA,GAAKztE,QAE/BrF,KAAK8U,SAAW9U,KAAK8U,SAASzP,MAAQu4C,EAEtD59C,KAAK+4B,OAAS8kB,EACd79C,KAAKkK,OAAO7D,KAAK,GAAI6tE,IAAkBl0E,KAAM69C,IAC7C79C,KAAKgmC,YAAY3/B,KAAKw3C,GACtB79C,KAAK83C,UAAU+F,GACf79C,KAAKc,mBAAmBC,gBAI1BozE,EAAF9zE,UAAAgzE,MAAE,WAAA,GAAFrvE,GAAAhE,IACIA,MAAK85C,YAAY4C,eAAe,GAC3B18C,KAAK8I,WACJ9I,KAAK00E,WAKPlvD,WAAW,WACJxhB,EAAKq0C,SACRr0C,EAAK4xE,mBAKT51E,KAAK41E,mBAMXzB,EAAF9zE,UAAAu1E,eAAE,WACE51E,KAAK+3C,aACL/3C,KAAKc,mBAAmBC,eACxBf,KAAKi5C,aAAaruC,QAGZupE,EAAV9zE,UAAAw0E,uBACI70E,KAAKi1E,qBACLj1E,KAAK61E,sBACL71E,KAAK81E,0BACL91E,KAAK+1E,yBAIC5B,EAAV9zE,UAAA40E,8BACQj1E,KAAKg2E,yBACPh2E,KAAKg2E,uBAAuB5uE,cAC5BpH,KAAKg2E,uBAAyB,MAG5Bh2E,KAAKi2E,wBACPj2E,KAAKi2E,sBAAsB7uE,cAC3BpH,KAAKi2E,sBAAwB,MAG3Bj2E,KAAKk2E,6BACPl2E,KAAKk2E,2BAA2B9uE,cAChCpH,KAAKk2E,2BAA6B,OAK9B/B,EAAV9zE,UAAAy1E,6CACI91E,MAAKk2E,2BAA6Bl2E,KAAKm2E,qBAAqBjvE,UAAU,SAAAM,GACpEA,EAAMktB,OAAO5f,SACT9Q,EAAKk1C,gBAAgB4D,OAAOt1C,EAAMktB,QAClC1wB,EAAKk1C,gBAAgB8D,SAASx1C,EAAMktB,QAGnC1wB,EAAK2hC,UACR3hC,EAAK2wE,MAAMluE,QAAQ,SAAAqsE,IACZ9uE,EAAKk1C,gBAAgBwE,WAAWo1B,IAASA,EAAKh+D,UACjDg+D,EAAK91B,aAKPx1C,EAAM20C,aACRn4C,EAAK25C,uBAMHw2B,EAAV9zE,UAAAw1E,yCACI71E,MAAKg2E,uBAAyBh2E,KAAKo2E,iBAAiBlvE,UAAU,SAAAM,GAC5D,GAAI+tE,GAAoBvxE,EAAK2wE,MAAMlzE,UAAUka,QAAQnU,EAAMsrE,KAEvD9uE,GAAK6e,cAAc0yD,IACrBvxE,EAAK81C,YAAYu8B,sBAAsBd,GAEzCvxE,EAAKi1C,aAAaruC,SAGpB5K,KAAKi2E,sBAAwBj2E,KAAKs2E,gBAAgBpvE,UAAU,WAC1DlD,EAAKqvE,QACLrvE,EAAKi1C,aAAaruC,UAIdupE,EAAV9zE,UAAA01E,2CACI/1E,MAAKg1E,wBAA0Bh1E,KAAKu2E,kBAAkBrvE,UAAU,SAAAM,GAC9DxD,EAAKsxE,kBAAkB9tE,EAAMsrE,wBAnqBnChxE,KAACC,EAAAA,UAADC,OAAAC,SAAA,gBACEC,SAAU,qEACV+G,SAAU,cACVtG,MACFs+C,kBAAyB,YACnBO,0BAAN,2BACIJ,uBAAJ,sBACI50C,uBAAJ,sBACI60C,sBAAJ,aACIE,8BAAJ,WACI5wC,cAAJ,OACI6lE,iCAAJ,WACIC,gCAAJ,aACIC,iCAAkC,WAClC54C,0BAAJ,kBACIl7B,MAAJ,gBACIu6B,UAAJ,UACIC,SAAJ,UACIC,YAAJ,mBACIxF,OAAQ,QAEZjnB,YAAAC,QAAAgxC,GAAA/wC,YAAAqjE,IACAhyE,QAAA,mvEACEE,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,8FAxEAZ,KAAEkB,EAAAA,eAAFC,aAAAnB,KAAAoB,EAAAA,aAJApB,KAAEigD,EAAAA,OAAF9+C,aAAAnB,KAAAoB,EAAAA,aAPApB,KAAQkgD,EAAAA,mBAAR/+C,aAAAnB,KAAAoB,EAAAA,aAsBApB,KAA6DyU,KAA7DzU,KAA8BogD,EAAAA,UAA9Bj/C,aAAAnB,KAAAoB,EAAAA,WAAApB,KAAAm0C,EAAAA,UAAAk+B,EAAkDhxE,6EAuIlD0iC,cAAA/jC,KAAAuB,EAAAA,QAGAgC,QAAAvD,KAAAuB,EAAAA,QAYA60B,WAAAp2B,KAAAuB,EAAAA,QAeAqiC,cAAG5jC,KAAHuB,EAAAA,QAoBAyF,WAAAhH,KAAGuB,EAAAA,QAYHoxE,kBAAA3yE,KAAAuB,EAAAA,MAAArB,MAAA,sBAkCA0wE,aAAA5wE,KAAAuB,EAAAA,QAMAoI,WAAA3J,KAAAuB,EAAAA,QAMA6G,SAAApI,KAAAyB,EAAAA,SAUAyiC,cAAAlkC,KAAAyB,EAAAA,SA2BAoxE,QAAA7yE,KAAA0P,EAAAA,gBAAAxP,MAAAkwE,OAWAiC,OC1SI//C,GAAe,gBAsEjB,QAAFuiD,GACch2E,EACiCsmC,GADjCjnC,KAAdW,YAAcA,EACiCX,KAA/CinC,gBAA+CA,EAnD/CjnC,KAAAq4C,SAAqB,EAkBrBr4C,KAAA42E,YAAwB,EASxB52E,KAAA62E,kBAAgC72E,KAAKinC,gBAAgB4vC,kBAIrD72E,KAAA82E,QAA6C,GAAIjyE,GAAAA,aAOjD7E,KAAA0lC,YAAiC,GAGjC1lC,KAAAiuB,GAAwB,uBAAuBmG,KAW3Cp0B,KAAKw1B,cAAgBx1B,KAAKW,YAA6C,cAjG3E,MAkDAwE,QAAAC,eAAMuxE,EAANt2E,UAAA,gBAAA,SAAegF,GACPA,IACFrF,KAAK+2E,UAAY1xE,EACjBrF,KAAK+2E,UAAU7B,cAAcl1E,wCAQnCmF,OAAAC,eAAMuxE,EAANt2E,UAAA,iBAAA,WAA6B,MAAOL,MAAK42E,gBACvC,SAAcvxE,GAAkBrF,KAAK42E,WAAatxE,EAAAA,sBAAsBD,oCA2BxEF,OAAFC,eAAMuxE,EAANt2E,UAAA,aAAE,WAAuB,OAAQL,KAAKw1B,cAAcnwB,uCAYlDsxE,EAAFt2E,UAAAs0D,SAAE,SAASntD,GACPxH,KAAKg3E,aAAaxvE,IAIpBmvE,EAAFt2E,UAAAgzE,MAAE,WACMrzE,KAAKi3E,WACPj3E,KAAKg3E,eAEPh3E,KAAKq4C,SAAU,EAEVr4C,KAAK+2E,UAAU1+B,SAClBr4C,KAAK+2E,UAAU1D,QAEjBrzE,KAAK+2E,UAAU99B,aAAaruC,QAG9B+rE,EAAFt2E,UAAA62E,OAAE,WACEl3E,KAAKq4C,SAAU,EACfr4C,KAAK+2E,UAAU99B,aAAaruC,QAI9B+rE,EAAFt2E,UAAA22E,aAAE,SAAaxvE,IACNxH,KAAKw1B,cAAcnwB,OAAWmC,GACjCxH,KAAK+2E,UAAUpiB,SAASntD,KAErBA,GAASxH,KAAK62E,kBAAkBl7D,QAAQnU,EAAMua,UAAY,KAC7D/hB,KAAK82E,QAAQzwE,MAAO0d,MAAO/jB,KAAKw1B,cAAenwB,MAAOrF,KAAKw1B,cAAcnwB,QAErEmC,GACFA,EAAM6E,mBAKZsqE,EAAFt2E,UAAAyuD,SAAE,WAEE9uD,KAAK+2E,UAAU99B,aAAaruC,QAI9B+rE,EAAFt2E,UAAA2gB,MAAE,WAAgBhhB,KAAKw1B,cAAcxU,wBAjHrClf,KAACyK,EAAAA,UAADvK,OACEC,SAAU,yBACVgH,SAAU,gCACVtG,MACEC,MAAS,mCACTy6B,YAAa,mBACbD,SAAU,UACVD,UAAW,WACXgzB,UAAW,aACXt4B,OAAQ,KACRo1C,qBAAsB,+DA/B1BnrE,KAAmBiP,EAAAA,aAuFnBjP,SAAAgL,GAAA7J,aAAAnB,KAAKiL,EAAAA,OAAL/K,MAAY+xE,2BA/CZoD,WAAAr1E,KAAGuB,EAAAA,MAAHrB,MAAS,qBAWTi1E,YAAAn1E,KAAGuB,EAAAA,MAAHrB,MAAS,2BAWT60E,oBAAA/0E,KAAGuB,EAAAA,MAAHrB,MAAS,mCAIT80E,UAAAh1E,KAAGyB,EAAAA,OAAHvB,MAAU,0BAQV0jC,cAAA5jC,KAAGuB,EAAAA,QAGH4qB,KAAAnsB,KAAGuB,EAAAA,SAtFHszE,KCgBMS,IACJjD,GACAjC,GACAyE,GACA9C,GACA7B,GACAC,IAUFoF,IACQR,mBAAoBr0D,EAAAA,oCAjC5B,sBAyBA1gB,KAACoL,EAAAA,SAADlL,OACEyL,QAAS2pE,GACTvpE,aAAcupE,GACdxmE,WACE2F,IAEE1F,QAASkjE,GACTuD,SAAQ,SAhCdC,KCiCA/O,GAAA,wBAcAxoE,KAAAuQ,KAAsB,SAGtBvQ,KAAAwoB,WAAmC,GAGnCxoB,KAAA4yB,aAA0B,EAG1B5yB,KAAA20C,cAA2B,GAG3B30C,KAAAilC,cAA2B,EAG3BjlC,KAAAie,MAAmB,GAGnBje,KAAAuI,OAAoB,GASpBvI,KAAAopE,SAA+B,OAS/BppE,KAAAmR,KAAoB,KAMpBnR,KAAAw3E,gBAAoC,KAGpCx3E,KAAAs1B,UAA8B,KAG9Bt1B,KAAAy3E,WAAwB,EAMxBz3E,KAAA6mE,mBAAgC,EArGhC,MAAA2B,MCiBakP,IAIXC,YAAaziE,EAAAA,QAAQ,eAKnBC,EAAAA,MAAM,QAAS7M,EAAAA,OAAQ8M,UAAW,OAAQoR,QAAS,KACnDrR,EAAAA,MAAM,OAAQ7M,EAAAA,OAAQ8M,UAAW,oCAAqCoR,QAAS,KAC/ErR,EAAAA,MAAM,OAAQ7M,EAAAA,OAAQ8M,UAAW,yBAA0BoR,QAAS,KACpElR,EAAAA,WAAW,SAAUC,EAAAA,QAAQ,6DrBmE/B,QAAF4wD,GACYxlE,EACAmhC,EACAhhC,EAC8B2N,GAJxC,GAAFzK,GAMIC,EANJC,KAAAlE,OAAAA,WACYgE,GAAZrD,YAAYA,EACAqD,EAAZ89B,kBAAYA,EACA99B,EAAZlD,mBAAYA,EAC8BkD,EAA1CyK,UAA0CA,EArB1CzK,EAAA4zE,qCAAqE,KAMrE5zE,EAAA6zE,OAAsC,QAGtC7zE,EAAA2iE,uBAA2B,GAAI9hE,GAAAA,aAG/Bb,EAAAumE,gBAAmC,OAlBnC,MAFwCrlE,GAAxCihE,EAAAliE,GAsCEkiE,EAAF9lE,UAAAmnB,sBAAE,SAAyBC,GAMvB,MALIznB,MAAK4nB,cAAclI,eACrBo4D,IAGF93E,KAAK+3E,gCACE/3E,KAAK4nB,cAAcJ,sBAAsBC,IAOlD0+C,EAAF9lE,UAAAwnB,qBAAE,SAAwBJ,GAMtB,MALIznB,MAAK4nB,cAAclI,eACrBo4D,IAGF93E,KAAK+3E,gCACE/3E,KAAK4nB,cAAcC,qBAAqBJ,IAIzC0+C,EAAV9lE,UAAAmiC,sBACSxiC,KAAKuiC,aACRviC,KAAKuiC,WAAaviC,KAAK8hC,kBAAkBzV,OAAOrsB,KAAKW,YAAYF,gBAM/DT,KAAKkqB,QAAQutD,WACfz3E,KAAKuiC,WAAWM,gCAKZsjC,EAAV9lE,UAAAoiC,yBACI,GAAMu1C,GAAUh4E,KAAK43E,oCAGjBI,IAAoC,kBAAlBA,GAAQh3D,OAC5Bg3D,EAAQh3D,QAGNhhB,KAAKuiC,YACPviC,KAAKuiC,WAAWa,WAKZ+iC,EAAV9lE,UAAA03E,mDACQ/3E,MAAKyO,YACPzO,KAAK43E,qCAAuC53E,KAAKyO,UAAsC,cAGnFzO,KAAKW,YAAYF,cAAcugB,OAIjC1a,QAAQC,UAAUC,KAAK,WAAM,MAAAxC,GAAKrD,YAAYF,cAAcugB,YAMlEmlD,EAAF9lE,UAAAgxC,iBAAE,SAAiB7pC,GACO,UAAlBA,EAAMiZ,QACRzgB,KAAKwiC,aACsB,SAAlBh7B,EAAMiZ,SACfzgB,KAAKyiC,gBAGPziC,KAAK2mE,uBAAuBtgE,KAAKmB,IAInC2+D,EAAF9lE,UAAA43E,kBAAE,SAAkBzwE,GAChBxH,KAAK2mE,uBAAuBtgE,KAAKmB,IAInC2+D,EAAF9lE,UAAA2mE,oBAAE,WACEhnE,KAAK63E,OAAS,OAId73E,KAAKc,mBAAmBC,+BApJ5Be,KAACC,EAAAA,UAADC,OAAAC,SAAA,uBACEC,SAAU,8CACVC,QAAF;4tCACEE,cAAFC,EAAAA,kBAAAC,mFAKEI,MACFC,MAAe,uBACTukD,SAAN,KACI9lB,YAAJ,MACI1wB,cAAJ,gBACIwwC,yBAAJ,8CACID,oBAAJ,qBACIM,0BAAJ,mCACIwkB,iBAAJ,SACIC,uBAAJ,4BACIC,sBAAJ,kHAvDApkE,KAAEmJ,EAAAA,oBAmBFnJ,SAAmBgL,GAAnB7J,aAAAnB,KAAAoB,EAAAA,WAAApB,KAAAiL,EAAAA,OAAA/K,MAAA4N,EAAAA,eAsEAu2D,EAAAhjE,6EA3BAgjE,uBCrDI/S,GAAW,EAKfgT,GAAA,WAsBE,QAAFA,GACY7hD,EACD8hD,EACPC,EACSr4C,OAAb,KAAAA,IAAAA,EAAA,cAAwCmlC,KAJtC,IAAFpvD,GAAAhE,IACYA,MAAZukB,YAAYA,EACDvkB,KAAXqmE,mBAAWA,EAEErmE,KAAbiuB,GAAaA,EArBbjuB,KAAAilC,aAAsCjlC,KAAKqmE,mBAAmBn8C,QAAQ+a,aAGtEjlC,KAAAumE,WAAgC,GAAI38D,GAAAA,QAGpC5J,KAAAwmE,aAAkC,GAAI58D,GAAAA,QAGtC5J,KAAAymE,aAAkC,GAAI78D,GAAAA,QAMtC5J,KAAA0mE,iBAA+CpiE,EAAAA,aAAaC,MASxD8hE,EAAmB/sB,IAAMrrB,EAGzBo4C,EAAmBM,uBAAuBv8D,KACxC6E,EAAAA,OAAO,SAAAzH,GAAS,MAAoB,SAApBA,EAAMwsD,WAA0C,UAAlBxsD,EAAMiZ,UACpD3N,EAAAA,KAAK,IAEN5L,UAAU,WACTlD,EAAKuiE,WAAW37D,OAChB5G,EAAKuiE,WAAW17D,aAIlBw7D,EAAmBM,uBAAuBv8D,KACxC6E,EAAAA,OAAO,SAAAzH,GAAS,MAAoB,SAApBA,EAAMwsD,WAA0C,SAAlBxsD,EAAMiZ,UACpD3N,EAAAA,KAAK,IAEN5L,UAAU,WACTlD,EAAKugB,YAAYmB,UACjB1hB,EAAK0iE,iBAAiBt/D,cACtBpD,EAAKwiE,aAAa57D,KAAK5G,EAAK4iE,SAC5B5iE,EAAKwiE,aAAa37D,WAClB7G,EAAKmgE,kBAAiB,OAGxB5/C,EAAYggD,gBACTn6D,KAAK6E,EAAAA,OAAO,SAAAzH,GAAS,MAAAA,GAAMua,UAAY8mB,EAAAA,SAAW7kC,EAAKihC,gBACvD/9B,UAAU,WAAM,MAAAlD,GAAK0+B,UAEpB4jC,IAIFtmE,KAAK0mE,iBAAmBJ,EAASp/D,UAAU,WACrClD,EAAKqiE,mBAAmBn8C,QAAQ28C,mBAClC7iE,EAAK0+B,WAzFf,MAmGE0jC,GAAF/lE,UAAAqiC,MAAE,SAAMokC,GAAN,GAAF9iE,GAAAhE,IACIA,MAAK4mE,QAAUE,EAGf9mE,KAAKqmE,mBAAmBM,uBAAuBv8D,KAC7C6E,EAAAA,OAAO,SAAAzH,GAAS,MAAoB,UAApBA,EAAMwsD,YACtBlhD,EAAAA,KAAK,IAEN5L,UAAU,WACTlD,EAAKyiE,aAAa77D,KAAKk8D,GACvB9iE,EAAKyiE,aAAa57D,WAClB7G,EAAKugB,YAAYwiD,mBAGnB/mE,KAAKqmE,mBAAmBW,uBAM1BZ,EAAF/lE,UAAA4mE,UAAE,WACE,MAAOjnE,MAAKumE,WAAW1gD,gBAMzBugD,EAAF/lE,UAAA6jE,YAAE,WACE,MAAOlkE,MAAKwmE,aAAa3gD,gBAM3BugD,EAAF/lE,UAAA6mE,YAAE,WACE,MAAOlnE,MAAKymE,aAAa5gD,gBAM3BugD,EAAF/lE,UAAAyjC,cAAE,WACE,MAAO9jC,MAAKukB,YAAYuf,iBAM1BsiC,EAAF/lE,UAAAkkE,cAAE,WACE,MAAOvkE,MAAKukB,YAAYggD,iBAO1B6B,EAAF/lE,UAAAynC,eAAE,SAAelhC,GACb,GAAIuiC,GAAWnpC,KAAKmnE,sBAgBpB,OAdIvgE,KAAaA,EAASoX,MAAQpX,EAASqlB,OACzCrlB,EAASoX,KAAOmrB,EAASnrB,KAAKpX,EAASoX,MAAQmrB,EAASld,MAAMrlB,EAASqlB,OAEvEkd,EAASjd,qBAGPtlB,IAAaA,EAASulB,KAAOvlB,EAASwlB,QACxCxlB,EAASulB,IAAMgd,EAAShd,IAAIvlB,EAASulB,KAAOgd,EAAS/c,OAAOxlB,EAASwlB,QAErE+c,EAASi+B,mBAGXpnE,KAAKukB,YAAYujB,iBAEV9nC,MAQTomE,EAAF/lE,UAAAgnE,WAAE,SAAWppD,EAAwB1V,GAGjC,WAHJ,KAAA0V,IAAaA,EAAb,YAAA,KAAA1V,IAAqCA,EAArC,QACIvI,KAAKmnE,uBAAuBlpD,MAAMA,GAAO1V,OAAOA,GAChDvI,KAAKukB,YAAYujB,iBACV9nC,MAIDomE,EAAV/lE,UAAA8mE,gCACI,MAAOnnE,MAAKukB,YAAY4lB,YAAsD,kBA5LlFi8B,KCqCakB,GAAkB,GAAI/pD,GAAAA,eAAoB,iBAG1CgqD,GACT,GAAIhqD,GAAAA,eAAgC,8BAG3BiqD,GACT,GAAIjqD,GAAAA,eAAqC,8BACvCC,WAAY,OACZC,QAASgqD,IAgBFC,IACX72D,QAAS22D,GACT73C,MAAO/C,EAAAA,SACPgD,WAAY+3C,iBAqCZ,QAAFlD,GACcv7C,EACAE,EACYw+C,EACoC3gC,EACZD,EACZ6gC,EACxBC,GAPZ,GAAF9jE,GAAAhE,IACcA,MAAdkpB,SAAcA,EACAlpB,KAAdopB,UAAcA,EACYppB,KAA1B4nE,UAA0BA,EACoC5nE,KAA9DinC,gBAA8DA,EACZjnC,KAAlDgnC,gBAAkDA,EACZhnC,KAAtC6nE,cAAsCA,EACxB7nE,KAAd8nE,kBAAcA,EAnCd9nE,KAAA+nE,2BACA/nE,KAAAgoE,2BAAgD,GAAIp+D,GAAAA,QACpD5J,KAAAioE,sBAA2C,GAAIr+D,GAAAA,QAC/C5J,KAAAkoE,oBAAgC,GAAI16C,KAqBpCxtB,KAAAmoE,eAA8C3vB,EAAAA,MAAY,WAAM,MAAAx0C,GAAKokE,YAAY5mE,OAC3EwC,EAAKqkE,gBACLrkE,EAAKqkE,gBAAgBj+D,KAAKkV,EAAAA,cAAUxS,OArG1C,MAiFE3H,QAAFC,eAAMq/D,EAANpkE,UAAA,mBAAE,WACE,MAAOL,MAAK6nE,cAAgB7nE,KAAK6nE,cAAcO,YAAcpoE,KAAK+nE,yDAIpE5iE,OAAFC,eAAMq/D,EAANpkE,UAAA,iBAAE,WACE,MAAOL,MAAK6nE,cAAgB7nE,KAAK6nE,cAAcZ,UAAYjnE,KAAKioE,uDAGlE9iE,OAAFC,eAAMq/D,EAANpkE,UAAA,uBAAE,WACE,GAAMopB,GAASzpB,KAAK6nE,aACpB,OAAOp+C,GAASA,EAAO4+C,gBAAkBroE,KAAKgoE,4DA2BhDvD,EAAFpkE,UAAA2pB,KAAE,SAA0Bs+C,EAClBz+C,GADR,GAAF7lB,GAAAhE,IAKI,IAFA6pB,EAAS0+C,EAAqB1+C,EAAQ7pB,KAAKinC,iBAAmB,GAAIuhC,KAE9D3+C,EAAOoE,IAAMjuB,KAAKyoE,cAAc5+C,EAAOoE,IACzC,KAAMrF,OAAM,mBAAmBiB,EAAOoE,GAA5C,kDAGI,IAAM5D,GAAarqB,KAAK4qB,eAAef,GACjC6+C,EAAkB1oE,KAAK2oE,uBAAuBt+C,EAAYR,GAC1D++C,EAAY5oE,KAAK6oE,qBAA2BP,EACAI,EACAr+C,EACAR,EAWlD,OARK7pB,MAAKooE,YAAY5mE,QACpBxB,KAAK8oE,+CAGP9oE,KAAKooE,YAAYv1D,KAAK+1D,GACtBA,EAAU1E,cAAch9D,UAAU,WAAM,MAAAlD,GAAK+kE,kBAAkBH,KAC/D5oE,KAAKinE,UAAUr8D,KAAKg+D,GAEbA,GAMTnE,EAAFpkE,UAAA2oE,SAAE,WAGE,IAFA,GAAIhhE,GAAIhI,KAAKooE,YAAY5mE,OAElBwG,KAKLhI,KAAKooE,YAAYpgE,GAAG06B,SAQxB+hC,EAAFpkE,UAAAooE,cAAE,SAAcx6C,GACZ,MAAOjuB,MAAKooE,YAAY39D,KAAK,SAAAw+D,GAAU,MAAAA,GAAOh7C,KAAOA,KAQ/Cw2C,EAAVpkE,UAAAuqB,eAAA,SAAyBf,GACrB,GAAM6B,GAAgB1rB,KAAKw0C,kBAAkB3qB,EAC7C,OAAO7pB,MAAKkpB,SAASmD,OAAOX,IAQtB+4C,EAAVpkE,UAAAm0C,kBAAA,SAA4B00B,GACxB,GAAM/zD,GAAQ,GAAIwW,GAAAA,eAChBC,iBAAkB5rB,KAAKkpB,SAAStiB,WAAWilB,SAC3Cqe,eAAgBg/B,EAAah/B,gBAAkBlqC,KAAKgnC,kBACpDxe,WAAY0gD,EAAa1gD,WACzBoK,YAAas2C,EAAat2C,YAC1BhY,UAAWsuD,EAAatuD,UACxB07B,SAAU4yB,EAAa5yB,SACvB6yB,UAAWD,EAAaC,UACxBC,SAAUF,EAAaE,SACvBC,UAAWH,EAAaG,WAO1B,OAJIH,GAAav0B,gBACfx/B,EAAMw/B,cAAgBu0B,EAAav0B,eAG9Bx/B,GASDsvD,EAAVpkE,UAAAsoE,uBAAA,SAAiC1/B,EAAqBpf,GAClD,GAAIS,GAAkB,GAAIC,GAAAA,gBAAgB47C,GAAoBt8C,EAAO3L,kBACjEsM,EAAiDye,EAAQtpB,OAAO2K,EAGpE,OAFAE,GAAaC,SAASP,QAAUL,EAEzBW,EAAaC,UAYdg6C,EAAVpkE,UAAAwoE,qBACA,SAAMP,EACAI,EACAr+C,EACAR,GAIF,GAAM++C,GACF,GAAIxC,IAAmB/7C,EAAYq+C,EAAiB1oE,KAAK4nE,UAAW/9C,EAAOoE,GAW/E,IARIpE,EAAO+I,aACTvI,EAAWyZ,gBAAgB58B,UAAU,WAC9B0hE,EAAU3jC,cACb2jC,EAAUlmC,UAKZ4lC,YAAkC3yD,GAAAA,YACpC+yD,EAAgB7gD,qBACd,GAAIjJ,GAAAA,eAAkB0pD,EAAsB,MACnCx9C,UAAWjB,EAAO1Y,KAAMy3D,UAFzCA,SAGW,CACL,GAAM79C,GAAW/qB,KAAKgrB,gBAAmBnB,EAAQ++C,EAAWF,GACtDz9C,EAAay9C,EAAgBlhD,sBAC/B,GAAI+C,GAAAA,gBAAgB+9C,MAAwBx7D,GAAWie,GAC3D69C,GAAUzE,kBAAoBl5C,EAAWR,SAO3C,MAJAm+C,GACGvB,WAAWx9C,EAAO5L,MAAO4L,EAAOthB,QAChCu/B,eAAeje,EAAOjjB,UAElBgiE,GAWDnE,EAAVpkE,UAAA2qB,gBACA,SAAMnB,EACA++C,EACAF,GAEF,GAAMp8C,GAAezC,GAAUA,EAAO3L,kBAAoB2L,EAAO3L,iBAAiB6M,SAC5EwB,EAAkB,GAAIC,QAkB5B,OAZAD,GACGE,IAAI05C,GAAoBuC,GACxBj8C,IAAI66C,GAAiBz9C,EAAO1Y,MAC5Bsb,IAAI25C,GAAcwC,GAEhBt8C,GAAiBA,EAAargB,IAAIjJ,EAAAA,eAAgB,OACrDupB,EAAgBE,IAAIzpB,EAAAA,gBAClBqC,MAAOwkB,EAAOjP,UACd1Q,OAAQC,EAAAA,OAIL,GAAIuiB,GAAAA,eAAeJ,GAAgBtsB,KAAKopB,UAAWmD,IAOpDk4C,EAAVpkE,UAAA0oE,kBAAA,SAA4BH,GACxB,GAAMjiE,GAAQ3G,KAAKooE,YAAYzsD,QAAQitD,EAEnCjiE,IAAS,IACX3G,KAAKooE,YAAYlrD,OAAOvW,EAAO,GAI1B3G,KAAKooE,YAAY5mE,SACpBxB,KAAKkoE,oBAAoBzhE,QAAQ,SAAC6iE,EAAex/D,GAC3Cw/D,EACFx/D,EAAQigD,aAAa,cAAeuf,GAEpCx/D,EAAQ2/C,gBAAgB,iBAI5BzpD,KAAKkoE,oBAAoB5/B,QACzBtoC,KAAKqoE,gBAAgBz9D,UAQnB65D,EAAVpkE,UAAAyoE,wDACI,GAAMS,GAAmBvpE,KAAK8nE,kBAAkB0B,qBAGhD,IAAID,EAAiBE,cAGnB,IAAK,GAFCC,GAAWH,EAAiBE,cAAc12D,SAEvC/K,EAAI0hE,EAASloE,OAAS,EAAGwG,GAAK,EAAGA,IAAK,CAC7C,GAAI2hE,GAAUD,EAAS1hE,EAEnB2hE,KAAYJ,GACO,WAArBI,EAAQpiC,UACa,UAArBoiC,EAAQpiC,UACPoiC,EAAQC,aAAa,eAEtB5pE,KAAKkoE,oBAAoBz7C,IAAIk9C,EAASA,EAAQE,aAAa,gBAC3DF,EAAQ5f,aAAa,cAAe,0BAlR9CjoD,KAAC6qB,EAAAA,iDA/DD7qB,KAAE8qB,EAAAA,UAcF9qB,KAAEgrB,EAAAA,WAPFhrB,KAAQgoE,EAAAA,SAAR7mE,aAAAnB,KAyFOoB,EAAAA,aACPpB,SAAAgL,GAAA7J,aAAAnB,KAAOoB,EAAAA,WAAPpB,KAAmBiL,EAAAA,OAAnB/K,MAA0BulE,QAC1BzlE,SAAAgL,GAAA7J,aAAAnB,KAAOiL,EAAAA,OAAP/K,MAAcwlE,QAlCd1lE,KAAa2iE,EAAbxhE,aAAAnB,KAmCOoB,EAAAA,WAnCPpB,KAmCmBkrB,EAAAA,aAjGnBlrB,KAAEioE,EAAAA,oBAZFtF,KCqBIuF,GAAmB,gBAuBrB,QAAFC,GACuBrB,EACXjoE,EACAupE,GAFWlqE,KAAvB4oE,UAAuBA,EACX5oE,KAAZW,YAAYA,EACAX,KAAZkqE,QAAYA,EAVZlqE,KAAAs1B,UAA2C,eArC3C,MAiDE20C,GAAF5pE,UAAAse,SAAE,WACO3e,KAAK4oE,YAMR5oE,KAAK4oE,UAAYuB,EAAiBnqE,KAAKW,YAAaX,KAAKkqE,QAAQ9B,eAIrE6B,EAAF5pE,UAAAoe,YAAE,SAAYxX,GACV,GAAMmjE,GAAgBnjE,EAA1B,iBAAqDA,EAArD,qBAEQmjE,KACFpqE,KAAK8mE,aAAesD,EAAc9tB,8BAtCxCx6C,KAACyK,EAAAA,UAADvK,OACEC,SAAU,mDACVgH,SAAU,iBACVtG,MACEiK,UAAW,gCACXs0C,oBAAqB,YACrBp/C,KAAQ,kDAdZA,KAAQskE,GAARnjE,aAAAnB,KA2BKoB,EAAAA,aA9BLpB,KAAEiP,EAAAA,aAEFjP,KAAQ2iE,wBAoBRnvC,YAAAxzB,KAAGuB,EAAAA,MAAHrB,MAAS,gBAGT8kE,eAAAhlE,KAAGuB,EAAAA,MAAHrB,MAAS,sBAETqoE,kBAAAvoE,KAAGuB,EAAAA,MAAHrB,MAAS,qBA1CTioE,mBAmFE,QAAFK,GACwBvG,EACZpjE,EACAupE,GAFYlqE,KAAxB+jE,WAAwBA,EACZ/jE,KAAZW,YAAYA,EACAX,KAAZkqE,QAAYA,EALZlqE,KAAAiuB,GAAgB,oBAAoB+7C,KAjFpC,MAwFEM,GAAFjqE,UAAAse,SAAE,WAAA,GAAF3a,GAAAhE,IACSA,MAAK+jE,aACR/jE,KAAK+jE,WAAaoG,EAAiBnqE,KAAKW,YAAaX,KAAKkqE,QAAQ9B,cAGhEpoE,KAAK+jE,YACPz9D,QAAQC,UAAUC,KAAK,WACrB,GAAMqkB,GAAY7mB,EAAK+/D,WAAWsC,kBAE9Bx7C,KAAcA,EAAU0/C,kBAC1B1/C,EAAU0/C,gBAAkBvmE,EAAKiqB,sBA1B3CnsB,KAACyK,EAAAA,UAADvK,OACEC,SAAU,uCACVgH,SAAU,iBACVtG,MACEC,MAAS,mBACTi1B,OAAQ,8CA3DZ/1B,KAAQskE,GAARnjE,aAAAnB,KAkEKoB,EAAAA,aArELpB,KAAEiP,EAAAA,aAEFjP,KAAQ2iE,wBAgERx2C,KAAAnsB,KAAGuB,EAAAA,SAjFHinE,iCAAA,sBA6GAxoE,KAACyK,EAAAA,UAADvK,OACEC,SAAU,+DACVU,MAAOC,MAAS,0BA/GlB4nE,iCAAA,sBAwHA1oE,KAACyK,EAAAA,UAADvK,OACEC,SAAU,+DACVU,MAAOC,MAAS,0BA1HlB6nE,iCCAA,sBAuBA3oE,KAACoL,EAAAA,SAADlL,OACEmL,SACEC,EAAAA,aACA6f,EAAAA,cACA3f,EAAAA,aACAD,IAEFI,SACE04D,GACA8D,GACAK,GACAE,GACAC,GACAp9D,IAEFQ,cACEs4D,GACA8D,GACAK,GACAG,GACAD,IAEF55D,WACE6zD,GACAiD,IAEFx6C,iBAAkBi5C,QAjDpB5U,gFCAA,MA4ByCrsD,GAAzCwlE,EAAAzmE,GAEAkB,OAAAC,eAAMslE,EAANrqE,UAAA,0BAAA,WAAqC,MAAOL,MAAK2qE,aAC/C,SAAuBtlE,GAAiBrF,KAAK2qE,QAAUtlE,mCAGzDF,OAAAC,eAAMslE,EAANrqE,UAAA,0BAAA,WAAqC,MAAOL,MAAK4qE,aAC/C,SAAuBvlE,GAAiBrF,KAAK4qE,QAAUvlE,kDAnBzDvD,KAACyK,EAAAA,UAADvK,OACEC,SAAU,wDACVgH,SAAU,sBACV7G,QAAS,qBAAsB,sBAC/BO,MACEC,MAAS,qCAGTioE,KAAQ,IACR1a,UAAW,6CAIf2a,qBAAAhpE,KAAGuB,EAAAA,QAIH0nE,qBAAAjpE,KAAGuB,EAAAA,SAjCHqnE,GA4ByCM,EAAAA,qBCX5Blb,GACT,GAAIvyC,GAAAA,eAA6B,4BCe/B0tD,IACJ,SACA,WACA,OACA,SACA,QACA,QACA,QACA,QACA,UAGE72C,GAAe,EAInB82C,GAAA,WACE,QAAFA,GAAqBr0B,EACAC,EACAC,EAEAC,GAJAh3C,KAArB62C,0BAAqBA,EACA72C,KAArB82C,YAAqBA,EACA92C,KAArB+2C,iBAAqBA,EAEA/2C,KAArBg3C,UAAqBA,EAtDrB,MAAAk0B,MAwDaC,GAAqBj0B,EAAgBg0B,mBA6JhD,QAAFE,GAAwBzqE,EACA4N,EAEiByoC,EACfF,EACAC,EACZF,EACsDw0B,EAC9CC,EACRC,GATZ,GAAFvnE,GAUIC,EAVJC,KAAAlE,KAUU62C,EAA2BC,EAAaC,EAAkBC,IAVpEh3C,WAAwBgE,GAAxBrD,YAAwBA,EACAqD,EAAxBuK,UAAwBA,EAEiBvK,EAAzCgzC,UAAyCA,EAKnBhzC,EAAtBsnE,iBAAsBA,EAvItBtnE,EAAA2zC,KAAmB,aAAavjB,KAOhCpwB,EAAAwnE,WAAc,EAMdxnE,EAAAq0C,SAAqB,EAMrBr0C,EAAAi1C,aAAyC,GAAIrvC,GAAAA,QAM7C5F,EAAAs0C,YAAwB,YAMxBt0C,EAAAynE,YAAe,EAuBfznE,EAAAy7B,WAAwB,EAwBxBz7B,EAAAkxB,WAAwB,EAgBxBlxB,EAAA0nE,MAAoB,OAsBpB1nE,EAAA2nE,WAAsB,EAEtB3nE,EAAA4nE,uBACI,OACA,WACA,iBACA,QACA,OACA,QACA38D,OAAO,SAAA48D,GAAK,MAAAC,GAAAA,yBAAyB39C,IAAI09C,KAezC7nE,EAAK+nE,oBAAsBV,GAAsBrnE,EAAKrD,YAAYF,cAElEuD,EAAKgoE,qBAAuBhoE,EAAKqB,MAGjCrB,EAAKiqB,GAAKjqB,EAAKiqB,GAKX1f,EAAU+4B,KACZikC,EAAOvhE,kBAAkB,WACvBrJ,EAAYF,cAAcknC,iBAAiB,QAAS,SAACngC,GACnD,GAAIykE,GAAKzkE,EAAgC,MACpCykE,GAAG5mE,OAAU4mE,EAAGC,gBAAmBD,EAAGE,eAKzCF,EAAGG,kBAAkB,EAAG,GACxBH,EAAGG,kBAAkB,EAAG,QAMhCpoE,EAAKwnE,WAAaxnE,EAAKuK,UAAUK,YA5PrC,MAoF8B1J,GAA9BkmE,EAAAnnE,GAwCAkB,OAAAC,eAAMgmE,EAAN/qE,UAAA,2BACI,MAAIL,MAAKg3C,WAAyC,OAA5Bh3C,KAAKg3C,UAAUluC,SAC5B9I,KAAKg3C,UAAUluC,SAEjB9I,KAAKy/B,eAEd,SAAap6B,GACXrF,KAAKy/B,UAAYn6B,EAAAA,sBAAsBD,GAInCrF,KAAKq4C,UACPr4C,KAAKq4C,SAAU,EACfr4C,KAAKi5C,aAAaruC,yCAUxBzF,OAAAC,eAAMgmE,EAAN/qE,UAAA,UAAA,WAAqB,MAAOL,MAAKs5C,SAC/B,SAAOj0C,GAAiBrF,KAAKs5C,IAAMj0C,GAASrF,KAAK23C,sCAcnDxyC,OAAAC,eAAMgmE,EAAN/qE,UAAA,gBAAA,WAA4B,MAAOL,MAAKk1B,eACtC,SAAa7vB,GAAkBrF,KAAKk1B,UAAY5vB,EAAAA,sBAAsBD,oCAKxEF,OAAAC,eAAMgmE,EAAN/qE,UAAA,YAAA,WAAuB,MAAOL,MAAK0rE,WACjC,SAASrmE,GACPrF,KAAK0rE,MAAQrmE,GAAS,OACtBrF,KAAKqsE,iBAKArsE,KAAKssE,eAAiBR,EAAAA,yBAAyB39C,IAAInuB,KAAK0rE,SAC3D1rE,KAAKW,YAAYF,cAAcqB,KAAO9B,KAAK0rE,wCAajDvmE,OAAAC,eAAMgmE,EAAN/qE,UAAA,aAAA,WAAwB,MAAOL,MAAK+rE,oBAAoB1mE,WACtD,SAAUA,GACJA,IAAUrF,KAAKqF,QACjBrF,KAAK+rE,oBAAoB1mE,MAAQA,EACjCrF,KAAKi5C,aAAaruC,yCAMxBzF,OAAAC,eAAMgmE,EAAN/qE,UAAA,gBAAA,WAA4B,MAAOL,MAAK2rE,eACtC,SAAatmE,GAAkBrF,KAAK2rE,UAAYrmE,EAAAA,sBAAsBD,oCAsDtE+lE,EAAF/qE,UAAAse,SAAE,WAAA,GAAF3a,GAAAhE,IACIA,MAAKsrE,iBAAiBx5C,QAAQ9xB,KAAKW,YAAYF,eAAeyG,UAAU,SAAAM,GACtExD,EAAKynE,WAAajkE,EAAM+kE,aACxBvoE,EAAKi1C,aAAaruC,UAItBwgE,EAAF/qE,UAAAoe,YAAE,WACEze,KAAKi5C,aAAaruC,QAGpBwgE,EAAF/qE,UAAA8G,YAAE,WACEnH,KAAKi5C,aAAapuC,WAClB7K,KAAKsrE,iBAAiBt5C,eAAehyB,KAAKW,YAAYF,gBAGxD2qE,EAAF/qE,UAAAskC,UAAE,WACM3kC,KAAKg3C,WAIPh3C,KAAK05C,mBAMP15C,KAAKwsE,0BAIPpB,EAAF/qE,UAAA2gB,MAAE,WAAgBhhB,KAAKW,YAAYF,cAAcugB,SAG/CoqD,EAAF/qE,UAAAkH,cAAE,SAAcklE,GACRA,IAAczsE,KAAKq4C,SAAYr4C,KAAK0sE,WACtC1sE,KAAKq4C,QAAUo0B,EACfzsE,KAAKi5C,aAAaruC,SAItBwgE,EAAF/qE,UAAAyuD,SAAE,aAWUsc,EAAZ/qE,UAAAmsE,uBAAE,WACE,GAAM5sC,GAAW5/B,KAAKqF,KAElBrF,MAAKgsE,uBAAyBpsC,IAChC5/B,KAAKgsE,qBAAuBpsC,EAC5B5/B,KAAKi5C,aAAaruC,SAKZwgE,EAAZ/qE,UAAAgsE,cAAE,WACE,GAAIpB,GAAwBtvD,QAAQ3b,KAAK0rE,QAAU,EACjD,KAAMiB,GAAgC3sE,KAAK0rE,QAKrCN,EAAZ/qE,UAAAusE,cAAE,WACE,MAAO5sE,MAAK4rE,sBAAsBjwD,QAAQ3b,KAAK0rE,QAAU,GAIjDN,EAAZ/qE,UAAAwsE,YAAE,WAEE,GAAIC,GAAY9sE,KAAKW,YAA6C,cAAEmsE,QACpE,OAAOA,IAAYA,EAASC,UAIpB3B,EAAZ/qE,UAAAisE,YAAE,WACE,MAAiE,aAA1DtsE,KAAKW,YAAYF,cAAc8mC,SAAS9rB,eAOjDtW,OAAFC,eAAMgmE,EAAN/qE,UAAA,aAAE,WACE,QAAQL,KAAK4sE,iBAAoB5sE,KAAKW,YAAYF,cAAc4E,OAAUrF,KAAK6sE,eAC1E7sE,KAAKyrE,6CAOZtmE,OAAFC,eAAMgmE,EAAN/qE,UAAA,wBAAE,WAAkC,MAAOL,MAAKq4C,UAAYr4C,KAAKs6C,uCAM/D8wB,EAAF/qE,UAAAwgD,kBAAE,SAAkBC,GAAiB9gD,KAAK+gD,iBAAmBD,EAAIpG,KAAK,MAMpE0wB,EAAF/qE,UAAA2gD,iBAAE,WAAqBhhD,KAAKghB,wBAlT5Blf,KAACyK,EAAAA,UAADvK,OACEC,SAAU,sCACVgH,SAAU,WACVtG,MAIEC,MAAS,oDACToqE,2BAA4B,YAG5B3rC,YAAa,KACb4rC,qBAAsB,cACtB/c,aAAc,WACdgd,aAAc,WACdC,aAAc,WACd3rB,0BAA2B,2BAC3BH,sBAAuB,aACvBD,uBAAwB,sBACxBhkB,SAAU,uBACVD,UAAW,sBACXgzB,UAAW,cAEbv/C,YAAaC,QAASgxC,GAAqB/wC,YAAas6D,4CArE1DtpE,KAAEiP,EAAAA,aAJFjP,KAAgC+K,EAAAA,WAchC/K,KAA4BogD,EAAAA,UAA5Bj/C,aAAAnB,KAiMeoB,EAAAA,WAjMfpB,KAiM2Bm0C,EAAAA,SAjM3Bn0C,KAAuCigD,EAAAA,OAAvC9+C,aAAAnB,KAkMeoB,EAAAA,aAlMfpB,KAAQkgD,EAAAA,mBAAR/+C,aAAAnB,KAmMeoB,EAAAA,aAlMfpB,KAA6ByU,KAoM7BzU,SAAAgL,GAAA7J,aAAAnB,KAAeoB,EAAAA,WAAfpB,KAA2Bm0C,EAAAA,OAA3Bn0C,KAAmCiL,EAAAA,OAAnC/K,MAA0C8tD,QAjM1ChuD,KAAQsrE,EAAAA,kBANRtrE,KAAEkJ,EAAAA,4BAsGFlC,WAAAhH,KAAGuB,EAAAA,QAuBH4qB,KAAAnsB,KAAGuB,EAAAA,QASHqiC,cAAA5jC,KAAGuB,EAAAA,QAMH60B,WAAAp2B,KAAGuB,EAAAA,QAMHvB,OAAAA,KAAGuB,EAAAA,QAgBHyiC,oBAAAhkC,KAAGuB,EAAAA,QAMHgC,QAAAvD,KAAGuB,EAAAA,QAUHqpE,WAAA5qE,KAAGuB,EAAAA,SAvMH+nE,GAoF8BD,gCCpF9B,sBAiBArpE,KAACoL,EAAAA,SAADlL,OACE6L,cAAeu9D,GAAUV,IACzBv9D,SACEC,EAAAA,aACAigE,EAAAA,gBACAlnC,IAEF14B,SACE4/D,EAAAA,gBAGAlnC,GACAilC,GACAV,IAEF95D,WAAY2F,QAhCd+2D,gCCmBAttE,KAAAiH,QAAoC,GAAI2C,GAAAA,QAGxC5J,KAAAutE,cAA0B,WAG1BvtE,KAAAwtE,kBAA8B,gBAG9BxtE,KAAA8gE,eAA2B,iBAG3B9gE,KAAAkhE,eAA2B,aAG3BlhE,KAAA+gE,cAA0B,gBAG1B/gE,KAAAmhE,cAA0B,YAG1BnhE,KAAAihE,mBAA+B,oBAG/BjhE,KAAAohE,mBAA+B,gBAG/BphE,KAAA6gE,uBAAmC,cAGnC7gE,KAAA4gE,2BAAuC,wBAjDvC,sBAaA9+D,KAAC6qB,EAAAA,WAAD3qB,OAAawb,WAAY,8GAbzBy0C,KCwBA8K,GAAA,WACE,QAAFA,GAAqB13D,EACAooE,EACAn4C,EACA6N,GAHAnjC,KAArBqF,MAAqBA,EACArF,KAArBytE,aAAqBA,EACAztE,KAArBs1B,UAAqBA,EACAt1B,KAArBmjC,QAAqBA,EA5BrB,MAAA45B,oBAoFE,QAAFrL,GAAsB/wD,EAAiC8I,GAAjCzJ,KAAtBW,YAAsBA,EAAiCX,KAAvDyJ,QAAuDA,EAjBvDzJ,KAAA0tE,QAAqB,EAGrB1tE,KAAA2tE,wBAAoC,EAGpC3tE,KAAA4tE,WAAwB,EAMxB5tE,KAAA6tE,gBAA6B,EAG7B7tE,KAAA8tE,oBAAiE,GAAIjpE,GAAAA,aAArE,MAIE6sD,GAAFrxD,UAAA0tE,aAAE,SAAaC,IACNhuE,KAAK2tE,wBAA2BK,EAAK7qC,UAG1CnjC,KAAK8tE,oBAAoBznE,KAAK2nE,EAAK3oE,QAIrCF,OAAFC,eAAMssD,EAANrxD,UAAA,uBAAE,WACE,MAAOL,MAAK6qE,MAAQ7qE,KAAK6qE,KAAKrpE,QAAUxB,KAAK6qE,KAAK,GAAGrpE,OACjDxB,KAAK0tE,QAAU1tE,KAAK6qE,KAAK,GAAGrpE,OAAS,mCAG3CkwD,EAAFrxD,UAAA4tE,cAAE,SAAcjY,EAAkBoC,GAC9B,GAAI8V,GAAalY,EAAWh2D,KAAK0tE,QAAUtV,CAO3C,OAJIpC,KACFkY,GAAcluE,KAAKmuE,iBAGdD,GAAcluE,KAAK4tE,YAI5Blc,EAAFrxD,UAAAg/D,iBAAE,WAAA,GAAFr7D,GAAAhE,IACIA,MAAKyJ,QAAQO,kBAAkB,WAC7BhG,EAAKyF,QAAQmvC,SAAS/yB,eAAezb,KAAK0I,EAAAA,KAAK,IAAI5L,UAAU,WAC3DlD,EAAKrD,YAAYF,cAAc6oD,cAAc,6BAA6BtoC,4BA9ElFlf,KAACC,EAAAA,UAADC,OAAAC,SAAA,sBACEC,SAAU,q1CACVC,QAAF,g0BACEQ,MACFC,MAAA,oBACM2N,KAAN,OACI69D,qBAAJ,QAEAnlE,SAAA,kBACA5G,cAAAC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,oFA9BAgvD,EAAAvuD,6DAoCAkrE,aAAAvsE,KAAQuB,EAAAA,QAGRirE,gBAAAxsE,KAAAuB,EAAAA,QAGAkrE,wBAAQzsE,KAARuB,EAAAA,QAGAqqE,UAAA5rE,KAAAuB,EAAAA,QAGAsqE,yBAAA7rE,KAAAuB,EAAAA,QAGAuqE,aAAA9rE,KAAAuB,EAAAA,QAGAwqE,kBAAA/rE,KAAAuB,EAAAA,QAGAyqE,sBAAAhsE,KAAAyB,EAAAA,UASAmuD,mBCiDE,QAAFG,GAAsB/wD,EACsCouD,EAC3BF,EACCxlD,GAC9B,GAJkBxJ,KAAtBc,mBAAsBA,EACsCd,KAA5DkvD,aAA4DA,EAC3BlvD,KAAjCgvD,aAAiCA,EACChvD,KAAlCwJ,KAAkCA,EAnClCxJ,KAAA09D,eAA8D,GAAI74D,GAAAA,aAGlE7E,KAAAsiE,eAA0D,GAAIz9D,GAAAA,aAG9D7E,KAAAwuE,iBAAyD,GAAI3pE,GAAAA,cA8BpD7E,KAAKgvD,aACR,KAAM8O,GAA2B,cAEnC,KAAK99D,KAAKkvD,aACR,KAAM4O,GAA2B,mBAGnC,IAAM2Q,GAAiBzuE,KAAKgvD,aAAa0f,oBACnCC,EAAiB3uE,KAAKgvD,aAAa4f,kBAAkB,UACrDC,EAAe7uE,KAAKgvD,aAAa4f,kBAAkB,QAGrDE,EAAWD,EAAalnE,IAAI,SAAConE,EAAM/mE,GACrC,OAAQ+mE,KAAdA,EAAoBC,OAAQL,EAAe3mE,KAEvChI,MAAKivE,UAAYH,EAAS//D,MAAM0/D,GAAgB5mE,OAAOinE,EAAS//D,MAAM,EAAG0/D,IAEzEzuE,KAAK+9D,YAAc/9D,KAAKgvD,aAAagP,QA5CzC,MAlDA74D,QAAAC,eAAMysD,EAANxxD,UAAA,kBAAA,WAAwB,MAAOL,MAAK+9D,iBAClC,SAAe14D,GACb,GAAM44D,GAAgBj+D,KAAK+9D,YACrBG,EACFl+D,KAAKqvD,oBAAoBrvD,KAAKgvD,aAAamP,YAAY94D,KAAWrF,KAAKgvD,aAAagP,OACxFh+D,MAAK+9D,YAAc/9D,KAAKgvD,aAAaoP,UAAUF,EAAWl+D,KAAKq9D,QAASr9D,KAAKm9D,SACxEn9D,KAAKkvE,qBAAqBjR,EAAej+D,KAAK+9D,cACjD/9D,KAAKq+D,yCAOXl5D,OAAAC,eAAMysD,EAANxxD,UAAA,gBAAA,WAA6B,MAAOL,MAAKs/B,eACvC,SAAaj6B,GACXrF,KAAKs/B,UAAYt/B,KAAKqvD,oBAAoBrvD,KAAKgvD,aAAamP,YAAY94D,IACxErF,KAAKmvE,cAAgBnvE,KAAKovE,uBAAuBpvE,KAAKs/B,4CAM1Dn6B,OAAAC,eAAMysD,EAANxxD,UAAA,eAAA,WAA4B,MAAOL,MAAKw+D,cACtC,SAAYn5D,GACVrF,KAAKw+D,SAAWx+D,KAAKqvD,oBAAoBrvD,KAAKgvD,aAAamP,YAAY94D,qCAM3EF,OAAAC,eAAMysD,EAANxxD,UAAA,eAAA,WAA4B,MAAOL,MAAKy+D,cACtC,SAAYp5D,GACVrF,KAAKy+D,SAAWz+D,KAAKqvD,oBAAoBrvD,KAAKgvD,aAAamP,YAAY94D,qCAgEzEwsD,EAAFxxD,UAAA0G,mBAAE,WACE/G,KAAKq+D,SAIPxM,EAAFxxD,UAAAgvE,cAAE,SAActgB,GACZ,GAAI/uD,KAAKmvE,eAAiBpgB,EAAM,CAC9B,GAAMugB,GAAetvE,KAAKgvD,aAAaoO,QAAQp9D,KAAK6+D,YAC9C0Q,EAAgBvvE,KAAKgvD,aAAamQ,SAASn/D,KAAK6+D,YAChD2Q,EAAexvE,KAAKgvD,aAAawO,WAAW8R,EAAcC,EAAexgB,EAE/E/uD,MAAK09D,eAAer3D,KAAKmpE,GAG3BxvE,KAAKsiE,eAAej8D,QAItBwrD,EAAFxxD,UAAA4+D,2BAAE,SAA2Bz3D,GAKzB,GAAMy2D,GAAgBj+D,KAAK+9D,YAErBjyC,EAAQ9rB,KAAKo6C,QACnB,QAAQ5yC,EAAMua,SACZ,IAAKG,GAAAA,WACHliB,KAAK6+D,WAAa7+D,KAAKgvD,aAAayO,gBAAgBz9D,KAAK+9D,YAAajyC,EAAQ,GAAK,EACnF,MACF,KAAK9J,GAAAA,YACHhiB,KAAK6+D,WAAa7+D,KAAKgvD,aAAayO,gBAAgBz9D,KAAK+9D,YAAajyC,GAAS,EAAI,EACnF,MACF,KAAKoQ,GAAAA,SACHl8B,KAAK6+D,WAAa7+D,KAAKgvD,aAAayO,gBAAgBz9D,KAAK+9D,aAAc,EACvE,MACF,KAAK5hC,GAAAA,WACHn8B,KAAK6+D,WAAa7+D,KAAKgvD,aAAayO,gBAAgBz9D,KAAK+9D,YAAa,EACtE,MACF,KAAK37C,GAAAA,KACHpiB,KAAK6+D,WAAa7+D,KAAKgvD,aAAayO,gBAAgBz9D,KAAK+9D,YACrD,EAAI/9D,KAAKgvD,aAAagQ,QAAQh/D,KAAK+9D,aACvC,MACF,KAAKz7C,GAAAA,IACHtiB,KAAK6+D,WAAa7+D,KAAKgvD,aAAayO,gBAAgBz9D,KAAK+9D,YACpD/9D,KAAKgvD,aAAa+P,kBAAkB/+D,KAAK+9D,aACxC/9D,KAAKgvD,aAAagQ,QAAQh/D,KAAK+9D,aACrC,MACF,KAAKhiC,GAAAA,QACH/7B,KAAK6+D,WAAar3D,EAAMszC,OACpB96C,KAAKgvD,aAAaoQ,iBAAiBp/D,KAAK+9D,aAAc,GACtD/9D,KAAKgvD,aAAakQ,kBAAkBl/D,KAAK+9D,aAAc,EAC3D,MACF,KAAK9hC,GAAAA,UACHj8B,KAAK6+D,WAAar3D,EAAMszC,OACpB96C,KAAKgvD,aAAaoQ,iBAAiBp/D,KAAK+9D,YAAa,GACrD/9D,KAAKgvD,aAAakQ,kBAAkBl/D,KAAK+9D,YAAa,EAC1D,MACF,KAAKv7C,GAAAA,MAOH,YANKxiB,KAAKs9D,aAAct9D,KAAKs9D,WAAWt9D,KAAK+9D,eAC3C/9D,KAAKqvE,cAAcrvE,KAAKgvD,aAAagQ,QAAQh/D,KAAK+9D,cAClD/9D,KAAKsiE,eAAej8D,OAEpBmB,EAAM6E,kBAGV,SAEE,OAGArM,KAAKgvD,aAAamW,YAAYlH,EAAej+D,KAAK6+D,aACpD7+D,KAAKwuE,iBAAiBnoE,KAAKrG,KAAK6+D,YAGlC7+D,KAAKq/D,mBAEL73D,EAAM6E,kBAIRwlD,EAAFxxD,UAAAg+D,MAAE,WACEr+D,KAAKmvE,cAAgBnvE,KAAKovE,uBAAuBpvE,KAAK8U,UACtD9U,KAAKyvE,WAAazvE,KAAKovE,uBAAuBpvE,KAAKgvD,aAAagP,SAChEh+D,KAAK0vE,YACD1vE,KAAKgvD,aAAa0Q,cAAc,SAAS1/D,KAAKgvD,aAAamQ,SAASn/D,KAAK6+D,aACpEkB,mBAET,IAAIK,GAAepgE,KAAKgvD,aAAawO,WAAWx9D,KAAKgvD,aAAaoO,QAAQp9D,KAAK6+D,YAC3E7+D,KAAKgvD,aAAamQ,SAASn/D,KAAK6+D,YAAa,EACjD7+D,MAAK2vE,kBA/Ma,EAgNG3vE,KAAKgvD,aAAa4gB,aAAaxP,GAC/CpgE,KAAKgvD,aAAa0f,qBAjNL,EAmNlB1uE,KAAK6vE,mBACL7vE,KAAKc,mBAAmBC,gBAI1B8wD,EAAFxxD,UAAAg/D,iBAAE,WACEr/D,KAAK49D,iBAAiByB,oBAIhBxN,EAAVxxD,UAAAwvE,4BACI,GAAM/Q,GAAc9+D,KAAKgvD,aAAa+P,kBAAkB/+D,KAAK6+D,YACvDiR,EAAY9vE,KAAKgvD,aAAa+gB,cACpC/vE,MAAKgwE,WACL,KAAK,GAAIhoE,GAAI,EAAGgmE,EAAOhuE,KAAK2vE,iBAAkB3nE,EAAI82D,EAAa92D,IAAKgmE,IAAQ,CAjO1D,GAkOZA,IACFhuE,KAAKgwE,OAAOn9D,SACZm7D,EAAO,EAET,IAAMjf,GAAO/uD,KAAKgvD,aAAawO,WACzBx9D,KAAKgvD,aAAaoO,QAAQp9D,KAAK6+D,YAC/B7+D,KAAKgvD,aAAamQ,SAASn/D,KAAK6+D,YAAa72D,EAAI,GACjDm7B,EAAUnjC,KAAKiwE,kBAAkBlhB,GACjCz5B,EAAYt1B,KAAKgvD,aAAaS,OAAOV,EAAM/uD,KAAKkvD,aAAaQ,QAAQwgB,cAC3ElwE,MAAKgwE,OAAOhwE,KAAKgwE,OAAOxuE,OAAS,GAC5BqR,KAAK,GAAIkqD,IAAgB/0D,EAAI,EAAG8nE,EAAU9nE,GAAIstB,EAAW6N,MAK1D0uB,EAAVxxD,UAAA4vE,kBAAA,SAA4BlhB,GACxB,QAASA,KACH/uD,KAAKs9D,YAAct9D,KAAKs9D,WAAWvO,OACnC/uD,KAAKq9D,SAAWr9D,KAAKgvD,aAAamW,YAAYpW,EAAM/uD,KAAKq9D,UAAY,MACrEr9D,KAAKm9D,SAAWn9D,KAAKgvD,aAAamW,YAAYpW,EAAM/uD,KAAKm9D,UAAY,IAOrEtL,EAAVxxD,UAAA+uE,uBAAA,SAAiCrgB,GAC7B,MAAOA,IAAQ/uD,KAAKkvE,qBAAqBngB,EAAM/uD,KAAK6+D,YAChD7+D,KAAKgvD,aAAagQ,QAAQjQ,GAAQ,MAIhC8C,EAAVxxD,UAAA6uE,qBAAA,SAA+BiB,EAAcC,GACzC,SAAUD,IAAMC,GAAMpwE,KAAKgvD,aAAamQ,SAASgR,IAAOnwE,KAAKgvD,aAAamQ,SAASiR,IACzEpwE,KAAKgvD,aAAaoO,QAAQ+S,IAAOnwE,KAAKgvD,aAAaoO,QAAQgT,KAO/Dve,EAAVxxD,UAAAgvD,oBAAA,SAA8BxyC,GAC1B,MAAQ7c,MAAKgvD,aAAaW,eAAe9yC,IAAQ7c,KAAKgvD,aAAaI,QAAQvyC,GAAQA,EAAM,MAInFg1C,EAAVxxD,UAAA+5C,kBACI,MAAOp6C,MAAKwJ,MAA4B,QAApBxJ,KAAKwJ,KAAKnE,sBA1QlCvD,KAACC,EAAAA,UAADC,OAAAC,SAAA,iBACEC,SAAU,kkBACV+G,SAAU,eACV5G,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,iJA3BAZ,KAAEuuD,GAAFptD,aAAAnB,KAAAoB,EAAAA,aA8GApB,KAAAkB,EAAAA,eAAAC,aAAAnB,KAAAoB,EAAAA,cAnGA2uD,EAAA1uD,sEAwBAk6D,UAAAv7D,KAAAuB,EAAAA,QAcA85D,UAAAr7D,KAAAuB,EAAAA,QASAi6D,aAAAx7D,KAAAuB,EAAAA,QAQAq6D,iBAAA57D,KAAAyB,EAAAA,SAQA++D,iBAAAxgE,KAAAyB,EAAAA,SAGAirE,mBAAA1sE,KAAAyB,EAAAA,SAGAq6D,mBAAA97D,KAAAsB,EAAAA,UAAApB,MAAA0vD,OAMAG,mBhBOE,QAAFE,GAAsBjxD,EACWkuD,EACCxlD,GAC9B,GAHkBxJ,KAAtBc,mBAAsBA,EACWd,KAAjCgvD,aAAiCA,EACChvD,KAAlCwJ,KAAkCA,EAnBlCxJ,KAAA09D,eAAuD,GAAI74D,GAAAA,aAG3D7E,KAAA29D,aAAqD,GAAI94D,GAAAA,cAiBhD7E,KAAKgvD,aACR,KAAM8O,GAA2B,cAGnC99D,MAAK+9D,YAAc/9D,KAAKgvD,aAAagP,QAlBzC,MAhDA74D,QAAAC,eAAM2sD,EAAN1xD,UAAA,kBAAA,WAAwB,MAAOL,MAAK+9D,iBAClC,SAAe14D,GACb,GAAI44D,GAAgBj+D,KAAK+9D,YACnBG,EACFl+D,KAAKqvD,oBAAoBrvD,KAAKgvD,aAAamP,YAAY94D,KAAWrF,KAAKgvD,aAAagP,OACxFh+D,MAAK+9D,YAAc/9D,KAAKgvD,aAAaoP,UAAUF,EAAWl+D,KAAKq9D,QAASr9D,KAAKm9D,SACzEp3D,KAAKgoC,MAAM/tC,KAAKgvD,aAAaoO,QAAQa,GA1BjB,KA2BpBl4D,KAAKgoC,MAAM/tC,KAAKgvD,aAAaoO,QAAQp9D,KAAK+9D,aA3BtB,KA4BtB/9D,KAAKq+D,yCAOXl5D,OAAAC,eAAM2sD,EAAN1xD,UAAA,gBAAA,WAA6B,MAAOL,MAAKs/B,eACvC,SAAaj6B,GACXrF,KAAKs/B,UAAYt/B,KAAKqvD,oBAAoBrvD,KAAKgvD,aAAamP,YAAY94D,IACxErF,KAAKqwE,cAAgBrwE,KAAKs/B,WAAat/B,KAAKgvD,aAAaoO,QAAQp9D,KAAKs/B,4CAM1En6B,OAAAC,eAAM2sD,EAAN1xD,UAAA,eAAA,WAA4B,MAAOL,MAAKw+D,cACtC,SAAYn5D,GACVrF,KAAKw+D,SAAWx+D,KAAKqvD,oBAAoBrvD,KAAKgvD,aAAamP,YAAY94D,qCAM3EF,OAAAC,eAAM2sD,EAAN1xD,UAAA,eAAA,WAA4B,MAAOL,MAAKy+D,cACtC,SAAYp5D,GACVrF,KAAKy+D,SAAWz+D,KAAKqvD,oBAAoBrvD,KAAKgvD,aAAamP,YAAY94D,qCAmCzE0sD,EAAF1xD,UAAA0G,mBAAE,WACE/G,KAAKq+D,SAIPtM,EAAF1xD,UAAAg+D,MAAE,WAAA,GAAFr6D,GAAAhE,IACIA,MAAKswE,WAAatwE,KAAKgvD,aAAaoO,QAAQp9D,KAAKgvD,aAAagP,QAC9D,IAAIiC,GAAajgE,KAAKgvD,aAAaoO,QAAQp9D,KAAK+9D,aAC5CwS,EAAetQ,EAjGK,EAkGxBjgE,MAAKwwE,SACL,KAAK,GAAIxoE,GAAI,EAAGivD,KAAoBjvD,EAnGZ,GAmG8BA,IACpDivD,EAAIpkD,KAAKotD,EAAasQ,EAAevoE,GAlGhB,GAmGjBivD,EAAIz1D,SACNxB,KAAKwwE,OAAO39D,KAAKokD,EAAItvD,IAAI,SAAAq1D,GAAQ,MAAAh5D,GAAKysE,mBAAmBzT,MACzD/F,KAGJj3D,MAAKc,mBAAmBC,gBAI1BgxD,EAAF1xD,UAAAqwE,cAAE,SAAc1T,GACZh9D,KAAK29D,aAAat3D,KAAKrG,KAAKgvD,aAAawO,WAAWR,EAAM,EAAG,GAC7D,IAAI2B,GAAQ3+D,KAAKgvD,aAAamQ,SAASn/D,KAAK6+D,YACxCC,EACA9+D,KAAKgvD,aAAa+P,kBAAkB/+D,KAAKgvD,aAAawO,WAAWR,EAAM2B,EAAO,GAClF3+D,MAAK09D,eAAer3D,KAAKrG,KAAKgvD,aAAawO,WAAWR,EAAM2B,EACxD54D,KAAKC,IAAIhG,KAAKgvD,aAAagQ,QAAQh/D,KAAK6+D,YAAaC,MAI3D/M,EAAF1xD,UAAA4+D,2BAAE,SAA2Bz3D,GAKzB,GAAMskB,GAAQ9rB,KAAKo6C,QAEnB,QAAQ5yC,EAAMua,SACZ,IAAKG,GAAAA,WACHliB,KAAK6+D,WAAa7+D,KAAKgvD,aAAaoQ,iBAAiBp/D,KAAK+9D,YAAajyC,EAAQ,GAAK,EACpF,MACF,KAAK9J,GAAAA,YACHhiB,KAAK6+D,WAAa7+D,KAAKgvD,aAAaoQ,iBAAiBp/D,KAAK+9D,YAAajyC,GAAS,EAAI,EACpF,MACF,KAAKoQ,GAAAA,SACHl8B,KAAK6+D,WAAa7+D,KAAKgvD,aAAaoQ,iBAAiBp/D,KAAK+9D,aArIvC,EAsInB,MACF,KAAK5hC,GAAAA,WACHn8B,KAAK6+D,WAAa7+D,KAAKgvD,aAAaoQ,iBAAiBp/D,KAAK+9D,YAxIvC,EAyInB,MACF,KAAK37C,GAAAA,KACHpiB,KAAK6+D,WAAa7+D,KAAKgvD,aAAaoQ,iBAAiBp/D,KAAK+9D,aACrD/9D,KAAKgvD,aAAaoO,QAAQp9D,KAAK+9D,aA9IhB,GA+IpB,MACF,KAAKz7C,GAAAA,IACHtiB,KAAK6+D,WAAa7+D,KAAKgvD,aAAaoQ,iBAAiBp/D,KAAK+9D,YAjJtC,GAkJD/9D,KAAKgvD,aAAaoO,QAAQp9D,KAAK+9D,aAlJ9B,GAkJ4D,EAChF,MACF,KAAKhiC,GAAAA,QACH/7B,KAAK6+D,WACD7+D,KAAKgvD,aAAaoQ,iBACdp/D,KAAK+9D,YAAav2D,EAAMszC,QAAS,KAvJrB,GAwJpB,MACF,KAAK7e,GAAAA,UACHj8B,KAAK6+D,WACD7+D,KAAKgvD,aAAaoQ,iBACdp/D,KAAK+9D,YAAav2D,EAAMszC,OAAS61B,IA5JrB,GA6JpB,MACF,KAAKnuD,GAAAA,MACHxiB,KAAK0wE,cAAc1wE,KAAKgvD,aAAaoO,QAAQp9D,KAAK+9D,aAClD,MACF,SAEE,OAGJ/9D,KAAKq/D,mBAEL73D,EAAM6E,kBAGR0lD,EAAF1xD,UAAAuwE,eAAE,WACE,MAAO5wE,MAAKgvD,aAAaoO,QAAQp9D,KAAK6+D,YA5Kd,IAgL1B9M,EAAF1xD,UAAAg/D,iBAAE,WACEr/D,KAAK49D,iBAAiByB,oBAIhBtN,EAAV1xD,UAAAowE,mBAAA,SAA6BzT,GACzB,GAAIC,GAAWj9D,KAAKgvD,aAAawQ,YAAYx/D,KAAKgvD,aAAawO,WAAWR,EAAM,EAAG;wEACnF,OAAO,IAAID,IAAgBC,EAAMC,EAAUA,EAAUj9D,KAAKk9D,kBAAkBF,KAItEjL,EAAV1xD,UAAA68D,kBAAA,SAA4BF,GAExB,OAAalwD,KAATkwD,GAA+B,OAATA,GACrBh9D,KAAKm9D,SAAWH,EAAOh9D,KAAKgvD,aAAaoO,QAAQp9D,KAAKm9D,UACtDn9D,KAAKq9D,SAAWL,EAAOh9D,KAAKgvD,aAAaoO,QAAQp9D,KAAKq9D,SACzD,OAAO,CAIT,KAAKr9D,KAAKs9D,WACR,OAAO,CAMT,KAAK,GAHCC,GAAcv9D,KAAKgvD,aAAawO,WAAWR,EAAM,EAAG,GAGjDjO,EAAOwO,EAAav9D,KAAKgvD,aAAaoO,QAAQrO,IAASiO,EAC9DjO,EAAO/uD,KAAKgvD,aAAayO,gBAAgB1O,EAAM,GAC/C,GAAI/uD,KAAKs9D,WAAWvO,GAClB,OAAO,CAIX,QAAO,GAODgD,EAAV1xD,UAAAgvD,oBAAA,SAA8BxyC,GAC1B,MAAQ7c,MAAKgvD,aAAaW,eAAe9yC,IAAQ7c,KAAKgvD,aAAaI,QAAQvyC,GAAQA,EAAM,MAInFk1C,EAAV1xD,UAAA+5C,kBACI,MAAOp6C,MAAKwJ,MAA4B,QAApBxJ,KAAKwJ,KAAKnE,sBAtNlCvD,KAACC,EAAAA,UAADC,OAAAC,SAAA,sBACEC,SAAU,odACV+G,SAAU,mBACV5G,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,mHA3BAZ,KAAEkB,EAAAA,eAAFC,aAAAnB,KAAAoB,EAAAA,cAUA6uD,EAAA5uD,sEAuBAk6D,UAAAv7D,KAAAuB,EAAAA,QAeA85D,UAAAr7D,KAAAuB,EAAAA,QASAi6D,aAAAx7D,KAAAuB,EAAAA,QAQAq6D,iBAAA57D,KAAAyB,EAAAA,SAQAo6D,eAAA77D,KAAAyB,EAAAA,SAGAq6D,mBAAA97D,KAAAsB,EAAAA,UAAApB,MAAA0vD,OAMAK,mBCYE,QAAFD,GAAsBhxD,EACsCouD,EAC3BF,EACCxlD,GAC9B,GAJkBxJ,KAAtBc,mBAAsBA,EACsCd,KAA5DkvD,aAA4DA,EAC3BlvD,KAAjCgvD,aAAiCA,EACChvD,KAAlCwJ,KAAkCA,EA1BlCxJ,KAAA09D,eAAuD,GAAI74D,GAAAA,aAG3D7E,KAAA69D,cAAsD,GAAIh5D,GAAAA,cAwBjD7E,KAAKgvD,aACR,KAAM8O,GAA2B,cAEnC,KAAK99D,KAAKkvD,aACR,KAAM4O,GAA2B,mBAGnC99D,MAAK+9D,YAAc/9D,KAAKgvD,aAAagP,QA5BzC,MA/CA74D,QAAAC,eAAM0sD,EAANzxD,UAAA,kBAAA,WAAwB,MAAOL,MAAK+9D,iBAClC,SAAe14D,GACb,GAAI44D,GAAgBj+D,KAAK+9D,YACnBG,EACFl+D,KAAKqvD,oBAAoBrvD,KAAKgvD,aAAamP,YAAY94D,KAAWrF,KAAKgvD,aAAagP,OACxFh+D,MAAK+9D,YAAc/9D,KAAKgvD,aAAaoP,UAAUF,EAAWl+D,KAAKq9D,QAASr9D,KAAKm9D,SACzEn9D,KAAKgvD,aAAaoO,QAAQa,KAAmBj+D,KAAKgvD,aAAaoO,QAAQp9D,KAAK+9D,cAC9E/9D,KAAKq+D,yCAOXl5D,OAAAC,eAAM0sD,EAANzxD,UAAA,gBAAA,WAA6B,MAAOL,MAAKs/B,eACvC,SAAaj6B,GACXrF,KAAKs/B,UAAYt/B,KAAKqvD,oBAAoBrvD,KAAKgvD,aAAamP,YAAY94D,IACxErF,KAAKs+D,eAAiBt+D,KAAKu+D,uBAAuBv+D,KAAKs/B,4CAM3Dn6B,OAAAC,eAAM0sD,EAANzxD,UAAA,eAAA,WAA4B,MAAOL,MAAKw+D,cACtC,SAAYn5D,GACVrF,KAAKw+D,SAAWx+D,KAAKqvD,oBAAoBrvD,KAAKgvD,aAAamP,YAAY94D,qCAM3EF,OAAAC,eAAM0sD,EAANzxD,UAAA,eAAA,WAA4B,MAAOL,MAAKy+D,cACtC,SAAYp5D,GACVrF,KAAKy+D,SAAWz+D,KAAKqvD,oBAAoBrvD,KAAKgvD,aAAamP,YAAY94D,qCA6CzEysD,EAAFzxD,UAAA0G,mBAAE,WACE/G,KAAKq+D,SAIPvM,EAAFzxD,UAAAq+D,eAAE,SAAeC,GACb,GAAMC,GACA5+D,KAAKgvD,aAAawO,WAAWx9D,KAAKgvD,aAAaoO,QAAQp9D,KAAK6+D,YAAaF,EAAO,EAEtF3+D,MAAK69D,cAAcx3D,KAAKu4D,EAExB,IAAME,GAAc9+D,KAAKgvD,aAAa+P,kBAAkBH,EAExD5+D,MAAK09D,eAAer3D,KAAKrG,KAAKgvD,aAAawO,WACvCx9D,KAAKgvD,aAAaoO,QAAQp9D,KAAK6+D,YAAaF,EAC5C54D,KAAKC,IAAIhG,KAAKgvD,aAAagQ,QAAQh/D,KAAK6+D,YAAaC,MAI3DhN,EAAFzxD,UAAA4+D,2BAAE,SAA2Bz3D,GAKzB,GAAMskB,GAAQ9rB,KAAKo6C,QAEnB,QAAQ5yC,EAAMua,SACZ,IAAKG,GAAAA,WACHliB,KAAK6+D,WAAa7+D,KAAKgvD,aAAakQ,kBAAkBl/D,KAAK+9D,YAAajyC,EAAQ,GAAK,EACrF,MACF,KAAK9J,GAAAA,YACHhiB,KAAK6+D,WAAa7+D,KAAKgvD,aAAakQ,kBAAkBl/D,KAAK+9D,YAAajyC,GAAS,EAAI,EACrF,MACF,KAAKoQ,GAAAA,SACHl8B,KAAK6+D,WAAa7+D,KAAKgvD,aAAakQ,kBAAkBl/D,KAAK+9D,aAAc,EACzE,MACF,KAAK5hC,GAAAA,WACHn8B,KAAK6+D,WAAa7+D,KAAKgvD,aAAakQ,kBAAkBl/D,KAAK+9D,YAAa,EACxE,MACF,KAAK37C,GAAAA,KACHpiB,KAAK6+D,WAAa7+D,KAAKgvD,aAAakQ,kBAAkBl/D,KAAK+9D,aACtD/9D,KAAKgvD,aAAamQ,SAASn/D,KAAK+9D,aACrC,MACF,KAAKz7C,GAAAA,IACHtiB,KAAK6+D,WAAa7+D,KAAKgvD,aAAakQ,kBAAkBl/D,KAAK+9D,YACvD,GAAK/9D,KAAKgvD,aAAamQ,SAASn/D,KAAK+9D,aACzC,MACF,KAAKhiC,GAAAA,QACH/7B,KAAK6+D,WACD7+D,KAAKgvD,aAAaoQ,iBAAiBp/D,KAAK+9D,YAAav2D,EAAMszC,QAAU,IAAM,EAC/E,MACF,KAAK7e,GAAAA,UACHj8B,KAAK6+D,WACD7+D,KAAKgvD,aAAaoQ,iBAAiBp/D,KAAK+9D,YAAav2D,EAAMszC,OAAS,GAAK,EAC7E,MACF,KAAKt4B,GAAAA,MACHxiB,KAAK0+D,eAAe1+D,KAAKgvD,aAAamQ,SAASn/D,KAAK+9D,aACpD,MACF,SAEE,OAGJ/9D,KAAKq/D,mBAEL73D,EAAM6E,kBAIRylD,EAAFzxD,UAAAg+D,MAAE,WAAA,GAAFr6D,GAAAhE,IACIA,MAAKs+D,eAAiBt+D,KAAKu+D,uBAAuBv+D,KAAK8U,UACvD9U,KAAKs/D,YAAct/D,KAAKu+D,uBAAuBv+D,KAAKgvD,aAAagP,SACjEh+D,KAAKu/D,WAAav/D,KAAKgvD,aAAawQ,YAAYx/D,KAAK6+D,WAErD,IAAIY,GAAaz/D,KAAKgvD,aAAa0Q,cAAc,QAEjD1/D,MAAK2/D,UAAY,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,GAAI,KAAKh4D,IAAI,SAAAsvD,GAAO,MAAAA,GAAItvD,IACvE,SAAAg3D,GAAS,MAAA36D,GAAK47D,oBAAoBjB,EAAOc,EAAWd,QACxD3+D,KAAKc,mBAAmBC,gBAI1B+wD,EAAFzxD,UAAAg/D,iBAAE,WACEr/D,KAAK49D,iBAAiByB,oBAOhBvN,EAAVzxD,UAAAk+D,uBAAA,SAAiCxP,GAC7B,MAAOA,IAAQ/uD,KAAKgvD,aAAaoO,QAAQrO,IAAS/uD,KAAKgvD,aAAaoO,QAAQp9D,KAAK6+D,YAC7E7+D,KAAKgvD,aAAamQ,SAASpQ,GAAQ,MAIjC+C,EAAVzxD,UAAAu/D,oBAAA,SAA8BjB,EAAekB,GACzC,GAAIvqC,GAAYt1B,KAAKgvD,aAAaS,OAC9BzvD,KAAKgvD,aAAawO,WAAWx9D,KAAKgvD,aAAaoO,QAAQp9D,KAAK6+D,YAAaF,EAAO,GAChF3+D,KAAKkvD,aAAaQ,QAAQoQ,mBAC9B,OAAO,IAAI/C,IACP4B,EAAOkB,EAAUE,oBAAqBzqC,EAAWt1B,KAAKggE,mBAAmBrB,KAIvE7M,EAAVzxD,UAAA2/D,mBAAA,SAA6BrB,GAEzB,GAAMsB,GAAajgE,KAAKgvD,aAAaoO,QAAQp9D,KAAK6+D,WAElD,QAAc/xD,KAAV6xD,GAAiC,OAAVA,GACvB3+D,KAAKkgE,4BAA4BD,EAAYtB,IAC7C3+D,KAAKmgE,6BAA6BF,EAAYtB,GAChD,OAAO,CAGT,KAAK3+D,KAAKs9D,WACR,OAAO,CAMT,KAAK,GAHC8C,GAAepgE,KAAKgvD,aAAawO,WAAWyC,EAAYtB,EAAO,GAG5D5P,EAAOqR,EAAcpgE,KAAKgvD,aAAamQ,SAASpQ,IAAS4P,EAC7D5P,EAAO/uD,KAAKgvD,aAAayO,gBAAgB1O,EAAM,GAClD,GAAI/uD,KAAKs9D,WAAWvO,GAClB,OAAO,CAIX,QAAO,GAOD+C,EAAVzxD,UAAA6/D,4BAAA,SAAsClD,EAAc2B,GAChD,GAAI3+D,KAAKm9D,QAAS,CAChB,GAAMkD,GAAUrgE,KAAKgvD,aAAaoO,QAAQp9D,KAAKm9D,SACzCmD,EAAWtgE,KAAKgvD,aAAamQ,SAASn/D,KAAKm9D,QAEjD,OAAOH,GAAOqD,GAAYrD,IAASqD,GAAW1B,EAAQ2B,EAGxD,OAAO,GAODxO,EAAVzxD,UAAA8/D,6BAAA,SAAuCnD,EAAc2B,GACjD,GAAI3+D,KAAKq9D,QAAS,CAChB,GAAMkD,GAAUvgE,KAAKgvD,aAAaoO,QAAQp9D,KAAKq9D,SACzCmD,EAAWxgE,KAAKgvD,aAAamQ,SAASn/D,KAAKq9D,QAEjD,OAAOL,GAAOuD,GAAYvD,IAASuD,GAAW5B,EAAQ6B,EAGxD,OAAO,GAOD1O,EAAVzxD,UAAAgvD,oBAAA,SAA8BxyC,GAC1B,MAAQ7c,MAAKgvD,aAAaW,eAAe9yC,IAAQ7c,KAAKgvD,aAAaI,QAAQvyC,GAAQA,EAAM,MAInFi1C,EAAVzxD,UAAA+5C,kBACI,MAAOp6C,MAAKwJ,MAA4B,QAApBxJ,KAAKwJ,KAAKnE,sBArQlCvD,KAACC,EAAAA,UAADC,OAAAC,SAAA,gBACEC,SAAU,0hBACV+G,SAAU,cACV5G,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,iJAvBAZ,KAAEuuD,GAAFptD,aAAAnB,KAAAoB,EAAAA,aA+FApB,KAAAkB,EAAAA,eAAAC,aAAAnB,KAAAoB,EAAAA,cApFA4uD,EAAQ3uD,sEAkBRk6D,UAAAv7D,KAAAuB,EAAAA,QAcA85D,UAAAr7D,KAAAuB,EAAAA,QASAi6D,aAAAx7D,KAAAuB,EAAAA,QAQAq6D,iBAAA57D,KAAAyB,EAAAA,SAQAs6D,gBAAA/7D,KAAAyB,EAAAA,SAGAq6D,mBAAA97D,KAAAsB,EAAAA,UAAApB,MAAA0vD,OAMAI,mBChDE,QAAFE,GAAsB/hC,EACsCwwC,EAC1BzR,EAC0BE,EAC9Ch/B,GAJQlwB,KAAtBiwB,MAAsBA,EACsCjwB,KAA5DygE,SAA4DA,EAC1BzgE,KAAlCgvD,aAAkCA,EAC0BhvD,KAA5DkvD,aAA4DA,EAGxDlvD,KAAKygE,SAASxnB,aAAa/xC,UAAU,WAAM,MAAAgpB,GAAkBnvB,iBA5CjE,MAgDEoE,QAAFC,eAAM4sD,EAAN3xD,UAAA,wBAAE,WACE,GAAiC,SAA7BL,KAAKygE,SAASC,YAChB,MAAO1gE,MAAKgvD,aACPS,OAAOzvD,KAAKygE,SAAS5B,WAAY7+D,KAAKkvD,aAAaQ,QAAQiR,gBACvDZ,mBAEX,IAAiC,QAA7B//D,KAAKygE,SAASC,YAChB,MAAO1gE,MAAKgvD,aAAawQ,YAAYx/D,KAAKygE,SAAS5B,WAErD,IAAMoB,GAAajgE,KAAKgvD,aAAaoO,QAAQp9D,KAAKygE,SAAS5B,WAK3D,OAJwB7+D,MAAKgvD,aAAawQ,YACtCx/D,KAAKgvD,aAAawO,WAAWyC,EAAaA,EAAa,GAAI,EAAG,IAGtE,MAF2BjgE,KAAKgvD,aAAawQ,YACrCx/D,KAAKgvD,aAAawO,WAAWyC,EFtCT,GEsCqC,EAAIA,EAAa,GAAI,EAAG,qCAIvF96D,OAAFC,eAAM4sD,EAAN3xD,UAAA,yBAAE,WACE,MAAoC,SAA7BL,KAAKygE,SAASC,YACjB1gE,KAAKiwB,MAAM2wC,2BAA6B5gE,KAAKiwB,MAAM4wC,wDAIzD17D,OAAFC,eAAM4sD,EAAN3xD,UAAA,uBAAE,WACE,OACEs+D,MAAS3+D,KAAKiwB,MAAM6wC,eACpB9D,KAAQh9D,KAAKiwB,MAAM8wC,cACnBC,aAAchhE,KAAKiwB,MAAMgxC,oBACzBjhE,KAAKygE,SAASC,8CAIlBv7D,OAAFC,eAAM4sD,EAAN3xD,UAAA,uBAAE,WACE,OACEs+D,MAAS3+D,KAAKiwB,MAAMixC,eACpBlE,KAAQh9D,KAAKiwB,MAAMkxC,cACnBH,aAAchhE,KAAKiwB,MAAMmxC,oBACzBphE,KAAKygE,SAASC,8CAIlB1O,EAAF3xD,UAAAghE,qBAAE,WACErhE,KAAKygE,SAASC,YAA2C,SAA7B1gE,KAAKygE,SAASC,YAAyB,aAAe,SAIpF1O,EAAF3xD,UAAAihE,gBAAE,WACEthE,KAAKygE,SAAS5B,WAA0C,SAA7B7+D,KAAKygE,SAASC,YACrC1gE,KAAKgvD,aAAakQ,kBAAkBl/D,KAAKygE,SAAS5B,YAAa,GAC3D7+D,KAAKgvD,aAAaoQ,iBACdp/D,KAAKygE,SAAS5B,WAAyC,QAA7B7+D,KAAKygE,SAASC,aAAyB,GF3ErD,KEgF1B1O,EAAF3xD,UAAAkhE,YAAE,WACEvhE,KAAKygE,SAAS5B,WAA0C,SAA7B7+D,KAAKygE,SAASC,YACrC1gE,KAAKgvD,aAAakQ,kBAAkBl/D,KAAKygE,SAAS5B,WAAY,GAC1D7+D,KAAKgvD,aAAaoQ,iBACdp/D,KAAKygE,SAAS5B,WACmB,QAA7B7+D,KAAKygE,SAASC,YAAwB,EFrF9B,KE0F1B1O,EAAF3xD,UAAAmhE,gBAAE,WACE,OAAKxhE,KAAKygE,SAASpD,WAGXr9D,KAAKygE,SAASpD,UACjBr9D,KAAKyhE,YAAYzhE,KAAKygE,SAAS5B,WAAY7+D,KAAKygE,SAASpD,WAIhErL,EAAF3xD,UAAAqhE,YAAE,WACE,OAAQ1hE,KAAKygE,SAAStD,UACjBn9D,KAAKyhE,YAAYzhE,KAAKygE,SAAS5B,WAAY7+D,KAAKygE,SAAStD,UAIxDnL,EAAV3xD,UAAAohE,YAAA,SAAsBE,EAAUC,GAC5B,MAAiC,SAA7B5hE,KAAKygE,SAASC,YACT1gE,KAAKgvD,aAAaoO,QAAQuE,IAAU3hE,KAAKgvD,aAAaoO,QAAQwE,IACjE5hE,KAAKgvD,aAAamQ,SAASwC,IAAU3hE,KAAKgvD,aAAamQ,SAASyC,GAErC,QAA7B5hE,KAAKygE,SAASC,YACT1gE,KAAKgvD,aAAaoO,QAAQuE,IAAU3hE,KAAKgvD,aAAaoO,QAAQwE,GAGhE77D,KAAKgoC,MAAM/tC,KAAKgvD,aAAaoO,QAAQuE,GFlHpB,KEmHpB57D,KAAKgoC,MAAM/tC,KAAKgvD,aAAaoO,QAAQwE,GFnHjB,oBEM5B9/D,KAACC,EAAAA,UAADC,OAAAC,SAAA,sBACEC,SAAU,quBACV+G,SAAU,oBACV5G,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,2IAhBAZ,KAAQuuD,GAARptD,aAAAnB,KAAAoB,EAAAA,aA6IApB,SAAagL,GAAW7J,aAAxBnB,KAAAoB,EAAAA,WAAApB,KAAAiL,EAAAA,OAvHiC/K,MAuHjCsuD,QAhJAxuD,KAAQmJ,EAAAA,qBAdR+mD,qDAuQAhyD,KAAAgvD,aAAAA,EAAEhvD,KAAFkvD,aAAAA,kQAFA,KAAA4O,GAAA,cAQA,KAAA99D,KAAYkvD,aACZ,KAAA4O,GAAA,mBAGA99D,MAAA+sC,aAAA9c,EAAAhpB,QAAAC,UAAA,WACAgpB,EAAAnvB,eAEQiD,EAARi1C,aAAAruC,SA7CA,MAgDAzF,QAAOC,eAAPqsD,EAAApxD,UAAA,WACA4L,+HAtGAE,YAAA,EACAC,cAAA,mLAUAD,YAAA,EACAC,cAAA,gLAOAD,YAAA,EACAC,cAAA,gLAOAD,YAAA,EACAC,cAAA,oMAsCApM,KAAAi5C,aAAAruC,QAEAuB,YAAA,EACAC,cAAA,qDAIAH,6EACAjM,KAAA6hE,sBAAA,GAEA11D,YAAA,EACAC,cAAA,yHA2BApM,KAAA6+D,WAAA7+D,KAAA8hE,SAAA9hE,KAAAgvD,aAAAgP,QAEIh+D,KAAK+hE,aAAT/hE,KAAAgiE,iFAMAhiE,KAAA6hE,sBAAA,EACQ7hE,KAAKiiE,uFAMbjiE,KAAAi5C,aAAApuC,wFAKA,IAAAX,IAAAA,EAAAg4D,YAAA,CACA,GAAAC,GAAAniE,KAA0BoiE,0BAE1BD,IACAA,EAAA9D,QAIAr+D,KAAOi5C,aAAPruC,sLAWA5K,KAAA09D,eAAAr3D,KAAA0oD,8RAqBA/uD,KAAA0gE,YAAAyB,0OAeA1Q,EAAAxuD,yiCAnNAd,QAAA,67CACEQ,MACFC,MAAA,gBAEEqG,SAAF,cACE5G,cAAFC,EAAAA,kBAAAC,KACAC,gBAAAC,EAAAA,wBAAAC,WAIA+uD,EAAAn6C,eAAA,WAAA,QACAxV,KAAAmwD,iJA/IAR,EAAQtuD,gBA2PRk/D,kBAAAvgE,KAAAuB,EAAAA,QAzQAy+D,UAAAhgE,KAAAuB,EAAAA,6DAgKAg6D,UAAAv7D,KAAAuB,EAAAA,QAeA85D,UAAAr7D,KAAGuB,EAAAA,QAQHi6D,aAAAx7D,KAAAuB,EAAAA,QAGAq6D,iBAAG57D,KAAHyB,EAAAA,SAQAo6D,eAAA77D,KAAQyB,EAAAA,SAQRs6D,gBAAG/7D,KAAHyB,EAAAA,SAQA++D,iBAAAxgE,KAAAyB,EAAAA,SAGAg/D,YAAAzgE,KAAAsB,EAAAA,UAASpB,MAAT6vD,MAMA2Q,WAAA1gE,KAAAsB,EAAAA,UAAApB,MAAA8vD,MAMA2Q,gBAAA3gE,KAAGsB,EAAAA,UAAHpB,MAAA+vD,OAMAN,KChOaiR,IAKXrsB,eAAgBnhC,EAAAA,QAAQ,kBACtBC,EAAAA,MAAM,OAAQ7M,EAAAA,OAAOke,QAAS,EAAGpR,UAAW,iBAC5CD,EAAAA,MAAM,QAAS7M,EAAAA,OAAOke,QAAS,EAAGpR,UAAW,iBAC7CE,EAAAA,WAAW,gBAAiBihC,EAAAA,OAC1BjnB,EAAAA,MAAM,kBAAmBC,EAAAA,gBACzBha,EAAAA,QAAQ,6CAEVD,EAAAA,WAAW,YAAaC,EAAAA,QAAQ,eAAgBjN,EAAAA,OAAOke,QAAS,QAIlEm8C,eAAgBztD,EAAAA,QAAQ,kBACtBC,EAAAA,MAAM,OAAQ7M,EAAAA,OAAOke,QAAS,KAC9BrR,EAAAA,MAAM,QAAS7M,EAAAA,OAAOke,QAAS,KAC/BlR,EAAAA,WAAW,YAAaC,EAAAA,QAAQ,oDCahCqtD,GAAgB,EAGPC,GACT,GAAItlD,GAAAA,eAAqC,kCACvCC,WAAY,OACZC,QAASqlD,KAWfC,GAAA,WACE,QAAFA,GAAqBpiE,GAAAX,KAArBW,YAAqBA,EAtErB,MAAAoiE,MAwEaC,GAAiCn/D,EAAWk/D,mBA4CvD,QAAFnR,GACIjwD,EACQb,EACA2I,GAHV,GAAFzF,GAIIC,EAJJC,KAAAlE,KAIU2B,IAJV3B,WAEYgE,GAAZlD,mBAAYA,EACAkD,EAAZyF,QAAYA,IAXZ,MAP6CvE,GAA7C0sD,EAAA3tD,GAsBE2tD,EAAFvxD,UAAAse,SAAE,WAAA,GAAF3a,GAAAhE,IACI,IAAKA,KAAK2wD,WAAWsS,YAAajjE,KAAKkjE,gBAAvC,CAIA,GAAMt3C,GACJ5rB,KAAK2wD,WAAWsS,UAAU94B,YAA4B,gBAExDnqC,MAAKkjE,gBAAkBt3C,EAAiBie,gBAAgB3iC,UAAU,SAAAgD,GAChE,GAAMi5D,GAA6C,WAAnCj5D,EAAO+/B,eAAeW,QAElCu4B,KAAYn/D,EAAKo/D,UACnBp/D,EAAKyF,QAAQye,IAAI,WACflkB,EAAKo/D,SAAWD,EAChBn/D,EAAKlD,mBAAmBC,qBAMhC6wD,EAAFvxD,UAAAqO,gBAAE,WACE1O,KAAKqjE,UAAUpB,mBAGjBrQ,EAAFvxD,UAAA8G,YAAE,WACMnH,KAAKkjE,kBACPljE,KAAKkjE,gBAAgB97D,cACrBpH,KAAKkjE,gBAAkB,sBArE7BphE,KAACC,EAAAA,UAADC,OAAAC,SAAA,yBACEC,SAAU,yjBACVC,QAAF,wyBACEQ,MACFC,MAAA,yBACM0gE,oBAAN,UACIC,uCAAJ,qBACIC,uCAAJ,YAEApsD,YACAsrD,GAAArsB,eACAqsB,GAAAC,gBAEA15D,SAAA,uBACA5G,cAAAC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,OACEN,QAAF,gGArEAN,KAAEkJ,EAAAA,UAMF4mD,EAAAzuD,0DA0EAyuD,mEAkMA5xD,KAAAkpB,SAAAA,EAAsBlpB,KAAtByJ,QAAsBA,EACAzJ,KAAtBse,kBAAAA,EACsBte,KAAtBgnC,gBAAAA,EACsBhnC,KAAtBgvD,aAAAA,EAC8DhvD,KAA9DwJ,KAAAA,EACkCxJ,KAAlCyO,UAA8CA,kbAP9C,KAAAqvD,GAA8C,eA3D9C,MAuEA34D,QAAAC,eAAAusD,EAAAtxD,UAAA,WACA4L,+FAxIAwgB,0FAGAtgB,YAAA,EACAC,cAAA,2JAUAqgB,+BAGAtgB,YAAA,EACAC,cAAA,gJAUAD,YAAA,EACAC,cAAA,wKAOAqgB,gDAEAmT,KAAA5/B,KAAAy/B,YACAz/B,KAAAy/B,UAAUG,EAEF5/B,KAAR4tD,gBAAAhjD,KAAAg1B,KAGAzzB,YAAA,EACAC,cAAA,8IA4BEA,cAAF,mDAOAH,gGACEG,cAAF,kDAIAH,wEACAE,YAAA,EACAC,cAAA,kDAGAH,wEACAE,YAAA,EACAC,cAAA,qDAAAH,gFAGAE,YAAA,EACAC,cAAA,oDA0CApM,KAAAyjE,mBAAAr8D,cACIpH,KAAK4tD,gBAAT/iD,WACQ7K,KAARijE,YACQjjE,KAARijE,UAAAv9C,UAEQ1lB,KAAK0jE,mBAAb,2DAOA1jE,MAAAs/B,UAAAyvB,EACA/uD,KAAAgvD,aAAAM,SAAmBt0B,EAAnBh7B,KAAkCs/B,YAC1Bt/B,KAARguD,iBAAApjD,KAAAmkD,qLAoBA,IAAA/uD,KAAA+wD,iBAAA,KAAAnoC,OAAA,8DAEA5oB,MAAA+wD,iBAAAhtC,EACA/jB,KAAAyjE,mBACQzjE,KAAR+wD,iBAAAzC,aAAApnD,UAAA,SAAA7B,GAAA,MAAArB,GAAAs7B,UAAAj6B,mEAQA,IAAArF,KAAY+wD,iBACZ,KAAAnoC,OAAA,+DAEM5oB,MAANyO,YACAzO,KAAA2jE,0BAAA3jE,KAAAyO,UAAAu0B,eAEAhjC,KAAA4jE,QAAA5jE,KAAA6jE,gBAAA7jE,KAAA8jE,eACA9jE,KAAAujC,SAAA,EAEIvjC,KAAKixD,aAAT5qD,gDAMA,IAAArG,KAAAujC,QAAA,CAEMvjC,KAANijE,WAAAjjE,KAAAijE,UAAAvjD,eACA1f,KAAAijE,UAAAnjD,SAEM9f,KAAK+jE,aACX/jE,KAAA+jE,WAAArhC,QACQ1iC,KAAK+jE,WAAa,MAEpB/jE,KAAKgkE,iBAAXhkE,KAAAgkE,gBAAArgB,YACA3jD,KAAAgkE,gBAAAlkD,QAEA,IAAAmkD,GAAA,oCAMUjgE,EAAKktD,aAAf7qD,OACQrC,EAAK2/D,0BAAb,MAGA3jE,MAAA2jE,2BACA,kBAAA3jE,MAAA2jE,0BAAA3iD,6DAWAijD,2HAOQ/lD,iBAAkBle,KAA1Bse,kBACMkK,WAAN,0BAEAxoB,KAAA+jE,WAAkBG,cAAlBh9D,UAAA,WAAA,MAAAlD,GAAA0+B,UACA1iC,KAAA+jE,WAAAI,kBAAAxT,WAAA3wD,KAEIA,KAAKokE,0JAQTpkE,KAAAijE,WAEAjjE,KAAAqkE,eAGArkE,KAAAijE,UAAAvjD,gBACA1f,KAAAijE,UAAAvvB,aAAA1zC,KAAAskE,iBAEQtkE,KAAK0jE,mBAAb1jE,KAAuCijE,UAAvCtjD,OAAA3f,KAAAgkE,iBACMhkE,KAAK0jE,mBAAXj5C,SAAuCkmC,WAAa3wD,KAC9CA,KAAKokE,YAELpkE,KAAKyJ,QAAXmvC,SAAA/yB,eAAAzb,KAAA0I,EAAAA,KAAA,IAAA5L,UAAA,uKAWA0rB,aAAA,EACM+hB,cAAN,mCACM/5B,UAAW5a,KAAjBskE,gBACMp6B,eAANlqC,KAAAgnC,kBACMxe,WAAN,wBAEAxoB,MAAAijE,UAAAjjE,KAAAkpB,SAAAmD,OAAwCX,GACxCjkB,EAAAA,MAAAzH,KAAAijE,UAAAn/B,gBAAA9jC,KAAAijE,UAAA53C,cAAArrB,KAAAijE,UAAAsB,gBAAAn6D,KAAA6E,EAAAA,OAAA,SAAAzH,GAIA,MACWA,GADXua,UAAA8mB,EAAAA,iEAKA3hC,UAAA,WAAiC,MAAjClD,GAAA0+B,yKAQA2G,wBAAA,GACOC,mBAAmB,GACnBk7B,UAAP,GACOj7B,gBAEPe,QAAA,QACAC,QAAA,SACUI,SAAV,QACUC,SAAV,QAGAN,QAAA,QACAC,QAAA,MACUI,SAAV,QACUC,SAAV,WAGAN,QAAA,MACAC,QAAA,SACUI,SAAV,MACUC,SAAV,QAGAN,QAAA,MACAC,QAAA,MACUI,SAAV,MACUC,SAAV,sNAiBA5qC,KAAA0jE,mBAAAj5C,SAAAwxB,MAAAA,GAEMj8C,KAAK+jE,aACX/jE,KAAA+jE,WAAAI,kBAAAloB,MAAAA,iFAQA0V,EAAA1uD,2EApXAgG,SAAA,gBACEzG,gBAAiBC,EAAAA,wBAAnBC,OACEL,cAAFC,EAAAA,kBAAAC,SAIAovD,EAAAr6C,eAAiB,WAAjB,QACAxV,KAAA2iE,gEA3HA3iE,SAAQgL,GAAR7J,aAAAnB,KAAAiL,EAAAA,OAAA/K,MAAA6gE,QA/BA/gE,KAAEuuD,GAAFptD,aAAAnB,KAAAoB,EAAAA,aAqBApB,KAAEkB,EAAAA,eAAFC,aAAAnB,KAAAoB,EAAAA,aAMApB,SAAEgL,GAAF7J,aAAAnB,KAAAoB,EAAAA,WAAApB,KAAAiL,EAAAA,OAAA/K,MAAA4N,EAAAA,eAGA+hD,EAAAxuD,gBAnCAuhE,0BAAA5iE,KAAAuB,EAAAA,QA6SAy+D,UAAAhgE,KAAAuB,EAAAA,0DA3IAugE,UAAA9hE,KAAAuB,EAAAA,QAGAyF,WAAAhH,KAAAuB,EAAAA,QAYAs6D,eAAA77D,KAAAyB,EAAAA,SAGAs6D,gBAAA/7D,KAAAyB,EAAAA,SAcAilB,aAAA1mB,KAAAuB,EAAAA,QAQA4tD,eAAAnvD,KAAAyB,EAAAA,OAAAvB,MAAA,YAmBAkvD,eAAApvD,KAAGyB,EAAAA,OAAHvB,MAAA,YAMAqgC,SAAAvgC,KAAAuB,EAAAA,SAMAsuD,KnBzMa/B,IACX/+C,QAASyjB,EAAAA,kBACTxjB,YAAakP,EAAAA,WAAW,WAAM,MAAA6tC,MAC9Br5B,OAAO,GAIIq7B,IACXh/C,QAAS8zD,EAAAA,cACT7zD,YAAakP,EAAAA,WAAW,WAAM,MAAA6tC,MAC9Br5B,OAAO,GAST25B,GAAA,WAIE,QAAFA,GAEWyW,EAEAC,GAFA7kE,KAAX4kE,OAAWA,EAEA5kE,KAAX6kE,cAAWA,EACP7kE,KAAKqF,MAAQrF,KAAK4kE,OAAOv/D,MApE7B,MAAA8oD,oBA4OE,QAAFN,GACcltD,EACWquD,EAC2BE,EAC1BL,GAJxB,GAAF7qD,GAAAhE,IAKI,IAJUA,KAAdW,YAAcA,EACWX,KAAzBgvD,aAAyBA,EAC2BhvD,KAApDkvD,aAAoDA,EAC1BlvD,KAA1B6uD,WAA0BA,EA/D1B7uD,KAAAouD,WAAM,GAAIvpD,GAAAA,aAIV7E,KAAAkuD,UAAM,GAAIrpD,GAAAA,aAGV7E,KAAAsuD,aAAiB,GAAIzpD,GAAAA,aAGrB7E,KAAA4tD,gBAAoB,GAAI/oD,GAAAA,aAExB7E,KAAA+3C,WAAe,aAEf/3C,KAAAiuD,aAA+C,aAE/CjuD,KAAAwuD,mBAA+B,aAE/BxuD,KAAA+tD,wBAAoCzpD,EAAAA,aAAaC,MAEjDvE,KAAAquD,oBAAgC/pD,EAAAA,aAAaC,MAG7CvE,KAAA8kE,gBAAyC,WACrC,MAAO9gE,GAAKmrD,gBACR,MAAQ4V,oBAAuBC,KAAQhhE,EAAKrD,YAAYF,cAAc4E,SAI9ErF,KAAAilE,cAAuC,SAAChvD,GACpC,GAAMivD,GAAelhE,EAAKqrD,oBAAoBrrD,EAAKgrD,aAAamP,YAAYloD,EAAQ5Q,OACpF,QAASrB,EAAKgC,MAAQk/D,GAClBlhE,EAAKgrD,aAAamW,YAAYnhE,EAAKgC,IAAKk/D,IAAiB,EACzD,MAAQE,kBAAqBp/D,IAAOhC,EAAKgC,IAAKq/D,OAAUH,KAIhEllE,KAAAslE,cAAuC,SAACrvD,GACpC,GAAMivD,GAAelhE,EAAKqrD,oBAAoBrrD,EAAKgrD,aAAamP,YAAYloD,EAAQ5Q,OACpF,QAASrB,EAAKkC,MAAQg/D,GAClBlhE,EAAKgrD,aAAamW,YAAYnhE,EAAKkC,IAAKg/D,IAAiB,EACzD,MAAQK,kBAAqBr/D,IAAOlC,EAAKkC,IAAKm/D,OAAUH,KAIhEllE,KAAAwlE,iBAA0C,SAACvvD,GACvC,GAAMivD,GAAelhE,EAAKqrD,oBAAoBrrD,EAAKgrD,aAAamP,YAAYloD,EAAQ5Q,OACpF,OAAQrB,GAAKyhE,aAAgBP,IAAgBlhE,EAAKyhE,YAAYP,IAClD1U,qBAAuB,GAA/B,MAKRxwD,KAAA0uD,WAAMgX,EAAAA,WAAWC,SACN3lE,KAAK8kE,gBAAiB9kE,KAAKilE,cAAejlE,KAAKslE,cAAetlE,KAAKwlE,mBAG9ExlE,KAAAmvD,iBAA4B,GAOnBnvD,KAAKgvD,aACR,KAAM8O,GAA2B,cAEnC,KAAK99D,KAAKkvD,aACR,KAAM4O,GAA2B,mBAInC99D,MAAKquD,oBAAsBW,EAAa4W,cAAc1+D,UAAU,WAC9DlD,EAAKqB,MAAQrB,EAAKqB,QA1PxB,MAkGAF,QAAAC,eAAMyoD,EAANxtD,UAAA,qBAAA,SAAoBgF,GAChBrF,KAAK6lE,mBAAmBxgE,oCAIlBwoD,EAAVxtD,UAAAwlE,mBAAA,SAA6BxgE,GACrBA,IACFrF,KAAK8tD,YAAczoD,EACnBrF,KAAK8tD,YAAYgY,eAAe9lE,QAMtCmF,OAAAC,eAAMyoD,EAANxtD,UAAA,2BAAA,SAA0BgF,GACtBrF,KAAKylE,YAAcpgE,EACnBrF,KAAKwuD,sDAMTrpD,OAAAC,eAAMyoD,EAANxtD,UAAA,aAAA,WAA0B,MAAOL,MAAK+4B,YACpC,SAAU1zB,GACRA,EAAQrF,KAAKgvD,aAAamP,YAAY94D,GACtCrF,KAAKmvD,iBAAmB9pD,GAASrF,KAAKgvD,aAAaI,QAAQ/pD,GAC3DA,EAAQrF,KAAKqvD,oBAAoBhqD,EACjC,IAAM0gE,GAAU/lE,KAAKqF,KACrBrF,MAAK+4B,OAAS1zB,EACdrF,KAAKwvD,aAAanqD,GAEbrF,KAAKgvD,aAAaM,SAASyW,EAAS1gE,IACvCrF,KAAKsuD,aAAajoD,KAAKhB,oCAO7BF,OAAAC,eAAMyoD,EAANxtD,UAAA,WAAA,WAAwB,MAAOL,MAAK24B,UAClC,SAAQtzB,GACNrF,KAAK24B,KAAO34B,KAAKqvD,oBAAoBrvD,KAAKgvD,aAAamP,YAAY94D,IACnErF,KAAKwuD,sDAMTrpD,OAAAC,eAAMyoD,EAANxtD,UAAA,WAAA,WAAwB,MAAOL,MAAK04B,UAClC,SAAQrzB,GACNrF,KAAK04B,KAAO14B,KAAKqvD,oBAAoBrvD,KAAKgvD,aAAamP,YAAY94D,IACnErF,KAAKwuD,sDAMTrpD,OAAAC,eAAMyoD,EAANxtD,UAAA;kDAAA,WAA4B,QAASL,KAAKy/B,eACxC,SAAap6B,GACX,GAAMu6B,GAAWt6B,EAAAA,sBAAsBD,GACjCyE,EAAU9J,KAAKW,YAAYF,aAE7BT,MAAKy/B,YAAcG,IACrB5/B,KAAKy/B,UAAYG,EACjB5/B,KAAK4tD,gBAAgBvnD,KAAKu5B,IAIxBA,GAAY91B,EAAQgwB,MAItBhwB,EAAQgwB,wCAoFZ+zB,EAAFxtD,UAAA0G,mBAAE,WAAA,GAAF/C,GAAAhE,IACQA,MAAK8tD,cACP9tD,KAAK+tD,wBAA0B/tD,KAAK8tD,YAAYE,iBAAiB9mD,UAAU,SAAC4N,GAC1E9Q,EAAKqB,MAAQyP,EACb9Q,EAAKiqD,aAAan5C,GAClB9Q,EAAK+zC,aACL/zC,EAAKkqD,UAAU7nD,KAAK,GAAI8nD,IAAwBnqD,EAAMA,EAAKrD,YAAYF,gBACvEuD,EAAKoqD,WAAW/nD,KAAK,GAAI8nD,IAAwBnqD,EAAMA,EAAKrD,YAAYF,oBAK9EotD,EAAFxtD,UAAA8G,YAAE,WACEnH,KAAK+tD,wBAAwB3mD,cAC7BpH,KAAKquD,oBAAoBjnD,cACzBpH,KAAKsuD,aAAazjD,WAClB7K,KAAK4tD,gBAAgB/iD,YAIvBgjD,EAAFxtD,UAAAkuD,0BAAE,SAA0Bt4B,GACxBj2B,KAAKwuD,mBAAqBv4B,GAI5B43B,EAAFxtD,UAAAouD,SAAE,SAAS7I,GACP,MAAO5lD,MAAK0uD,WAAa1uD,KAAK0uD,WAAW9I,GAAK,MAOhDiI,EAAFxtD,UAAAsuD,6BAAE,WACE,MAAO3uD,MAAK4uD,6BAOdf,EAAFxtD,UAAAuuD,0BAAE,WACE,MAAO5uD,MAAK6uD,WAAa7uD,KAAK6uD,WAAWD,4BAA8B5uD,KAAKW,aAI9EktD,EAAFxtD,UAAA01B,WAAE,SAAW1wB,GACTrF,KAAKqF,MAAQA,GAIfwoD,EAAFxtD,UAAA21B,iBAAE,SAAiBC,GACfj2B,KAAKiuD,aAAeh4B,GAItB43B,EAAFxtD,UAAA61B,kBAAE,SAAkBD,GAChBj2B,KAAK+3C,WAAa9hB,GAIpB43B,EAAFxtD,UAAA81B,iBAAE,SAAiBC,GACfp2B,KAAK8I,SAAWstB,GAGlBy3B,EAAFxtD,UAAAy7B,WAAE,SAAWt0B,GACLA,EAAMszC,QAAUtzC,EAAMua,UAAYoa,EAAAA,aACpCn8B,KAAK8tD,YAAY9jC,OACjBxiB,EAAM6E,mBAIVwhD,EAAFxtD,UAAAyuD,SAAE,SAASzpD,GACP,GAAI0pD,GAAO/uD,KAAKgvD,aAAaC,MAAM5pD,EAAOrF,KAAKkvD,aAAaD,MAAMf,UAClEluD,MAAKmvD,iBAAmBJ,GAAQ/uD,KAAKgvD,aAAaI,QAAQL,GAC1DA,EAAO/uD,KAAKqvD,oBAAoBN,GAE3B/uD,KAAKgvD,aAAaM,SAASP,EAAM/uD,KAAK+4B,UACzC/4B,KAAK+4B,OAASg2B,EACd/uD,KAAKiuD,aAAac,GAClB/uD,KAAKsuD,aAAajoD,KAAK0oD,GACvB/uD,KAAKkuD,UAAU7nD,KAAK,GAAI8nD,IAAwBnuD,KAAMA,KAAKW,YAAYF,kBAI3EotD,EAAFxtD,UAAAy3C,UAAE,WACE93C,KAAKouD,WAAW/nD,KAAK,GAAI8nD,IAAwBnuD,KAAMA,KAAKW,YAAYF,iBAI1EotD,EAAFxtD,UAAAkvD,iBAAE,WACE,MAAOvvD,MAAK6uD,WAAa7uD,KAAK6uD,WAAW5S,UAAQnvC,IAInD+gD,EAAFxtD,UAAAw7B,QAAE,WAEM77B,KAAKqF,OACPrF,KAAKwvD,aAAaxvD,KAAKqF,OAGzBrF,KAAK+3C,cAIC8V,EAAVxtD,UAAAmvD,aAAA,SAAuBnqD,GACnBrF,KAAKW,YAAYF,cAAc4E,MAC3BA,EAAQrF,KAAKgvD,aAAaS,OAAOpqD,EAAOrF,KAAKkvD,aAAaQ,QAAQxB,WAAa,IAO7EL,EAAVxtD,UAAAgvD,oBAAA,SAA8BxyC,GAC1B,MAAQ7c,MAAKgvD,aAAaW,eAAe9yC,IAAQ7c,KAAKgvD,aAAaI,QAAQvyC,GAAQA,EAAM,qBAvS7F/a,KAACyK,EAAAA,UAADvK,OACEC,SAAU,uBACV2O,WACEg/C,GACAC,IACCh/C,QAASi/C,GAA0Bh/C,YAAa+8C,IAEnDlrD,MACEotD,uBAAwB,OACxBzO,mBAAoB,kDACpB0O,aAAc,2CACdC,aAAc,2CACdC,aAAc,WACdC,UAAW,gCACXC,WAAY,cACZhzB,SAAU,YACVC,YAAa,sBAEfp0B,SAAU,6DA/EZnH,KAAEiP,EAAAA,aAmBFjP,KAAQuuD,GAARptD,aAAAnB,KA8MOoB,EAAAA,aACPpB,SAAAgL,GAAA7J,aAAAnB,KAAOoB,EAAAA,WAAPpB,KAAmBiL,EAAAA,OAAnB/K,MAA0BsuD,QA9M1BxuD,KAAQmgD,GAARh/C,aAAAnB,KA+MOoB,EAAAA,gCA/IPqtD,gBAAAzuD,KAAGuB,EAAAA,QAcHmtD,sBAAA1uD,KAAGuB,EAAAA,QAQHgC,QAAAvD,KAAGuB,EAAAA,QAiBH2C,MAAAlE,KAAGuB,EAAAA,QASH6C,MAAApE,KAAGuB,EAAAA,QASHyF,WAAAhH,KAAGuB,EAAAA,QAsBH+qD,aAAAtsD,KAAGyB,EAAAA,SAIH2qD,YAAApsD,KAAGyB,EAAAA,UApLHsqD,iCCAA,sBA4BA/rD,KAACyK,EAAAA,UAADvK,OACEC,SAAU,gCA7BZwuD,mBAoEE,QAAFC,GAAqBzgC,EAAkCnvB,GAAlCd,KAArBiwB,MAAqBA,EAAkCjwB,KAAvDc,mBAAuDA,EAlBvDd,KAAAytB,cAA0BnpB,EAAAA,aAAaC,MAgBvC,MATAY,QAAAC,eAAMsrD,EAANrwD,UAAA,2BACI,WAA0ByM,KAAnB9M,KAAKy/B,UAA0Bz/B,KAAK2wD,WAAW7nD,WAAa9I,KAAKy/B,eAE1E,SAAap6B,GACXrF,KAAKy/B,UAAYn6B,EAAAA,sBAAsBD,oCASzCqrD,EAAFrwD,UAAAoe,YAAE,SAAYxX,GACNA,EAAR,YACMjH,KAAK4wD,sBAITF,EAAFrwD,UAAA8G,YAAE,WACEnH,KAAKytB,cAAcrmB,eAGrBspD,EAAFrwD,UAAA0G,mBAAE,WACE/G,KAAK4wD,sBAGPF,EAAFrwD,UAAAolB,MAAE,SAAMje,GACAxH,KAAK2wD,aAAe3wD,KAAK8I,WAC3B9I,KAAK2wD,WAAW3mC,OAChBxiB,EAAMouB,oBAIF86B,EAAVrwD,UAAAuwD,yCACUC,EAAqB7wD,KAAK2wD,WAAa3wD,KAAK2wD,WAAW/C,gBAAkBzjD,EAAAA,KACzE2mD,EAAgB9wD,KAAK2wD,YAAc3wD,KAAK2wD,WAAWI,iBACrD/wD,KAAK2wD,WAAWI,iBAAiBnD,gBAAkBzjD,EAAAA,KACjD6mD,EAAoBhxD,KAAK2wD,WAC3BlpD,EAAAA,MAAMzH,KAAK2wD,WAAWM,aAAcjxD,KAAK2wD,WAAWO,cACpD/mD,EAAAA,IAEJnK,MAAKytB,cAAcrmB,cACnBpH,KAAKytB,cAAgBhmB,EAAAA,MACnBzH,KAAKiwB,MAAMhpB,QACX4pD,EACAC,EACAE,GACA9pD,UAAU,WAAM,MAAAlD,GAAKlD,mBAAmBC,iCAvE9Ce,KAACC,EAAAA,UAADC,OAAAC,SAAA,wBACEC,SAAU,4hBACVC,QAAF,quBACEQ,MACFC,MAAA,wBACMuuD,uCAAN,kCACIC,qBAAJ,8CACIC,mBAAJ,6CAEApoD,SAAA,sBACA5G,cAAAC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,qFAjCAguD,EAAAvtD,mFAyCAmuD,cAAAxvD,KAAA2wB,EAAAA,aAAAzwB,MAAAyuD,OAaAC,iCClEA,sBA0BA5uD,KAACoL,EAAAA,SAADlL,OACEmL,SACEC,EAAAA,aACAyK,GACA05C,GACAtkC,EAAAA,cACAukC,EAAAA,WACAlkD,EAAAA,cAEFG,SACEgkD,GACAC,GACAC,GACAC,GACA/D,GACA6C,GACAD,GACAoB,GACAC,GACAC,GACAC,IAEFnkD,cACE4jD,GACAC,GACAC,GACAC,GACA/D,GACA6C,GACAD,GACAoB,GACAC,GACAC,GACAC,IAEFphD,WACEqhD,IAEF/kC,iBACE0kC,GACAI,QAlEJE,gCC+BAlyD,KAAAg5B,WAA+B,EAM/Bh5B,KAAAmyD,QAA4B,EAH5B,MALAhtD,QAAAC,eAAMgtD,EAAN/xD,UAAA,gBAAA,WAA4B,MAAOL,MAAKg5B,eACtC,SAAa3zB,GAAkBrF,KAAKg5B,UAAY1zB,EAAAA,sBAAsBD,oCAKxEF,OAAAC,eAAMgtD,EAAN/xD,UAAA,aAAA,WAAyB,MAAOL,MAAKmyD,YACnC,SAAU9sD,GAAkBrF,KAAKmyD,OAAS7sD,EAAAA,sBAAsBD,mDAzBlEvD,KAACC,EAAAA,UAADC,OAAAC,SAAA,cACEU,MACF4N,KAAA,YACMutB,0BAAN,uCACIu0B,+BAAJ,WACIC,4BAAJ,QACI1vD,MAAJ,eAEAV,SAAA,GACAC,QAAA,+SACEE,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,+EAYA0vD,iCClCA,sBAcAtwD,KAACoL,EAAAA,SAADlL,OACEmL,SAAUE,GAAiBD,EAAAA,cAC3BK,SAAU2kD,GAAY/kD,IACtBQ,cAAeukD,QAjBjBnP,qFC8BAj/C,GAAAuuD,aAAiC,EAUjCvuD,EAAAwuD,YAAkD,YAxClD,MAyBkCttD,GAAlCutD,EAAAxuD,GAGAkB,OAAAC,eAAMqtD,EAANpyD,UAAA,kBAAA,WAA8B,MAAOL,MAAKuyD,iBACxC,SAAeznD,GAAiB9K,KAAKuyD,YAAcjtD,EAAAA,sBAAsBwF,mDAX3EhJ,KAACyK,EAAAA,UAADvK,OACEC,SAAU,gBACVgH,SAAU,eACVtG,MACEC,MAAO,uCAKX8vD,aAAA5wD,KAAGuB,EAAAA,QAaHmvD,cAAA1wD,KAAGuB,EAAAA,SAxCHovD,GAyBkCE,EAAAA,cxEFrBC,IAMXC,gBAAiB39C,EAAAA,QAAQ,mBACvBC,EAAAA,MAAM,YAAa7M,EAAAA,OAAO8M,UAAW,kBACrCD,EAAAA,MAAM,WAAY7M,EAAAA,OAAO8M,UAAW,oBACpCE,EAAAA,WAAW,yBAA0BC,EAAAA,QAZO,wCAgB9Cu9C,sBAAuB59C,EAAAA,QAAQ,mBAC7BC,EAAAA,MAAM,YAAa7M,EAAAA,OACjBC,OAAQ,yBAERwqD,QAASC,gBAAiB,UAE5B79C,EAAAA,MAAM,WAAY7M,EAAAA,OAChBC,OAAQ,wBAERwqD,QAASE,eAAgB,UAE3B39C,EAAAA,WAAW,yBAA0BihC,EAAAA,OACnCjnB,EAAAA,MAAM,mBAAoBC,EAAAA,gBAAiBxa,UAAU,IACrDQ,EAAAA,QA7B0C,0CAkC9C29C,cAAeh+C,EAAAA,QAAQ,iBACrBC,EAAAA,MAAM,YAAa7M,EAAAA,OAAOC,OAAQ,MAAO8M,WAAY,YACrDF,EAAAA,MAAM,WAAY7M,EAAAA,OAAOC,OAAQ,IAAK8M,WAAY,aAClDC,EAAAA,WAAW,yBAA0BC,EAAAA,QArCO,uDyEF9C,QAAF49C,GAAqBhQ,GAAAnjD,KAArBmjD,UAAqBA,EAlBrB,sBAcArhD,KAACyK,EAAAA,UAADvK,OACEC,SAAU,gFAPZH,KAAmB6T,EAAAA,eARnBw9C,KCuCIC,GAAW,iBAkDb,QAAFC,GAA0BC,EACZxyD,EACAyyD,EACQj1C,GAHpB,GAAFta,GAIIC,EAJJC,KAAAlE,KAIUszD,EAAWxyD,EAAoByyD,IAJzCvzD,WAGsBgE,GAAtBsa,kBAAsBA,EApBtBta,EAAAuuD,aAAwB,EAGxBvuD,EAAAwvD,cAA2B,GAAI5pD,GAAAA,QAY/B5F,EAAAyvD,UAAc,8BAA8BL,KAOxCpvD,EAAKsvD,UAAYA,IAbrB,MAjBuCpuD,GAAvCmuD,EAAApvD,GAIAkB,OAAAC,eAAMiuD,EAANhzD,UAAA,kBAAA,WAA8B,MAAOL,MAAKuyD,iBACxC,SAAeltD,GACbrF,KAAKuyD,YAAcjtD,EAAAA,sBAAsBD,oCA4B3CguD,EAAFhzD,UAAAqzD,eAAE,WACE,MAAI1zD,MAAKszD,UACAtzD,KAAKszD,UAAUZ,WAEjB1yD,KAAK0yD,YAIdW,EAAFhzD,UAAAszD,YAAE,WACE,QAAI3zD,KAAKszD,WAC4E,aAA3EtzD,KAAK4zD,SAAW5zD,KAAKszD,UAAUd,YAAcxyD,KAAK6zD,sBAM9DR,EAAFhzD,UAAAwzD,kBAAE,WACE,MAAO7zD,MAAK4zD,SAAW,WAAa,aAGtCP,EAAFhzD,UAAA0G,mBAAE,WAAA,GAAF/C,GAAAhE,IACQA,MAAK8zD,cAEP9zD,KAAKqiC,OAAOj4B,KACVkV,EAAAA,UAAS,MACTrQ,EAAAA,OAAO,WAAM,MAAAjL,GAAK4vD,WAAa5vD,EAAKykC,UACpC31B,EAAAA,KAAK,IACL5L,UAAU,WACVlD,EAAKykC,QAAU,GAAI7pB,GAAAA,eAAe5a,EAAK8vD,aAAa3Q,UAAWn/C,EAAKsa,sBAK1E+0C,EAAFhzD,UAAAoe,YAAE,SAAYxX,GACVjH,KAAKwzD,cAAc5oD,KAAK3D,IAG1BosD,EAAFhzD,UAAA8G,YAAE,WACElD,EAAJ5D,UAAU8G,YAAVjD,KAAAlE,MACIA,KAAKwzD,cAAc3oD,YAGrBwoD,EAAFhzD,UAAA0zD,eAAE,SAAevsD,GACb,GAAM/B,GAAY+B,EAAMsC,QAAQrE,UAEzBuuD,EAAXxsD,EAAAwsD,UAAsBvzC,EAAtBjZ,EAAAiZ,OAMsB,UAAduzC,GAAoC,aAAZvzC,EAC1Bhb,EAAUG,IARK,gBASQ,UAAdouD,GAAqC,cAAZvzC,GAClChb,EAAUC,OAVK,gCA/FrB5D,KAACC,EAAAA,UAADC,OAAAG,QAAA,0gCACEF,SAAU,sBACVgH,SAAF,oBACE/G,SAAU,meACVG,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,OACEN,QAAF,WAAA,YACE6xD,SAAF,SAAA,SAAA,kBACE78C,YAAFw7C,GAAAM,eACEvwD,MACFC,MAAe,sBACTsxD,uBAAN,WACIC,sCAAJ,6HA7BAryD,KAAQw/B,EAAAA,4BAdRx/B,KAAEkO,EAAAA,oBASFqjD,EAAAlwD,4FAwDAkwD,uBAjFAe,GAAA,yBAkKA,wEALAzxD,MACAC,MAAA,sBAIAwxD,mBChGE,QAAFC,GACmBvY,EACPjqB,EACAD,EACA9wB,GAJV,GAAFkD,GAAAhE,IACmBA,MAAnB87C,MAAmBA,EACP97C,KAAZ6xB,SAAYA,EACA7xB,KAAZ4xB,cAAYA,EACA5xB,KAAZc,mBAAYA,EANZd,KAAAs0D,0BAAsChwD,EAAAA,aAAaC,MAU/CvE,KAAKs0D,0BAA4B7sD,EAAAA,MAC/Bq0C,EAAMzZ,OACNyZ,EAAM92B,OACN82B,EAAM0X,cAAcppD,KAAK6E,EAAAA,OAAO,SAAAhI,GAAW,SAAGA,EAHpD,aAG0EA,EAH1E,cAKKC,UAAU,WAAM,MAAAlD,GAAKlD,mBAAmBC,iBAEzC6wB,EAAcE,QAAQD,EAASpxB,eAOnC,MAGE4zD,GAAFh0D,UAAAk0D,QAAE,WACEv0D,KAAK87C,MAAMxlB,UAIb+9B,EAAFh0D,UAAAm0D,YAAE,WACE,MAAOx0D,MAAK87C,MAAM8X,UAIpBS,EAAFh0D,UAAAwzD,kBAAE,WACE,MAAO7zD,MAAK87C,MAAM+X,qBAIpBQ,EAAFh0D,UAAAo0D,YAAE,WACE,MAAOz0D,MAAK87C,MAAM7tB,IAIpBomC,EAAFh0D,UAAAq0D,YAAE,WACE,OAAQ10D,KAAK87C,MAAM4W,aAAe1yD,KAAK87C,MAAMhzC,UAI/CurD,EAAFh0D,UAAAs0D,SAAE,SAASntD,GACP,OAAQA,EAAMua,SAEZ,IAAKU,GAAAA,MACL,IAAKD,GAAAA,MACHhb,EAAM6E,iBACNrM,KAAKu0D,SACL,MACF,SACE,SAINF,EAAFh0D,UAAA8G,YAAE,WACEnH,KAAKs0D,0BAA0BltD,cAC/BpH,KAAK4xB,cAAcI,eAAehyB,KAAK6xB,SAASpxB,+BAnGpDqB,KAACC,EAAAA,UAADC,OAAAC,SAAA,6BACEE,QAAF,u3BACED,SAAU,mRACVG,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,OACE0U,YACFw7C,GAAAC,gBACAD,GAAAE,uBAEAnwD,MACAC,MAAA,6BACM2N,KAAN,SACI8wB,YAAJ,kBACI4f,kBAAJ,0BACI2T,uBAAJ,gBACInkD,uBAAJ,gBACIjE,uBAAwB,iBACxB0nD,uBAAwB,gBACxBtnD,UAAJ,YACIywB,YAAJ,mBACIw3B,qBAAsB,uQA5B1B/yD,KAAQm2B,EAAAA,eATRn2B,KAAEmJ,EAAAA,qBAHFopD,EAAAlxD,kFA4EAkxD,iCAyDA,+EALA1xD,MACAC,MAAA,8CAIAkyD,iCAaA,yEALAnyD,MACAC,MAAA,wCAIAmyD,iCC9JA,sBAsBAjzD,KAACoL,EAAAA,SAADlL,OACEmL,SAAUC,EAAAA,aAAc4nD,EAAAA,mBAAoB1nD,EAAAA,cAC5CG,SACEglD,GACAY,GACAe,GACAC,GACAU,GACAD,GACA3B,IAEFtlD,cACE4kD,GACAY,GACAe,GACAC,GACAU,GACAD,GACA3B,QAxCJ8B,mBCsCE,QAAFC,GAAsBrjC,GAAA7xB,KAAtB6xB,SAAsBA,EAHtB7xB,KAAAm1D,SAAqB,EACrBn1D,KAAAo1D,SAAqB,EAUrB,MAJAjwD,QAAAC,eAAM8vD,EAAN70D,UAAA,eAAA,WAA0B,MAAOL,MAAKm1D,cACpC,SAAY9vD,GAAiBrF,KAAKm1D,SAAWE,GAAehwD,oCAI9DF,OAAAC,eAAM8vD,EAAN70D,UAAA,eAAA,WAA0B,MAAOL,MAAKo1D,cACpC,SAAY/vD,GAAiBrF,KAAKo1D,SAAWC,GAAehwD,oCAM5D6vD,EAAF70D,UAAAi1D,UAAE,SAAUC,EAAkBlwD,GAC1BrF,KAAK6xB,SAASpxB,cAAc6H,MAAMitD,GAAYlwD,kBAjClDvD,KAACC,EAAAA,UAADC,OAAAC,SAAA,gBACEgH,SAAU,cACVtG,MACFC,MAAA,iBAEAV,SAAA,gEACAC,QAAA,gvCACEE,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,oEAnBAwyD,EAAE/xD,mEAmCF+xD,KA9CAM,GAAA,8IA6EAA,EAAAvyD,aACAnB,KAAAC,EAAAA,UAAAC,OAAAC,SAAA,qPAnBAO,gBAAAC,EAAAA,wBAAAC,OACEL,cAAFC,EAAAA,kBAAAC,SAIAizD,EAAEl+C,eAAF,WAAA,QACAxV,KAAAiP,EAAAA,8GAqBA,+HAAA0kD,iCAUA,sHAAAC,iCAUA,sHAAAC,KC9EAC,GAAA,WA2BE,QAAFA,GAAcC,EAAoBC,GAAhC,GAAF9xD,GAAAhE,IAtBAA,MAAA+1D,YAAwB,EAGxB/1D,KAAAg2D,SAAqB,EAoBjBh2D,KAAKi2D,QAAU,GAAIxtC,OAAMotC,GACzB71D,KAAKi2D,QAAQC,KAAK,EAAG,EAAGl2D,KAAKi2D,QAAQz0D,QAErCxB,KAAK8d,UAAYg4C,EAAMnuD,IAAI,SAAAwuD,GAAQ,MAAAnyD,GAAKoyD,WAAWD,KA3DvD,MAuCEhxD,QAAFC,eAAMwwD,EAANv1D,UAAA,gBAAE,WAAyB,MAAOL,MAAKg2D,SAAW,mCAMhD7wD,OAAFC,eAAMwwD,EAANv1D,UAAA,eAAE,WACE,GAAIg2D,GAAatwD,KAAKG,IAA1BwB,MAAqB3B,KAAY/F,KAAKi2D,QAGlC,OAAOI,GAAa,EAAIr2D,KAAKs2D,SAAWD,EAAa,EAAIr2D,KAAKs2D,0CAcxDV,EAAVv1D,UAAA+1D,WAAA,SAAqBD,GAEjB,GAAII,GAAgBv2D,KAAKw2D,iBAAiBL,EAAKM,QAS/C,OANAz2D,MAAK02D,kBAAkBH,EAAeJ,GAItCn2D,KAAK+1D,YAAcQ,EAAgBJ,EAAKM,QAEjC,GAAIE,IAAa32D,KAAKg2D,SAAUO,IAIjCX,EAAVv1D,UAAAm2D,iBAAA,SAA2BI,GACvB,GAAIA,EAAW52D,KAAKi2D,QAAQz0D,OAC1B,KAAMonB,OAAM,oCAAoCguC,EAAtD,kCACyC52D,KAAKi2D,QAAQz0D,OAAtD,KAII,IAAI+0D,IAAiB,EACjBM,GAAe,CAGnB,IAEM72D,KAAK+1D,YAAca,EAAW52D,KAAKi2D,QAAQz0D,OAC7CxB,KAAK82D,YAIPP,EAAgBv2D,KAAKi2D,QAAQt6C,QAAQ,EAAG3b,KAAK+1D,cAGvB,GAAlBQ,GAKJM,EAAc72D,KAAK+2D,iBAAiBR,GAIpCv2D,KAAK+1D,YAAcQ,EAAgB,GARjCv2D,KAAK82D,kBAWAD,EAAcN,EAAgBK,EAIvC,OAAO7wD,MAAKG,IAAIqwD,EAAe,IAIzBX,EAAVv1D,UAAAy2D,oBACI92D,KAAK+1D,YAAc,EACnB/1D,KAAKg2D,UAGL,KAAK,GAAIhuD,GAAI,EAAGA,EAAIhI,KAAKi2D,QAAQz0D,OAAQwG,IACvChI,KAAKi2D,QAAQjuD,GAAKjC,KAAKG,IAAI,EAAGlG,KAAKi2D,QAAQjuD,GAAK,IAQ5C4tD,EAAVv1D,UAAA02D,iBAAA,SAA2BR,GACvB,IAAK,GAAIvuD,GAAIuuD,EAAgB,EAAGvuD,EAAIhI,KAAKi2D,QAAQz0D,OAAQwG,IACvD,GAAuB,GAAnBhI,KAAKi2D,QAAQjuD,GACf,MAAOA,EAKX,OAAOhI,MAAKi2D,QAAQz0D,QAIdo0D,EAAVv1D,UAAAq2D,kBAAA,SAA4BhpC,EAAeyoC,GACvC,IAAK,GAAInuD,GAAI,EAAGA,EAAImuD,EAAKM,QAASzuD,IAChChI,KAAKi2D,QAAQvoC,EAAQ1lB,GAAKmuD,EAAKa,SAnJrCpB,KA4JAe,GAAA,WACE,QAAFA,GAAqBM,EAAoBC,GAApBl3D,KAArBi3D,IAAqBA,EAAoBj3D,KAAzCk3D,IAAyCA,EA7JzC,MAAAP,MCiBAQ,GAAA,wBAEAn3D,KAAAo3D,MAAkB,EAClBp3D,KAAAm1D,SAAqB,EApBrB,MAiCEgC,GAAF92D,UAAAg3D,KAAE,SAAKC,EAAoBrB,EAA0BsB,EAAc38C,GAC/D5a,KAAKw3D,YAAcC,GAAeH,GAClCt3D,KAAKo3D,MAAQnB,EAAQK,SACrBt2D,KAAKm1D,SAAWc,EAAQe,QACxBh3D,KAAK03D,MAAQH,EACbv3D,KAAK2tB,WAAa/S,GAUpBu8C,EAAF92D,UAAAs3D,gBAAE,SAAgBC,EAAqBC,GAMnC,MAAO,IAAID,EAAf,QAAkC53D,KAAKw3D,YAAvC,MAAwDK,EAAxD,MAUEV,EAAF92D,UAAAy3D,gBAAE,SAAgBC,EAAkB70C,GAGhC,MAAkB,KAAXA,EAAe,IAAM80C,GAAK,IAAID,EAAzC,MAAuD/3D,KAAKw3D,YAA5D,OAA8Et0C,IAU5Ei0C,EAAF92D,UAAA43D,YAAE,SAAYF,EAAkBG,GAC5B,MAAO,IAAIH,EAAf,MAA6BG,EAA7B,SAAyCA,EAAO,GAAhD,MAAuDl4D,KAAKw3D,YAA5D,KAUEL,EAAF92D,UAAA83D,SAAE,SAAShC,EAAmBH,EAAkBoC,GAE5C,GAAIC,GAAsB,IAAMr4D,KAAK03D,MAIjCY,GAA8Bt4D,KAAK03D,MAAQ,GAAK13D,KAAK03D,KAEzD13D,MAAKu4D,aAAapC,EAAMiC,EAAUC,EAAqBC,GACvDt4D,KAAKw4D,aAAarC,EAAMH,EAAUqC,EAAqBC,IAIzDnB,EAAF92D,UAAAk4D,aAAE,SAAapC,EAAmBiC,EAAkBK,EACrCC,GAEX,GAAIC,GAAgB34D,KAAK23D,gBAAgBc,EAAcC,GAInDE,EAA2B,QAApB54D,KAAK2tB,WAAuB,QAAU,MACjDwoC,GAAKb,UAAUsD,EAAM54D,KAAK83D,gBAAgBa,EAAeP,IACzDjC,EAAKb,UAAU,QAAS0C,GAAKh4D,KAAKi4D,YAAYU,EAAexC,EAAKM,YAMpEU,EAAF92D,UAAAw4D,cAAE,WACE,MAAU74D,MAAKw3D,YAAnB,OAAqCx3D,KAAKm1D,SAA1C,SAOEgC,EAAF92D,UAAAy4D,YAAE,SAAYC,GACV,MAAU/4D,MAAKm1D,SAAnB,MAAiCn1D,KAAKi4D,YAAYc,EAAY,IAgB5D5B,EAAF92D,UAAA24D,kBAAE,WAA+C,MAAO,OA7IxD7B,KA6JA8B,GAAA,SAAAh1D,GAEE,QAAFg1D,GAAqBC,GAAnB,GAAFl1D,GAA+CC,EAA/CC,KAAAlE,OAAAA,WAAqBgE,GAArBk1D,eAAqBA,IA/JrB,MA6JqCh0D,GAArC+zD,EAAAh1D,GAIEg1D,EAAF54D,UAAAg3D,KAAE,SAAKC,EAAoBrB,EAA0BsB,EAAc38C,GAC/D3W,EAAJ5D,UAAUg3D,KAAVnzD,KAAAlE,KAAes3D,EAAYrB,EAASsB,EAAM38C,GACtC5a,KAAKk5D,eAAiBzB,GAAez3D,KAAKk5D,iBAG5CD,EAAF54D,UAAAm4D,aAAE,SAAarC,EAAmBH,GAC9BG,EAAKb,UAAU,MAAOt1D,KAAK83D,gBAAgB93D,KAAKk5D,eAAgBlD,IAChEG,EAAKb,UAAU,SAAU0C,GAAKh4D,KAAKi4D,YAAYj4D,KAAKk5D,eAAgB/C,EAAKa,YAG3EiC,EAAF54D,UAAA24D,kBAAE,WACE,OACE,SAAUhB,GAAQh4D,KAAK84D,YAAY94D,KAAKk5D,gBAA9C,MAAmEl5D,KAAK64D,mBAItEI,EAAF54D,UAAA84D,MAAE,SAAMC,GACJA,EAAKC,eAAe,SAAU,OAE9BD,EAAKE,OAAO7yD,QAAQ,SAAA0vD,GAClBA,EAAKb,UAAU,MAAO,MACtBa,EAAKb,UAAU,SAAU,SAtL/B2D,GA6JqC9B,IAoCrCoC,GAAA,SAAAt1D,GAME,QAAFs1D,GAAcl0D,GAAZ,GAAFrB,GACIC,EADJC,KAAAlE,OAAAA,WAEIgE,GAAKw1D,YAAYn0D,KAzMrB,MAiMqCH,GAArCq0D,EAAAt1D,GAWEs1D,EAAFl5D,UAAAm4D,aAAE,SAAarC,EAAmBH,EAAkByC,EACrCC,GACX,GAAIe,GAAuBhB,EAAez4D,KAAK05D,cAC/C15D,MAAK25D,eAAiB35D,KAAK23D,gBAAgB8B,EAAsBf,GAKjEvC,EAAKb,UAAU,YAAat1D,KAAK83D,gBAAgB93D,KAAK25D,eAAgB3D,IACtEG,EAAKb,UAAU,aAAc0C,GAAKh4D,KAAKi4D,YAAYj4D,KAAK25D,eAAgBxD,EAAKa,YAG/EuC,EAAFl5D,UAAA24D,kBAAE,WACE,OACE,gBAAiBhB,GAAQh4D,KAAK84D,YAAY94D,KAAK25D,gBAArD,MAA0E35D,KAAK64D,mBAI7EU,EAAFl5D,UAAA84D,MAAE,SAAMC,GACJA,EAAKC,eAAe,gBAAiB,OAErCD,EAAKE,OAAO7yD,QAAQ,SAAA0vD,GAClBA,EAAKb,UAAU,YAAa,MAC5Ba,EAAKb,UAAU,aAAc,SAIzBiE,EAAVl5D,UAAAm5D,YAAA,SAAsBn0D,GAClB,GAAMu0D,GAAav0D,EAAMq0B,MAAM,IAE/B,IAA0B,IAAtBkgC,EAAWp4D,OACb,KAAMonB,OAAM,uDAAuDvjB,EAAzE,IAGIrF,MAAK05D,eAAiB78B,WAAW+8B,EAAW,IAAM/8B,WAAW+8B,EAAW,KA9O5EL,GAiMqCpC,IAwDrC0C,GAAA,SAAA51D,+DAzPA,MAyPmCiB,GAAnC20D,EAAA51D,GAEE41D,EAAFx5D,UAAAm4D,aAAE,SAAarC,EAAmBH,GAE9B,GAAIyD,GAAuB,IAAMz5D,KAAKm1D,SAGlC2E,GAAuB95D,KAAKo3D,MAAQ,GAAKp3D,KAAKo3D,MAG9CuC,EAAiB35D,KAAK23D,gBAAgB8B,EAAsBK,EAEhE3D,GAAKb,UAAU,MAAOt1D,KAAK83D,gBAAgB6B,EAAgB3D,IAC3DG,EAAKb,UAAU,SAAU0C,GAAKh4D,KAAKi4D,YAAY0B,EAAgBxD,EAAKa,YAGtE6C,EAAFx5D,UAAA84D,MAAE,SAAMC,GACJA,EAAKE,OAAO7yD,QAAQ,SAAA0vD,GAClBA,EAAKb,UAAU,MAAO,MACtBa,EAAKb,UAAU,SAAU,SA5Q/BuE,GAyPmC1C,kBCpLjC,QAAF4C,GAAsBloC,EAA0CroB,GAA1CxJ,KAAtB6xB,SAAsBA,EAA0C7xB,KAAhEwJ,KAAgEA,EARhExJ,KAAAg6D,QAA4B,MAqB5B,MATA70D,QAAAC,eAAM20D,EAAN15D,UAAA,YAAA,WAAuB,MAAOL,MAAK03D,WACjC,SAASryD,GAAiBrF,KAAK03D,MAAQrC,GAAehwD,oCAIxDF,OAAAC,eAAM20D,EAAN15D,UAAA,kBAAA,WAA6B,MAAOL,MAAKg6D,aACvC,SAAe30D,GAAiBrF,KAAKg6D,QAAUC,GAAe50D,oCAIhEF,OAAAC,eAAM20D,EAAN15D,UAAA,iBAAA,SAAgBgF,GACZ,GAAMu6B,GAAWq6B,GAAe50D,EAE5Bu6B,KAAa5/B,KAAKk6D,aACpBl6D,KAAKk6D,WAAat6B,EAClB5/B,KAAKm6D,eAAen6D,KAAKk6D,8CAI7BH,EAAF15D,UAAAse,SAAE,WACE3e,KAAKo6D,aACLp6D,KAAKq6D,mBAOPN,EAAF15D,UAAAwF,sBAAE,WACE7F,KAAKs6D,gBAICP,EAAV15D,UAAA+5D,sBACI,IAAKp6D,KAAKu3D,KACR,KAAM3uC,OAAM,qFAMRmxC,EAAV15D,UAAAg6D,2BACSr6D,KAAKk6D,YACRl6D,KAAKm6D,eAAe,QAKhBJ,EAAV15D,UAAA85D,eAAA,SAAyBI,GACjBv6D,KAAKw6D,aACPx6D,KAAKw6D,YAAYrB,MAAMn5D,MAzFR,QA4Fbu6D,EACFv6D,KAAKw6D,YAAc,GAAIX,IACdU,GAAaA,EAAU5+C,QAAQ,MAAQ,EAChD3b,KAAKw6D,YAAc,GAAIjB,IAAgBgB,GAEvCv6D,KAAKw6D,YAAc,GAAIvB,IAAgBsB,IAKnCR,EAAV15D,UAAAi6D,mCACUrE,EAAU,GAAIL,IAAgB51D,KAAKu3D,KAAMv3D,KAAKs5D,QAC9C1+C,EAAY5a,KAAKwJ,KAAOxJ,KAAKwJ,KAAKnE,MAAQ,KAChDrF,MAAKw6D,YAAYnD,KAAKr3D,KAAKs3D,WAAYrB,EAASj2D,KAAKu3D,KAAM38C,GAE3D5a,KAAKs5D,OAAO7yD,QAAQ,SAAC0vD,EAAMxvD,GACzB,GAAM21B,GAAM25B,EAAQn4C,UAAUnX,EAC9B3C,GAAKw2D,YAAYrC,SAAShC,EAAM75B,EAAI26B,IAAK36B,EAAI46B,OAG/Cl3D,KAAKq5D,cAAcr5D,KAAKw6D,YAAYxB,sBAItCe,EAAF15D,UAAAg5D,cAAE,SAAc/wD,GACRA,IACFtI,KAAK6xB,SAASpxB,cAAc6H,MAAMA,EAAM,IAAMA,EAAM,oBApH1DxG,KAACC,EAAAA,UAADC,OAAAC,SAAA,gBACEgH,SAAU,cACV/G,SAAU,uCACVC,QAAF,gvCACEQ,MACFC,MAAA,iBAEAJ,gBAAAC,EAAAA,wBAAAC,OACAL,cAAAC,EAAAA,kBAAAC,yHArBAw3D,EAAQ52D,kFA4CRm0D,aAAAx1D,KAAAuB,EAAAA,QAKAk3D,YAAAz4D,KAAQuB,EAAAA,SAUR02D,iCClFA,sBAiBAj4D,KAACoL,EAAAA,SAADlL,OACEmL,SAAUs1C,GAAep1C,IACzBI,SACEssD,GACA7E,GACAM,GACA/S,GACAp1C,GACAqoD,GACAC,GACAF,IAEF5nD,cACEksD,GACA7E,GACAM,GACAE,GACAC,GACAF,QAnCJgF,KjBsEAC,GAAA,WAME,QAAFA,GAAcvpD,GAGJ,EAAco2B,SAClBvnC,KAAKwoD,WAAU,EAEfxoD,KAAK0oD,IAAG,EAlFd,MAAAgS,oBA6HE,QAAF7R,GACwBoB,EACZE,EACsB37C,GAFVxO,KAAxBiqD,YAAwBA,EACZjqD,KAAZmqD,WAAYA,EA1BZnqD,KAAAgrD,gBAA4B,GAAIx9B,KAMhCxtB,KAAAorD,gBAA4B,GAAI59B,KAGhCxtB,KAAA26D,kBAA8B,GAAIntC,KAGlCxtB,KAAAyqD,sBAAkC,GAAIj9B,KAGtCxtB,KAAA46D,uBAAmC,GAAIptC,KAOvCxtB,KAAA66D,qBAAiC,iBAM3B76D,KAAKyO,UAAYD,EAjIvB,MAyIEq6C,GAAFxoD,UAAAy6D,WAAE,SAAW1R,EAAkBV,GAC3B,MAAO1oD,MAAK+6D,sBAAsB,GAAI3R,EAAUV,IAQlDG,EAAFxoD,UAAA26D,kBAAE,SAAkB5R,EAAkB6R,GAClC,MAAOj7D,MAAKk7D,6BAA6B,GAAI9R,EAAU6R,IASzDpS,EAAFxoD,UAAA06D,sBAAE,SAAsBhQ,EAAmB3B,EAAkBV,GACzD,MAAO1oD,MAAK8qD,kBAAkBC,EAAW3B,EAAU,GAAIsR,IAAchS,KASvEG,EAAFxoD,UAAA66D,6BAAE,SAA6BnQ,EAAmB3B,EAAkB6R,GAChE,GAAME,GAAmBn7D,KAAKmqD,WAAWC,SAASC,EAAAA,gBAAgB+Q,KAAMH,EAExE,KAAKE,EACH,KAAME,IAAuCJ,EAG/C,IAAMzS,GAAaxoD,KAAK8oD,+BAA+BqS,EACvD,OAAOn7D,MAAK8qD,kBAAkBC,EAAW3B,EAAU,GAAIsR,IAAclS,KAOvEK,EAAFxoD,UAAAi7D,cAAE,SAAc5S,GACZ,MAAO1oD,MAAKu7D,yBAAyB,GAAI7S,IAO3CG,EAAFxoD,UAAAm7D,qBAAE,SAAqBP,GACnB,MAAOj7D,MAAKy7D,gCAAgC,GAAIR,IAQlDpS,EAAFxoD,UAAAk7D,yBAAE,SAAyBxQ,EAAmBrC,GAC1C,MAAO1oD,MAAKkrD,qBAAqBH,EAAW,GAAI2P,IAAchS,KAQhEG,EAAFxoD,UAAAo7D,gCAAE,SAAgC1Q,EAAmBkQ,GACjD,GAAME,GAAmBn7D,KAAKmqD,WAAWC,SAASC,EAAAA,gBAAgB+Q,KAAMH,EAExE,KAAKE,EACH,KAAME,IAAuCJ,EAG/C,IAAMzS,GAAaxoD,KAAK4oD,sBAAsBuS,EAC9C,OAAOn7D,MAAKkrD,qBAAqBH,EAAW,GAAI2P,IAAclS,KAWhEK,EAAFxoD,UAAAq7D,uBAAE,SAAuBC,EAAetW,GAEpC,WAFJ,KAAAA,IAAwCA,EAAxCsW,GACI37D,KAAK46D,uBAAuBnuC,IAAIkvC,EAAOtW,GAChCrlD,MAOT6oD,EAAFxoD,UAAA8sD,sBAAE,SAAsBwO,GACpB,MAAO37D,MAAK46D,uBAAuB3uD,IAAI0vD,IAAUA,GASnD9S,EAAFxoD,UAAAu7D,uBAAE,SAAuBvW,GAErB,MADArlD,MAAK66D,qBAAuBxV,EACrBrlD,MAOT6oD,EAAFxoD,UAAA+sD,uBAAE,WACE,MAAOptD,MAAK66D,sBAWdhS,EAAFxoD,UAAAw7D,kBAAE,SAAkB7R,GAAlB,GAAFhmD,GAAAhE,KACU0oD,EAAM1oD,KAAKmqD,WAAWC,SAASC,EAAAA,gBAAgBC,aAAcN,EAEnE,KAAKtB,EACH,KAAM6B,IAAmCP,EAG3C,IAAM8R,GAAa97D,KAAK26D,kBAAkB1uD,IAAIy8C,EAE9C,OAAIoT,GACK3xD,EAAAA,GAAa4xD,GAASD,IAGxB97D,KAAKg8D,uBAAuB,GAAItB,IAAc1Q,IAAU5/C,KAC7D6xD,EAAAA,IAAI,SAAAjT,GAAO,MAAAhlD,GAAK22D,kBAAkBluC,IAAG,EAAOu8B,KAC5CrhD,EAAAA,IAAI,SAAAqhD,GAAO,MAAA+S,IAAS/S,OAYxBH,EAAFxoD,UAAAisD,gBAAE,SAAgB12C,EAAcm1C,OAAhC,KAAAA,IAAgCA,EAAhC,GAEI,IAAM1vC,GAAM4vC,GAAQF,EAAWn1C,GACzBiU,EAAS7pB,KAAKgrD,gBAAgB/+C,IAAIoP,EAExC,IAAIwO,EACF,MAAO7pB,MAAKk8D,kBAAkBryC,EAIhC,IAAMsyC,GAAiBn8D,KAAKorD,gBAAgBn/C,IAAI8+C,EAEhD,OAAIoR,GACKn8D,KAAKo8D,0BAA0BxmD,EAAMumD,GAGvCE,EAAAA,WAAgBC,GAA4BjhD,KAM7CwtC,EAAVxoD,UAAA67D,kBAAA,SAA4BryC,GACxB,MAAIA,GAAO2+B,WAEFr+C,EAAAA,GAAa4xD,GAASlyC,EAAO2+B,aAG7BxoD,KAAKg8D,uBAAuBnyC,GAAQzf,KACzC6xD,EAAAA,IAAI,SAAAjT,GAAO,MAAAn/B,GAAO2+B,WAAaQ,IAC/BrhD,EAAAA,IAAI,SAAAqhD,GAAO,MAAA+S,IAAS/S,OAalBH,EAAVxoD,UAAA+7D,0BAAA,SAAoCxmD,EAAcumD,cAIxCI,EAAYv8D,KAAKw8D,+BAA+B5mD,EAAMumD,EAE5D,IAAII,EAIF,MAAOpyD,GAAAA,GAAaoyD,EAKtB,IAAME,GAAwDN,EAC3DltD,OAAO,SAAAytD,GAAiB,OAACA,EAAclU,aACvC7gD,IAAI,SAAA+0D,GACH,MAAO14D,GAAK24D,0BAA0BD,GAAetyD,KACnDwyD,EAAAA,WAAW,SAACpQ,GACV,GAAM9D,GAAM1kD,EAAKmmD,WAAWC,SAASC,EAAAA,gBAAgBC,aAAcoS,EAAchU,IAKjF,OADA9L,SAAQD,MAAM,yBAAyB+L,EAAnD,YAAkE8D,EAAIviC,SACnD9f,EAAAA,GAAa,UAO5B,OAAO0yD,GAAAA,SAASJ,GAAsBryD,KAAKzC,EAAAA,IAAI,WAC7C,GAAMm1D,GAAY94D,EAAKw4D,+BAA+B5mD,EAAMumD,EAE5D,KAAKW,EACH,KAAMR,IAA4B1mD,EAGpC,OAAOknD,OASHjU,EAAVxoD,UAAAm8D,+BAAA,SAAyCpT,EAAkB+S,GAGvD,IAAK,GAAIn0D,GAAIm0D,EAAe36D,OAAS,EAAGwG,GAAK,EAAGA,IAAK,CACnD,GAAM6hB,GAASsyC,EAAen0D,EAC9B,IAAI6hB,EAAO2+B,WAAY,CACrB,GAAMsU,GAAY98D,KAAKkpD,uBAAuBr/B,EAAO2+B,WAAYY,EACjE,IAAI0T,EACF,MAAOA,IAIb,MAAO,OAODjU,EAAVxoD,UAAA27D,uBAAA,SAAiCnyC,aAC7B,OAAO7pB,MAAKyoD,UAAU5+B,EAAO6+B,KACxBt+C,KAAKzC,EAAAA,IAAI,SAAAghD,GAAW,MAAA3kD,GAAK8kD,+BAA+BH,OAOvDE,EAAVxoD,UAAAs8D,0BAAA,SAAoC9yC;4DAEhC,OAAIA,GAAO2+B,WACFr+C,EAAAA,GAAa0f,EAAO2+B,YAGtBxoD,KAAKyoD,UAAU5+B,EAAO6+B,KAAKt+C,KAAKzC,EAAAA,IAAI,SAAAghD,GAOzC,MAJK9+B,GAAO2+B,aACV3+B,EAAO2+B,WAAaxkD,EAAK4kD,sBAAsBD,IAG1C9+B,EAAO2+B,eAOVK,EAAVxoD,UAAAyoD,+BAAA,SAAyCC,GACrC,GAAMC,GAAMhpD,KAAK4oD,sBAAsBG,EAEvC,OADA/oD,MAAKipD,kBAAkBD,GAChBA,GAQDH,EAAVxoD,UAAA6oD,uBAAA,SAAiCC,EAAqBC,GAClD,GAAMC,GAAaF,EAAQG,cAAc,IAAMF,EAE/C,KAAKC,EACH,MAAO,KAKT,IAAME,GAAcF,EAAWG,WAAU,EAKzC,IAJAD,EAAYE,gBAAgB,MAIe,QAAvCF,EAAYhiB,SAAS9rB,cACvB,MAAOzb,MAAKipD,kBAAiB,EAM/B,IAA2C,WAAvCM,EAAYhiB,SAAS9rB,cACvB,MAAOzb,MAAKipD,kBAAkBjpD,KAAK0pD,cAAcH,GAQnD,IAAMP,GAAMhpD,KAAK4oD,sBAAsB,cAIvC,OAFAI,GAAIzY,YAAYgZ,GAETvpD,KAAKipD,kBAAkBD,IAMxBH,EAAVxoD,UAAAuoD,sBAAA,SAAgCe,GAC5B,GAAMC,GAAM5pD,KAAKyO,UAAU4hC,cAAc,MACzCuZ,GAAIC,UAAYF,CAChB,IAAMX,GAAMY,EAAIN,cAAc,MAE9B,KAAKN,EACH,KAAMpgC,OAAM,sBAGd,OAAOogC,IAMDH,EAAVxoD,UAAAqpD,cAAA,SAAwB5/C,GAGpB,IAAK,GAFDk/C,GAAMhpD,KAAK4oD,sBAAsB,eAE5B5gD,EAAI,EAAGA,EAAI8B,EAAQkF,WAAWxN,OAAQwG,IACzC8B,EAAQkF,WAAWhH,GAAGoH,WAAapP,KAAKyO,UAAUq7C,cACpDd,EAAIzY,YAAYzmC,EAAQkF,WAAWhH,GAAGwhD,WAAU,GAIpD,OAAOR,IAMDH,EAAVxoD,UAAA4oD,kBAAA,SAA4BD,GAMxB,MALAA,GAAIe,aAAa,MAAO,IACxBf,EAAIe,aAAa,SAAU,QAC3Bf,EAAIe,aAAa,QAAS,QAC1Bf,EAAIe,aAAa,sBAAuB,iBACxCf,EAAIe,aAAa,YAAa,SACvBf,GAODH,EAAVxoD,UAAAooD,UAAA,SAAoBuB,aAChB,KAAKhqD,KAAKiqD,YACR,KAAMC,KAGR,IAAe,MAAXF,EACF,KAAMphC,OAAM,+BAA+BohC,EAAjD,KAGI,IAAMtB,GAAM1oD,KAAKmqD,WAAWC,SAASC,EAAAA,gBAAgBC,aAAcN,EAEnE,KAAKtB,EACH,KAAM6B,IAAmCP,EAM3C,IAAMQ,GAAkBxqD,KAAKyqD,sBAAsBx+C,IAAIy8C,EAEvD,IAAI8B,EACF,MAAOA,EAKT,IAAME,GAAM1qD,KAAKiqD,YAAYh+C,IAAIy8C,GAAMiC,aAAc,SAASvgD,KAC5DwgD,EAAAA,SAAS,WAAM,MAAA5mD,GAAKymD,sBAAsBn8B,OAAOo6B,KACjDmC,EAAAA,QAIF,OADA7qD,MAAKyqD,sBAAsBh+B,IAAIi8B,EAAKgC,GAC7BA,GASD7B,EAAVxoD,UAAAyqD,kBAAA,SAA4BC,EAAmB3B,EAAkBv/B,GAE7D,MADA7pB,MAAKgrD,gBAAgBv+B,IAAIw+B,GAAQF,EAAW3B,GAAWv/B,GAChD7pB,MAQD6oD,EAAVxoD,UAAA6qD,qBAAA,SAA+BH,EAAmBlhC,GAC9C,GAAMshC,GAAkBnrD,KAAKorD,gBAAgBn/C,IAAI8+C,EAQjD,OANII,GACFA,EAAgBt4C,KAAKgX,GAErB7pB,KAAKorD,gBAAgB3+B,IAAIs+B,GAAYlhC,IAGhC7pB,qBA5eX8B,KAAC6qB,EAAAA,WAAD3qB,OAAawb,WAAY,+CArFzB1b,KAAQupD,EAAAA,WAARpoD,aAAAnB,KAqHKoB,EAAAA,aA5GLpB,KAAQwpD,EAAAA,eA8GRxpD,SAAAgL,GAAA7J,aAAAnB,KAAKoB,EAAAA,WAALpB,KAAiBiL,EAAAA,OAAjB/K,MAAwB4N,EAAAA,4LAhIxBi5C,KAwlBa0C,IAEX16C,QAASg4C,GACTl5B,OACG,GAAIzsB,GAAAA,SAAY,GAAI8pB,GAAAA,SAAY67B,KAChC,GAAI3lD,GAAAA,SAAYmoD,EAAAA,YACjBC,EAAAA,cACC,GAAIpoD,GAAAA,SAAY0M,EAA+B,WAElDggB,WAAY47B,ICtkBdC,GAAA,WACE,QAAFA,GAAqB9qD,GAAAX,KAArBW,YAAqBA,EA5BrB,MAAA8qD,MA8BaC,GAAoB7nD,EAAW4nD,mBAkF1C,QAAFE,GACMhqD,EACQiqD,EACkBC,GAH9B,GAAF7nD,GAIIC,EAJJC,KAAAlE,KAIU2B,IAJV3B,WAEcgE,GAAd4nD,cAAcA,EA1Bd5nD,EAAA8nD,SAA6B,EAgCpBD,GACHlqD,EAAWlB,cAAcspD,aAAa,cAAe,UAnB3D,MA3B6B7kD,GAA7BymD,EAAA1nD,GAOAkB,OAAAC,eAAMumD,EAANtrD,UAAA,yBACI,MAAOL,MAAK8rD,aAEd,SAAWC,GACT/rD,KAAK8rD,QAAUxmD,EAAAA,sBAAsBymD,oCASzC5mD,OAAAC,eAAMumD,EAANtrD,UAAA,eAAA,WAA0B,MAAOL,MAAKgsD,cACpC,SAAY3mD,GACVrF,KAAKgsD,SAAWhsD,KAAKisD,kBAAkB5mD,oCAM3CF,OAAAC,eAAMumD,EAANtrD,UAAA,gBAAA,WAA2B,MAAOL,MAAKksD,eACrC,SAAa7mD,GACXrF,KAAKksD,UAAYlsD,KAAKisD,kBAAkB5mD,oCAiClCsmD,EAAVtrD,UAAA8rD,eAAA,SAAyB/C,GACrB,IAAKA,EACH,OAAQ,GAAI,GAEd,IAAMgD,GAAQhD,EAAS1vB,MAAM,IAC7B,QAAQ0yB,EAAM5qD,QACZ,IAAK,GAAG,OAAQ,GAAI4qD,EAAM,GAC1B,KAAK,GAAG,MAAA,EACR,SAAS,KAAMxjC,OAAM,uBAAuBwgC,EAAlD,OAIEuC,EAAFtrD,UAAAoe,YAAE,SAAYxX,GAAZ,GAAFjD,GAAAhE,IAEI,IAAIiH,EAAR,QACM,GAAIjH,KAAKqsD,QAAS,CAChB,GAAR7vC,GAAAxc,KAAAmsD,eAAAnsD,KAAAqsD,SAAetB,EAAfvuC,EAAA,GAA0B4sC,EAA1B5sC,EAAA,EAEQxc,MAAK4rD,cAAcU,gBAAgBlD,EAAU2B,GAAW3gD,KAAK0I,EAAAA,KAAK,IAAI5L,UACpE,SAAA8hD,GAAO,MAAAhlD,GAAKuoD,eAAevD,IAC3B,SAACwD,GAAe,MAAA5P,SAAQ6P,IAAI,0BAA0BD,EAAIviC,eAG5DjqB,MAAK0sD,kBAIL1sD,MAAK2sD,kBACP3sD,KAAK4sD,0BAITjB,EAAFtrD,UAAAse,SAAE,WAGM3e,KAAK2sD,kBACP3sD,KAAK4sD,0BAIDjB,EAAVtrD,UAAAssD,0BACI,OAAQ3sD,KAAKqsD,SAGPV,EAAVtrD,UAAAksD,eAAA,SAAyBvD,GACrBhpD,KAAK0sD,mBACL1sD,KAAKW,YAAYF,cAAc8vC,YAAYyY,IAGrC2C,EAAVtrD,UAAAqsD,4BAMI,IAAK,GALCG,GAA6B7sD,KAAKW,YAAYF,cAC9CqsD,EAAaD,EAAc79C,WAAWxN,OAInCwG,EAAI,EAAGA,EAAI8kD,EAAY9kD,IAC9B6kD,EAAcE,YAAYF,EAAc79C,WAAWhH,KAI/C2jD,EAAVtrD,UAAAusD,kCACI,GAAK5sD,KAAK2sD,iBAAV,CAIA,GAAMK,GAAoBhtD,KAAKW,YAAYF,cACrCwsD,EAAejtD,KAAKktD,QACtBltD,KAAK4rD,cAAcuB,sBAAsBntD,KAAKktD,SAC9CltD,KAAK4rD,cAAcwB,wBAEnBH,IAAgBjtD,KAAKqtD,wBACnBrtD,KAAKqtD,uBACPL,EAAKvnD,UAAUC,OAAO1F,KAAKqtD,uBAEzBJ,GACFD,EAAKvnD,UAAUG,IAAIqnD,GAErBjtD,KAAKqtD,sBAAwBJ,GAG3BjtD,KAAKstD,UAAYttD,KAAKutD,yBACpBvtD,KAAKutD,wBACPP,EAAKvnD,UAAUC,OAAO1F,KAAKutD,wBAEzBvtD,KAAKstD,UACPN,EAAKvnD,UAAUG,IAAI5F,KAAKstD,UAE1BttD,KAAKutD,uBAAyBvtD,KAAKstD,YAS/B3B,EAAVtrD,UAAA4rD,kBAAA,SAA4B5mD,GACxB,MAAwB,gBAAVA,GAAqBA,EAAMmK,OAAOkqB,MAAM,KAAK,GAAKr0B,kBA/KpEvD,KAACC,EAAAA,UAADC,OAAAE,SAAA,4BACED,SAAU,WACVgH,SAAU,UACV9G,QAAF,spBACEC,QAAF,SACEO,MACF4N,KAAA,MACM3N,MAAN,WACI4qD,0BAAJ,UAEAnrD,cAAAC,EAAAA,kBAAAC,KACAC,gBAAAC,EAAAA,wBAAAC,6EA1DAZ,SAAEgL,GAAF7J,aAAAnB,KAAAmL,EAAAA,UAAAjL,MAAA,oBAsGA2pD,EAAAxoD,iEAlCA+pD,UAAAprD,KAAAuB,EAAAA,QAUAiqD,WAAAxrD,KAAAuB,EAAAA,SAWAsoD,mCCtGA,sBAaA7pD,KAACoL,EAAAA,SAADlL,OACEmL,SAAUE,IACVI,SAAUk+C,GAASt+C,IACnBQ,cAAe89C,QAhBjB5zC,KHwBA01C,GAAA,yBAxBA,MAAAA,MAyBa3H,GAAoBhiD,EAAmB2pD,IAIpDC,GAAA,yBA7BA,MAAAA,MA8BaC,GAAwB7pD,EAAmB4pD,+EAexD,MACgCxoD,GAAhC09C,EAAA3+C,kBAdAnC,KAACC,EAAAA,UAADC,OAAAC,SAAA,eACEgH,SAAU,aACVtG,MACF4N,KAAA,aACM3N,MAAN,gBAEAV,SAAA,4BACAC,QAAA,u3sBACEC,QAAF,iBACEC,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,WAGAkgD,OA7CAD,GAAA,SAAA1+C,gBA2DA,MAAA,QAAAA,GAAAA,EAAAyD,MAAA1H,KAAAyW,YAAAzW,KAHA,4FARAkC,SAAA,4BACES,MAAQC,MAAS,YACjBT,QAAF;+3sBACEC,QAAF,iBACEC,cAAFC,EAAAA,kBAAAC,KACEC,gBAAgBC,EAAAA,wBAAlBC,WAGAigD,GACAmD,gCASA,+HAAAhD,iCAUA,yHAAAC,iCAUA,0HAAAC,4DA8BsB,qBAPtBh/C,EAAA+hD,SAAAA,EAOA/hD,EAAAgiD,YAAA,EAAEhiD,EAAFgiD,aAAAD,EAAA/hD,EAtEA,cA0EA6+C,EAAAxiD,UAAA0G,+FASE,oFAEF87C,EAAAxiD,UAAA4lD,wBAEAjmD,KAAA6xB,SAAApxB,cAAAgF,UAAAG,IAAA,wBAEAi9C,EAAAxiD,UAAA6lD,uBAEAlmD,KAAA6xB,SAAApxB,cAAAgF,UAAAC,OAAA,oDAKE,8DAAF5D,KAAAC,EAAAA,UAAAC,OAAAC,SAAA,kCACgBgH,SAAhB,cACAtG,4BAnDAwjD,+BAAA,UACAC,oCAAA,UACAjpB,UAAA,iBACMC,SAAN,0CAGAl7B,SAAA,uYACAG,cAAAC,EAAAA,kBAAAC,KACAC,gBAAAC,EAAAA,wBAAAC,WAIAmgD,EAAAvrC,eAAe,WAAf,QACAxV,KAAAiP,EAAAA,aACAjP,KAAA8gD,GAAA3/C,aAAAnB,KAAAoB,EAAAA,uHA7DA2/C,ONFAwD,GAAA,yBA5CA,MAAAA,MA6Ca7D,GAA6B1+C,EAAmBuH,EAAcg7C,KAG3EC,GAAA,yBAhDA,MAAAA,MAiDaC,GAA0BziD,EAAmBwiD,IAG7ChE,IACXzxC,QAASyjB,EAAAA,kBACTxjB,YAAakP,EAAAA,WAAW,WAAM,MAAAqiC,MAC9B7tB,OAAO,GAITgyB,GAAA,WACE,QAAFA,GAEW9xB,EAEAgkB,GAFA14C,KAAX00B,OAAWA,EAEA10B,KAAX04C,OAAWA,EAhEX,MAAA8N,qBAyIE,QAAFjE,GAAsB1wB,EACAuN,EAE2CqnB,GAH/D,GAAFziD,GAIIC,EAJJC,KAAAlE,OAAAA,WAAsBgE,GAAtB6tB,SAAsBA,EACA7tB,EAAtBo7B,gBAAsBA,EAE2Cp7B,EAAjEyiD,cAAiEA,EA5CjEziD,EAAAs7B,WAAsB,EACtBt7B,EAAAy7B,WAAsB,EAGtBz7B,EAAA0iD,WAAuB,EAQvB1iD,EAAA2iD,iBAAkD,UAkBlD,MAjCmCzhD,GAAnCq9C,EAAAt+C,GAsBAkB,OAAAC,eAAMm9C,EAANliD,UAAA,gBAAA,WAAmB,MAAOL,MAAKy/B,WAAcz/B,KAAKymD,eAAiBzmD,KAAKymD,cAAc39C,cACpF,SAAazD,GACX,GAAMu6B,GAAWt6B,EAAAA,sBAAsBD,EAEnCu6B,KAAa5/B,KAAKy/B,YACpBz/B,KAAKy/B,UAAYG,EACjB5/B,KAAKo/B,gBAAgBr+B,iDAM3BoE,OAAAC,eAAMm9C,EAANliD,UAAA,gBAAA,WAA4B,MAAOL,MAAKymD,cAAclM,gBAAgBmD,WAAW19C,WAC/E,SAAaqF,GACX,GAAMq4C,GAAap4C,EAAAA,sBAAsBD,EAErCq4C,KAAe19C,KAAKs/B,YACtBt/B,KAAK4mD,aAAalJ,GAClB19C,KAAKymD,cAAcI,uDAWvBtE,EAAFliD,UAAAse,SAAE,WAAA,GAAF3a,GAAAhE,KAMUy9C,EAAcz9C,KAAKs/B,SAEzBh5B,SAAQC,UAAUC,KAAK,YACjBxC,EAAKs7B,WAAame,KACpBz5C,EAAK8Q,UAAW,EAChB9Q,EAAKo7B,gBAAgBr+B,mBAK3BwhD,EAAFliD,UAAA0G,mBAAE,WAGE,GAAI+/C,IAAc9mD,KAAK+mD,OAAQ/mD,KAAK6xB,WAGtC0wB,EAAFliD,UAAA8G,YAAE,WAAA,GAAFnD,GAAAhE,IACQA,MAAK8U,UAGPxO,QAAQC,UAAUC,KAAK,WAAM,MAAAxC,GAAK8Q,UAAW,IAG/C9U,KAAKymD,cAAcO,sBAAsBhnD,OAI3CuiD,EAAFliD,UAAAi2B,OAAE,WACEt2B,KAAK8U,UAAY9U,KAAK8U,UAIxBytC,EAAFliD,UAAA2gB,MAAE,WACEhhB,KAAK6xB,SAASpxB,cAAcugB,SAO9BuhC,EAAFliD,UAAA8jD,SAAE,WACE,MAAOnkD,MAAKinD,MAAQjnD,KAAKinD,MAAMxmD,cAAc8O,YAAc,IAI7DgzC,EAAFliD,UAAA0gC,kBAAE,WACE,MAAO/gC,MAAK8I,UAAY9I,KAAKghC,eAAiBhhC,KAAKymD,cAAczlB,eAGnEuhB,EAAFliD,UAAAsI,aAAE,WACO3I,KAAK8I,WACR9I,KAAKs2B,SAGLt2B,KAAKymD,cAAc5wB,iBAAiB71B,QAIxCuiD,EAAFliD,UAAA4lD,aAAE,WACEjmD,KAAK0mD,WAAY,EACjB1mD,KAAKymD,cAAcS,kBAAkBlnD,OAGvCuiD,EAAFliD,UAAA6lD,YAAE,WACElmD,KAAK0mD,WAAY,EACjB1mD,KAAKymD,cAAc1O,cAIrBwK,EAAFliD,UAAA+xB,gBAAE,WACE,MAAOpyB,MAAK6xB,SAASpxB,eAIvB8hD,EAAFliD,UAAAumD,aAAE,SAAa9xC,GACX,MAAIA,KAAa9U,KAAKs/B,YAItBt/B,KAAKs/B,UAAYxqB,EAEbA,EACF9U,KAAKymD,cAAclM,gBAAgBuC,OAAO98C,MAE1CA,KAAKymD,cAAclM,gBAAgByC,SAASh9C,MAG9CA,KAAKo/B,gBAAgBr+B,gBACd,mBAtKXe,KAACC,EAAAA,UAADC,OAAAC,SAAA,kBACEgH,SAAU,gBACV7G,QAAF,iBACEO,MACF4N,KAAA,SACM3N,MAAN,gCACIu6B,UAAJ,iBACIC,SAAJ,gBACIxwB,UAAW,iBACXu6C,SAAJ,KACIC,iCAAJ,WACIC,8BAAJ,YACIC,uBAAJ,sBACI96C,uBAAJ,uBAEAtK,SAAA,waACAG,cAAAC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,8FAtEAZ,KAAEugD,GAAFp/C,aAAAnB,KAAAiL,EAAAA,OAAA/K,MAAAge,EAAAA,WAAA,WAAA,MAAAqiC,YAuPAE,EAAAp/C,qGApKAwjD,mBAAA7kD,KAAAuB,EAAAA,QAGAgC,QAAAvD,KAAGuB,EAAAA,QAGHyF,WAAAhH,KAAAuB,EAAAA,QAGAyR,WAAAhT,KAAAuB,EAAAA,SAeAk/C,sCA4IA,GAAAv+C,GAAAC,EAAAC,KAAAlE,OAAAA,IAmCA,OAEAgE,GAAA6tB,SAAAA,kNAFA7tB,EAzBA,6GAgCAuhD,WACSrI,gBACFqK,cAAP,WAAA,OAAA,IACAvnD,KAAAwnD,cAGAxnD,KAAAynD,sBAAAznD,KAAAwnD,aAEQxnD,KAAKwnD,YAAc,MAG3BxnD,KAAA0nD,cAAA1nD,KAAAu6C,gBAAA,SAAArzC,UAAA,SAAAM,cAGA,IAAA,GAAAmgD,GAAA,EAAAnrC,EAAAhV,EAAAogD,MAAAD,EAAAnrC,EAAAhb,OAAAmmD,IAAA,CACA,GAAA1W,GAAAz0B,EAAAmrC,EACY1W,GAAZn8B,UAAA,EAEA,GAAAtN,EAAAqgD,QACA,IAAA,GAAA5S,GAAA,EAAAE,EAAA3tC,EAAAqgD,QAAA5S,EAAAE,EAAA3zC,OAAAyzC,IAAA,CAEA,GAAAhE,GAAyBkE,EAAzBF,EACYhE,GAAZn8B,UAAA,4bAgCA,GAAAgzC,GAAA9nD,KAAAm+C,gBAAAzF,EAEAoP,GAAA,2CAIA,IAAaA,GAAb9nD,KAAAy4C,QAAAj3C,OAAA,GACAxB,KAAA85C,YAAAiO,uEAOA/M,EAAAh7C,KAAA85C,YACUkO,EAAVhN,EAAAK,eACI,QAAJt5B,GACA,IAAAU,GAAAA,MAEA,IAAAD,GAAAA,MACAxiB,KAAA8I,WACA9I,KAAAioD,+BAEUzgD,EAAV6E,iBAGA,MACA,KAAS+V,GAAAA,KACT,IAAAE,GAAAA,IACAP,IAAAK,EAAAA,KAAA44B,EAAAC,qBAAAD,EAAAE,oBACA1zC,EAAA6E,gBACQ,MACR,SACQ2uC,EAARD,UAAAvzC,GAEAua,IAAAma,EAAAA,UAAAna,IAAAoa,EAAAA,aAAA30B,EAAA8zC,UACAN,EAAAK,kBAAA2M,GAEQhoD,KAARioD,wFAOAjoD,KAAA83C,UAAA93C,KAAAkoD,iKAYAloD,KAAAynD,sBAAAU,OAGAnoD,KAAAwnD,YAAAW,0DAMAnoD,KAAAy4C,QAAAhyC,QAAA,SAAAiyC,GAAA,MAAAA,GAAA5vC,SAAAstB,qLAiBAp2B,MAAAy4C,QAAAhyC,QAAA,SAAAiyC,GAAA,MAAAA,GAAAkO,cAAA,OACSj/C,IAAT,SAAAtC,GAEA,MAAArB,GAAAy0C,QAAAhuC,KAAA,SAAAiuC,GACU,MAAV10C,GAAA6hC,YAAA7hC,EAAA6hC,YAAA6S,EAAArzC,MAAAA,GAAAqzC,EAAArzC,QAAAA,MAE6F4J,OAA7Fm5C,SACA3hD,QAAA,SAAAiyC,GAAA,MAAA,GAAAkO,cAAA,iRAYA,GAAAyB,GAA4BroD,KAA5By4C,QAAAh3C,UAAA6mD,EAEAD,KACAA,EAAA/xB,8HAmBAoiB,EAAAkO,aAAAlJ,KAEA6K,GAAyB,KAGzBA,GACAvoD,KAAA6mD;sHAkBAxE,EAAAp/C,+FAxQAb,QAAA,WAAA,gBAAA,YACEO,MACF4N,KAAA,UACAmtB,aAAA,WACA96B,MAAA,qBACMu6B,UAAN,UACIC,SAAJ,eACIC,YAAJ,mBACI7wB,uBAAJ,uBAEAtK,SAAA,4BACAC,QAAA,u3sBACAE,cAAAC,EAAAA,kBAAAC,KACAqO,WAAA0xC,IACE9/C,gBAAFC,EAAAA,wBAAAC,WAIA2/C,EAAA/qC,eAAA,WAAA,QACAxV,KAAAiP,EAAAA,gGAtPA0nC,UAAA32C,KAAA0P,EAAAA,gBAAAxP,MAAAugD,MA4RAxc,kBAAAjkC,KAAAyB,EAAAA,iEA3BA8+C,GAIAG,gCCxRA,sBA4BA1gD,KAACoL,EAAAA,SAADlL,OACEmL,SAAUs1C,GAAel1C,GAAiBF,GAAiBq1C,GAAyBt1C,EAAAA,cACpFK,SACEk1C,GACAC,GACAC,GACAC,GACAL,GACAp1C,GACA01C,GACAC,GACAN,GACAL,GACAE,GACAU,IAEFp1C,cACE80C,GACAC,GACAC,GACAC,GACAC,GACAC,GACAX,GACAE,QApDJW,mBC+BE,QAAFlR,GACYmR,EACAC,EACAC,EACAj6B,EACA9K,EACkB7P,GALlBzO,KAAZmjD,UAAYA,EACAnjD,KAAZojD,0BAAYA,EACApjD,KAAZqjD,QAAYA,EACArjD,KAAZopB,UAAYA,EACAppB,KAAZse,kBAAYA,EACkBte,KAA9ByO,UAA8BA,EArC9B,MA2CEujC,GAAF3xC,UAAAsf,OAAE,SAAO2jC,OAAT,KAAAA,IAASA,MACAtjD,KAAKyoC,UACRzoC,KAAKyoC,QAAU,GAAI7pB,GAAAA,eAAe5e,KAAKmjD,UAAWnjD,KAAKse,oBAGzDte,KAAK8f,SAEA9f,KAAKujD,UACRvjD,KAAKujD,QAAU,GAAIC,GAAAA,gBAAgBxjD,KAAKyO,UAAU4hC,cAAc,OAC5DrwC,KAAKojD,0BAA2BpjD,KAAKqjD,QAASrjD,KAAKopB,WAGzD,IAAMtf,GAAuB9J,KAAKmjD,UAAUxhD,WAAWlB,aAKvDqJ,GAAkB,WAAE25C,aAAazjD,KAAKujD,QAAQG,cAAe55C,GAC7D9J,KAAKyoC,QAAQ9oB,OAAO3f,KAAKujD,QAASD,IAOpCtR,EAAF3xC,UAAAyf,OAAE,WACM9f,KAAKyoC,QAAQkb,YACf3jD,KAAKyoC,QAAQ3oB,UAIjBkyB,EAAF3xC,UAAA8G,YAAE,WACMnH,KAAKujD,SACPvjD,KAAKujD,QAAQ79B,0BApDnB5jB,KAACyK,EAAAA,UAADvK,OACEC,SAAU,sEAfZH,KAAE6T,EAAAA,cACF7T,KAAEie,EAAAA,2BACFje,KAAE8hD,EAAAA,iBACF9hD,KAAEgrB,EAAAA,WACFhrB,KAAEkO,EAAAA,mBAuBFlO,SAAAgL,GAAA7J,aAAAnB,KAAKiL,EAAAA,OAAL/K,MAAY4N,EAAAA,eArCZoiC,KCyBaT,IAYXC,cAAet8B,EAAAA,QAAQ,iBACrBC,EAAAA,MAAM,OAAQ7M,EAAAA,OACZke,QAAS,EAGTpR,UAAW,uBAEbE,EAAAA,WAAW,gBAAiBuuC,EAAAA,UAC1Bv0B,EAAAA,MAAM,oBAAqBhnB,EAAAA,OAAOke,QAAS,KAC3CjR,EAAAA,QAAQ,eAAgBjN,EAAAA,OAAOke,QAAS,EAAGpR,UAAW,mBACtDmhC,EAAAA,OACEjnB,EAAAA,MAAM,oBAAqB/Z,EAAAA,QAAQ,yCACjCjN,EAAAA,OAAOke,QAAS,MAElBjR,EAAAA,QAAQ,yCAA0CjN,EAAAA,OAAO8M,UAAW,sBAGxEE,EAAAA,WAAW,YAAaC,EAAAA,QAAQ,oBAAqBjN,EAAAA,OAAOke,QAAS,QAQvEirB,YAAav8B,EAAAA,QAAQ,eAGnBC,EAAAA,MAAM,UAAW7M,EAAAA,OAAOke,QAAS,KACjClR,EAAAA,WAAW,aACThN,EAAAA,OAAOke,QAAS,IAChBjR,EAAAA,QAAQ,qDASDk8B,GAAcF,GAAkBE,YAMhCD,GAAgBD,GAAkBC,cCjElCE,GAAiB,GAAIn0B,GAAAA,eAA6B,kBCY/DumC,GAAA,yBA9BA,MAAAA,MA+BaC,GAAwBjgD,EAAmBuH,EAAcy4C,oBAwCpE,QAAFhS,GACYnxC,EACU6N,EACVojB,EACoCygB,GAJ9C,GAAFruC,GAOIC,EAAJC,KAAAlE,OAAAA,WANYgE,GAAZrD,YAAYA,EAEAqD,EAAZ4tB,cAAYA,EACoC5tB,EAAhDquC,YAAgDA,EAZhDruC,EAAA2xC,SAA4C,GAAI/rC,GAAAA,QAGhD5F,EAAAswC,cAA0B,EAG1BtwC,EAAA+uC,kBAA8B,EAWtBnhB,GAIFA,EAAcE,QAAQ9tB,EAAKouB,mBAAmB,GAG5CigB,GAAeA,EAAY2R,SAC7B3R,EAAY2R,QAAQhgD,GAGtBA,EAAKyK,UAAYD,IAhBrB,MAlBiCtJ,GAAjC4sC,EAAA7tC,GAsCE6tC,EAAFzxC,UAAA2gB,MAAE,SAAMla,OAAR,KAAAA,IAAQA,EAAR,WACQ9G,KAAK4xB,cACP5xB,KAAK4xB,cAAcyE,SAASr2B,KAAKoyB,kBAAmBtrB,GAEpD9G,KAAKoyB,kBAAkBpR,SAI3B8wB,EAAFzxC,UAAA8G,YAAE,WACMnH,KAAK4xB,eACP5xB,KAAK4xB,cAAcI,eAAehyB,KAAKoyB,mBAGrCpyB,KAAKqyC,aAAeryC,KAAKqyC,YAAYrB,YACvChxC,KAAKqyC,YAAYrB,WAAWhxC,MAG9BA,KAAK21C,SAAS9qC,YAIhBinC,EAAFzxC,UAAA2I,aAAE,WACE,MAAOhJ,MAAK8I,SAAW,KAAO,KAIhCgpC,EAAFzxC,UAAA+xB,gBAAE,WACE,MAAOpyB,MAAKW,YAAYF,eAI1BqxC,EAAFzxC,UAAA4jD,eAAE,SAAez8C,GACTxH,KAAK8I,WACPtB,EAAM6E,iBACN7E,EAAMouB,oBAKVkc,EAAFzxC,UAAA6jD,kBAAE,WACElkD,KAAK21C,SAAS/qC,KAAK5K,OAIrB8xC,EAAFzxC,UAAA8jD,SAAE,WACE,GAAMr6C,GAAuB9J,KAAKW,YAAYF,cACxC2jD,EAAepkD,KAAKyO,UAAYzO,KAAKyO,UAAU41C,UAAY,EAC7DC,EAAS,EAEb,IAAIx6C,EAAQkF,WAMV,IAAK,GALCu1C,GAASz6C,EAAQkF,WAAWxN,OAKzBwG,EAAI,EAAGA,EAAIu8C,EAAQv8C,IACtB8B,EAAQkF,WAAWhH,GAAGoH,WAAag1C,IACrCE,GAAUx6C,EAAQkF,WAAWhH,GAAGuH,YAKtC,OAAO+0C,GAAO90C,uBAxHlB1N,KAACC,EAAAA,UAADC,OAAAC,SAAA,kBACEgH,SAAU,cACV7G,QAAF,WAAA,iBACEO,MACF4N,KAAA,WACM3N,MAAN,gBACI4hD,oCAAJ,eACIC,wCAAJ,mBACIxD,kBAAJ,iBACIz0C,uBAAJ,sBACIk4C,kBAAmB,mBACnB93C,UAAJ,yBACIwkB,eAAJ,uBAEA5uB,gBAAAC,EAAAA,wBAAyCC,OACzCL,cAAAC,EAAAA,kBAAAC,KACEL,SAAF,yRAzCAJ,KAAEm2B,EAAAA,eA6DFn2B,SAAAgL,GAAA7J,aAAAnB,KAAKiL,EAAAA,OAAL/K,MAAY0vC,MAAZ5vC,KAAAoB,EAAAA,cAEA4uC,OTdaH,GACT,GAAIp0B,GAAAA,eAAsC,4BACxCC,WAAY,OACZC,QAASknC,mBAsKb,QAAF5T,GACYpwC,EACA8I,EACkCw9B,GAFlCjnC,KAAZW,YAAYA,EACAX,KAAZyJ,QAAYA,EACkCzJ,KAA9CinC,gBAA8CA,EApI9CjnC,KAAA4kD,WAAsC5kD,KAAKinC,gBAAgB8N,UAC3D/0C,KAAA6kD,WAAsC7kD,KAAKinC,gBAAgB2K,UAI3D5xC,KAAA8wC,UAGA9wC,KAAA6wC,aAAyB,GAAIjnC,GAAAA,QAG7B5J,KAAA8kD,iBAA6BxgD,EAAAA,aAAaC,MAG1CvE,KAAA+kD,cAGA/kD,KAAAmxC,qBAA2C,OAG3CnxC,KAAAyrC,eAAmB,GAAI7hC,GAAAA,QAYvB5J,KAAA20C,cAAmC30C,KAAKinC,gBAAgB0N,cA8CxD30C,KAAAglD,gBAAqChlD,KAAKinC,gBAAgBgL,eAQ1DjyC,KAAAilD,aAA8CjlD,KAAKinC,gBAAgBrU,YAkCnE5yB,KAAAglB,OAAM,GAAIngB,GAAAA,aAOV7E,KAAA0iC,MAAoB1iC,KAAKglB,OAAzB,MA3FA7f,QAAAC,eAAM2rC,EAAN1wC,UAAA,iBAAA,WAAmC,MAAOL,MAAK4kD,gBAC7C,SAAcv/C,GACE,WAAVA,GAAgC,UAAVA,GACxB6/C,KAEFllD,KAAK4kD,WAAav/C,EAClBrF,KAAK80C,sDAKT3vC,OAAAC,eAAM2rC,EAAN1wC,UAAA,iBAAA,WAAmC,MAAOL,MAAK6kD,gBAC7C,SAAcx/C,GACE,UAAVA,GAA+B,UAAVA,GACvB8/C,KAEFnlD,KAAK6kD,WAAax/C,EAClBrF,KAAK80C,sDAqBT3vC,OAAAC,eAAM2rC,EAAN1wC,UAAA,sBAAA,WAAkC,MAAOL,MAAKglD,qBAC5C,SAAmB3/C,GACjBrF,KAAKglD,gBAAkB1/C,EAAAA,sBAAsBD,oCAMjDF,OAAAC,eAAM2rC,EAAN1wC,UAAA,mBAAA,WAA2C,MAAOL,MAAKilD,kBACrD,SAAgB5/C,GACdrF,KAAKilD,aAAe3/C,EAAAA,sBAAsBD,oCAW9CF,OAAAC,eAAM2rC,EAAN1wC,UAAA,kBAAA,SAAiB+kD,GACTA,GAAWA,EAAQ5jD,SACrBxB,KAAK+kD,WAAaK,EAAQ1rB,MAAM,KAAKle,OAAO,SAACqB,EAAUwoC,GAErD,MADAxoC,GAAIwoC,IAAa,EACVxoC,OAGT7c,KAAKW,YAAYF,cAAc4kD,UAAY,GAC3CrlD,KAAK80C,uDAYX3vC,OAAAC,eAAM2rC,EAAN1wC,UAAA,iBAAA,WAA4B,MAAOL,MAAKwoB,gBACtC,SAAc48B,GAAmBplD,KAAKwoB,WAAa48B,mCAkBnDrU,EAAF1wC,UAAAse,SAAE,WACE3e,KAAK80C,sBAGP/D,EAAF1wC,UAAA0G,mBAAE,WAAA,GAAF/C,GAAAhE,IACIA,MAAK85C,YAAc,GAAIwL,GAAAA,gBAA6BtlD,KAAK8wC,QAAQyU,WAAWrI,gBAC5El9C,KAAK8kD,iBAAmB9kD,KAAK85C,YAAYsD,OAAOl2C,UAAU,WAAM,MAAAlD,GAAK0+B,MAAMr8B,KAAK,UAGlF0qC,EAAF1wC,UAAA8G,YAAE,WACEnH,KAAK8kD,iBAAiB19C,cACtBpH,KAAKglB,OAAOna,YAIdkmC,EAAF1wC,UAAAs1C,SAAE,WACE,MAAO31C,MAAK6wC,aAAazmC,KACvBkV,EAAAA,UAAUtf,KAAK8wC,QACf+H,EAAAA,UAAU,SAAAhH,GAAS,MAAApqC,GAAAA,MAFzBC,UAAA,GAEkCmqC,EAAMlqC,IAAI,SAAAspC,GAAQ,MAAAA,GAAK0E,gBAKvD5E,EAAF1wC,UAAAyhB,eAAE,SAAeta,GACb,GAAMua,GAAUva,EAAMua,OAEtB,QAAQA,GACN,IAAK8mB,GAAAA,OACH7oC,KAAKglB,OAAO3e,KAAK,WACjBmB,EAAMouB,iBACR,MACA,KAAK1T,GAAAA,WACCliB,KAAKg0C,YAAiC,QAAnBh0C,KAAK4a,WAC1B5a,KAAKglB,OAAO3e,KAAK,UAErB,MACA,KAAK2b,GAAAA,YACChiB,KAAKg0C,YAAiC,QAAnBh0C,KAAK4a,WAC1B5a,KAAKglB,OAAO3e,KAAK,UAErB,MACA,SACM0b,IAAYma,EAAAA,UAAYna,IAAYoa,EAAAA,YACtCn8B,KAAK85C,YAAY0L,eAAe,YAGlCxlD,KAAK85C,YAAYiB,UAAUvzC,KAQjCupC,EAAF1wC,UAAA8zC,eAAE,SAAertC,GAAf,GAAF9C,GAAAhE,SAAA,KAAA8G,IAAiBA,EAAjB,WAEQ9G,KAAK+xC,YACP/xC,KAAKyJ,QAAQmvC,SAAS/yB,eACnBzb,KAAK0I,EAAAA,KAAK,IACV5L,UAAU,WAAM,MAAAlD,GAAK81C,YAAY0L,eAAe1+C,GAAQm0C,uBAE3Dj7C,KAAK85C,YAAY0L,eAAe1+C,GAAQm0C,sBAQ5ClK,EAAF1wC,UAAAolD,gBAAE,WACEzlD,KAAK85C,YAAY4C,eAAe,IAOlC3L,EAAF1wC,UAAAy0C,mBAAE,SAAmBF,EAAsCC,OAA3D,KAAAD,IAAqBA,EAAsB50C,KAAK+0C,eAAhD,KAAAF,IAA2DA,EAAsB70C,KAAK4xC,WAClF5xC,KAAK+kD,WAAW,mBAA8B,WAATnQ,EACrC50C,KAAK+kD,WAAW,kBAA6B,UAATnQ,EACpC50C,KAAK+kD,WAAW,kBAA6B,UAATlQ,EACpC70C,KAAK+kD,WAAW,kBAA6B,UAATlQ,GAOtC9D,EAAF1wC,UAAA+zC,aAAE,SAAaC,GAEX,GAAMqR,GAAe,mBArPO,EAqPqCrR,GAC3DsR,EAAkBxgD,OAAOoW,KAAKvb,KAAK+kD,YAAYt6C,KAAK,SAAAm7C,GAAK,MAAAA,GAAE79B,WAAW,oBAEvE49B,IAAmBA,IAAoB3lD,KAAK6lD,qBAC3C7lD,KAAK6lD,qBACP7lD,KAAK+kD,WAAW/kD,KAAK6lD,qBAAsB,GAG7C7lD,KAAK+kD,WAAWW,IAAgB,EAChC1lD,KAAK6lD,mBAAqBH,IAQ9B3U,EAAF1wC,UAAA2jD,QAAE,SAAQ/S,IAM6B,IAA/BjxC,KAAK8wC,OAAOn1B,QAAQs1B,KACtBjxC,KAAK8wC,OAAOj+B,KAAKo+B;kDACjBjxC,KAAK6wC,aAAajmC,KAAK5K,KAAK8wC,UAQhCC,EAAF1wC,UAAA2wC,WAAE,SAAWC,GACT,GAAMtqC,GAAQ3G,KAAK8wC,OAAOn1B,QAAQs1B,EAE9BjxC,MAAK8wC,OAAOn1B,QAAQs1B,IAAS,IAC/BjxC,KAAK8wC,OAAO5zB,OAAOvW,EAAO,GAC1B3G,KAAK6wC,aAAajmC,KAAK5K,KAAK8wC,UAKhCC,EAAF1wC,UAAA6wC,gBAAE,WAEElxC,KAAKmxC,qBAAuB,SAI9BJ,EAAF1wC,UAAA+wC,gBAAE,WAEEpxC,KAAKmxC,qBAAuB,QAI9BJ,EAAF1wC,UAAAgxC,iBAAE,SAAiB7pC,GACfxH,KAAKyrC,eAAe7gC,KAAKpD,GACzBxH,KAAKsxC,cAAe,kBA3SxBxvC,KAACC,EAAAA,UAADC,OAAAC,SAAA,WACEC,SAAU,wXACVC,QAAF,u0EACEK,gBAAFC,EAAAA,wBAAAC,OACEL,cAAFC,EAAAA,kBAAAC,KACE0G,SAAF,UACEmO,YACFm6B,GAAAC,cACAD,GAAAE,aAEA7gC,YACAC,QAAA6gC,GAAA5gC,YAAAigC,gFA5EAjvC,SAAEgL,GAAF7J,aAAAnB,KAAAiL,EAAAA,OAAA/K,MAAA2vC,SAuNAZ,EAAA5tC,0EApGAyuC,YAAA9vC,KAAAuB,EAAAA,QAGAqS,cAAA5T,KAAAsB,EAAAA,UAAApB,MAAA2T,EAAAA,eAWAk8B,QAAA/vC,KAAA0P,EAAAA,gBAAAxP,MAAA8vC,MAWAC,cAAAjwC,KAAG2wB,EAAAA,aAAHzwB,MAAAgwC,MAOAC,iBAAAnwC,KAAAuB,EAAAA,QAMAuvB,cAAA9wB,KAAGuB,EAAAA,QAGHmlB,aAAA1mB,KAAAuB,EAAAA,MAAArB,MAAA,WAQAyD,YAAA3D,KAAAuB,EAAAA,QAaA2hB,SAAAljB,KAAAyB,EAAAA,SAoBAm/B,QAAA5gC,KAAAyB,EAAAA,UAaAwtC,KCvLamB,GACT,GAAI30B,GAAAA,eAAqC,4BACvCC,WAAY,OACZC,QAAS00B,mBA8Eb,QAAFC,GAAsBlpB,EACA2I,EACAvT,EACkC0oB,EACtBqL,EACQC,EACR9oC,EAGZooB,GATA5xB,KAAtBkpB,SAAsBA,EACAlpB,KAAtB6xB,SAAsBA,EACA7xB,KAAtBse,kBAAsBA,EACkCte,KAAxDgnC,gBAAwDA,EACtBhnC,KAAlCqyC,YAAkCA,EACQryC,KAA1CsyC,kBAA0CA,EACRtyC,KAAlCwJ,KAAkCA,EAGZxJ,KAAtB4xB,cAAsBA,EAzDtB5xB,KAAAukB,YAA2C,KAC3CvkB,KAAAuyC,WAA+B,EAC/BvyC,KAAAwyC,mBAA+BluC,EAAAA,aAAaC,MAC5CvE,KAAAyyC,mBAA+BnuC,EAAAA,aAAaC,MAI5CvE,KAAA0yC,gBAAoC,EAsBpC1yC,KAAA2yC,WAAsD,GAAI9tC,GAAAA,aAO1D7E,KAAA4yC,WAAsD5yC,KAAK2yC,WAG3D3yC,KAAA6yC,WAAsD,GAAIhuC,GAAAA,aAO1D7E,KAAA8yC,YAAuD9yC,KAAK6yC,WAapDP,IACFA,EAAkBS,iBAAmB/yC,KAAKgzC,mBA1IhD,MA4FA7tC,QAAAC,eAAMgtC,EAAN/xC,UAAA,+CACI,MAAOL,MAAKizC,UAGd,SAAiC5vB,GAC/BrjB,KAAKizC,KAAO5vB,mCA6Cd+uB,EAAF/xC,UAAA0G,mBAAE,WAAA,GAAF/C,GAAAhE,IACIA,MAAKkzC,aAELlzC,KAAKizC,KAAKvQ,MAAMx7B,UAAU,SAAAisC,GACxBnvC,EAAKovC,eAGW,UAAXD,GAAiC,QAAXA,IAAqBnvC,EAAKquC,aACnDruC,EAAKquC,YAAYrtB,OAAO3e,KAAK8sC,KAIjCnzC,KAAKqzC,gBAGPjB,EAAF/xC,UAAA8G,YAAE,WACMnH,KAAKukB,cACPvkB,KAAKukB,YAAYmB,UACjB1lB,KAAKukB,YAAc,MAGrBvkB,KAAKszC,yBAIPnuC,OAAFC,eAAMgtC,EAAN/xC,UAAA,gBAAE,WACE,MAAOL,MAAKuyC,2CAIdptC,OAAFC,eAAMgtC,EAAN/xC,UAAA,WAAE,WACE,MAAOL,MAAKwJ,MAA4B,QAApBxJ,KAAKwJ,KAAKnE,MAAkB,MAAQ,uCAI1D+sC,EAAF/xC,UAAA2yC,gBAAE,WACE,SAAUhzC,KAAKsyC,oBAAqBtyC,KAAKqyC,cAI3CD,EAAF/xC,UAAAkzC,WAAE,WACE,MAAOvzC,MAAKuyC,UAAYvyC,KAAKwzC,YAAcxzC,KAAKyzC,YAIlDrB,EAAF/xC,UAAAozC,SAAE,WAAA,GAAFzvC,GAAAhE,IACI,KAAIA,KAAKuyC,UAAT,CAIA,GAAMloB,GAAarqB,KAAK4qB,gBACxBP,GAAWqpB,aAAa1zC,KAAKqgB,KAC7BgK,EAAW1K,OAAO3f,KAAKyoC,SAEnBzoC,KAAKizC,KAAKlB,aACZ/xC,KAAKizC,KAAKlB,YAAYpyB,OAAO3f,KAAK2zC,UAGpC3zC,KAAKwyC,mBAAqBxyC,KAAK4zC,sBAAsB1sC,UAAU,WAAM,MAAAlD,GAAKwvC,cAC1ExzC,KAAK6zC,YAED7zC,KAAKizC,eAAgBlC,KACvB/wC,KAAKizC,KAAK/B,oBAKdkB,EAAF/xC,UAAAmzC,UAAE,WACExzC,KAAKizC,KAAKvQ,MAAMr8B,QAOlB+rC,EAAF/xC,UAAA2gB,MAAE,SAAMla,OAAR,KAAAA,IAAQA,EAAR,WACQ9G,KAAK4xB,cACP5xB,KAAK4xB,cAAcyE,SAASr2B,KAAK6xB,SAASpxB,cAAeqG,GAEzD9G,KAAK6xB,SAASpxB,cAAcugB,SAKxBoxB,EAAV/xC,UAAA+yC,wBACI,GAAKpzC,KAAKukB,aAAgBvkB,KAAK8zC,SAA/B,CAIA,GAAMb,GAAOjzC,KAAKizC,IAElBjzC,MAAK+zC,aACL/zC,KAAKwyC,mBAAmBprC,cACxBpH,KAAKukB,YAAYzE,SAEbmzB,YAAgBlC,KAClBkC,EAAK7B,kBAED6B,EAAKlB,aAEPkB,EAAKxH,eACFrhC,KAAK0I,EAAAA,KAAK,IACV5L,UAAU,WAArB,MAA2B+rC,GAAgB,YAAEnzB,YAE9BmzB,EAAKlB,aACdkB,EAAKlB,YAAYjyB,WAQbsyB,EAAV/xC,UAAAwzC,qBACI7zC,KAAKizC,KAAKe,WAAah0C,KAAKgzC,kBAAoBhzC,KAAKqyC,gBAAcvlC,GACnE9M,KAAKizC,KAAKr4B,UAAY5a,KAAKqgB,IAC3BrgB,KAAKi0C,oBACLj0C,KAAKk0C,gBAAe,GACpBl0C,KAAKizC,KAAKkB,eAAen0C,KAAK0yC,eAAiB,QAAU,YAInDN,EAAV/xC,UAAA4zC,6BACI,GAAIj0C,KAAKizC,KAAKmB,aAAc,CAI1B,IAHA,GAAIC,GAAQ,EACRL,EAAah0C,KAAKizC,KAAKe,WAEpBA,GACLK,IACAL,EAAaA,EAAWA,UAG1Bh0C,MAAKizC,KAAKmB,aAAaC,KAQnBjC,EAAV/xC,UAAA0zC,sBACI/zC,KAAKk0C,gBAAe,GAKfl0C,KAAK0yC,eAIE1yC,KAAKgzC,mBACfhzC,KAAKghB,MAAM,SAFXhhB,KAAKghB,QAKPhhB,KAAK0yC,gBAAiB,GAIhBN,EAAV/xC,UAAA6zC,eAAA,SAAyB7Q,GACrBrjC,KAAKuyC,UAAYlP,EACjBrjC,KAAKuyC,UAAYvyC,KAAK2yC,WAAWtsC,OAASrG,KAAK6yC,WAAWxsC,OAEtDrG,KAAKgzC,oBACPhzC,KAAKsyC,kBAAkBgC,aAAejR,IAQlC+O,EAAV/xC,UAAA6yC,sBACSlzC,KAAKizC,MACRsB,MAQInC,EAAV/xC,UAAAuqB,0BACI,IAAK5qB,KAAKukB,YAAa,CACrBvkB,KAAKyoC,QAAU,GAAI7pB,GAAAA,eAAe5e,KAAKizC,KAAKv9B,YAAa1V,KAAKse,kBAC9D,IAAMuL,GAAS7pB,KAAKw0C,mBACpBx0C,MAAKy0C,sBAAsB5qB,EAA4D,kBACvF7pB,KAAKukB,YAAcvkB,KAAKkpB,SAASmD,OAAOxC,GAG1C,MAAO7pB,MAAKukB,aAON6tB,EAAV/xC,UAAAm0C,6BACI,MAAO,IAAI7oB,GAAAA,eACTC,iBAAkB5rB,KAAK00C,eACvB9hB,YAAsC,MAAzB5yB,KAAKizC,KAAKrgB,aAAuB5yB,KAAKgzC,kBAAoBhzC,KAAKizC,KAAKrgB,YACjF+hB,cAAe30C,KAAKizC,KAAK0B,eAAiB,mCAC1CzK,eAAgBlqC,KAAKgnC,qBASjBoL,EAAV/xC,UAAAo0C,sBAAA,SAAgC7tC,aAC5BA,GAASijC,gBAAgB3iC,UAAU,SAAAgD,GACjC,GAAM0qC,GAAyD,UAAnC1qC,EAAO+/B,eAAeU,SAAuB,QAAU,SAC7EkK,EAAyD,QAAnC3qC,EAAO+/B,eAAeW,SAAqB,QAAU,OAEjF5mC,GAAKivC,KAAK6B,mBAAmBF,EAAMC,MAS/BzC,EAAV/xC,UAAAq0C,wBACI,GAAJl4B,GAAA,WAAAxc,KAAAizC,KAAA8B,WAAA,MAAA,UAAA,QAAA,OAASzK,EAAT9tB,EAAA,GAAkBw4B,EAAlBx4B,EAAA,GAGAy4B,EAAA,UAAAj1C,KAAAizC,KAAArB,WAAA,SAAA,QAAA,MAAA,UAAShH,EAATqK,EAAA,GAAmBC,EAAnBD,EAAA,GAGAE,GAAAvK,EAAAsK,GAAS3K,EAAT4K,EAAA,GAAkBC,EAAlBD,EAAA,GACAE,GAAA/K,EAAA0K,GAASrK,EAAT0K,EAAA,GAAmBC,EAAnBD,EAAA,GACQE,EAAU,CAad,OAXIv1C,MAAKgzC,mBAGPsC,EAAmBhL,EAAkC,WAAxBtqC,KAAKizC,KAAK8B,UAAyB,QAAU,MAC1EC,EAAkBrK,EAAuB,QAAZL,EAAoB,QAAU,MAC3DiL,EAAuB,WAAb3K,EApUsB,GAAA,GAqUtB5qC,KAAKizC,KAAKhB,iBACpB1H,EAAuB,QAAbK,EAAqB,SAAW,MAC1CwK,EAAuC,QAArBF,EAA6B,SAAW,OAGrDl1C,KAAKkpB,SAAStiB,WAChBwiC,oBAAoBppC,KAAK6xB,UACzB0X,gBACEe,QAAXA,EAAoBC,QAApBA,EAA6BI,SAA7BA,EAAuCC,SAAvCA,EAAiD2K,QAAjDA,IACWjL,QAAS0K,EAAiBzK,QAArCA,EAA8CI,SAAU2K,EAAkB1K,SAA1EA,EAAoF2K,QAApFA,IAEYjL,QAAZA,EACYC,QAAS6K,EACTzK,SAAZA,EACYC,SAAUsK,EACVK,SAAUA,IAGVjL,QAAS0K,EACTzK,QAAS6K,EACTzK,SAAU2K,EACV1K,SAAUsK,EACVK,SAAUA,MAMZnD,EAAV/xC,UAAAizC,iCACItzC,KAAKwyC,mBAAmBprC,cACxBpH,KAAKyyC,mBAAmBrrC,eAIlBgrC,EAAV/xC,UAAAuzC,0CACU4B,EAAWx1C,KAAgB,YAAE8jC,gBAC7BzY,EAAcrrB,KAAgB,YAAEqrB,cAChCoqB,EAAcz1C,KAAKqyC,YAAcryC,KAAKqyC,YAAY3P,MAAQv4B,EAAAA,KAC1DurC,EAAQ11C,KAAKqyC,YAAcryC,KAAKqyC,YAAYsD,WAAWvrC,KAC3D6E,EAAAA,OAAO,SAAAvE,GAAU,MAAAA,KAAW1G,EAAKsuC,oBACjCrjC,EAAAA,OAAO,WAAM,MAAAjL,GAAKuuC,aAChBpoC,EAAAA,IAEJ,OAAO1C,GAAAA,MAAM+tC,EAAUC,EAAaC,EAAOrqB,IAI7C+mB,EAAF/xC,UAAAu1C,iBAAE,SAAiBpuC,GACVquC,EAAAA,gCAAgCruC,KACnCxH,KAAK0yC,gBAAiB,EAKlB1yC,KAAKgzC,mBACPxrC,EAAM6E,mBAMZ+lC,EAAF/xC,UAAAyhB,eAAE,SAAeta,GACb,GAAMua,GAAUva,EAAMua,OAElB/hB,MAAKgzC,oBACAjxB,IAAYC,EAAAA,aAA4B,QAAbhiB,KAAKqgB,KAChC0B,IAAYG,EAAAA,YAA2B,QAAbliB,KAAKqgB,MACtCrgB,KAAKyzC,YAKTrB,EAAF/xC,UAAAsI,aAAE,SAAanB,GACPxH,KAAKgzC,mBAEPxrC,EAAMouB,kBACN51B,KAAKyzC,YAELzzC,KAAKuzC,cAKDnB,EAAV/xC,UAAAgzC,kCAESrzC,MAAKgzC,oBAIVhzC,KAAKyyC,mBAAqBzyC,KAAKqyC,YAAYsD,WAIxCvrC,KACC6E,EAAAA,OAAO,SAAAvE,GAAU,MAAAA,KAAW1G,EAAKsuC,oBAAsB5nC,EAAO5B,WAC9Dy/B,EAAAA,MAAM,EAAGuN,EAAAA,gBAEV5uC,UAAU,WACTlD,EAAK0uC,gBAAiB,EAKlB1uC,EAAKivC,eAAgBlC,KAAW/sC,EAAKivC,KAAK3B,aAC5CttC,EAAKivC,KAAKxH,eACPrhC,KAAK0I,EAAAA,KAAK,GAAIzI,EAAAA,UAAUrG,EAAKquC,YAAYsD,aACzCzuC,UAAU,WAAM,MAAAlD,GAAKyvC,aAExBzvC,EAAKyvC,8BAzaf3xC,KAACyK,EAAAA,UAADvK,OACEC,SAAU,8CACVU,MACEozC,gBAAiB,OACjBC,cAAe,2BACf3Y,YAAa,yBACbzwB,UAAW,wBAEb3D,SAAU,yDA5DZnH,KAAE8qB,EAAAA,UAWF9qB,KAAEiP,EAAAA,aAUFjP,KAAEkO,EAAAA,mBA8FFlO,SAAAgL,GAAA7J,aAAAnB,KAAeiL,EAAAA,OAAf/K,MAAsBkwC,QA3FtBpwC,KAAQivC,GAAR9tC,aAAAnB,KA4FeoB,EAAAA,aA1FfpB,KAAQgwC,GAAR7uC,aAAAnB,KA2FeoB,EAAAA,WA3FfpB,KA2F2Bm0C,EAAAA,SA1H3Bn0C,KAAmBkB,EAAAA,eAAnBC,aAAAnB,KA2HeoB,EAAAA,aA5HfpB,KAAQm2B,EAAAA,kCAmFRie,+BAAAp0C,KAAGuB,EAAAA,MAAHrB,MAAS,0BAUTixC,OAAAnxC,KAAGuB,EAAAA,MAAHrB,MAAS,uBAGT2xC,WAAA7xC,KAAGuB,EAAAA,MAAHrB,MAAS,wBAGT2wC,aAAA7wC,KAAGyB,EAAAA,SAOHqvC,aAAA9wC,KAAGyB,EAAAA,SAGHsvC,aAAA/wC,KAAGyB,EAAAA,SAOHuvC,cAAAhxC,KAAGyB,EAAAA,UA5HH6uC,iCCAA,sBAkBAtwC,KAACoL,EAAAA,SAADlL,OACEmL,SACEC,EAAAA,aACAC,GACAE,GACA0f,EAAAA,eAEFxf,SAAUsjC,GAASe,GAAaM,GAAgBJ,GAAgB3kC,IAChEQ,cAAekjC,GAASe,GAAaM,GAAgBJ,QA1BvDmE,KC0BaC,IAaXC,eAAgBnhC,EAAAA,QAAQ,kBACtBC,EAAAA,MAAM,OAAQ7M,EAAAA,OACZ8M,UAAW,YACXkhC,SAAU,OACV9vB,QAAS,KAEXrR,EAAAA,MAAM,UAAW7M,EAAAA,OACfke,QAAS,EACT8vB,SAAU,oBACVlhC,UAAW,eAEbD,EAAAA,MAAM,mBAAoB7M,EAAAA,OACxBke,QAAS,EACT8vB,SAAU,oBACVlhC,UAAW,eAEbE,EAAAA,WAAW,YAAaihC,EAAAA,OACtBjnB,EAAAA,MAAM,iBAAkBC,EAAAA,gBACxBha,EAAAA,QAAQ,6CAEVD,EAAAA,WAAW,aACTC,EAAAA,QAAQ,qBAAsBjN,EAAAA,OAAOke,QAAS,SASlDgwB,cAAethC,EAAAA,QAAQ,iBACrBC,EAAAA,MAAM,UAAW7M,EAAAA,OAAOke,QAAS,KACjClR,EAAAA,WAAW,mBACThN,EAAAA,OAAOke,QAAS,IAChBjR,EAAAA,QAAQ,qDAUD8gC,GAAiBD,GAAoBC,eAMrCG,GAAgBJ,GAAoBI,c3EH7CpiB,GAAe,EAqCNqiB,GACT,GAAIl5B,GAAAA,eAAqC,8BAShC6oB,IACXv1B,QAAS4lC,GACT9mB,MAAO/C,EAAAA,SACPgD,WAAY8mB,IAIdC,GAAA,WACE,QAAFA,GAEWjiB,EAEArvB,GAFArF,KAAX00B,OAAWA,EAEA10B,KAAXqF,MAAWA,EAjJX,MAAAsxC,MAsJAC,GAAA,WACE,QAAFA,GAAqBj2C,EACAk2C,EACAC,EACAC,EACAC,GAJAh3C,KAArBW,YAAqBA,EACAX,KAArB62C,0BAAqBA,EACA72C,KAArB82C,YAAqBA,EACA92C,KAArB+2C,iBAAqBA,EACA/2C,KAArBg3C,UAAqBA,EA3JrB,MAAAJ,MA6JaK,GAAsBnzC,EAC/BsH,EAAcC,EAAc6rC,EAAgBN,mCA9JhD,sBAoKA90C,KAACyK,EAAAA,UAADvK,OACEC,SAAU,yBArKZwjC,KAuKAQ,GAAA,SAAAhiC,GAkRE,QAAFgiC,GACYv8B,EACA5I,EACA2I,EACRotC,EACAl1C,EACoB6H,EACRstC,EACAC,EACQI,EACOH,EACJvrC,EACqB2rC,GAZ9C,GAAFpzC,GAaIC,EAbJC,KAAAlE,KAaU2B,EAAYk1C,EAA2BC,EACvCC,EAAkBC,IAd5Bh3C,WACYgE,GAAZ0F,eAAYA,EACA1F,EAAZlD,mBAAYA,EACAkD,EAAZyF,QAAYA,EAGYzF,EAAxBwF,KAAwBA,EAGAxF,EAAxBmzC,iBAAwBA,EACOnzC,EAA/BgzC,UAA+BA,EAEiBhzC,EAAhDozC,uBAAgDA,EAhPhDpzC,EAAAqzC,YAAuB,EAGvBrzC,EAAAkxB,WAA+B,EAG/BlxB,EAAAszC,WAAuB,EAMvBtzC,EAAAuzC,WAA+B,EAG/BvzC,EAAAwzC,aAAyB,SAACC,EAASC,GAAY,MAAAD,KAAOC,GAGtD1zC,EAAA2zC,KAAiB,cAAcvjB,KAG/BpwB,EAAA4zC,SAA8B,GAAIhuC,GAAAA,QASlC5F,EAAA6zC,iBAAqB,EASrB7zC,EAAA8zC,UAAoC,aAGpC9zC,EAAA+zC,WAAe,aAGf/zC,EAAAg0C,WAAuB,GAGvBh0C,EAAAmnC,iBAA6B,MAG7BnnC,EAAAi0C,qBAAiC,EAGjCj0C,EAAAgjC,gBAAoBhjC,EAAKozC,yBAOzBpzC,EAAAk0C,SAAa,EAQbl0C,EAAAm0C,aAEM7N,QAAS,QACTC,QAAS,MACTI,SAAU,QACVC,SAAU,QAGVN,QAAS,QACTC,QAAS,SACTI,SAAU,QACVC,SAAU,WAKhB5mC,EAAAo0C,yBAA6C,EAG7Cp0C,EAAAq0C,SAAqB,EAGrBr0C,EAAAs0C,YAAgB,aAuFhBt0C,EAAAsxB,UAA2C,GAkB3CtxB,EAAAu0C,uBAA0EC,EAAAA,MAAM,WAC5E,MAAIx0C,GAAKy0C,QACAhxC,EAAAA,MAAbC,UAAA,GAAsB1D,EAAKy0C,QAAQ9wC,IAAI,SAAA+wC,GAAU,MAAAA,GAAOC,qBAG7C30C,EAAKyF,QAAQmvC,SACjB/yB,eACAzb,KAAK0I,EAAAA,KAAK,GAAI+lC,EAAAA,UAAU,WAAM,MAAA70C,GAAKu0C,4BAI1Cv0C,EAAAo+B,aAA4D,GAAIv9B,GAAAA,aAIhEb,EAAAy/B,cAAMz/B,EAAKo+B,aAAah4B,KAAK6E,EAAAA,OAAO,SAAA6pC,GAAK,MAAAA,KAAInxC,EAAAA,IAAI,eAIjD3D,EAAA2/B,cAAM3/B,EAAKo+B,aAAah4B,KAAK6E,EAAAA,OAAO,SAAA6pC,GAAK,OAACA,IAAInxC,EAAAA,IAAI,eAIlD3D,EAAA+hC,gBAAM,GAAIlhC,GAAAA,aAOVb,EAAAgiC,YAAsD,GAAInhC,GAAAA,aAkBlDb,EAAKgzC,YAGPhzC,EAAKgzC,UAAU+B,cAAgB/0C,GAGjCA,EAAKyH,SAAWC,SAASD,IAAa,EAGtCzH,EAAKiqB,GAAKjqB,EAAKiqB,KA3BnB,MAtO+B/oB,GAA/B+gC,EAAAhiC,GAwHAkB,OAAAC,eAAM6gC,EAAN5lC,UAAA,mBAAA,WAA8B,MAAOL,MAAKg5C,kBACxC,SAAgB3zC,GACdrF,KAAKg5C,aAAe3zC,EACpBrF,KAAKi5C,aAAaruC,wCAKtBzF,OAAAC,eAAM6gC,EAAN5lC,UAAA,gBAAA,WAA4B,MAAOL,MAAKk1B,eACtC,SAAa7vB,GACXrF,KAAKk1B,UAAY5vB,EAAAA,sBAAsBD,GACvCrF,KAAKi5C,aAAaruC,wCAKtBzF,OAAAC,eAAM6gC,EAAN5lC,UAAA,gBAAA,WAA4B,MAAOL,MAAKu3C,eACtC,SAAalyC,GACX,GAAIrF,KAAKk5C,gBACP,KAAMC,KAGRn5C,MAAKu3C,UAAYjyC,EAAAA,sBAAsBD,oCAK3CF,OAAAC,eAAM6gC,EAAN5lC,UAAA,8BAAA,WAA0C,MAAOL,MAAKo4C,6BACpD,SAA2B/yC,GACzBrF,KAAKo4C,wBAA0B9yC,EAAAA,sBAAsBD,oCASzDF,OAAAC,eAAM6gC,EAAN5lC,UAAA,mBAAA,WAAsB,MAAOL,MAAKw3C,kBAChC,SAAgBvhB,GACd,GAAkB,kBAAPA,GACT,KAAMmjB,KAERp5C,MAAKw3C,aAAevhB,EAChBj2B,KAAKk5C,iBAEPl5C,KAAKq5C,wDAMXl0C,OAAAC,eAAM6gC,EAAN5lC,UAAA,aAAA,WAAqB,MAAOL,MAAK+4B,YAC/B,SAAU6G,GACJA,IAAa5/B,KAAK+4B,SACpB/4B,KAAK+1B,WAAW6J,GAChB5/B,KAAK+4B,OAAS6G,oCAgBpBz6B,OAAAC,eAAM6gC,EAAN5lC,UAAA,UAAA,WAAqB,MAAOL,MAAKs5C,SAC/B,SAAOj0C,GACLrF,KAAKs5C,IAAMj0C,GAASrF,KAAK23C,KACzB33C,KAAKi5C,aAAaruC,wCAiEpBq7B,EAAF5lC,UAAAse,SAAE,WACE3e,KAAKk5C,gBAAkB,GAAIK,GAAAA,eAA0Bv5C,KAAK2lC,aAAU74B,IAAW,GAC/E9M,KAAKi5C,aAAaruC,QAGpBq7B,EAAF5lC,UAAA0G,mBAAE,WAAA,GAAF/C,GAAAhE,IACIA,MAAKw5C,kBAELx5C,KAAKy4C,QAAQxxC,QAAQmD,KAAKkV,EAAAA,UAAU,MAAOjV,EAAAA,UAAUrK,KAAK43C,WAAW1wC,UAAU,WAC7ElD,EAAKy1C,gBACLz1C,EAAKq1C,0BAITpT,EAAF5lC,UAAAskC,UAAE,WACM3kC,KAAKg3C,WACPh3C,KAAK05C,oBAITzT,EAAF5lC,UAAAoe,YAAE,SAAYxX,GAGNA,EAAR,UACMjH,KAAKi5C,aAAaruC,QAItBq7B,EAAF5lC,UAAA8G,YAAE,WACEnH,KAAK43C,SAAShtC,OACd5K,KAAK43C,SAAS/sC,WACd7K,KAAKi5C,aAAapuC,YAIpBo7B,EAAF5lC,UAAAi2B,OAAE,WACEt2B,KAAK25C,UAAY35C,KAAK0iC,QAAU1iC,KAAKgqB,QAIvCic,EAAF5lC,UAAA2pB,KAAE,WAAA,GAAFhmB,GAAAhE,MACQA,KAAK8I,UAAa9I,KAAKy4C,SAAYz4C,KAAKy4C,QAAQj3C,SAAUxB,KAAKq3C,aAInEr3C,KAAK45C,aAAe55C,KAAKkV,QAAQzU,cAAcy8B,wBAG/Cl9B,KAAK63C,iBAAmBnsC,SAASmuC,iBAAiB75C,KAAKkV,QAAQzU,eAAe,cAE9ET,KAAKq3C,YAAa,EAClBr3C,KAAK85C,YAAYC,0BAA0B,MAC3C/5C,KAAKg6C,4BACLh6C,KAAKi6C,0BACLj6C,KAAKc,mBAAmBC,eAGxBf,KAAKyJ,QAAQmvC,SAAS/yB,eAAezb,KAAK0I,EAAAA,KAAK,IAAI5L,UAAU,WACvDlD,EAAK6zC,kBAAoB7zC,EAAKk2C,WAAW7vB,YACzCrmB,EAAKk2C,WAAW7vB,WAAWkB,iBAC7BvnB,EAAKk2C,WAAW7vB,WAAWkB,eAAejjB,MAAM6xC,SAAcn2C,EAAK6zC,iBAA3E,UAME5R,EAAF5lC,UAAAqiC,MAAE,WACM1iC,KAAKq3C,aACPr3C,KAAKq3C,YAAa,EAClBr3C,KAAK85C,YAAYC,0BAA0B/5C,KAAKo6C,SAAW,MAAQ,OACnEp6C,KAAKc,mBAAmBC,eACxBf,KAAK+3C,eAUT9R,EAAF5lC,UAAA01B,WAAE,SAAW1wB,GACLrF,KAAKy4C,SACPz4C,KAAKq6C,qBAAqBh1C,IAW9B4gC,EAAF5lC,UAAA21B,iBAAE,SAAiBC,GACfj2B,KAAK83C,UAAY7hB,GAUnBgQ,EAAF5lC,UAAA61B,kBAAE,SAAkBD,GAChBj2B,KAAK+3C,WAAa9hB,GASpBgQ,EAAF5lC,UAAA81B,iBAAE,SAAiBC,GACfp2B,KAAK8I,SAAWstB,EAChBp2B,KAAKc,mBAAmBC,eACxBf,KAAKi5C,aAAaruC,QAIpBzF,OAAFC,eAAM6gC,EAAN5lC,UAAA,iBAAE,WACE,MAAOL,MAAKq3C,4CAIdlyC,OAAFC,eAAM6gC,EAAN5lC,UAAA,gBAAE,WACE,MAAOL,MAAK2lC,SAAW3lC,KAAKk5C,gBAAgBpkC,SAAW9U,KAAKk5C,gBAAgBpkC,SAAS,oCAIvF3P,OAAFC,eAAM6gC,EAAN5lC,UAAA,oBAAE,WACE,GAAIL,KAAKs6C,MACP,MAAO,EAGT,IAAIt6C,KAAKu3C,UAAW,CAClB,GAAMgD,GAAkBv6C,KAAKk5C,gBAAgBpkC,SAASnN,IAAI,SAAA+wC,GAAU,MAAAA,GAAO8B,WAO3E,OALIx6C,MAAKo6C,UACPG,EAAgBE,UAIXF,EAAgBG,KAAK,MAG9B,MAAO16C,MAAKk5C,gBAAgBpkC,SAAS,GAAG0lC,2CAI1CvU,EAAF5lC,UAAA+5C,OAAE,WACE,QAAOp6C,KAAKwJ,MAA2B,QAApBxJ,KAAKwJ,KAAKnE,OAI/B4gC,EAAF5lC,UAAAyhB,eAAE,SAAeta,GACRxH,KAAK8I,WACR9I,KAAK25C,UAAY35C,KAAK26C,mBAAmBnzC,GAASxH,KAAK46C,qBAAqBpzC,KAKxEy+B,EAAV5lC,UAAAu6C,qBAAA,SAA+BpzC,GAC3B,GAAMua,GAAUva,EAAMua,QAChB84B,EAAa94B,IAAYoa,EAAAA,YAAcpa,IAAYma,EAAAA,UACrDna,IAAYG,EAAAA,YAAcH,IAAYC,EAAAA,WACxBD,KAAYS,EAAAA,OAAST,IAAYU,EAAAA,QAGhCziB,KAAK2lC,UAAYn+B,EAAMszC,SAAWD,GACnDrzC,EAAM6E,iBACNrM,KAAKgqB,QACKhqB,KAAK2lC,UACf3lC,KAAK85C,YAAYiB,UAAUvzC,IAKvBy+B,EAAV5lC,UAAAs6C,mBAAA,SAA6BnzC,GACzB,GAAMua,GAAUva,EAAMua,QAChB84B,EAAa94B,IAAYoa,EAAAA,YAAcpa,IAAYma,EAAAA,SACnD8e,EAAUh7C,KAAK85C,WAErB,IAAI/3B,IAAYK,EAAAA,MAAQL,IAAYO,EAAAA,IAClC9a,EAAM6E,iBACN0V,IAAYK,EAAAA,KAAO44B,EAAQC,qBAAuBD,EAAQE,wBACrD,IAAIL,GAAcrzC,EAAMszC,OAE7BtzC,EAAM6E,iBACNrM,KAAK0iC,YACA,IAAK3gB,IAAYS,EAAAA,OAAST,IAAYU,EAAAA,QAAUu4B,EAAQG,WAGxD,CACL,GAAMC,GAAyBJ,EAAQK,eAEvCL,GAAQD,UAAUvzC,GAEdxH,KAAKu3C,WAAasD,GAAcrzC,EAAM8zC,UAAYN,EAAQG,YAC1DH,EAAQK,kBAAoBD,GAC9BJ,EAAQG,WAAWI,4BATrB/zC,GAAM6E,iBACN2uC,EAAQG,WAAWI,yBAiBvBtV,EAAF5lC,UAAAm7C,aAAE,WACMx7C,KAAK25C,WACP35C,KAAKs3C,WAAa,EAClBt3C,KAAKoiC,aAAa/7B,MAAK,KAEvBrG,KAAKoiC,aAAa/7B,MAAK,GACvBrG,KAAKi4C,qBAAsB,EAC3Bj4C,KAAKk6C,WAAWuB,QAAU,EAC1Bz7C,KAAKc,mBAAmBC,iBAQ5BklC,EAAF5lC,UAAAq7C,cAAE,WACE17C,KAAKi4C,oBAAsBj4C,KAAK25C,UAChC35C,KAAKc,mBAAmBC,gBAG1BklC,EAAF5lC,UAAAu7B,SAAE,WACO57B,KAAK8I,WACR9I,KAAKq4C,SAAU,EACfr4C,KAAKi5C,aAAaruC,SAQtBq7B,EAAF5lC,UAAAw7B,QAAE,WACE77B,KAAKq4C,SAAU,EAEVr4C,KAAK8I,UAAa9I,KAAK25C,YAC1B35C,KAAK+3C,aACL/3C,KAAKc,mBAAmBC,eACxBf,KAAKi5C,aAAaruC,SAOtBq7B,EAAF5lC,UAAAs7C,YAAE,WAAA,GAAF33C,GAAAhE,IACIA,MAAKk6C,WAAW0B,eAAexxC,KAAK0I,EAAAA,KAAK,IAAI5L,UAAU,WACrDlD,EAAKlD,mBAAmBunB,gBACxBrkB,EAAK63C,2BACL73C,EAAK83C,MAAMr7C,cAAcs7C,UAAY/3C,EAAKszC,cAK9CrR,EAAF5lC,UAAA27C,eAAE,WACE,MAAOh8C,MAAKm3C,iBAAmB,OAAOn3C,KAAKm3C,iBAAiB8E,MAAU,IAIxE92C,OAAFC,eAAM6gC,EAAN5lC,UAAA,aAAE,WACE,OAAQL,KAAKk5C,iBAAmBl5C,KAAKk5C,gBAAgBgD,2CAG/CjW,EAAV5lC,UAAAg5C,0CAGI/yC,SAAQC,UAAUC,KAAK,WACrBxC,EAAKq2C,qBAAqBr2C,EAAKgzC,UAAYhzC,EAAKgzC,UAAU3xC,MAAQrB,EAAK+0B,WAQnEkN,EAAV5lC,UAAAg6C,qBAAA,SAA+Bh1C,EAAoB82C,aAC/C,QADJ,KAAAA,IAAmDA,GAAnD,GACQn8C,KAAK2lC,UAAYtgC,EAAO,CAC1B,IAAKojB,MAAMC,QAAQrjB,GACjB,KAAM+2C,KAGRp8C,MAAKq8C,kBACLh3C,EAAMoB,QAAQ,SAAC61C,GAAsB,MAAAt4C,GAAKu4C,aAAaD,EAAcH,KACrEn8C,KAAKw8C,kBACA,CACLx8C,KAAKq8C,iBAEL,IAAMI,GAAsBz8C,KAAKu8C,aAAal3C,EAAO82C,EAIjDM,IACFz8C,KAAK85C,YAAY4C,cAAcD,GAInCz8C,KAAKc,mBAAmBC,gBAOlBklC,EAAV5lC,UAAAk8C,aAAA,SAAuBl3C,EAAY82C,kBAAnC,KAAAA,IAAmCA,GAAnC,EACI,IAAMM,GAAsBz8C,KAAKy4C,QAAQhuC,KAAK,SAACiuC,GAC7C,IAEE,MAAuB,OAAhBA,EAAOrzC,OAAiBrB,EAAKwzC,aAAakB,EAAOrzC,MAAQA,GAChE,MAAOs3C,GAKP,MAJIhuC,GAAAA,aAEFiuC,QAAQC,KAAKF,IAER,IAUX,OANIF,KACFN,EAAcM,EAAoBlB,wBAA0BkB,EAAoBK,SAChF98C,KAAKk5C,gBAAgB4D,OAAOL,GAC5Bz8C,KAAKi5C,aAAaruC,QAGb6xC,GAQDxW,EAAV5lC,UAAAg8C,gBAAA,SAA0BU,GACtB/8C,KAAKk5C,gBAAgB5Q,QACrBtoC,KAAKy4C,QAAQhyC,QAAQ,SAAAiyC,GACfA,IAAWqE,GACbrE,EAAOsE,aAGXh9C,KAAKi5C,aAAaruC,QAIZq7B,EAAV5lC,UAAAm5C,qCACIx5C,MAAK85C,YAAc,GAAImD,GAAAA,2BAAsCj9C,KAAKy4C,SAC/DyE,gBACAC,0BACApD,0BAA0B/5C,KAAKo6C,SAAW,MAAQ,OAErDp6C,KAAK85C,YAAYsD,OAAOhzC,KAAKC,EAAAA,UAAUrK,KAAK43C,WAAW1wC,UAAU,WAG/DlD,EAAKgd,QACLhd,EAAK0+B,UAGP1iC,KAAK85C,YAAY5vC,OAAOE,KAAKC,EAAAA,UAAUrK,KAAK43C,WAAW1wC,UAAU,WAC3DlD,EAAKqzC,YAAcrzC,EAAK83C,MAC1B93C,EAAKq5C,8BACKr5C,EAAKqzC,YAAerzC,EAAK2hC,WAAY3hC,EAAK81C,YAAYqB,YAChEn3C,EAAK81C,YAAYqB,WAAWI,2BAM1BtV,EAAV5lC,UAAAo5C,oCACU6D,EAAqB71C,EAAAA,MAAMzH,KAAKy4C,QAAQxxC,QAASjH,KAAK43C,SAE5D53C,MAAKu4C,uBACFnuC,KAAKC,EAAAA,UAAUizC,GAAqBruC,EAAAA,OAAO,SAAAzH,GAAS,MAAAA,GAAM20C,eAC1Dj1C,UAAU,SAAAM,GACTxD,EAAKu5C,UAAU/1C,EAAMktB,SAEhB1wB,EAAK2hC,UAAY3hC,EAAKqzC,aACzBrzC,EAAK0+B,QACL1+B,EAAKgd,WAMXvZ,EAAAA,MAAJC,UAAA,GAAa1H,KAAKy4C,QAAQ9wC,IAAI,SAAA+wC,GAAU,MAAAA,GAAOjrB,iBACxCrjB,KAAKC,EAAAA,UAAUizC,IACfp2C,UAAU,WACTlD,EAAKlD,mBAAmBC,eACxBiD,EAAKi1C,aAAaruC,SAGtB5K,KAAKw9C,iBAICvX,EAAV5lC,UAAAk9C,UAAA,SAAoB7E,GAChB,GAAM+E,GAAcz9C,KAAKk5C,gBAAgBwE,WAAWhF,EAGhD14C,MAAK2lC,UACP3lC,KAAKk5C,gBAAgB5iB,OAAOoiB,GAC5B14C,KAAKi5C,aAAaruC,OAClB6yC,EAAc/E,EAAOsE,WAAatE,EAAOoE,SACzC98C,KAAK85C,YAAY4C,cAAchE,GAC/B14C,KAAKw8C,cAMLx8C,KAAKghB,UAELhhB,KAAKq8C,gBAAgC,MAAhB3D,EAAOrzC,UAAgByH,GAAY4rC,GAEpC,MAAhBA,EAAOrzC,MACTrF,KAAK29C,kBAAkBjF,EAAOrzC,QAE9BrF,KAAKk5C,gBAAgB4D,OAAOpE,GAC5B14C,KAAKi5C,aAAaruC,SAIlB6yC,IAAgBz9C,KAAKk5C,gBAAgBwE,WAAWhF,IAClD14C,KAAK29C,qBAQD1X,EAAV5lC,UAAAm8C,iCACQx8C,MAAKu3C,YACPv3C,KAAKk5C,gBAAgB5Q,QAErBtoC,KAAKy4C,QAAQhyC,QAAQ,SAAAiyC,GACfA,EAAO5jC,UACT9Q,EAAKk1C,gBAAgB4D,OAAOpE,KAGhC14C,KAAKi5C,aAAaruC,SAKdq7B,EAAV5lC,UAAAs9C,kBAAA,SAA4BC,GACxB,GAAIC,GAAmB,IAGrBA,GADE79C,KAAK2lC,SACQ3lC,KAA4B,SAAE2H,IAAI,SAAA+wC,GAAU,MAAAA,GAAOrzC,QAEpDrF,KAAK8U,SAAY9U,KAA0B,SAAEqF,MAAQu4C,EAGrE59C,KAAK+4B,OAAS8kB,EACd79C,KAAKgmC,YAAY3/B,KAAKw3C,GACtB79C,KAAK83C,UAAU+F,GACf79C,KAAK+lC,gBAAgB1/B,KAAK,GAAIswC,IAAgB32C,KAAM69C,IACpD79C,KAAKc,mBAAmBC,gBAIlBklC,EAAV5lC,UAAAm9C,yBACIx9C,KAAKg4C,WAAah4C,KAAKy4C,QAAQ9wC,IAAI,SAAA+wC,GAAU,MAAAA,GAAOzqB,KAAIysB,KAAK,MAOvDzU,EAAV5lC,UAAA45C,mCACQj6C,KAAK85C,cACH95C,KAAKs6C,MACPt6C,KAAK85C,YAAYmB,qBAEjBj7C,KAAK85C,YAAY4C,cAAc18C,KAAKk5C,gBAAgBpkC,SAAS,MAM3DmxB,EAAV5lC,UAAAg9C,uCACI,GAAMS,GAAoB99C,KAAK85C,YAAYuB,iBAAmB,EACxD0C,EAAaC,EAA8BF,EAAmB99C,KAAKy4C,QACrEz4C,KAAKslC,aAETtlC,MAAK87C,MAAMr7C,cAAcs7C,UAAYkC,EACnCH,EAAoBC,EACpB/9C,KAAKk+C,iBACLl+C,KAAK87C,MAAMr7C,cAAcs7C,UAv2BQ,MA62BrC9V,EAAF5lC,UAAA2gB,MAAE,WACEhhB,KAAKW,YAAYF,cAAcugB,SAIzBilB,EAAV5lC,UAAA89C,gBAAA,SAA0BzF,GACtB,MAAO14C,MAAKy4C,QAAQj9B,OAAO,SAAC4iC,EAAgBC,EAAoB13C,GAC9D,WAAkBmG,KAAXsxC,EAAwB1F,IAAW2F,EAAU13C,MAAQmG,GAAasxC,OACxEtxC,KAIGm5B,EAAV5lC,UAAA25C,qCACI,GAAMsE,GAAat+C,KAAKk+C,iBAClBrM,EAAQ7xC,KAAKu+C,gBACbC,EAAcz4C,KAAKC,IAAI6rC,EAAQyM,EA53BF,KA63B7BG,EAAwB5M,EAAQyM,EAGhCI,EAAYD,EAAwBD,EAGtCG,EACA3+C,KAAKs6C,MAAQ,EAAIt6C,KAAKm+C,gBAAgBn+C,KAAKk5C,gBAAgBpkC,SAAS,GAExE6pC,IAAwBX,EAA8BW,EAAsB3+C,KAAKy4C,QAC7Ez4C,KAAKslC,aAIT,IAAMsZ,GAAeJ,EAAc,CACnCx+C,MAAKs3C,WAAat3C,KAAK6+C,wBAAwBF,EAAsBC,EAAcF,GACnF1+C,KAAKk4C,SAAWl4C,KAAK8+C,yBAAyBH,EAAsBC,EAAcF,GAElF1+C,KAAK++C,4BAA4BL,IAUnCzY,EAAF5lC,UAAAw+C,wBAAE,SAAwBn9C,EAAuBk9C,EACvBF,GACtB,GAAMJ,GAAat+C,KAAKk+C,iBAClBc,EAA4BV,EAAa58C,EACzCu9C,EAAmBX,EAAa,EAMhCY,EAAwBF,EAA4BJ,EAAeK,CACzE,OAAOl5C,MAAKC,IAAID,KAAKG,IAAI,EAAGg5C,GAAwBR,IAItDv5C,OAAFC,eAAM6gC,EAAN5lC,UAAA,kBAAE,WAGE,MAAOL,MAAKu1B,eAAiB,KAAOv1B,KAAKs1B,WAAat1B,KAAK0lC,6CAI7DO,EAAF5lC,UAAA8+C,yBAAE,WACE,MAAIn/C,MAAK25C,WAAa35C,KAAK85C,aAAe95C,KAAK85C,YAAYqB,WAClDn7C,KAAK85C,YAAYqB,WAAWltB,GAG9B,MAUDgY,EAAV5lC,UAAAw7C,oCACI,GAKIJ,GALE2D,EAAcp/C,KAAKk6C,WAAW7vB,WAAWkB,eAAe2R,wBACxDmiB,EAAer/C,KAAK0J,eAAe41C,kBACnCxzB,EAAQ9rB,KAAKo6C,SACbmF,EAAev/C,KAAK2lC,SAAW6Z,GACA9/C,EAIrC,IAAIM,KAAK2lC,SACP8V,EAr7ByC/7C,OAs7BpC,CACL,GAAIoV,GAAW9U,KAAKk5C,gBAAgBpkC,SAAS,IAAM9U,KAAKy4C,QAAQgH,KAChEhE,GAAU3mC,GAAYA,EAASyhC,MAr8BQ72C,GAHP,GA48B7BosB,IACH2vB,IAAY,EAId,IAAMiE,GAAe,GAAKN,EAAYphC,KAAOy9B,GAAW3vB,EAAQyzB,EAAe,IACzEI,EAAgBP,EAAYnzB,MAAQwvB,EAAU4D,EAAaphC,OACxC6N,EAAQ,EAAIyzB,EAGjCG,GAAe,EACjBjE,GAAWiE,EAj8B4B,EAk8B9BC,EAAgB,IACzBlE,GAAWkE,EAn8B4B,GAw8BzC3/C,KAAKk6C,WAAWuB,QAAUA,EAC1Bz7C,KAAKk6C,WAAW7vB,WAAWyd,kBAQrB7B,EAAV5lC,UAAAy+C,yBAAA,SAAmCp9C,EAAuBk9C,EACxBF,GAC9B,GAGIkB,GAHEtB,EAAat+C,KAAKk+C,iBAClB2B,GAA0BvB,EAAat+C,KAAK45C,aAAarxC,QAAU,EACnEu3C,EAAsB/5C,KAAKgoC,MA9+BE,IA8+B8BuQ,EAIjE,IAAIt+C,KAAKo4C,wBACP,MAAO,EAGT,IAAwB,IAApBp4C,KAAKs3C,WACPsI,EAA2Bl+C,EAAgB48C,MACtC,IAAIt+C,KAAKs3C,aAAeoH,EAAW,CACxC,GAAMqB,GAAsB//C,KAAKu+C,gBAAkBuB,EAC7CE,EAAuBt+C,EAAgBq+C,EAIzCE,EACA3B,GAAct+C,KAAKu+C,gBAAkBD,EA//BR,KA+/BgDA,CAMjFsB,GAA2BI,EAAuB1B,EAAa2B,MAK/DL,GAA2BhB,EAAeN,EAAa,CAMzD,QAAmC,EAA5BsB,EAAgCC,GASjC5Z,EAAV5lC,UAAA0+C,4BAAA,SAAsCL,GAClC,GAAMJ,GAAat+C,KAAKk+C,iBAClBmB,EAAer/C,KAAK0J,eAAe41C,kBAEnCY,EAAoBlgD,KAAK45C,aAAaztB,IApgCH,EAqgCnCg0B,EACFd,EAAa92C,OAASvI,KAAK45C,aAAaxtB,OAtgCH,EAwgCnCg0B,EAAiBr6C,KAAKs6C,IAAIrgD,KAAKk4C,UAC/BoI,EACFv6C,KAAKC,IAAIhG,KAAKu+C,gBAAkBD,EAniCD,KAoiC7BiC,EAAoBD,EAAmBF,EAAiBpgD,KAAK45C,aAAarxC,MAE5Eg4C,GAAoBJ,EACtBngD,KAAKwgD,eAAeD,EAAmBJ,GAC9BC,EAAiBF,EAC3BlgD,KAAKygD,iBAAiBL,EAAgBF,EAAmBxB,GAExD1+C,KAAKmrC,iBAAmBnrC,KAAK0gD,2BAKzBza,EAAV5lC,UAAAmgD,eAAA,SAAyBD,EAA2BJ,GAEhD,GAAMQ,GAAwB56C,KAAK62B,MAAM2jB,EAAoBJ,EAI7DngD,MAAKs3C,YAAcqJ,EACnB3gD,KAAKk4C,UAAYyI,EACjB3gD,KAAKmrC,iBAAmBnrC,KAAK0gD,0BAKzB1gD,KAAKs3C,YAAc,IACrBt3C,KAAKs3C,WAAa,EAClBt3C,KAAKk4C,SAAW,EAChBl4C,KAAKmrC,iBAAmB,mBAKpBlF,EAAV5lC,UAAAogD,iBAAA,SAA2BL,EAAwBF,EACxBxB,GAEvB,GAAMkC,GAAwB76C,KAAK62B,MAAMwjB,EAAiBF,EAW1D,IAPAlgD,KAAKs3C,YAAcsJ,EACnB5gD,KAAKk4C,UAAY0I,EACjB5gD,KAAKmrC,iBAAmBnrC,KAAK0gD,0BAKzB1gD,KAAKs3C,YAAcoH,EAIrB,MAHA1+C,MAAKs3C,WAAaoH,EAClB1+C,KAAKk4C,SAAW,OAChBl4C,KAAKmrC,iBAAmB,gBAMpBlF,EAAV5lC,UAAAqgD,mCACI,GAAMpC,GAAat+C,KAAKk+C,iBAClB2B,GAA0BvB,EAAat+C,KAAK45C,aAAarxC,QAAU,CAEzE,OAAO,QADSxC,KAAKs6C,IAAIrgD,KAAKk4C,UAAY2H,EAAyBvB,EAAa,GACpF,UAIUrY,EAAV5lC,UAAAk+C,yBACI,MAAOv+C,MAAKy4C,QAAQj3C,OAASxB,KAAKslC,aAAa9jC,QAIzCykC,EAAV5lC,UAAA69C,0BACI,MAjmCiC,GAimC1Bl+C,KAAK63C,kBAOd5R,EAAF5lC,UAAAwgD,kBAAE,SAAkBC,GAChB9gD,KAAK+gD,iBAAmBD,EAAIpG,KAAK,MAOnCzU,EAAF5lC,UAAA2gD,iBAAE,WACEhhD,KAAKghB,QACLhhB,KAAKgqB,QAOP7kB,OAAFC,eAAM6gC,EAAN5lC,UAAA,wBAAE,WACE,MAAOL,MAAKq3C,aAAer3C,KAAKs6C,sDAxjCpCx4C,KAACC,EAAAA,UAADC,OAAAC,SAAA,aACEgH,SAAU,YACV/G,SAAU,6jDACVC,QAAF,uwDACEC,QAAF,WAAA,gBAAA,YACEC,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,OACEC,MACF4N,KAAA,UACM8wB,YAAN,KACI4f,kBAAJ,WACIC,oBAAJ,aACIC,yBAAJ,iBACIC,uBAAJ,sBACI50C,uBAAwB,sBACxB60C,sBAAJ,aACIC,mBAAJ,gCACIC,8BAAJ,WACIC,0BAAJ,2BACIC,+BAAJ,6BACIC,8BAAJ,WACIC,6BAA8B,aAC9BC,8BAA+B,WAC/Bh/C,MAAJ,aACIy6B,YAAJ,yBACIF,UAAJ,aACIC,SAAJ,aAEAhmB,YACAg/B,GAAAC,eACAD,GAAAI,eAEA5lC,YACAC,QAAAgxC,GAAA/wC,YAAAm1B,IACAp1B,QAAAixC,GAAAhxC,YAAAm1B,8FAjLAnkC,KAAEkJ,EAAAA,SAMFlJ,KAAEyU,KAYFzU,KAAEiP,EAAAA,aAmBFjP,KAAEkB,EAAAA,eAAFC,aAAAnB,KAAAoB,EAAAA,aAzBApB,KAAEigD,EAAAA,OAAF9+C,aAAAnB,KAAAoB,EAAAA,aA9BApB,KAAQkgD,EAAAA,mBAAR/+C,aAAAnB,KAAAoB,EAAAA,aAgDApB,KAA6DmgD,GAA7Dh/C,aAuYKnB,KAvYLoB,EAAAA,aAAApB,KAA8BogD,EAAAA,UAA9Bj/C,aAAAnB,KAAAm0C,EAAAA,OAAAn0C,KAAAoB,EAAAA,aAkBApB,SAAQgL,GAAR7J,aAAAnB,KAAAmL,EAAAA,UAuXajL,MAvXb,gBAlBAF,SAAkDgL,GAAlD7J,aAAAnB,KA0YKiL,EAAAA,OA1YL/K,MAAAy0C,SA4YAxQ,EAAA9iC,wGAlJA+2C,aAAAp4C,KAAAsB,EAAAA,UAAApB,MAAAmgD,EAAAA,uBAGA1J,UAAA32C,KAAA0P,EAAAA,gBAAAxP,MAAAogD;UAAA/hB,aAAA,MAGAiF,eAAAxjC,KAAA0P,EAAAA,gBAAAxP,MAAAujC,MAGA/c,aAAA1mB,KAAAuB,EAAAA,QAGAmiC,gBAAA1jC,KAAA2wB,EAAAA,aAAkBzwB,MAAlByjC,MAGAC,cAAA5jC,KAAAuB,EAAAA,QAGA60B,WAAAp2B,KAAAuB,EAAAA,QAGAsiC,WAAA7jC,KAAAuB,EAAAA,QAQAuiC,yBAAA9jC,KAAAuB,EAAAA,QAQAwiC,cAAA/jC,KAAAuB,EAAAA,QAWAgC,QAAAvD,KAAAuB,EAAAA,QAWAiyB,YAAAxzB,KAAAuB,EAAAA,MAAQrB,MAAR,gBAcAuzB,iBAAAzzB,KAAAuB,EAAAA,MAAArB,MAAA,qBAWA8jC,oBAAAhkC,KAAAuB,EAAAA,QAGA4qB,KAAAnsB,KAAAuB,EAAAA,QAGA++B,eAAAtgC,KAAAyB,EAAAA,SAGAkgC,gBAAQ3hC,KAARyB,EAAAA,OAAAvB,MAAA,YAoBA2hC,gBAAA7hC,KAAAyB,EAAAA,OAAAvB,MAAA,YAGA+jC,kBAAAjkC,KAAAyB,EAAAA,SAIAyiC,cAAAlkC,KAAAyB,EAAAA,UAYA0iC,mCgEvbA,sBAgBAnkC,KAACoL,EAAAA,SAADlL,OACEmL,SACEC,EAAAA,aACA6f,EAAAA,cACAiZ,GACA74B,IAEFI,SAAU04B,GAAoBF,GAAWR,GAAkBS,GAAiB74B,IAC5EQ,cAAeo4B,GAAWR,IAC1B70B,WAAYw1B,QAzBdC,KCiBaC,IAIXC,aAAcrxB,EAAAA,QAAQ,SACpBC,EAAAA,MAAM,wBAAyB7M,EAAAA,OAAO8M,UAAW,cACjDD,EAAAA,MAAM,UAAW7M,EAAAA,OAAO8M,UAAW,cACnCE,EAAAA,WAAW,eAAgBC,EAAAA,QAAQ,yCACnCD,EAAAA,WAAW,cAAeC,EAAAA,QAAQ,0ChE0BzBixB,GAAqB,GAWrBC,GACT,GAAIlpB,GAAAA,eAAqC,+BACvCC,WAAY,OACZC,QAASipB,KAiBFC,GACT,GAAIppB,GAAAA,eAAyC,+BAC3CC,WAAY,OACZC,QAASmpB,mBA0Gb,QAAFC,GACY3d,EACAvoB,EACAmmC,EACAxoB,EACA7U,EACA8E,EACAw4B,EACAnV,EACqCoV,EACzBx9B,EAEVy9B,GAZZ,GAAFjjC,GAAAhE,IACYA,MAAZkpB,SAAYA,EACAlpB,KAAZW,YAAYA,EACAX,KAAZ8mC,kBAAYA,EACA9mC,KAAZse,kBAAYA,EACAte,KAAZyJ,QAAYA,EACAzJ,KAAZuO,UAAYA,EACAvO,KAAZ+mC,eAAYA,EACA/mC,KAAZ4xB,cAAYA,EACqC5xB,KAAjDgnC,gBAAiDA,EACzBhnC,KAAxBwJ,KAAwBA,EAEVxJ,KAAdinC,gBAAcA,EAvFdjnC,KAAAwf,UAAuC,QACvCxf,KAAAy/B,WAA+B,EAmC/Bz/B,KAAAknC,UAA4ClnC,KAAKinC,gBAAgBC,UAGjElnC,KAAAmnC,UAA4CnnC,KAAKinC,gBAAgBE,UAEjEnnC,KAAAonC,SAAqB,GA6BrBpnC,KAAAqnC,iBAA6B,GAAI7Z,KAGjCxtB,KAAAgX,WAAgC,GAAIpN,GAAAA,OAgBhC,IAAME,GAAuBnJ,EAAYF,aAIpC8N,GAAU+4B,IAMiB,UAArBx9B,EAAQy9B,UAA6C,aAArBz9B,EAAQy9B,WAMjDz9B,EAAQxB,MAAMk/B,iBAAmB19B,EAAQxB,MAAMm/B,WAAa,KAX5DznC,KAAKqnC,iBAAiB5a,IAAI,aAAc,WAAM,MAAAzoB,GAAK8G,SACnD9K,KAAKqnC,iBAAiB5a,IAAI,aAAc,WAAM,MAAAzoB,GAAK+G,SAEnD/K,KAAKqnC,iBACF5gC,QAAQ,SAACihC,EAAUlgC,GAAU,MAAA7G,GAAYF,cAAcknC,iBAAiBngC,EAAOkgC,MAUpF9V,EAAcE,QAAQhoB,GAASM,KAAKC,EAAAA,UAAUrK,KAAKgX,aAAa9P,UAAU,SAAAJ,GAEnEA,EAEiB,YAAXA,GACT2C,EAAQye,IAAI,WAAM,MAAAlkB,GAAK8G,SAFvBrB,EAAQye,IAAI,WAAM,MAAAlkB,GAAK+G,KAAK,OAnOpC,MA0HA5F,QAAAC,eAAMyhC,EAANxmC,UAAA,gBAAA,WAAoC,MAAOL,MAAKwf,eAC9C,SAAana,GACPA,IAAUrF,KAAKwf,YACjBxf,KAAKwf,UAAYna,EAEbrF,KAAKukB,cACPvkB,KAAK4nC,kBAED5nC,KAAK6nC,kBACP7nC,KAAqB,iBAAE8K,KAAKzF,EAAO,GAGrCrF,KAAKukB,YAAYujB,oDAOzB3iC,OAAAC,eAAMyhC,EAANxmC,UAAA,gBAAA,WAA4B,MAAOL,MAAKy/B,eACtC,SAAap6B,GACXrF,KAAKy/B,UAAYn6B,EAAAA,sBAAsBD,GAGnCrF,KAAKy/B,WACPz/B,KAAK+K,KAAK,oCAchB5F,OAAAC,eAAMyhC,EAANxmC,UAAA,eAAA,WAAkB,MAAOL,MAAKonC,cAC5B,SAAY/hC,GACVrF,KAAK+mC,eAAegB,kBAAkB/nC,KAAKW,YAAYF,cAAeT,KAAKonC,UAG3EpnC,KAAKonC,SAAoB,MAAT/hC,GAAgB,GAAGA,GAAQmK,OAAS,IAE/CxP,KAAKonC,UAAYpnC,KAAKgoC,oBACzBhoC,KAAK+K,KAAK,IAEV/K,KAAKioC,wBACLjoC,KAAK+mC,eAAemB,SAASloC,KAAKW,YAAYF,cAAeT,KAAKiqB,2CAMxE9kB,OAAAC,eAAMyhC,EAANxmC,UAAA,oBAAA,WAAuB,MAAOL,MAAKmoC,mBACjC,SAAiB9iC,GACfrF,KAAKmoC,cAAgB9iC,EACjBrF,KAAK6nC,kBACP7nC,KAAKooC,iBAAiBpoC,KAAKmoC,gDAuD/BtB,EAAFxmC,UAAA8G,YAAE,WAAA,GAAFnD,GAAAhE,IACQA,MAAKukB,cACPvkB,KAAKukB,YAAYmB,UACjB1lB,KAAK6nC,iBAAmB,MAIrB7nC,KAAKuO,UAAU+4B,MAClBtnC,KAAKqnC,iBAAiB5gC,QAAQ,SAACihC,EAAUlgC,GACvC,MAAAxD,GAAKrD,YAAYF,cAAc4nC,oBAAoB7gC,EAAOkgC,KAE5D1nC,KAAKqnC,iBAAiBiB,SAGxBtoC,KAAKgX,WAAWpM,OAChB5K,KAAKgX,WAAWnM,WAEhB7K,KAAK+mC,eAAegB,kBAAkB/nC,KAAKW,YAAYF,cAAeT,KAAKiqB,SAC3EjqB,KAAK4xB,cAAcI,eAAehyB,KAAKW,YAAYF,gBAIrDomC,EAAFxmC,UAAAyK,KAAE,SAAKy9B,GAAL,GAAFvkC,GAAAhE,IACI,QADJ,KAAAuoC,IAAOA,EAAgBvoC,KAAKknC,YACpBlnC,KAAK8I,UAAa9I,KAAKiqB,QAA3B,CAEA,GAAMI,GAAarqB,KAAK4qB,gBAExB5qB,MAAKwoC,UACLxoC,KAAKyoC,QAAUzoC,KAAKyoC,SAAW,GAAIle,GAAAA,gBAAgBme,GAAkB1oC,KAAKse,mBAC1Ete,KAAK6nC,iBAAmBxd,EAAW1K,OAAO3f,KAAKyoC,SAAShe,SACxDzqB,KAAK6nC,iBAAiBc,cACnBv+B,KAAKC,EAAAA,UAAUrK,KAAKgX,aACpB9P,UAAU,WAAM,MAAAlD,GAAKwkC,YACxBxoC,KAAKooC,iBAAiBpoC,KAAKmoC,eAC3BnoC,KAAKioC,wBACLjoC,KAAqB,iBAAE8K,KAAK9K,KAAKwf,UAAW+oB,KAI9C1B,EAAFxmC,UAAA0K,KAAE,SAAKw9B,OAAP,KAAAA,IAAOA,EAAgBvoC,KAAKmnC,WACpBnnC,KAAK6nC,kBACP7nC,KAAK6nC,iBAAiB98B,KAAKw9B,IAK/B1B,EAAFxmC,UAAAi2B,OAAE,WACEt2B,KAAKgoC,oBAAsBhoC,KAAK+K,OAAS/K,KAAK8K,QAIhD+7B,EAAFxmC,UAAA2nC,kBAAE,WACE,QAAShoC,KAAK6nC,kBAAoB7nC,KAAK6nC,iBAAiBe,aAI1D/B,EAAFxmC,UAAAyhB,eAAE,SAAetB,GACTxgB,KAAKgoC,qBAAuBxnB,EAAEuB,UAAY8mB,EAAAA,SAC5CroB,EAAEoV,kBACF51B,KAAK+K,KAAK,KAKd87B,EAAFxmC,UAAAyoC,gBAAE,WACE9oC,KAAK+K,KAAK/K,KAAKinC,gBAAgB8B,oBAIzBlC,EAAVxmC,UAAAuqB,oCACI,IAAI5qB,KAAKukB,YACP,MAAOvkB,MAAKukB,WAGd,IAAMzd,GAAS9G,KAAKgpC,aACdC,EAAUjpC,KAAKkpC,sBACftuB,EAAY5a,KAAKwJ,KAAOxJ,KAAKwJ,KAAKnE,MAAQ,MAG1C8jC,EAAWnpC,KAAKkpB,SAAStiB,WAC5BwiC,oBAAoBppC,KAAKW,aACzB0oC,wBAAuB,GACvBC,mBAAmB,GACnBC,eACPpf,MAAYrjB,EAAO0iC,KAASP,EAAQO,MACpCrf,MAAYrjB,EAAO2iC,SAAaR,EAAQQ,YAG9BC,EAAsB1pC,KAAK8mC,kBAC9B6C,4BAA4B3pC,KAAKW,YA4BpC,OA1BAwoC,GAASS,yBAAyBF,GAElCP,EAASU,gBAAgBz/B,KAAKC,EAAAA,UAAUrK,KAAKgX,aAAa9P,UAAU,SAAAgD,GAC9DlG,EAAK6jC,mBACH39B,EAAO4/B,yBAAyBC,kBAAoB/lC,EAAK6jC,iBAAiBe,YAG5E5kC,EAAKyF,QAAQye,IAAI,WAAM,MAAAlkB,GAAK+G,KAAK,KAGjC/G,EAAK6jC,iBAAiBmC,oBAAoB9/B,EAAO+/B,eAAgBrvB,MAKvE5a,KAAKukB,YAAcvkB,KAAKkpB,SAASmD,QAC/BzR,UAANA,EACMgR,iBAAkBud,EAClB3gB,WApS6B,oBAqS7B0hB,eAAgBlqC,KAAKgnC,oBAGvBhnC,KAAKukB,YAAY8G,cACdjhB,KAAKC,EAAAA,UAAUrK,KAAKgX,aACpB9P,UAAU,WAAM,MAAAlD,GAAKwkC,YAEjBxoC,KAAKukB,aAINsiB,EAAVxmC,UAAAmoC,mBACQxoC,KAAKukB,aAAevkB,KAAKukB,YAAY7E,eACvC1f,KAAKukB,YAAYzE,SAGnB9f,KAAK6nC,iBAAmB,MAIlBhB,EAAVxmC,UAAAunC,2BACI,GAAMhhC,GACF5G,KAAgB,YAAEmqC,YAA4B,iBAC5CrjC,EAAS9G,KAAKgpC,aACdC,EAAUjpC,KAAKkpC,qBAErBtiC,GACG2iC,eACPpf,MAAYrjB,EAAO0iC,KAASP,EAAQO,MACpCrf,MAAYrjB,EAAO2iC,SAAaR,EAAQQ,aAQtC5C,EAAFxmC,UAAA2oC,WAAE,WACE,GAEIoB,GAFEC,GAASrqC,KAAKwJ,MAA2B,OAAnBxJ,KAAKwJ,KAAKnE,MAChCuB,EAAW5G,KAAK4G,QAGtB,IAAgB,SAAZA,GAAmC,SAAZA,EACzBwjC,GAAkBE,QAAS,SAAUC,QAAqB,SAAZ3jC,EAAsB,MAAQ,cACvE,IACO,UAAZA,GACa,QAAZA,GAAsByjC,GACV,SAAZzjC,IAAwByjC,EACzBD,GAAkBE,QAAS,QAASC,QAAS,cACxC,CAAA,KACO,SAAZ3jC,GACa,SAAZA,GAAuByjC,GACX,QAAZzjC,IAAuByjC,GAGxB,KAAMG,IAAkC5jC,EAFxCwjC,IAAkBE,QAAS,MAAOC,QAAS,UAK7C,GAAJ/tB,GAAAxc,KAAAyqC,gBAAAL,EAAAE,QAAAF,EAAAG,QAEI,QACEf,KAAMY,EACNX,UAAWa,QAJjB9tB,EAAA0e,EAI6BqP,QAJ7B/tB,EAAA4e,KASEyL,EAAFxmC,UAAA6oC,oBAAE,WACE,GAEIwB,GAFEL,GAASrqC,KAAKwJ,MAA2B,OAAnBxJ,KAAKwJ,KAAKnE,MAChCuB,EAAW5G,KAAK4G,QAGtB,IAAgB,SAAZA,EACF8jC,GAAmBC,SAAU,SAAUC,SAAU,cAC5C,IAAgB,SAAZhkC,EACT8jC,GAAmBC,SAAU,SAAUC,SAAU,WAC5C,IACO,UAAZhkC,GACa,QAAZA,GAAsByjC,GACV,SAAZzjC,IAAwByjC,EACzBK,GAAmBC,SAAU,MAAOC,SAAU,cACzC,CAAA,KACO,SAAZhkC,GACa,SAAZA,GAAuByjC,GACX,QAAZzjC,IAAuByjC,GAGxB,KAAMG,IAAkC5jC,EAFxC8jC,IAAmBC,SAAU,QAASC,SAAU,UAKlD,GAAJpuB,GAAAxc,KAAAyqC,gBAAAC,EAAAC,SAAAD,EAAAE,SAEI,QACEpB,KAAMkB,EACNjB,UAAWkB,SAJjBnuB,EAAA0e,EAI8B0P,SAJ9BpuB,EAAA4e,KASUyL,EAAVxmC,UAAA4nC,2CAGQjoC,MAAK6nC,mBACP7nC,KAAK6nC,iBAAiB5d,QAAUjqB,KAAKiqB,QACrCjqB,KAAK6nC,iBAAiB1H,gBAEtBngC,KAAKyJ,QAAQ6e,iBAAiBzC,eAAezb,KAC3C0I,EAAAA,KAAK,GACLzI,EAAAA,UAAUrK,KAAKgX,aACf9P,UAAU,WACNlD,EAAK6jC,kBACP7jC,EAAgB,YAAE8jC,qBAOlBjB,EAAVxmC,UAAA+nC,iBAAA,SAA2ByC,GACnB7qC,KAAK6nC,mBACP7nC,KAAK6nC,iBAAiBgD,aAAeA,EACrC7qC,KAAK6nC,iBAAiB1H,kBAKlB0G,EAAVxmC,UAAAoqC,gBAAA,SAA0BvP,EAA4BE,GAelD,MAdsB,UAAlBp7B,KAAK4G,UAA0C,UAAlB5G,KAAK4G,SAC1B,QAANw0B,EACFA,EAAI,SACW,WAANA,IACTA,EAAI,OAGI,QAANF,EACFA,EAAI,QACW,UAANA,IACTA,EAAI,QAIAA,EAAZA,EAAeE,EAAfA,mBAlYAt5B,KAACyK,EAAAA,UAADvK,OACEC,SAAU,eACVgH,SAAU,aACVtG,MACE0uB,cAAe,SACfgM,YAAa,yBACbyN,aAAc,6DA1FlBhpC,KAAE8qB,EAAAA,UAeF9qB,KAAEiP,EAAAA,aAZFjP,KAAEipC,EAAAA,mBAoBFjpC,KAAEkO,EAAAA,mBAHFlO,KAAEkJ,EAAAA,SAbFlJ,KAAQ+K,EAAAA,WAjBR/K,KAAQkpC,EAAAA,gBAARlpC,KAAuBm2B,EAAAA,eAgMvBn2B,SAAAgL,GAAA7J,aAAAnB,KAAKiL,EAAAA,OAAL/K,MAAYykC,QA/LZ3kC,KAAmBkB,EAAAA,eAAnBC,aAAAnB,KAgMKoB,EAAAA,aACLpB,SAAAgL,GAAA7J,aAAAnB,KAAKoB,EAAAA,WAALpB,KAAiBiL,EAAAA,OAAjB/K,MAAwB2kC,2BAjFxB//B,WAAA9E,KAAGuB,EAAAA,MAAHrB,MAAS,wBAmBT8G,WAAAhH,KAAGuB,EAAAA,MAAHrB,MAAS,wBAYTklC,YAAAplC,KAAGuB,EAAAA,MAAHrB,MAAS,yBAGTmlC,YAAArlC,KAAGuB,EAAAA,MAAHrB,MAAS,yBAKTioB,UAAAnoB,KAAGuB,EAAAA,MAAHrB,MAAS,gBAiBT6oC,eAAA/oC,KAAGuB,EAAAA,MAAHrB,MAAS,sBAjLT6kC,mBAiiBE,QAAF6B,GACY5nC,EACAuoB,GADArpB,KAAZc,mBAAYA,EACAd,KAAZqpB,oBAAYA,EAnBZrpB,KAAAirC,YAAmC,UAGnCjrC,KAAAkrC,qBAAyC,EAGzClrC,KAAAmrC,iBAA0D,SAM1DnrC,KAAAorC,QAA2C,GAAIxhC,GAAAA,QAG/C5J,KAAAqrC,WAA4CrrC,KAAKqpB,oBAAoB6B,QAAQC,EAAAA,YAAYC,SAnhBzF,MA8hBEsd,GAAFroC,UAAAyK,KAAE,SAAKlE,EAA2B2hC,GAAhC,GAAFvkC,GAAAhE,IAEQA,MAAKsrC,gBACPpmB,aAAallB,KAAKsrC,gBAIpBtrC,KAAKkrC,qBAAsB,EAC3BlrC,KAAKwf,UAAY5Y,EACjB5G,KAAKurC,eAAiB/lB,WAAW,WAC/BxhB,EAAKinC,YAAc,UAInBjnC,EAAKm8B,iBACJoI,IAOLG,EAAFroC,UAAA0K,KAAE,SAAKw9B,GAAL,GAAFvkC,GAAAhE,IAEQA,MAAKurC,gBACPrmB,aAAallB,KAAKurC,gBAGpBvrC,KAAKsrC,eAAiB9lB,WAAW,WAC/BxhB,EAAKinC,YAAc,SAInBjnC,EAAKm8B,iBACJoI,IAILG,EAAFroC,UAAAsoC,YAAE,WACE,MAAO3oC,MAAKorC,QAAQvlB,gBAItB6iB,EAAFroC,UAAAuoC,UAAE,WACE,MAA4B,YAArB5oC,KAAKirC,aAIdvC,EAAFroC,UAAA2pC,oBAAE,SAAoBU,EAAyC9vB,GAC3D,GAAMwf,GAA2B,UAAnBp6B,KAAKwf,WAA4C,UAAnBxf,KAAKwf,UAAyB,IAAM,IAC1E5Y,EAAmB,KAARwzB,EAAcsQ,EAAgBC,SAAWD,EAAgBE,QAE1E,IAAiB,QAAbhkC,GAAmC,WAAbA,EACxB5G,KAAKmrC,iBAAmBvkC,MACnB,IAAiB,UAAbA,EACT5G,KAAKmrC,iBAAiC,QAAdvwB,EAAsB,OAAS,YAClD,CAAA,GAAiB,QAAbhU,EAGT,KAAM4jC,IAAkCxqC,KAAKwf,UAF7Cxf,MAAKmrC,iBAAiC,QAAdvwB,EAAsB,QAAU,SAM5D8tB,EAAFroC,UAAAmrC,gBAAE,WACExrC,KAAKkrC,qBAAsB,GAG7BxC,EAAFroC,UAAAorC,eAAE,SAAejkC,GACb,GAAMiZ,GAAUjZ,EAAkC,OAElC,YAAZiZ,GAAyBzgB,KAAK4oC,aAChC5oC,KAAKorC,QAAQxgC,OAGC,YAAZ6V,GAAqC,WAAZA,IAC3BzgB,KAAKkrC,qBAAsB,IAS/BxC,EAAFroC,UAAAqrC,uBAAE,WACM1rC,KAAKkrC,qBACPlrC,KAAK+K,KAAK,IASd29B,EAAFroC,UAAA8/B,cAAE,WACEngC,KAAKc,mBAAmBC,+BAxJ5Be,KAACC,EAAAA,UAADC,OAAAC,SAAA,wBACEC,SAAU,+QACVC,QAAF,iTACEE,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,OACE0U,YAAakvB,GAAfC,cACE5jC,2GAKEgpC,cAAJ,wGAjfAjD,iCiEZA,sBAeA5mC,KAACoL,EAAAA,SAADlL,OACEmL,SACEC,EAAAA,aACA6f,EAAAA,cACA5f,IAEFI,SAAUo5B,GAAY6B,GAAkBr7B,IACxCQ,cAAeg5B,GAAY6B,IAC3Bxb,iBAAkBwb,QAvBpBkD,gCCsBA5rC,KAAAiH,QAAoC,GAAI2C,GAAAA,QAGxC5J,KAAA6rC,kBAA8B,kBAG9B7rC,KAAA8rC,cAA0B,YAG1B9rC,KAAA+rC,kBAA8B,gBAG9B/rC,KAAAgsC,eAA2B,aAG3BhsC,KAAAisC,cAA0B,YAG1BjsC,KAAAksC,cAAkB,SAAC/vB,EAAcc,EAAkBzb,GAC/C,GAAc,GAAVA,GAA2B,GAAZyb,EAAiB,MAAO,QAAQzb,CAEnDA,GAASuE,KAAKG,IAAI1E,EAAQ,EAE1B,IAAMub,GAAaZ,EAAOc,CAO1B,OAAUF,GAAa,EAA3B,OAJqBA,EAAavb,EAC1BuE,KAAKC,IAAI+W,EAAaE,EAAUzb,GAChCub,EAAaE,GAErB,OAAiDzb,GApDjD,sBAgBAM,KAAC6qB,EAAAA,WAAD3qB,OAAawb,WAAY,8GAhBzB2uB,KA8DaC,IAEXv7B,QAASs7B,GACTxc,OAAQ,GAAIzsB,GAAAA,SAAY,GAAI8pB,GAAAA,SAAYmf,KACxCvc,WAAYyc,ICnCdC,GAAA,yBA/BA,MAAAA,MAkDAC,GAAA,yBAlDA,MAAAA,MAmDaC,GAAoBlf,EAAiBif,mBAkFhD,QAAFE,GAAqBxc,EACCnvB,GADpB,GAAFkD,GAEIC,EAFJC,KAAAlE,OAAAA,WAAqBgE,GAArBisB,MAAqBA,EACCjsB,EAAtBlD,mBAAsBA,EArDtBkD,EAAA0oC,WAAuB,EASvB1oC,EAAA2oC,QAAoB,EAkBpB3oC,EAAA4oC,oBAQA5oC,EAAA6oC,eAA0B,EAS1B7oC,EAAA8oC,uBAAkC,EAGlC9oC,EAAAmY,KAAqD,GAAItX,GAAAA,aAQrDb,EAAK+oC,aAAe9c,EAAMhpB,QAAQC,UAAU,WAAM,MAAAlD,GAAKlD,mBAAmBC,mBAR9E,MA1DkCmE,GAAlCunC,EAAAxoC,GAMAkB,OAAAC,eAAMqnC,EAANpsC,UAAA,iBAAA,WAA4B,MAAOL,MAAK0sC,gBACtC,SAAcrnC,GACZrF,KAAK0sC,WAAa3mC,KAAKG,IAAIX,EAAAA,qBAAqBF,GAAQ,GACxDrF,KAAKc,mBAAmBC,gDAM5BoE,OAAAC,eAAMqnC,EAANpsC,UAAA,cAAA,WAAyB,MAAOL,MAAK2sC,aACnC,SAAWtnC,GACTrF,KAAK2sC,QAAUpnC,EAAAA,qBAAqBF,GACpCrF,KAAKc,mBAAmBC,gDAM5BoE,OAAAC,eAAMqnC,EAANpsC,UAAA,gBAAA,WAA2B,MAAOL,MAAKgtC,eACrC,SAAa3nC,GACXrF,KAAKgtC,UAAYjnC,KAAKG,IAAIX,EAAAA,qBAAqBF,GAAQ,GACvDrF,KAAKitC,mEAMT9nC,OAAAC,eAAMqnC,EAANpsC,UAAA,uBAAA,WAAoC,MAAOL,MAAK4sC,sBAC9C,SAAoBvnC,GAClBrF,KAAK4sC,kBAAoBvnC,OAAasC,IAAI,SAAAulC,GAAK,MAAA3nC,GAAAA,qBAAqB2nC,KACpEltC,KAAKitC,mEAMT9nC,OAAAC,eAAMqnC,EAANpsC,UAAA,oBAAA,WAAgC,MAAOL,MAAK6sC,mBAC1C,SAAiBxnC,GACfrF,KAAK6sC,cAAgBvnC,EAAAA,sBAAsBD,oCAO/CF,OAAAC,eAAMqnC,EAANpsC,UAAA,4BAAA,WAAwC,MAAOL,MAAK8sC,2BAClD,SAAyBznC,GACvBrF,KAAK8sC,sBAAwBxnC,EAAAA,sBAAsBD,oCAgBrDonC,EAAFpsC,UAAAse,SAAE,WACE3e,KAAKmtC,cAAe,EACpBntC,KAAKitC,kCACLjtC,KAAK4uB,oBAGP6d,EAAFpsC,UAAA8G,YAAE,WACEnH,KAAK+sC,aAAa3lC,eAIpBqlC,EAAFpsC,UAAA+sC,SAAE,WACE,GAAKptC,KAAKqtC,cAAV,CAEA,GAAMC,GAAoBttC,KAAKgd,SAC/Bhd,MAAKgd,YACLhd,KAAKutC,eAAeD,KAItBb,EAAFpsC,UAAAmtC,aAAE,WACE,GAAKxtC,KAAKytC,kBAAV,CAEA,GAAMH,GAAoBttC,KAAKgd,SAC/Bhd,MAAKgd,YACLhd,KAAKutC,eAAeD,KAItBb,EAAFpsC,UAAAqtC,UAAE,WAEE,GAAK1tC,KAAKytC,kBAAV,CAEA,GAAMH,GAAoBttC,KAAKgd,SAC/Bhd,MAAKgd,UAAY,EACjBhd,KAAKutC,eAAeD,KAItBb,EAAFpsC,UAAAstC,SAAE,WAEE,GAAK3tC,KAAKqtC,cAAV,CAEA,GAAMC,GAAoBttC,KAAKgd,SAC/Bhd,MAAKgd,UAAYhd,KAAK4tC,mBACtB5tC,KAAKutC,eAAeD,KAItBb,EAAFpsC,UAAAotC,gBAAE,WACE,MAAOztC,MAAKgd,WAAa,GAAsB,GAAjBhd,KAAKid,UAIrCwvB,EAAFpsC,UAAAgtC,YAAE,WACE,GAAMQ,GAAgB7tC,KAAK4tC,kBAC3B,OAAO5tC,MAAKgd,UAAY6wB,GAAkC,GAAjB7tC,KAAKid,UAIhDwvB,EAAFpsC,UAAAutC,iBAAE,WACE,MAAO7nC,MAAKsX,KAAKrd,KAAKwB,OAASxB,KAAKid,UAAY,GAYlDwvB,EAAFpsC,UAAAytC,gBAAE,SAAgB7wB,GAGd,GAAMF,GAAa/c,KAAKgd,UAAYhd,KAAKid,SACnCqwB,EAAoBttC,KAAKgd,SAE/Bhd,MAAKgd,UAAYjX,KAAKgoC,MAAMhxB,EAAaE,IAAa,EACtDjd,KAAKid,SAAWA,EAChBjd,KAAKutC,eAAeD,IAOdb,EAAVpsC,UAAA4sC,2CACSjtC,KAAKmtC,eAGLntC,KAAKid,WACRjd,KAAKgtC,UAA2C,GAA/BhtC,KAAKguC,gBAAgBxsC,OAClCxB,KAAKguC,gBAAgB,GAhNL,IAoNtBhuC,KAAKiuC,0BAA4BjuC,KAAKguC,gBAAgBj/B,SAES,IAA3D/O,KAAKiuC,0BAA0BtyB,QAAQ3b,KAAKid,WAC9Cjd,KAAKiuC,0BAA0Bp7B,KAAK7S,KAAKid,UAI3Cjd,KAAKiuC,0BAA0BtzB,KAAK,SAACE,EAAGC,GAAM,MAAAD,GAAIC,IAClD9a,KAAKc,mBAAmBC,iBAIlB0rC,EAAVpsC,UAAAktC,eAAA,SAAyBD,GACrBttC,KAAKmc,KAAK9V,MACRinC,kBAANA,EACMtwB,UAAWhd,KAAKgd,UAChBC,SAAUjd,KAAKid,SACfzb,OAAQxB,KAAKwB,yBApMnBM,KAACC,EAAAA,UAADC,OAAAC,SAAA,gBACEgH,SAAU,eACV/G,SAAU,u1EACVC,QAAF,uoBACEQ,MACFC,MAAA,iBAEAJ,gBAAAC,EAAAA,wBAAAC,OACAL,cAAAC,EAAAA,kBAAAC,mFAvDAkqC,EAAAtpC,mEAgEA8Z,WAAAnb,KAAAuB,EAAAA,QASA2qC,kBAAAlsC,KAAAuB,EAAAA,QASA6qC,eAAApsC,KAAAuB,EAAAA,QASA8qC,uBAAArsC,KAAQuB,EAAAA,QASR8Y,OAAAra,KAAAyB,EAAAA,UAiBAkpC,mCChIA,sBAiBA3qC,KAACoL,EAAAA,SAADlL,OACEmL,SACEC,EAAAA,aACAyK,GACAwuB,GACAuF,IAEFn+B,SAAUg/B,IACV5+B,cAAe4+B,IACf77B,WAAYw7B,QA1BdgC,KCqBAC,GAAA,WACE,QAAFA,GAAqB1tC,GAAAX,KAArBW,YAAqBA,EAtBrB,MAAA0tC,MAyBaC,GAA2BzqC,EAAWwqC,GAAoB,WAGnEE,GAAgB,iBAyBlB,QAAFC,GAAqB7tC,GAAnB,GAAFqD,GACIC,EADJC,KAAAlE,KACUW,IADVX,WAAqBgE,GAArBrD,YAAqBA,EAQrBqD,EAAA+0B,OAA2B,EAM3B/0B,EAAAyqC,aAAiC,EASjCzqC,EAAAy6B,KAAwE,cAGxEz6B,EAAAuqC,cAAkB,oBAAoBA,OAHtC,MAzBoCrpC,GAApCspC,EAAAvqC,GAQAkB,OAAAC,eAAMopC,EAANnuC,UAAA,aAAA,WAAwB,MAAOL,MAAK+4B,YAClC,SAAU1V,GAAarjB,KAAK+4B,OAAS2V,GAAMrrB,GAAK,oCAKlDle,OAAAC,eAAMopC,EAANnuC,UAAA,mBAAA,WAA8B,MAAOL,MAAKyuC,kBACxC,SAAgBprB,GAAarjB,KAAKyuC,aAAeC,GAAMrrB,GAAK,oCAgB5DmrB,EAAFnuC,UAAAsuC,kBAAE,WAEE,OAAQv5B,UAAW,UADLpV,KAAKqF,MAAQ,IAC/B,MAOEmpC,EAAFnuC,UAAAuuC,iBAAE,WACE,GAAkB,WAAd5uC,KAAKy+B,KAAmB,CAE1B,OAAQrpB,UAAW,UADLpV,KAAK6uC,YAAc,IACvC,sBA7DA/sC,KAACC,EAAAA,UAADC,OAAAC,SAAA,mBACEgH,SAAU,iBACVtG,MACF4N,KAAA,cACMu+B,gBAAN,IACIC,gBAAJ,MACIlR,uBAAJ,QACImR,cAAe,OACfpsC,MAAJ,oBAEAR,QAAA,SACAF,SAAA,0pBACEC,QAAS,40HACTK,gBAAFC,EAAAA,wBAAAC,OACEL,cAAFC,EAAAA,kBAAAC,kEArCAisC,EAAArrC,oEAgDAs7B,OAAA38B,KAAAuB,EAAAA,SAkBAmrC,mCC5EA,sBAcA1sC,KAACoL,EAAAA,SAADlL,OACEmL,SAAUC,EAAAA,aAAcC,IACxBI,SAAU+gC,GAAgBnhC,IAC1BQ,cAAe2gC,QAjBjBS,KZ6BMC,GAAY,IAUlBC,GAAA,WACE,QAAFA,GAAqBxuC,GAAAX,KAArBW,YAAqBA,EAxCrB,MAAAwuC,MA0CaC,GAA+BvrC,EAAWsrC,GAAwB,WAMzEE,GAAmC,27CAgGvC,QAAF7Q,GAAqB79B,EACP+9B,EACsCjwB,GAFlD,GAAFzK,GAIIC,EAJJC,KAAAlE,KAIUW,IAJVX,IAAqBgE,GAArBrD,YAAqBA,EAE+BqD,EAApDyK,UAAoDA,EAjDpDzK,EAAA+0B,OAAmB,EAEnB/0B,EAAAsrC,oBAA+B,EAqB/BtrC,EAAAurC,UAAsBL,GAatBlrC,EAAAy6B,KAAuC,cAgBnCz6B,EAAKsrC,mBAAqB5Q,EAAS8Q,MAAQ9Q,EAAS+Q,OAIpD,IAAMC,GACJ,sCAAqC1rC,EAAKsrC,mBAAqB,YAAc,IADnF,mBAGI3uC,GAAYF,cAAcgF,UAAUG,IAAI8pC,KApB5C,MAzCwCxqC,GAAxCs5B,EAAAv6B,GAiBAkB,OAAAC,eAAMo5B,EAANn+B,UAAA,gBAAA,WAA2B,MAAOL,MAAKuvC,eACrC,SAAahT,GACXv8B,KAAKuvC,UAAYhqC,EAAAA,qBAAqBg3B,GAEjCv8B,KAAKsvC,oBAAuB9Q,EAAmBmR,UAAUxhB,IAAInuB,KAAKuvC,YACrEvvC,KAAK4vC,oDAOXzqC,OAAAC,eAAMo5B,EAANn+B,UAAA,8BACI,MAAOL,MAAK6vC,cAAgB7vC,KAAK8vC,SAAW,QAE9C,SAAgBzqC,GACdrF,KAAK6vC,aAAetqC,EAAAA,qBAAqBF,oCAS7CF,OAAAC,eAAMo5B,EAANn+B,UAAA,wBACI,MAAqB,gBAAdL,KAAKy+B,KAAyBz+B,KAAK+4B,OAAS,OAErD,SAAU6G,GACR5/B,KAAK+4B,OAAShzB,KAAKG,IAAI,EAAGH,KAAKC,IAAI,IAAKT,EAAAA,qBAAqBq6B,sCAmB/Dz6B,OAAFC,eAAMo5B,EAANn+B,UAAA,qBAAE,WACE,OAAQL,KAAK8vC,SA9HS,IA8HuB,mCAI/C3qC,OAAFC,eAAMo5B,EAANn+B,UAAA,gBAAE,WACE,GAAM0vC,GAA+B,EAArB/vC,KAAKgwC,cAAoBhwC,KAAKiwC,WAC9C,OAAO,OAAOF,EAAlB,IAA6BA,mCAI3B5qC,OAAFC,eAAMo5B,EAANn+B,UAAA,4BAAE,WACE,MAAO,GAAI0F,KAAKmqC,GAAKlwC,KAAKgwC,+CAI5B7qC,OAAFC,eAAMo5B,EAANn+B,UAAA,yBAAE,WACE,MAAkB,gBAAdL,KAAKy+B,KACAz+B,KAAKmwC,sBAAwB,IAAMnwC,KAAK+4B,QAAU,IAIvD/4B,KAAKsvC,oBAAoC,kBAAdtvC,KAAKy+B,KACC,GAA5Bz+B,KAAKmwC,qBAGP,sCAIThrC,OAAFC,eAAMo5B,EAANn+B,UAAA,0BAAE,WACE,MAAOL,MAAKiwC,YAAcjwC,KAAK8vC,SAAW,qCAIpCtR,EAAVn+B,UAAAuvC,4BACI,GAAIQ,GAAW5R,EAAmB4R,QAE7BA,KACHA,EAAWpwC,KAAKyO,UAAU4hC,cAAc,SACxCrwC,KAAKyO,UAAU6hC,KAAKC,YAAYH,GAChC5R,EAAmB4R,SAAWA,GAG5BA,GAAYA,EAASI,OACtBJ,EAA+B,MAAEK,WAAWzwC,KAAK0wC,oBAAqB,GAGzElS,EAAmBmR,UAAU/pC,IAAI5F,KAAK8vC,WAIhCtR,EAAVn+B,UAAAqwC,6BACI,MAAOrB,IAEFsB,QAAQ,eAAgB,GAAG,IAAO3wC,KAAKmwC,sBACvCQ,QAAQ,aAAc,GAAG,GAAM3wC,KAAKmwC,sBACpCQ,QAAQ,YAAa,GAAG3wC,KAAK8vC,WAnHtCtR,EAAAmR,UAA6B,GAAIiB,MAAa1B,KAM9C1Q,EAAA4R,SAAmD,oBAjCnDtuC,KAACC,EAAAA,UAADC,OAAAC,SAAA,uBACEgH,SAAU,qBACVtG,MACF4N,KAAA,cACM3N,MAAN,uBACI+7B,mBAAJ,WACIC,oBAAJ,WACIhB,uBAAJ,oCACID,uBAAJ,sCACIE,uBAAwB,QACxBmR,cAAJ,QAEA5sC,QAAA,SACAF,SAAA,+aACEC,QAAS;+5EACTK,gBAAFC,EAAAA,wBAAAC,OACEL,cAAFC,EAAAA,kBAAAC,mFA/EAT,SAAEgL,GAAF7J,aAAAnB,KAAAoB,EAAAA,WAAApB,KAAAiL,EAAAA,OAAA/K,MAAA4N,EAAAA,eAsIA4uB,EAAAr7B,uEAnCAs7B,OAAA38B,KAAAuB,EAAAA,QAYAgC,QAAAvD,KAAAuB,EAAAA,SAaAm7B,wCA4GA,GAAAx6B,GAAAC,EAAAC,KAAAlE,KAAA2B,EAAA+8B,EAAAlwB,IAAAxO,IACE,OAAFgE,GAAAy6B,KAAA,gBAAAz6B,EAzOA,6BA6OAlC,KAAAC,EAAAA,UAAAC,OAAAC,SAAA,oBArBAsO,KAAA,cACAkuB,KAAA,gBACA77B,MAAA,mCACM+7B,mBAAN,WACIC,oBAAqB,YAEzBx8B,QAAA,SACAF,SAAA,+aACAC,QAAA,u5EACAK,gBAAAC,EAAAA,wBAAAC,OACEL,cAAFC,EAAAA,kBAAAC,SAIAs8B,EAAAvnB,eAAA,WAAA,QACAxV,KAAAiP,EAAAA,+GAvOA8tB,GAMAL,ICXAM,GAAA,yBAPA,sBAYAh9B,KAACoL,EAAAA,SAADlL,OACEmL,SAAUE,IACVI,SACE+wB,GACAK,GACAxxB,IAEFQ,cACE2wB,GACAK,QArBJC,KC8CI1K,GAAe,EAON2K,IACXluB,QAASyjB,EAAAA,kBACTxjB,YAAakP,EAAAA,WAAW,WAAM,MAAAgf,MAC9BxK,OAAO,GAITyK,GAAA,WACE,QAAFA,GAEWvK,EAEArvB,GAFArF,KAAX00B,OAAWA,EAEA10B,KAAXqF,MAAWA,EAjEX,MAAA45B,MAuEAC,GAAA,yBAvEA,MAAAA,MAwEaC,GAA0B9zB,EAAc6zB,mBA6HnD,QAAFF,GAAsBI,GAApB,GAAFp7B,GACIC,EADJC,KAAAlE,OAAAA,WAAsBgE,GAAtBo7B,gBAAsBA,EAtGtBp7B,EAAA+0B,OAAwB,KAGxB/0B,EAAAq7B,MAA0B,mBAAmBjL,KAG7CpwB,EAAAs7B,UAA6C,KAG7Ct7B,EAAAu7B,gBAAoC,EAGpCv7B,EAAAw7B,eAA+C,QAG/Cx7B,EAAAy7B,WAA+B,EAG/Bz7B,EAAAkxB,WAA+B,EAG/BlxB,EAAAq1B,8BAAwD,aAMxDr1B,EAAAgxB,UAAyB,aAOzBhxB,EAAAkG,OAA4D,GAAIrF,GAAAA,eAjIhE,MAuFmCK,GAAnC85B,EAAA/6B,GAkDAkB,OAAAC,eAAM45B,EAAN3+B,UAAA,YAAA,WAAuB,MAAOL,MAAKq/B,WACjC,SAASh6B,GACPrF,KAAKq/B,MAAQh6B,EACbrF,KAAK0/B,2DAKTv6B,OAAAC,eAAM45B,EAAN3+B,UAAA,gCACI,MAAOL,MAAKw/B,oBAEd,SAAkBnc,GAChBrjB,KAAKw/B,eAAuB,WAANnc,EAAiB,SAAW,QAClDrjB,KAAK2/B,uDAKTx6B,OAAAC,eAAM45B,EAAN3+B,UAAA,aAAA,WAAqB,MAAOL,MAAK+4B,YAC/B,SAAU6G,GACJ5/B,KAAK+4B,SAAW6G,IAElB5/B,KAAK+4B,OAAS6G,EAEd5/B,KAAK6/B,gCACL7/B,KAAK8/B,8DAITd,EAAF3+B,UAAAy/B,0BAAE,WACM9/B,KAAKs/B,YAAct/B,KAAKs/B,UAAU3K,UACpC30B,KAAKs/B,UAAU3K,SAAU,IAM/BxvB,OAAAC,eAAM45B,EAAN3+B,UAAA,gBAAA,WAAmB,MAAOL,MAAKs/B,eAC7B,SAAaxqB,GACX9U,KAAKs/B,UAAYxqB,EACjB9U,KAAKqF,MAAQyP,EAAWA,EAASzP,MAAQ,KACzCrF,KAAK8/B,6DAKT36B,OAAAC,eAAM45B,EAAN3+B,UAAA,gBAAA,WAA4B,MAAOL,MAAKy/B,eACtC,SAAap6B,GACXrF,KAAKy/B,UAAYn6B,EAAAA,sBAAsBD,GACvCrF,KAAK2/B,uDAKTx6B,OAAAC,eAAM45B,EAAN3+B,UAAA,gBAAA,WAA4B,MAAOL,MAAKk1B,eACtC,SAAa7vB,GACXrF,KAAKk1B,UAAY5vB,EAAAA,sBAAsBD,GACvCrF,KAAK2/B,uDAWPX,EAAF3+B,UAAA0G,mBAAE,WAIE/G,KAAKu/B,gBAAiB,GAOxBP,EAAF3+B,UAAA0/B,OAAE,WACM//B,KAAKg1B,WACPh1B,KAAKg1B,aAIDgK,EAAV3+B,UAAAq/B,6CACQ1/B,MAAKggC,SACPhgC,KAAKggC,QAAQv5B,QAAQ,SAAAw5B,GACnBA,EAAMrqB,KAAO5R,EAAK4R,QAMhBopB,EAAV3+B,UAAAw/B,oDAEUK,EAAuC,OAAnBlgC,KAAKs/B,WAAsBt/B,KAAKs/B,UAAUj6B,QAAUrF,KAAK+4B,MAE/E/4B,MAAKggC,UAAYE,IACnBlgC,KAAKs/B,UAAY,KACjBt/B,KAAKggC,QAAQv5B,QAAQ,SAAAw5B,GACnBA,EAAMtL,QAAU3wB,EAAKqB,QAAU46B,EAAM56B,MACjC46B,EAAMtL,UACR3wB,EAAKs7B,UAAYW,OAOzBjB,EAAF3+B,UAAAw1B,iBAAE,WACM71B,KAAKu/B,gBACPv/B,KAAKkK,OAAO7D,KAAK,GAAI44B,IAAej/B,KAAc,UAAGA,KAAK+4B,UAI9DiG,EAAF3+B,UAAAs/B,oBAAE,WACM3/B,KAAKggC,SACPhgC,KAAKggC,QAAQv5B,QAAQ,SAAAw5B,GAAS,MAAAA,GAAME,mBAQxCnB,EAAF3+B,UAAA01B,WAAE,SAAW1wB,GACTrF,KAAKqF,MAAQA,EACbrF,KAAKo/B,gBAAgBr+B,gBAQvBi+B,EAAF3+B,UAAA21B,iBAAE,SAAiBC,GACfj2B,KAAKq5B,8BAAgCpD,GAQvC+I,EAAF3+B,UAAA61B,kBAAE,SAAkBD,GAChBj2B,KAAKg1B,UAAYiB,GAOnB+I,EAAF3+B,UAAA81B,iBAAE,SAAiBC,GACfp2B,KAAK8I,SAAWstB,EAChBp2B,KAAKo/B,gBAAgBr+B,+BAvNzBe,KAACyK,EAAAA,UAADvK,OACEC,SAAU,kBACVgH,SAAU,gBACV2H,WAAYmuB,IACZp8B,MACE4N,KAAQ,aACR3N,MAAS,mBAEXR,QAAS,oDAtEXN,KAAEmJ,EAAAA,uCAkHFf,SAAApI,KAAGyB,EAAAA,SAGHy8B,UAAAl+B,KAAG0P,EAAAA,gBAAHxP,MAAmBge,EAAAA,WAAW,WAAM,MAAAogB,OAAmBC,aAAa,MAIpEzqB,OAAA9T,KAAGuB,EAAAA,QAQHgyB,gBAAAvzB,KAAGuB,EAAAA,QAUHgC,QAAAvD,KAAGuB,EAAAA,QAmBHyR,WAAAhT,KAAGuB,EAAAA,QASHyF,WAAAhH,KAAGuB,EAAAA,QAQH60B,WAAAp2B,KAAGuB,EAAAA,SA9LH27B,GAuFmCG,IAmNnCmB,GAAA,WAME,QAAFA,GAAqB3/B,GAAAX,KAArBW,YAAqBA,EAhTrB,MAAA2/B,MAoTaC,GACT18B,EAAWC,EAAmBsH,EAAck1B,KAAsB,yBA4JpE,QAAFF,GAA0BI,EACZ7+B,EACQy9B,EACAxN,EACA6O,GAJpB,GAAFz8B,GAKIC,EALJC,KAAAlE,KAKU2B,IALV3B,WAEsBgE,GAAtBo7B,gBAAsBA,EACAp7B,EAAtB4tB,cAAsBA,EACA5tB,EAAtBy8B,iBAAsBA,EApItBz8B,EAAAixB,UAA8B,gBAAeb,GAG7CpwB,EAAAiqB,GAAwBjqB,EAAKixB,UA6F7BjxB,EAAAkG,OAA4D,GAAIrF,GAAAA,aAShEb,EAAAmxB,UAA8B,EAS9BnxB,EAAA+0B,OAAwB,KASxB/0B,EAAA08B,+BAAuD,aAcnD18B,EAAKw8B,WAAaA,EAElBx8B,EAAK08B,+BACHD,EAAiBE,OAAO,SAAC1S,EAAYrY,GAC/BqY,IAAOjqB,EAAKiqB,IAAMrY,IAAS5R,EAAK4R,OAClC5R,EAAK2wB,SAAU,OAhBzB,MAjIoCzvB,GAApCk7B,EAAAn8B,GAsBAkB,OAAAC,eAAMg7B,EAAN//B,UAAA,eAAA,WAA2B,MAAOL,MAAKm1B,cACrC,SAAY9vB,GACV,GAAMu7B,GAAkBt7B,EAAAA,sBAAsBD,EAC1CrF,MAAKm1B,WAAayL,IACpB5gC,KAAKm1B,SAAWyL,EACZA,GAAmB5gC,KAAKwgC,YAAcxgC,KAAKwgC,WAAWn7B,QAAUrF,KAAKqF,MACvErF,KAAKwgC,WAAW1rB,SAAW9U,MACjB4gC,GAAmB5gC,KAAKwgC,YAAcxgC,KAAKwgC,WAAWn7B,QAAUrF,KAAKqF,QAI/ErF,KAAKwgC,WAAW1rB,SAAW,MAGzB8rB,GAEF5gC,KAAKygC,iBAAiBI,OAAO7gC,KAAKiuB,GAAIjuB,KAAK4V,MAE7C5V,KAAKo/B,gBAAgBr+B,iDAM3BoE,OAAAC,eAAMg7B,EAAN//B,UAAA,aAAA,WAAqB,MAAOL,MAAK+4B,YAC/B,SAAU1zB,GACJrF,KAAK+4B,SAAW1zB,IAClBrF,KAAK+4B,OAAS1zB,EACU,OAApBrF,KAAKwgC,aACFxgC,KAAK20B,UAER30B,KAAK20B,QAAU30B,KAAKwgC,WAAWn7B,QAAUA,GAEvCrF,KAAK20B,UACP30B,KAAKwgC,WAAW1rB,SAAW9U,yCAQrCmF,OAAAC,eAAMg7B,EAAN//B,UAAA,gCACI,MAAOL,MAAKw/B,gBAAmBx/B,KAAKwgC,YAAcxgC,KAAKwgC,WAAWnL,eAAkB,aAEtF,SAAkBhwB,GAChBrF,KAAKw/B,eAAiBn6B,mCAM1BF,OAAAC,eAAMg7B,EAAN//B,UAAA,2BACI,MAAOL,MAAKy/B,WAAkC,OAApBz/B,KAAKwgC,YAAuBxgC,KAAKwgC,WAAW13B,cAExE,SAAazD,GACX,GAAMy7B,GAAmBx7B,EAAAA,sBAAsBD,EAC3CrF,MAAKy/B,YAAcqB,IACrB9gC,KAAKy/B,UAAYqB,EACjB9gC,KAAKo/B,gBAAgBr+B,iDAM3BoE,OAAAC,eAAMg7B,EAAN//B,UAAA,2BACI,MAAOL,MAAKk1B,WAAcl1B,KAAKwgC,YAAcxgC,KAAKwgC,WAAWtI,cAE/D,SAAa7yB,GACXrF,KAAKk1B,UAAY5vB,EAAAA,sBAAsBD,oCAczCF,OAAFC,eAAMg7B,EAAN//B,UAAA,eAAE,WAAwB,OAAUL,KAAKiuB,IAAMjuB,KAAKi1B,WAApD,0CA8CEmL,EAAF//B,UAAA2gB,MAAE,WACEhhB,KAAK4xB,cAAcyE,SAASr2B,KAAKw1B,cAAc/0B,cAAe,aAQhE2/B,EAAF//B,UAAA8/B,cAAE,WAGEngC,KAAKo/B,gBAAgBr+B,gBAGvBq/B,EAAF//B,UAAAse,SAAE,WACM3e,KAAKwgC,aAEPxgC,KAAK20B,QAAU30B,KAAKwgC,WAAWn7B,QAAUrF,KAAK+4B,OAE9C/4B,KAAK4V,KAAO5V,KAAKwgC,WAAW5qB,OAIhCwqB,EAAF//B,UAAAqO,gBAAE,WAAA,GAAF1K,GAAAhE,IACIA,MAAK4xB,cACFE,QAAQ9xB,KAAKw1B,cAAc/0B,eAC3ByG,UAAU,SAAAuuB,GAAe,MAAAzxB,GAAK0xB,oBAAoBD,MAGvD2K,EAAF//B,UAAA8G,YAAE,WACEnH,KAAK4xB,cAAcI,eAAehyB,KAAKw1B,cAAc/0B,eACrDT,KAAK0gC,kCAICN,EAAV//B,UAAAw1B,4BACI71B,KAAKkK,OAAO7D,KAAK,GAAI44B,IAAej/B,KAAMA,KAAK+4B,UAGjDqH,EAAF//B,UAAA0gC,kBAAE,WACE,MAAO/gC,MAAKghC,eAAiBhhC,KAAK8I,UAGpCs3B,EAAF//B,UAAAy1B,cAAE,SAActuB,GAQZA,EAAMouB,mBAORwK,EAAF//B,UAAA4gC,eAAE,SAAez5B,GAIbA,EAAMouB,iBAEN,IAAMsL,GAAoBlhC,KAAKwgC,YAAcxgC,KAAKqF,QAAUrF,KAAKwgC,WAAWn7B,KAC5ErF,MAAK20B,SAAU,EACf30B,KAAK61B,mBAED71B,KAAKwgC,aACPxgC,KAAKwgC,WAAWnH,8BAA8Br5B,KAAKqF,OACnDrF,KAAKwgC,WAAWT,SACZmB,GACFlhC,KAAKwgC,WAAW3K,qBAMduK,EAAV//B,UAAAq1B,oBAAA,SAA8BD,GAErBz1B,KAAKu2B,cAAgC,aAAhBd,EAEdA,IACNz1B,KAAKwgC,YACPxgC,KAAKwgC,WAAWT,SAGd//B,KAAKu2B,eACPv2B,KAAKu2B,aAAaC,UAClBx2B,KAAKu2B,aAAe,OARtBv2B,KAAKu2B,aAAev2B,KAAKy2B,QAAQC,OAAO,EAAG,GAAIC,YAAY,oBA7PjE70B,KAACC,EAAAA,UAADC,OAAAC,SAAA,mBACEC,SAAU,66BACVC,QAAF,i3CACEC,QAAF,QAAA,gBAAA,YACEC,cAAFC,EAAAA,kBAAAC,KACE0G,SAAF,iBACEtG,MACFC,MAAA,mBACMu+B,4BAAN,UACIC,6BAAJ,WACIC,YAAJ,sDAMA7+B,gBAAAC,EAAAA,wBAAAC,4GAnPAZ,KAAamJ,EAAAA,oBApEbnJ,KAAEm2B,EAAAA,eAJFn2B,KAAEw/B,EAAAA,6BALFlB,EAAAj9B,0DA0UAmyB,YAAAxzB,KAAAuB,EAAAA,MAAArB,MAAA,gBAGAuzB,iBAAAzzB,KAAAuB,EAAAA,MAAArB,MAAA,qBAGAu/B,kBAAGz/B,KAAHuB,EAAAA,MAAArB,MAAA,sBAGA2yB,UAAA7yB,KAAAuB,EAAAA,QAGAgC,QAAAvD,KAAAuB,EAAAA,QAGAgyB,gBAAGvzB,KAAHuB,EAAAA,QAwBAyF,WAAAhH,KAAAuB,EAAAA,QAkBA60B,WAAAp2B,KAAAuB,EAAAA,QAUA6G,SAAApI,KAAAyB,EAAAA,SAaAkzB,UAAA30B,KAAAsB,EAAAA,UAAApB,MAAAm2B,MAaA3C,gBAAA1zB,KAAAsB,EAAAA,UAAApB,MAAA,YA8BAo+B,mCC/cA,sBAcAt+B,KAACoL,EAAAA,SAADlL,OACEmL,SAAUC,EAAAA,aAAcG,GAAiBF,IACzCI,SAAUuxB,GAAeoB,GAAgB/yB,IACzCQ,cAAemxB,GAAeoB,QAjBhCoB,KCiBatO,IAIXC,gBAAiBje,EAAAA,QAAQ,aACvBC,EAAAA,MAAM,qBAAsB7M,EAAAA,OAC1B8M,UAAa,uBACbC,WAAc,aAEhBF,EAAAA,MAAM,OAAQ7M,EAAAA,OAEZm5B,aAAc,OACdpsB,WAAc,YAEhBC,EAAAA,WAAW,uBAAwBC,EAAAA,QAAQ,QAC3CD,EAAAA,WAAW,sCACPC,EAAAA,QAAQ,8CToBHmsB,GACT,GAAInkB,GAAAA,eAAwB,+BAC1BC,WAAY,OACZC,QAASkkB,mBAqBb,QAAFjP,GACc5xB,EAC6C8gC,GAD7C5hC,KAAdc,mBAAcA,EAC6Cd,KAA3D4hC,WAA2DA,EA+T3D,MA5TElP,GAAFryB,UAAA0G,mBAAE,WAAA,GAAF/C,GAAAhE,IACIA,MAAK4hC,WAAWC,sBAAsB36B,UAAU,WAC9ClD,EAAKlD,mBAAmBC,iCApB9Be,KAACC,EAAAA,UAADC,OAAAC,SAAA,qBACEC,SAAU,4BACVS,MACFC,MAAA,qBACMkwB,yBAAN,kCACIC,0BAAJ,oCAEAvwB,gBAAAC,EAAAA,wBAAAC,OACAL,cAAAC,EAAAA,kBAAAC,2JAsUAmwB,qDAxLA1yB,MAAAW,YAAAA,EAAEX,KAAF8hC,kBAAAA,EAAsB9hC,KAAtB4xB,cAAAA,EACsB5xB,KAAtBuO,UAAAA,EACsBvO,KAAtByJ,QAAAA,EACsBzJ,KAAtB+hC,KAAAA,EACsB/hC,KAAtBgiC,qCAAA,sDAlGAhiC,KAAAiiC,MAAA,OAaAjiC,KAAAkiC,eAAA,EASAliC,KAAAmiC,YAAA,2MAiEAniC,KAAAoiC,aAAAl7B,UAAA,SAAAm7B,GA6GAA,GA/FAr+B,EAAsB+9B,OACtB/9B,EAAAg+B,qCAAAh+B,EAAA+9B,KAAA,eAEU/9B,EAAKs+B,qBAAft+B,EAAAu+B,YACAv+B,EAAAw+B,cAKAx+B,EAAAy+B,+MAUA,MAAAz+B,GAAAyF,QAAAye,IAAA,WACAlkB,EAAA0+B,QAEAl7B,EAAAouB,wBAnDA,MAuDAzwB,QAAOC,eAAPotB,EAAAnyB,UAAA,YACA4L,uDA3HA5G,EAAA,QAAAA,EAAA,MAAA,2BAEArF,KAAAwf,UAAAna,EACQrF,KAAK2iC,kBAAkBt8B,SAG/B8F,YAAA,EACAC,cAAA,6GAMApM,KAAA4iC,aAAAh4B,QAEAuB,YAAA,EACAC,cAAA,6KAMEA,cAAF,oKAMEA,cAAF,0JAoBAD,YAAA,kOAMAA,YAAA,0KASAA,YAAA,uNAMAA,YAAA,4FAeA,MAAAnM,MAAAqiC,QAAA,SAAAriC,KAAAy+B,MAEAtyB,YAAA,EACAC,cAAA,iEAyCApM,KAAAuiC,WAAAM,+BAAAr8B,KAAA,SAAAs8B,2JAkBA,GAAAC,GAAA/iC,KAAA+hC,MAAA/hC,KAAA+hC,KAAAiB,aACAD,IAAA/iC,KAAAW,YAAAF,cAAA0O,SAAA4zB,KAEA/iC,KAAAgiC,+CAAAiB,aAEAjjC,KAAA4xB,cAAAyE,SAAAr2B,KAAAgiC,qCAAAhiC,KAAAkjC,YAGAljC,KAAAW,YAAAF,cAAAq5B,QAEA95B,KAAOgiC,qCAAP,KACAhiC,KAAAkjC,WAAA,+HAMAljC,KAAAuiC,WAAAY,QAAAnjC,KAAAsiC,6KAeAtiC,KAAAuiC,WAAAa,WAGAj+B,OAAAC,eAAAotB,EAAAnyB,UAAA,UACA4L,2GAQEG,cAAF,2JAqCA,YAdA,KAAAi3B,IAAAA,GAAArjC,KAAAqiC,YAAA,KAAAiB,IAAAA,EAAA,WAAStjC,KAATujC,QAAAF,EAAAA,GAGQrjC,KAARunB,gBAAAvnB,KAAAwjC,kBAAA,OAAA,eAEQxjC,KAARkjC,WAAAI,IAGAtjC,KAAAunB,gBAAA,OAAUvnB,KAAVyiC,iBAEMziC,KAAKuiC,aACXviC,KAAAuiC,WAAAY,QAAAnjC,KAAAsiC,qBAGA,GAAAh8B,SAAqB,SAArBC,GACAvC,EAAAo+B,aAAAh4B,KAAA0I,EAAAA,KAAA,IAAA5L,UAAA,SAAA8iB,GAAA,MAAAzjB,GAAAyjB,EAAA,OAAA,+JAWA,IAAAvJ,EAAA9E,QAAA,SAAA,SAAAgF,GACA,SAAAF,GAAuC,IAAvCE,EAAAhF,QAAA,UAEQ3b,KAARoiC,aAAA/7B,KAA+BrG,KAA/BujC,UAGAp+B,OAAAC,eAAAotB,EAAAnyB,UAAA,UACA4L,sGAGAE,YAAA,EACAC,cAAA,mBAAAtK,KAAAC,EAAAA,UAAAC,OAAAC,SAAA,kCA1RAC,SAAA,4BACEkV,YAAF8b,GAAAC,iBACExwB,MACFC,MAAA,aACAwwB,eAAA,kBACAC,qBAAA,4BACMC,oBAAN,0BAEIC,eAAgB,OAChBC,yBAAJ,qBACIC,0BAAJ,8DAEIC,0BAAJ,kBACIjoB,SAAJ,MAEAjJ,gBAAAC,EAAAA,wBAAAC,OACAL,cAAAC,EAAAA,kBAAAC,SAIAiwB,EAAAlb,eAAA,WAAA,QACAxV,KAAAiP,EAAAA,+EA5FAjP,KAAEkJ,EAAAA,SAdFlJ,SAA8CgL,GAA9C7J,aAAAnB,KAAAoB,EAAAA,WAAApB,KAAAiL,EAAAA,OAAA/K,MAAA4N,EAAAA,eAIA4iB,EAAArvB,gBAgBAyD,WAAA9E,KAAAuB,EAAAA,QA+LAo7B,OAAA38B,KAAAuB,EAAAA,iEAhGA++B,eAAAtgC,KAAAyB,EAAAA,SAaAkgC,gBAAA3hC,KAAAyB,EAAAA,OAAAvB,MAAA,YASA0hC,cAAA5hC,KAAAyB,EAAAA,SAMAogC,gBAAA7hC,KAAAyB,EAAAA,OAAAvB,MAAA,YAeA4hC,cAAA9hC,KAAAyB,EAAAA,SAKAo/B,oBAAA7gC,KAAAyB,EAAAA,OAAAvB,MAAA,qBAMAqgC,SAAAvgC,KAAAuB,EAAAA,SAeAmvB,qFAyRAxyB,KAAA6xB,SAAAA,iBAAE7xB,KAAFc,mBAAAA,EAAkCd,KAAlC6jC,eAAAA,EAKiE7jC,KAAjE8jC,cAAA,GAAAj/B,GAAAA,aAtCA7E,KAAAgX,WAAA,GAAApN,GAAAA,QAgBA5J,KAAA+jC,gBAAA,GAAAn6B,GAAAA,6FAUAJ,GAEAA,EAAAU,OAAAE,KAAAC,EAAAA,UAAArK,KAAAgX,aAAA9P,UAAA,4DAgBAlH,KAAAgkC,UAAAC,EApFA,MAsFA9+B,QAAAC,eAAAktB,EAAAjyB,UAAA,SAGI4L,mEAtFJ9G,OAAAC,eAAAktB,EAAAjyB,UAAA,wEAGA8E,OAAAC,eAAAktB,EAAAjyB,UAAA,6IAYA8E,OAAAC,eAAAktB,EAAAjyB,UAAA,uKAWAosB,8FAKErgB,cAAF,8CA0DA,GAAApI,GAAAhE,6FAAAgE,EAAAuuB,SAAA9rB,QAAA,SAAAy9B,GAAAlgC,EAAAmgC,mBAAAD,GACAlgC,EAAkBogC,qBAAlBF,GACAlgC,EAAAqgC,iBAAAH,OAGAlgC,EAAAuuB,SAAA/wB,QACQwC,EAAKsgC,cAAbtgC,EAAiCugC,SACzBvgC,EAAKsgC,cAAbtgC,EAAAwgC,QACAxgC,EAAAygC,wBAGAzgC,EAAAlD,mBAAAC,iBAEAf,KAAA+jC,gBAAA35B,KAAAs6B,EAAAA,aAAA,IAGAr6B,EAAAA,UAAWrK,KAAXgX,aAA6B9P,UAA7B,WAAA,MAAAlD,GAAAygC,2BAOAnS,EAAAjyB,UAAA8G,uBAEAnH,KAAA+jC,gBAAAl5B,+EAOE,kFAKA,iEAEFynB,EAAAjyB,UAAAskC,qBAEA,GAAA3gC,GAAAhE,uCAAAA,KAAAyJ,QAMGO,kBANH,WAAA,MAAAhG,GAAA+/B,gBAAAn5B,yMAcA,iBAAApD,EAAAiZ,SAAA,mBACoBzc,EADpB6/B,gBAIA7/B,EAAc6tB,SAAdpxB,cAAAgF,UAAAG,IAAA,mDAGM5B,EAANlD,mBAAAC,iBAEA,SAAAmjC,EAAAzF,MAEMyF,EAAN9B,aAAAh4B,KAAAC,EAAAA,UAAArK,KAAAuyB,SAAAtrB,UAAAC,UAAA,WACA,MAAAlD,GAAA4gC,mBAAAV,EAAA7B,sEAeA6B,EAAAvB,kBAAAv4B,KAAAC,EAAAA,UAAArK,KAAAuyB,SAAAtrB,UAAAC,UAAA,WACAlD,EAAAyF,QAAA6e,iBAAAzC,eAAAzb,KAAA0I,EAAAA,KAAA,IAAA5L,UAAA,6KAWAA,UAAA,qCACAlD,EAAAlD,mBAAAC,8HAWQf,KAAK6xB,SAAbpxB,cAAAgF,UAAAC,OAAA,mDAQU,sGACoB,MAA9B1B,EAAsBwgC,gBAIZxgC,EAAMwgC,KAAhBN,IAGA,MAAAlgC,EAAAugC,QACAM,GAAA,SACY7gC,EAAZugC,OAAAL,KAGAlkC,KAAA8kC,OAAA9kC,KAAA+kC,MAAA,KAEO/kC,KAAPwJ,MAAA,OAAAxJ,KAAAwJ,KAAAnE,OAOMrF,KAAK+kC,MAAQ/kC,KAAKwkC,KAClBxkC,KAAK8kC,OAAS9kC,KAAKukC,SAPzBvkC,KAAA+kC,MAAA/kC,KAAAukC,OAEQvkC,KAAR8kC,OAAsB9kC,KAAtBwkC,6BAaU,8KAKVxkC,KAAA8jC,cAAAz9B,iCAGAisB,EAAAjyB,UAAA2kC,6BAEA,GAAAhhC,GAAAhE,6BAAAiP,OAAA,SAAAi1B,GAAA,MAAAA,KAAAA,EAAAe,cAAAjhC,EAAAkhC,iBAAAhB,KAAAz9B,QAAA,SAAAy9B,GAAA,MAAA,GAAAxB,WAKApQ,EAAAjyB,UAAA8kC,8BAEA,MAAAnlC,MAAAskC,cAAAtkC,KAAAukC,SAAoBvkC,KAApBklC,iBAAAllC,KAAAukC,uGAKU,SAAVL,8EAIU,SAAVA,yJAgBAlmB,GAAAhe,KAAQ+kC,MAARK,WAGa,IAAb,QAAAplC,KAAsB+kC,MAAtBtG,KAAA,CACU,GAAVxgB,GAAAje,KAAA+kC,MAAAK,MACQpnB,IAAQC,EAChBgO,GAAAhO,EAEA,GAAAje,KAAA8kC,QAAA9kC,KAAA8kC,OAAAzC,OACA,GAAA,QAAQriC,KAAK8kC,OAAbrG,KACAxS,GAAAjsB,KAAA8kC,OAAAM,WAGa,IAAb,QAAAplC,KAAA8kC,OAAArG,KAAA,CACU,GAAVxgB,GAAuCje,KAAvC8kC,OAAAM,MACQnZ,IAAShO,EACjBD,GAAAC,EAEAD,IAAahe,KAAbqlC,gBAAArnB,MAAAiO,IAAAjsB,KAAAqlC,gBAAApZ,QACAjsB,KAAAqlC,iBAAArnB,KAAAA,EAAAiO,MAAAA,GAIQjsB,KAARyJ,QAAqBye,IAArB,WAAA,MAA8ClkB,GAA9C69B,sBAAAj3B,KAAA5G,EAAqFqhC,oCAKrFvjC,KAAUC,EAAAA,UAAVC,OAAAC,SAAA,uBACAgH,SAAA,qwEAnUAtG,MACAC,MAAA,uBACAoxB,iDAAA,qBAEExxB,gBAAFC,EAAAA,wBAAAC,OACEL,cAAFC,EAAAA,kBAAAC,SAIA+vB,EAAAhb,eAAA,WAAA,QACAxV,KAAAkB,EAAAA,eAAAC,aAAAnB,KAAAoB,EAAAA,aACApB,KAAAiP,EAAAA,aACAjP,KAAAkJ,EAAAA;kJAvXAsnB,EAAAnvB,gBAMAovB,WAAAzwB,KAAA0P,EAAAA,gBAAAxP,MAAAwwB,MAVA5S,WAAA9d,KAAA2wB,EAAAA,aAAAzwB,MAAA0wB,MA2cAC,WAAA7wB,KAAAuB,EAAAA,QACAuvB,cAAA9wB,KAAAuB,EAAAA,gGA9EAivB,oBC1WE,QAAFO,GACM3C,EAC+CrF,GACrD,MAAI5mB,GAAJC,KAAAlE,KAAUkwB,EAAmBrF,IAA7B7qB,KAsEA,MA1EuCkF,GAAvC2tB,EAAA5uB,kBAZAnC,KAACC,EAAAA,UAADC,OAAAC,SAAA,sBACEC,SAAU,4BACVS,MACFC,MAAA,yCACMkwB,yBAAN,kCACIC,0BAAJ,oCAEAvwB,gBAAAC,EAAAA,wBAAAC,OACAL,cAAAC,EAAAA,kBAAAC,2JA8EAswB,OA/GAG,GAAA,SAAA/uB,gBAuEA,GAAAD,GAAA,OAAAC,GAAAA,EAAAyD,MAAA1H,KAAAyW,YAAAzW,IAcA,+CATAgE,EAAAivB,gBAAA,EASAjvB,EAZA,gMAEEoI,cAAF,yKASEA,cAAF,kLASEA,cAAF,wFA/CAlK,SAAA,4BACEkV,YAAF8b,GAAAC,iBACExwB,MACFC,MAAA,yBACA6I,SAAA,KACA2nB,eAAA,kBACMC,qBAAN,4BACIC,oBAAJ,0BAEIC,eAAgB,OAChBC,yBAAJ,qBACIC,0BAAJ,8DAEIC,0BAAJ,kBACIC,4BAAJ,kBACIC,iBAAJ,uCACIC,oBAAJ,2CAEArxB,gBAAAC,EAAAA,wBAAAC,OACAL,cAAAC,EAAAA,kBAAAC,SAIAywB,EAAA7vB,gBACA2wB,kBAAAhyB,KAAAuB,EAAAA,sEAGA2vB,GASAR,IASAuB,GAAA,SAAA9vB,6EAoByC8vB,EAAzC9wB,y1EAbAN,MACAC,MAAA,6CACAoxB,iDAAA,qBAEExxB,gBAAFC,EAAAA,wBAAAC,OACEL,cAAFC,EAAAA,kBAAAC,SAIAwxB,EAAA5wB,gBACAovB,WAAAzwB,KAAA0P,EAAAA,gBAAAxP,MAAAgxB,MACApT,WAAA9d,KAAA2wB,EAAAA,aAAAzwB,MAAA6wB,cCtGAoB,GAAA,yBAPA,sBAgBAnyB,KAACoL,EAAAA,SAADlL,OACEmL,SACEC,EAAAA,aACAC,GACA6mB,EAAAA,qBACAC,EAAAA,gBAEF1mB,SACEJ,GACAmlB,GACAF,GACAI,GACAM,GACAe,GACAlB,IAEFhlB,cACE2kB,GACAF,GACAI,GACAM,GACAe,GACAlB,QAtCJoB,KC2CIG,GAAe,EAENC,IACXxjB,QAASyjB,EAAAA,kBACTxjB,YAAakP,EAAAA,WAAW,WAAM,MAAAuU,MAC9BC,OAAO,GAITC,GAAA,WACE,QAAFA,GAEWC,EAEAC,GAFA30B,KAAX00B,OAAWA,EAEA10B,KAAX20B,QAAWA,EAzDX,MAAAF,MA8DAG,GAAA,WACE,QAAFA,GAAqBj0B,GAAAX,KAArBW,YAAqBA,EA/DrB,MAAAi0B,MAiEaC,GACXzpB,EAAcvH,EAAWC,EAAmBuH,EAAcupB,KAAsB,0BA8FhF,QAAFL,GAAc5yB,EAKA4M,EACQqjB,EACA9wB,EACe2K,EACfhC,GATpB,GAAFzF,GAWIC,EAXJC,KAAAlE,KAWU2B,IAXV3B,WAMsBgE,GAAtB4tB,cAAsBA,EACA5tB,EAAtBlD,mBAAsBA,EAEAkD,EAAtByF,QAAsBA,EA/EtBzF,EAAA8wB,SAAqB,SAACC,KACtB/wB,EAAAgxB,UAAsB,aAEtBhxB,EAAAixB,UAA8B,uBAAsBb,GACpDpwB,EAAAkxB,WAA+B,EAC/BlxB,EAAAmxB,UAA8B,EAM9BnxB,EAAAoxB,WAAsB,EAkBtBpxB,EAAA4R,KAAiC,KAGjC5R,EAAAiqB,GAAwBjqB,EAAKixB,UAG7BjxB,EAAAqxB,cAA+C,QAK/CrxB,EAAAsxB,UAAkD,KAGlDtxB,EAAAuxB,eAA4D,KAgB5DvxB,EAAAkG,OAAM,GAAIrF,GAAAA,aAuBNb,EAAKyH,SAAWC,SAASD,IAAa,IAd1C,MAvEoCvG,GAApCqvB,EAAAtwB,GAkDAkB,OAAAC,eAAMmvB,EAANl0B,UAAA,gBAAA,WAA4B,MAAOL,MAAKk1B,eACtC,SAAa7vB,GAASrF,KAAKk1B,UAAY5vB,EAAAA,sBAAsBD,oCAI/DF,OAAAC,eAAMmvB,EAANl0B,UAAA,eAAA,WAA2B,MAAOL,MAAKm1B,cACrC,SAAY9vB,GACVrF,KAAKm1B,SAAW7vB,EAAAA,sBAAsBD,GACtCrF,KAAKc,mBAAmBC,gDAO1BoE,OAAFC,eAAMmvB,EAANl0B,UAAA,eAAE,WAAwB,OAAUL,KAAKiuB,IAAMjuB,KAAKi1B,WAApD,0CAuBEV,EAAFl0B,UAAA0G,mBAAE,WAAA,GAAF/C,GAAAhE,IACIA,MAAK4xB,cACFE,QAAQ9xB,KAAKw1B,cAAc/0B,eAC3ByG,UAAU,SAAAuuB,GAAe,MAAAzxB,GAAK0xB,oBAAoBD,MAGvDlB,EAAFl0B,UAAA8G,YAAE,WACEnH,KAAK4xB,cAAcI,eAAehyB,KAAKw1B,cAAc/0B,gBAIvD8zB,EAAFl0B,UAAAs1B,eAAE,SAAenuB,GASb,GALAA,EAAMouB,kBAKF51B,KAAKo1B,UAEP,YADAp1B,KAAKw1B,cAAc/0B,cAAck0B,QAAU30B,KAAK20B,QAKlD30B,MAAK20B,QAAU30B,KAAKw1B,cAAc/0B,cAAck0B,QAIhD30B,KAAK61B,oBAIPtB,EAAFl0B,UAAAy1B,cAAE,SAActuB,GAQZA,EAAMouB,mBAIRrB,EAAFl0B,UAAA01B,WAAE,SAAW1wB,GACTrF,KAAK20B,UAAYtvB,GAInBkvB,EAAFl0B,UAAA21B,iBAAE,SAAiBC,GACfj2B,KAAK80B,SAAWmB,GAIlB1B,EAAFl0B,UAAA61B,kBAAE,SAAkBD,GAChBj2B,KAAKg1B,UAAYiB,GAInB1B,EAAFl0B,UAAA81B,iBAAE,SAAiBC,GACfp2B,KAAK8I,SAAWstB,EAChBp2B,KAAKc,mBAAmBC,gBAI1BwzB,EAAFl0B,UAAA2gB,MAAE,WACEhhB,KAAK4xB,cAAcyE,SAASr2B,KAAKw1B,cAAc/0B,cAAe,aAIhE8zB,EAAFl0B,UAAAi2B,OAAE,WACEt2B,KAAK20B,SAAW30B,KAAK20B,SAIfJ,EAAVl0B,UAAAq1B,oBAAA,SAA8BD,GAErBz1B,KAAKu2B,cAAgC,aAAhBd,EAGdA,IACVz1B,KAAKg1B,YAGDh1B,KAAKu2B,eACPv2B,KAAKu2B,aAAaC,UAClBx2B,KAAKu2B,aAAe,OAPtBv2B,KAAKu2B,aAAev2B,KAAKy2B,QAAQC,OAAO,EAAG,GAAIC,YAAY,KAevDpC,EAAVl0B,UAAAw1B,4BACI71B,KAAK80B,SAAS90B,KAAK20B,SACnB30B,KAAKkK,OAAO7D,KAAK,GAAIouB,IAAqBz0B,KAAMA,KAAK20B,WAI/CJ,EAAVl0B,UAAAu2B,mBAAA,SAA6BC,GACzB,GAAIC,GAAcD,EAAW72B,KAAK+2B,eAAkB,GAOpD,OAJI/2B,MAAKg3B,mBACPF,GAAc,KAGT/wB,KAAKG,IAAI,EAAGH,KAAKC,IAAI8wB,EAAY,OAG1CvC,EAAFl0B,UAAA42B,aAAE,WACE,IAAKj3B,KAAK8I,WAAa9I,KAAKo1B,UAAW,CACrC,GAAM8B,GAAUl3B,KAAKm3B,SAAS12B,aAC9BT,MAAK+2B,eAAiB/2B,KAAKo3B,YAAY32B,cAAc42B,YAAcH,EAAQG,YAC3EH,EAAQzxB,UAAUG,IAAI,gBAEtB5F,KAAKg3B,iBAAmBh3B,KAAK20B,QAC7B30B,KAAKo1B,WAAY,IAIrBb,EAAFl0B,UAAAi3B,QAAE,SAAQ9vB,GACN,GAAIxH,KAAKo1B,UAAW,CAClBp1B,KAAKu3B,gBAAkBv3B,KAAK42B,mBAAmBpvB,EAAMgwB,OAErD,IAAMC,GAASz3B,KAAKu3B,gBAAkB,IAAOv3B,KAAK+2B,cAClD/2B,MAAKm3B,SAAS12B,cAAc6H,MAAM8M,UAAY,eAAeqiB,EAAnE,cAIElD,EAAFl0B,UAAAq3B,WAAE,WAAA,GAAF1zB,GAAAhE,IACI,IAAIA,KAAKo1B,UAAW,CAClB,GAAMuC,GAAkB33B,KAAKu3B,gBAAkB,EAE3CI,KAAoB33B,KAAK20B,UAC3B30B,KAAK20B,QAAUgD,EACf33B,KAAK61B,oBAKP71B,KAAKyJ,QAAQO,kBAAkB,WAAM,MAAAwb,YAAW,WAC1CxhB,EAAKoxB,YACPpxB,EAAKoxB,WAAY,EACjBpxB,EAAKmzB,SAAS12B,cAAcgF,UAAUC,OAAO,gBAI7C1B,EAAKmzB,SAAS12B,cAAc6H,MAAM8M,UAAY,UAOtDmf,EAAFl0B,UAAAu3B,mBAAE,WAIE53B,KAAKc,mBAAmBC,+BA5Q5Be,KAACC,EAAAA,UAADC,OAAAC,SAAA,mBACEgH,SAAU,iBACVtG,MACFC,MAAA,mBACMi1B,OAAN,KACIC,sBAAJ,UACIC,uBAAJ,WACIC,wCAAJ,6BAEA91B,SAAA,ukCACAC,QAAA,uoEACEyO,WAAFyjB,IACEjyB,QAAS,WAAX,gBAAA,QAAA,YACEC,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,qFAlEAZ,KAAEm2B,EAAAA,eAPFn2B,KAAQmJ,EAAAA,oBAFRnJ,SAAQgL,GAAR7J,aAAAnB,KAAAmL,EAAAA,UAAAjL,MAAA,gBAOAF,KAAEkJ,EAAAA,UAUFupB,EAAApxB,0HAwFAyS,OAAA9T,KAAAuB,EAAAA,QAGA4qB,KAAAnsB,KAAAuB,EAAAA,QAGAgyB,gBAAAvzB,KAAAuB,EAAAA,QAGAiyB,YAAAxzB,KAAAuB,EAAAA,MAAArB,MAAA,gBAGAuzB,iBAAAzzB,KAAAuB,EAAAA,MAAArB,MAAA,qBAKAk2B,WAAAp2B,KAAAuB,EAAAA,QAGAsxB,UAAA7yB,KAAAuB,EAAAA,QAGA6G,SAAApI,KAAAyB,EAAAA,SAKAiyB,gBAAG1zB,KAAHsB,EAAAA,UAAApB,MAAA,WAOAy0B,UAAA30B,KAAAsB,EAAAA,UAAApB,MAAAm2B,OAUA5D,mCC9JA,sBAeAzyB,KAACoL,EAAAA,SAADlL,OACEmL,SAAUI,GAAiBF,GAAiBG,EAAAA,iBAC5CC,SAAU8mB,GAAgBlnB,IAC1BQ,cAAe0mB,IACf3jB,YACGC,QAASoT,EAAAA,sBAAuBC,SAAUC,SApB/CiU,KpBoEaC,IACXxnB,QAASyjB,EAAAA,kBACTxjB,YAAakP,EAAAA,WAAW,WAAM,MAAAyD,MAC9B+Q,OAAO,GAIT8D,GAAA,yBA3EA,MAAAA,MAsFAC,GAAA,WACE,QAAFA,GAAqB53B,GAAAX,KAArBW,YAAqBA,EAvFrB,MAAA43B,MAyFaC,GACXptB,EAAcvH,EAAWwH,EAAcktB,IAAgB,0BAmVvD,QAAF9U,GAAc9hB,EACQiwB,EACA9wB,EACY0I,EACGiC,GAJnC,GAAFzH,GAKIC,EALJC,KAAAlE,KAKU2B,IALV3B,WACsBgE,GAAtB4tB,cAAsBA,EACA5tB,EAAtBlD,mBAAsBA,EACYkD,EAAlCwF,KAAkCA,EAjSlCxF,EAAAy0B,SAAoB,EAYpBz0B,EAAA00B,KAAyB,IAiBzB10B,EAAA20B,KAAyB,EAezB30B,EAAA40B,MAA0B,EAM1B50B,EAAA60B,aAAiC,EAiBjC70B,EAAA80B,cAA2C,EAoB3C90B,EAAA+0B,OAAkC,KAelC/0B,EAAAg1B,WAAsB,EAGtBh1B,EAAAkG,OAA6D,GAAIrF,GAAAA,aAGjEb,EAAA+f,MAA4D,GAAIlf,GAAAA,aA6BhEb,EAAAgxB,UAAyB,aAIzBhxB,EAAAi1B,SAA6B,EAM7Bj1B,EAAAk1B,YAAwB,EAMxBl1B,EAAAkI,WAAuB,EAqGvBlI,EAAAm1B,qBAAyC,EAGzCn1B,EAAAo1B,kBAAiD,KAEjDp1B,EAAAq1B,8BAAgE,aAMhEr1B,EAAAs1B,uBAAmCh1B,EAAAA,aAAaC,MA4B5CP,EAAKyH,SAAWC,SAASD,IAAa,IAtB1C,MAvR+BvG,GAA/Bue,EAAAxf,GAIAkB,OAAAC,eAAMqe,EAANpjB,UAAA,cAAA,WAA0B,MAAOL,MAAKy4B,aACpC,SAAWpzB,GACTrF,KAAKy4B,QAAUnzB,EAAAA,sBAAsBD,oCAMzCF,OAAAC,eAAMqe,EAANpjB,UAAA,WAAA,WAAsB,MAAOL,MAAK04B,UAChC,SAAQrV,GACNrjB,KAAK04B,KAAOnzB,EAAAA,qBAAqB8d,EAAGrjB,KAAK04B,MACzC14B,KAAKi5B,SAAWj5B,KAAKu5B,qBAAqBv5B,KAAK+4B,QAG/C/4B,KAAKc,mBAAmBC,gDAM5BoE,OAAAC,eAAMqe,EAANpjB,UAAA,WAAA,WAAsB,MAAOL,MAAK24B,UAChC,SAAQtV,GACNrjB,KAAK24B,KAAOpzB,EAAAA,qBAAqB8d,EAAGrjB,KAAK24B,MAGrB,OAAhB34B,KAAK+4B,SACP/4B,KAAKqF,MAAQrF,KAAK24B,MAEpB34B,KAAKi5B,SAAWj5B,KAAKu5B,qBAAqBv5B,KAAK+4B,QAG/C/4B,KAAKc,mBAAmBC,gDAM5BoE,OAAAC,eAAMqe,EAANpjB,UAAA,YAAA,WAAuB,MAAOL,MAAK44B,WACjC,SAASvV,GACPrjB,KAAK44B,MAAQrzB,EAAAA,qBAAqB8d,EAAGrjB,KAAK44B,OAEtC54B,KAAK44B,MAAQ,GAAM,IACrB54B,KAAKw5B,gBAAkBx5B,KAAK44B,MAAMa,WAAWC,MAAM,KAAKC,MAAOn4B,QAIjExB,KAAKc,mBAAmBC,gDAM5BoE,OAAAC,eAAMqe,EAANpjB,UAAA,kBAAA,WAA8B,MAAOL,MAAK64B,iBACxC,SAAexzB,GAAkBrF,KAAK64B,YAAcvzB,EAAAA,sBAAsBD,oCAQ5EF,OAAAC,eAAMqe,EAANpjB,UAAA,oBAAA,WAAuB,MAAOL,MAAK84B,mBACjC,SAAiBzzB,GAEbrF,KAAK84B,cADO,SAAVzzB,EACmB,OACK,gBAAVA,IAAuC,gBAAVA,GACxBE,EAAAA,qBAAqBF,EAAOrF,KAA4B,eAExD,mCAO3BmF,OAAAC,eAAMqe,EAANpjB,UAAA,wBAKI,MAHoB,QAAhBL,KAAK+4B,SACP/4B,KAAKqF,MAAQrF,KAAK24B,MAEb34B,KAAK+4B,YAEd,SAAU1V,GACJA,IAAMrjB,KAAK+4B,SACb/4B,KAAK+4B,OAASxzB,EAAAA,qBAAqB8d,GACnCrjB,KAAKi5B,SAAWj5B,KAAKu5B,qBAAqBv5B,KAAK+4B,QAG/C/4B,KAAKc,mBAAmBC,iDAc9BoE,OAAAC,eAAMqe,EAANpjB,UAAA,gBAAA,WAA4B,MAAOL,MAAKg5B,eACtC,SAAa3zB,GACXrF,KAAKg5B,UAAY1zB,EAAAA,sBAAsBD,oCAWzCF,OAAFC,eAAMqe,EAANpjB,UAAA,oBAAE,WACE,MAAIL,MAAK6jB,YACA7jB,KAAK6jB,YAAY7jB,KAAKqF,OAM3BrF,KAAKw5B,iBAAmBx5B,KAAKqF,OAASrF,KAAKqF,MAAQ,GAAM,EACpDrF,KAAKqF,MAAMu0B,QAAQ55B,KAAKw5B,iBAG1Bx5B,KAAKqF,OAAS,mCAIvBoe,EAAFpjB,UAAA2gB,MAAE,WACEhhB,KAAK65B,qBAIPpW,EAAFpjB,UAAAy5B,KAAE,WACE95B,KAAK+5B,oBAOP50B,OAAFC,eAAMqe,EAANpjB,UAAA,eAAE,WAAwB,MAAOL,MAAKg6B,OAAOh6B,KAAKi5B,2CAmBhD9zB,OAAFC,eAAMqe,EAANpjB,UAAA,mBAAE,WAGE,MAAOL,MAAK8jB,UAAY9jB,KAAKi6B,OAASj6B,KAAKi6B,wCAK7C90B,OAAFC,eAAMqe,EAANpjB,UAAA,mBAAE,WACE,MAAwB,KAAjBL,KAAKk6B,yCAOd/0B,OAAFC,eAAMqe,EAANpjB,UAAA,iBAAE,WACE,MAAIL,MAAK8I,SAvQc,EA0QnB9I,KAAKm6B,cAAgBn6B,KAAK2jB,WACrB3jB,KAAKkM,UArQiB,GAHG,EA0Q3B,mCAIT/G,OAAFC,eAAMqe,EAANpjB,UAAA,8BAAE,WACE,GAAI+5B,GAAOp6B,KAAK8jB,SAAW,IAAM,GAEjC,QACE1O,UAAa,YAAYglB,EAA/B,KAFep6B,KAAKq6B,mBAAqB,IAAM,IAEDr6B,KAAKs6B,UAAnD,YAAwEF,EAAxE,KAAgF,EAAIp6B,KAAKk6B,SAAzF,sCAKE/0B,OAAFC,eAAMqe,EAANpjB,UAAA,wBAAE,WACE,GAAI+5B,GAAOp6B,KAAK8jB,SAAW,IAAM,GAEjC,QACE1O,UAAa,YAAYglB,EAA/B,KAFep6B,KAAKq6B,mBAAqB,GAAK,KAEAr6B,KAAKs6B,UAAnD,YAAwEF,EAAxE,IAAgFp6B,KAAKk6B,QAArF,sCAKE/0B,OAAFC,eAAMqe,EAANpjB,UAAA,6BAAE,WAME,OACE+U,UAAa,aANJpV,KAAK8jB,SAAW,IAAM,KAMrC,KAHgB9jB,KAAK8jB,UAA+B,OAAnB9jB,KAAK2tB,WAA2B,IAAL,IAC3C3tB,KAAKm5B,qBAAuB,EAAI,IAEjD,uCAKEh0B,OAAFC,eAAMqe,EAANpjB,UAAA,oBAAE,WACE,GAAIk6B,GAAuC,IAA5Bv6B,KAAKm5B,qBAChBqB,EAAiBx6B,KAAK8jB,SAAW,OAAOyW,EAAhD,IAAiEA,EAAjE,QACQH,EAAOp6B,KAAK8jB,SAAW,IAAM,IAI7B2W,EAAQz6B,KAAK8jB,UAA+B,OAAnB9jB,KAAK2tB,WAA4B,GAAN,IACpD+M,EAAU16B,KAAK8jB,UAA+B,OAAnB9jB,KAAK2tB,WAA0C,GAApB,kBACtDxrB,GACFq4B,eAAkBA,EAElBplB,UAAa,0BAA0BglB,EAA7C,IAAqDK,EAAOF,EAAW,EAAvE,KAA6EG,EAGzE,IAAI16B,KAAKm6B,aAAen6B,KAAKs6B,UAAW,CAItCn4B,EAAO,WAHInC,KAAK8jB,SACX9jB,KAAK26B,YAAc,SAAW,MAC9B36B,KAAK26B,YAAc,QAAU,SACJ36B,KAAKs6B,UAAzC,KAGI,MAAOn4B,oCAGTgD,OAAFC,eAAMqe,EAANpjB,UAAA,6BAAE,WAOE,OACE+U,UAAa,aAPJpV,KAAK8jB,SAAW,IAAM,KAOrC,KAFoE,MADxC,OAAnB9jB,KAAK2tB,YAAwB3tB,KAAK8jB,SAAgC9jB,KAAK26B,aAAxB36B,KAAK26B,aAC5B36B,KAAKk6B,QAAU,EAAIl6B,KAAKk6B,SAEzD,uCA4BA/0B,OAAAC,eAAcqe,EAAdpjB,UAAA,qCACI,MAA2B,OAAnBL,KAAK2tB,YAAwB3tB,KAAK8jB,SAAgC9jB,KAAK26B,aAAxB36B,KAAK26B,6CAIhEx1B,OAAAC,eAAcqe,EAAdpjB,UAAA,6BACI,MAAQL,MAAKwJ,MAA2B,OAAnBxJ,KAAKwJ,KAAKnE,MAAkB,MAAQ,uCAa3Doe,EAAFpjB,UAAAse,SAAE,WAAA,GAAF3a,GAAAhE,IACIA,MAAK4xB,cACAE,QAAQ9xB,KAAKW,YAAYF,eAAe,GACxCyG,UAAU,SAACJ,GACV9C,EAAKkI,YAAcpF,GAAqB,aAAXA,EAC7B9C,EAAKlD,mBAAmBunB,kBAE1BroB,KAAKwJ,OACPxJ,KAAKs5B,uBAAyBt5B,KAAKwJ,KAAKU,OAAOhD,UAAU,WACvDlD,EAAKlD,mBAAmBC,mBAK9B0iB,EAAFpjB,UAAA8G,YAAE,WACEnH,KAAK4xB,cAAcI,eAAehyB,KAAKW,YAAYF,eACnDT,KAAKs5B,uBAAuBlyB,eAG9Bqc,EAAFpjB,UAAAu6B,cAAE,WACM56B,KAAK8I,WAMT9I,KAAKo5B,kBAAoBp5B,KAAK66B,uBAC9B76B,KAAK86B,+BAGPrX,EAAFpjB,UAAA06B,SAAE,SAASvzB,GACP,IAAIxH,KAAK8I,SAAT,CAIA,GAAIkyB,GAAWh7B,KAAKqF,KACpBrF,MAAKk5B,YAAa,EAClBl5B,KAAK65B,oBACL75B,KAAKi7B,0BAA0BC,EAAG1zB,EAAM2zB,QAASC,EAAG5zB,EAAM6zB,UAGtDL,GAAYh7B,KAAKqF,QACnBrF,KAAKs7B,kBACLt7B,KAAK61B,sBAITpS,EAAFpjB,UAAAk7B,SAAE,SAAS/zB,GACP,IAAIxH,KAAK8I,SAAT,CAMK9I,KAAKk5B,YACRl5B,KAAKw7B,cAAc,MAIrBh0B,EAAM6E,gBAEN,IAAI2uB,GAAWh7B,KAAKqF,KACpBrF,MAAKi7B,0BAA0BC,EAAG1zB,EAAMi0B,OAAOP,EAAGE,EAAG5zB,EAAMi0B,OAAOL,IAG9DJ,GAAYh7B,KAAKqF,OACnBrF,KAAKs7B,oBAIT7X,EAAFpjB,UAAAm7B,cAAE,SAAch0B,GACRxH,KAAK8I,UAAY9I,KAAKk5B,aAK1Bl5B,KAAK46B,gBAEL56B,KAAKk5B,YAAa,EAClBl5B,KAAK65B,oBACL75B,KAAK07B,mBAAqB17B,KAAKqF,MAE3BmC,IACFxH,KAAKi7B,0BAA0BC,EAAG1zB,EAAMi0B,OAAOP,EAAGE,EAAG5zB,EAAMi0B,OAAOL,IAClE5zB,EAAM6E,oBAIVoX,EAAFpjB,UAAAs7B,YAAE,WACE37B,KAAKk5B,YAAa,EAEdl5B,KAAK07B,oBAAsB17B,KAAKqF,OAAUrF,KAAK8I,UACjD9I,KAAK61B,mBAEP71B,KAAK07B,mBAAqB,MAG5BjY,EAAFpjB,UAAAu7B,SAAE,WAGE57B,KAAKo5B,kBAAoBp5B,KAAK66B,uBAC9B76B,KAAK86B,8BAGPrX,EAAFpjB,UAAAw7B,QAAE,WACE77B,KAAKg1B,aAGPvR,EAAFpjB,UAAAy7B,WAAE,SAAWt0B,GACT,IAAIxH,KAAK8I,SAAT,CAEA,GAAIkyB,GAAWh7B,KAAKqF,KAEpB,QAAQmC,EAAMua,SACZ,IAAKga,GAAAA,QACH/7B,KAAKg8B,WAAW,GAChB,MACF,KAAKC,GAAAA,UACHj8B,KAAKg8B,YAAY,GACjB,MACF,KAAK1Z,GAAAA,IACHtiB,KAAKqF,MAAQrF,KAAKkG,GAClB,MACF,KAAKkc,GAAAA,KACHpiB,KAAKqF,MAAQrF,KAAKgG,GAClB,MACF,KAAKkc,GAAAA,WAQHliB,KAAKg8B,WAA8B,OAAnBh8B,KAAK2tB,WAAsB,GAAK,EAChD,MACF,KAAKuO,GAAAA,SACHl8B,KAAKg8B,WAAW,EAChB,MACF,KAAKha,GAAAA,YAEHhiB,KAAKg8B,WAA8B,OAAnBh8B,KAAK2tB,YAAuB,EAAI,EAChD,MACF,KAAKwO,GAAAA,WACHn8B,KAAKg8B,YAAY,EACjB,MACF,SAGE,OAGAhB,GAAYh7B,KAAKqF,QACnBrF,KAAKs7B,kBACLt7B,KAAK61B,oBAGP71B,KAAKk5B,YAAa,EAClB1xB,EAAM6E,mBAGRoX,EAAFpjB,UAAA+7B,SAAE,WACEp8B,KAAKk5B,YAAa,GAIZzV,EAAVpjB,UAAA27B,WAAA,SAAqBK,GACjBr8B,KAAKqF,MAAQrF,KAAKg6B,QAAQh6B,KAAKqF,OAAS,GAAKrF,KAAK0jB,KAAO2Y,EAAUr8B,KAAKgG,IAAKhG,KAAKkG,MAI5Eud,EAAVpjB,UAAA46B,yBAAA,SAAmCqB,GAC/B,GAAKt8B,KAAKo5B,kBAAV,CAIA,GAAIlW,GAASljB,KAAK8jB,SAAW9jB,KAAKo5B,kBAAkBjN,IAAMnsB,KAAKo5B,kBAAkBpb,KAC7Eue,EAAOv8B,KAAK8jB,SAAW9jB,KAAKo5B,kBAAkB7wB,OAASvI,KAAKo5B,kBAAkBnb,MAC9Eue,EAAex8B,KAAK8jB,SAAWwY,EAAIlB,EAAIkB,EAAIpB,EAG3ChB,EAAUl6B,KAAKg6B,QAAQwC,EAAetZ,GAAUqZ,EAUpD,IARIv8B,KAAKq6B,qBACPH,EAAU,EAAIA,GAOA,IAAZA,EACFl6B,KAAKqF,MAAQrF,KAAKgG,QACb,IAAgB,IAAZk0B,EACTl6B,KAAKqF,MAAQrF,KAAKkG,QACb,CACL,GAAIu2B,GAAaz8B,KAAK08B,gBAAgBxC,GAIlCyC,EAAe52B,KAAK62B,OAAOH,EAAaz8B,KAAKgG,KAAOhG,KAAK0jB,MAAQ1jB,KAAK0jB,KAAO1jB,KAAKgG,GAIlFhG,MAAKw5B,kBACPmD,EAAeE,WAAWF,EAAa/C,QAAQ55B,KAAKw5B,mBAItDx5B,KAAKqF,MAAQrF,KAAKg6B,OAAO2C,EAAc38B,KAAKgG,IAAKhG,KAAKkG,QAKlDud,EAAVpjB,UAAAw1B,4BACI71B,KAAKq5B,8BAA8Br5B,KAAKqF,OACxCrF,KAAKkK,OAAO7D,KAAKrG,KAAKoG,uBAIhBqd,EAAVpjB,UAAAi7B,2BACIt7B,KAAK+jB,MAAM1d,KAAKrG,KAAKoG,uBAIfqd,EAAVpjB,UAAAy6B,sCACI,GAAK96B,KAAK4jB,cAAiB5jB,KAAKo5B,kBAIhC,GAAyB,QAArBp5B,KAAK4jB,aAAwB,CAC/B,GAAIkZ,GAAY98B,KAAK8jB,SAAW9jB,KAAKo5B,kBAAkB7wB,OAASvI,KAAKo5B,kBAAkBnb,MACnF8e,EAAgBD,EAAY98B,KAAK0jB,MAAQ1jB,KAAKkG,IAAMlG,KAAKgG,KACzDg3B,EAAej3B,KAAKsX,KA3mBG,GA2mB6B0f,GACpDE,EAAgBD,EAAeh9B,KAAK0jB,IACxC1jB,MAAKm5B,qBAAuB8D,EAAgBH,MAE5C98B,MAAKm5B,qBAAuBn5B,KAAK4jB,aAAe5jB,KAAK0jB,MAAQ1jB,KAAKkG,IAAMlG,KAAKgG,MAKzEyd,EAAVpjB,UAAA+F,mBAAA,SAA6Bf,OAA7B,KAAAA,IAA6BA,EAAQrF,KAAKqF,MACtC,IAAImC,GAAQ,GAAI8wB,GAKhB,OAHA9wB,GAAMktB,OAAS10B,KACfwH,EAAMnC,MAAQA,EAEPmC,GAIDic,EAAVpjB,UAAAk5B,qBAAA,SAA+Bl0B,GAC3B,QAASA,GAAS,GAAKrF,KAAKgG,MAAQhG,KAAKkG,IAAMlG,KAAKgG,MAI9Cyd,EAAVpjB,UAAAq8B,gBAAA,SAA0B5F,GACtB,MAAO92B,MAAKgG,IAAM8wB,GAAc92B,KAAKkG,IAAMlG,KAAKgG,MAI1Cyd,EAAVpjB,UAAA25B,OAAA,SAAiB30B,EAAeW,EAASE,GACrC,WADJ,KAAAF,IAAgCA,EAAhC,OAAA,KAAAE,IAAyCA,EAAzC,GACWH,KAAKG,IAAIF,EAAKD,KAAKC,IAAIX,EAAOa,KAQ/Bud,EAAVpjB,UAAAw6B,gCACI,MAAO76B,MAAKgkB,eAAiBhkB,KAAKgkB,eAAevjB,cAAcy8B,wBAA0B,MAOnFzZ,EAAVpjB,UAAAw5B,6BACI75B,KAAKW,YAAYF,cAAcugB,SAIzByC,EAAVpjB,UAAA05B,4BACI/5B,KAAKW,YAAYF,cAAcq5B,QAOjCrW,EAAFpjB,UAAA01B,WAAE,SAAW1wB,GACTrF,KAAKqF,MAAQA,GAQfoe,EAAFpjB,UAAA21B,iBAAE,SAAiBC,GACfj2B,KAAKq5B,8BAAgCpD,GAQvCxS,EAAFpjB,UAAA61B,kBAAE,SAAkBD,GAChBj2B,KAAKg1B,UAAYiB,GAQnBxS,EAAFpjB,UAAA81B,iBAAE,SAAiBC,GACfp2B,KAAK8I,SAAWstB,kBAvpBpBt0B,KAACC,EAAAA,UAADC,OAAAC,SAAA,aACEgH,SAAU,YACV2H,WAAFynB,IACE11B,MACFw6B,UAAA,aACMC,SAAN,YACIxwB,UAAW,mBACXywB,YAAJ,qBACIC,UAAW,aACXlM,eAAJ,kBACImM,UAAW,mBACXC,aAAc,gBACdC,eAAJ,wBACI76B,MAAJ,aACI2N,KAAJ,SACImtB,aAAJ,WACIlxB,uBAAJ,WACImxB,uBAAwB,MACxBC,uBAAwB,MACxBC,uBAAwB,QACxBC,0BAAJ,uCACIC,8BAA+B,WAC/BC,+BAAJ,eACIC,gCAAJ,YACIC,mCAAJ,cACIC,6BAAJ,aACIC,yCAAJ,aACIC,8BAAJ,WACIC,+BAAJ,cACIC,oCAAJ,uDAEAr8B,SAAA,ipBACAC,QAAA;+5NACEC,QAAF,WAAA,QAAA,YACEC,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAA2CC,yFAzG3CZ,KAAEmJ,EAAAA,oBAlBFnJ,KAAQkB,EAAAA,eAARC,aAAAnB,KAAAoB,EAAAA,aAgBApB,SAAEgL,GAAF7J,aAAAnB,KAAAmL,EAAAA,UAAAjL,MAAA,iBAyZAyhB,EAAAtgB,6DAvSA6C,MAAAlE,KAAAuB,EAAAA,QAQAqgB,OAAA5hB,KAAAuB,EAAAA,QAYAsgB,aAAA7hB,KAAAuB,EAAAA,QAiBAugB,eAAA9hB,KAAAuB,EAAAA,QAeAgC,QAAAvD,KAAAuB,EAAAA,QASAwgB,cAAA/hB,KAAAuB,EAAAA,QAcAygB,WAAAhiB,KAAAuB,EAAAA,QAwBA6G,SAAApI,KAAAyB,EAAAA,SAGAwgB,QAAAjiB,KAAAyB,EAAAA,SAQAygB,iBAAAliB,KAAAsB,EAAAA,UAAApB,MAAA,oBAsKAyhB,mCC9ZA,sBAeA3hB,KAACoL,EAAAA,SAADlL,OACEmL,SAAUC,EAAAA,aAAcC,IACxBI,SAAUgW,GAAWpW,IACrBQ,cAAe4V,IACf7S,YAAaC,QAASoT,EAAAA,sBAAuBC,SAAUC,SAnBzDC,KCsBAC,GAAA,WA4BE,QAAFA,GAAcC,EACQC,GADpB,GAAFvgB,GAAAhE,IACsBA,MAAtBukB,YAAsBA,EAlBtBvkB,KAAAwkB,gBAAqC,GAAI5a,GAAAA,QAGzC5J,KAAAykB,aAAkC,GAAI7a,GAAAA,QAGtC5J,KAAA0kB,UAA+B,GAAI9a,GAAAA,QASnC5J,KAAA2kB,oBAA+B,EAI3B3kB,KAAKskB,kBAAoBA,EAEzBtkB,KAAK4kB,WAAW1d,UAAU,WAAM,MAAAlD,GAAK6gB,YACrCP,EAAkBQ,QAAQ5d,UAAU,WAAM,MAAAlD,GAAK+gB,mBAvDnD,MA2DEV,GAAFhkB,UAAAwkB,QAAE,WACO7kB,KAAKwkB,gBAAgBQ,QACxBhlB,KAAKskB,kBAAkBW,OAEzBC,aAAallB,KAAKmlB,qBAIpBd,EAAFhkB,UAAA+kB,kBAAE,WACOplB,KAAK0kB,UAAUM,SAClBhlB,KAAK2kB,oBAAqB,EAC1B3kB,KAAK0kB,UAAU9Z,OACf5K,KAAK0kB,UAAU7Z,aAUnBwZ,EAAFhkB,UAAAglB,gBAAE,WACErlB,KAAKolB,qBAIPf,EAAFhkB,UAAAilB,cAAE,SAAcC,GAAd,GAAFvhB,GAAAhE,IACIA,MAAKmlB,mBAAqBK,WAAW,WAAM,MAAAxhB,GAAK6gB,WAAWU,IAI7DlB,EAAFhkB,UAAAolB,MAAE,WACOzlB,KAAKykB,aAAaO,SACrBhlB,KAAKykB,aAAa7Z,OAClB5K,KAAKykB,aAAa5Z,aAKdwZ,EAAVhkB,UAAA0kB,0BACI/kB,KAAKukB,YAAYmB,UAEZ1lB,KAAK0kB,UAAUM,QAClBhlB,KAAK0kB,UAAU7Z,WAGjB7K,KAAKwkB,gBAAgB5Z,MAAM+a,kBAAmB3lB,KAAK2kB,qBACnD3kB,KAAKwkB,gBAAgB3Z,WACrB7K,KAAK2kB,oBAAqB,GAI5BN,EAAFhkB,UAAAulB,eAAE,WACE,MAAO5lB,MAAKwkB,gBAAgBqB,gBAI9BxB,EAAFhkB,UAAAylB,YAAE,WACE,MAAO9lB,MAAKskB,kBAAkByB,UAIhC1B,EAAFhkB,UAAAukB,SAAE,WACE,MAAO5kB,MAAK0kB,UAAUmB,gBA3H1BxB,KCaa2B,GAAqB,GAAIzI,GAAAA,eAAoB,mBAW1D0I,GAAA,wBAEAjmB,KAAAkmB,WAAoC,YAGpClmB,KAAAmmB,oBAAiC,GAMjCnmB,KAAAulB,SAAsB,EAStBvlB,KAAAmR,KAAoB,KAGpBnR,KAAAomB,mBAAuD,SAGvDpmB,KAAAqmB,iBAAmD,SAlDnD,MAAAJ,MCkBaK,IAKXC,YAAarR,EAAAA,QAAQ,eACnBI,EAAAA,WAAW,UACThN,EAAAA,OAAOke,QAAS,MAChBjR,EAAAA,QAAWkR,GAAmBC,QAApC,IAA+CC,GAAgBC,oBAK7DC,cAAe3R,EAAAA,QAAQ,SACrBC,EAAAA,MAAM,8BAA+B7M,EAAAA,OAAO8M,UAAW,oBACvDE,EAAAA,WAAW,6DACTC,EAAAA,QAAWkR,GAAmBK,QADpC,IAC+CH,GAAgBI,qBAC3DzR,EAAAA,WAAW,8CACTC,EAAAA,QAAWkR,GAAmBO,SADpC,IACgDL,GAAgBM,sCCD9D,QAAFC,GACWC,EACqBhW,GADrBnR,KAAXmnB,YAAWA,EAEPnnB,KAAKmR,KAAOA,EADhB,MAKE+V,GAAF7mB,UAAA+mB,OAAE,WACEpnB,KAAKmnB,YAAY/B,qBAInBjgB,OAAFC,eAAM8hB,EAAN7mB,UAAA,iBAAE,WACE,QAASL,KAAKmR,KAAKiW,uDA9BvBtlB,KAACC,EAAAA,UAADC,OAAAC,SAAA,mBACEC,SAAU,iJACVC,QAAF,+VACEE,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,OACE0U,YAAakP,GAAfC,aACE5jB,MACF0kB,iBAAA,GACMzkB,MAAN,+HAWAskB,oBCkCE,QAAFI,GACY7d,EACA9I,EACAG,GAHV,GAAFkD,GAIIC,EAJJC,KAAAlE,OAAAA,WACYgE,GAAZyF,QAAYA,EACAzF,EAAZrD,YAAYA,EACAqD,EAAZlD,mBAAYA,EApBZkD,EAAAgT,YAAuB,EAMvBhT,EAAA8gB,QAAmC,GAAIlb,GAAAA,QAGvC5F,EAAA+hB,SAAoC,GAAInc,GAAAA,QAGxC5F,EAAAujB,gBAAoB,SATpB,MAL0CriB,GAA1CoiB,EAAArjB,GA2BEqjB,EAAFjnB,UAAAmnB,sBAAE,SAAyBC,GAGvB,MAFAznB,MAAK0nB,qBACL1nB,KAAK2nB,wBACE3nB,KAAK4nB,cAAcJ,sBAAsBC,IAIlDH,EAAFjnB,UAAAwnB,qBAAE,SAAwBJ,GAGtB,MAFAznB,MAAK0nB,qBACL1nB,KAAK2nB,wBACE3nB,KAAK4nB,cAAcC,qBAAqBJ,IAIjDH,EAAFjnB,UAAAynB,eAAE,SAAetgB,GACN,GAAAmZ,GAAXnZ,EAAAmZ,UAAsBF,EAAtBjZ,EAAAiZ,OAMI,KAJiB,SAAZA,GAAoC,SAAdE,GAAyBF,EAAQsH,WAAW,YACrE/nB,KAAKgoB,gBAGHvH,EAAQsH,WAAW,WAAY,CAGjC,GAAME,GAAUjoB,KAAK+lB,QAErB/lB,MAAKyJ,QAAQye,IAAI,WACfD,EAAQrd,OACRqd,EAAQpd,eAMdyc,EAAFjnB,UAAA8nB,MAAE,WACOnoB,KAAKgX,aACRhX,KAAKunB,gBAAkB,WAAWvnB,KAAKooB,eAAe/B,iBACtDrmB,KAAKc,mBAAmBunB,kBAK5Bf,EAAFjnB,UAAA4kB,KAAE,WAEE,MADAjlB,MAAKunB,gBAAkB,UAAUvnB,KAAKooB,eAAe/B,iBAC9CrmB,KAAK8kB,SAIdwC,EAAFjnB,UAAA8G,YAAE,WACEnH,KAAKgX,YAAa,EAClBhX,KAAKgoB,iBAOCV,EAAVjnB,UAAA2nB,mCACIhoB,MAAKyJ,QAAQ6e,iBAAiBzC,eAAezb,KAAK0I,EAAAA,KAAK,IAAI5L,UAAU,WACnElD,EAAK8gB,QAAQla,OACb5G,EAAK8gB,QAAQja,cAKTyc,EAAVjnB,UAAAsnB,iCACI,GAAM7d,GAAuB9J,KAAKW,YAAYF,cACxC8nB,EAAevoB,KAAKooB,eAAeI,UAErCD,KACEE,MAAMC,QAAQH,GAEhBA,EAAa9hB,QAAQ,SAAAkiB,GAAY,MAAA7e,GAAQrE,UAAUG,IAAI+iB,KAEvD7e,EAAQrE,UAAUG,IAAI2iB,IAIqB,WAA3CvoB,KAAKooB,eAAehC,oBACtBtc,EAAQrE,UAAUG,IAAI,wBAGqB,QAAzC5F,KAAKooB,eAAe/B,kBACtBvc,EAAQrE,UAAUG,IAAI,sBAKlB0hB,EAAVjnB,UAAAqnB,8BACI,GAAI1nB,KAAK4nB,cAAclI,cACrB,KAAMkJ,OAAM,4FApIlB9mB,KAACC,EAAAA,UAADC,OAAAC,SAAA,sBACEC,SAAU,8CACVC,QAAF,opBACEK,gBAAFC,EAAAA,wBAAAC,OACEL,cAAFC,EAAAA,kBAAAC,KACE6U,YAAFkP,GAAAO,eACElkB,MACF4N,KAAc,QACR3N,MAAN,0BACIimB,WAAJ,kBACIC,gBAAJ,sGAzBAhnB,KAAEmJ,EAAAA,qBALFqc,EAAAnkB,6EAwCAmkB,uBC1BayB,GACT,GAAIxL,GAAAA,eAAkC,iCACpCC,WAAY,OACZC,QAASuL,mBAkCb,QAAFC,GACcC,EACAC,EACAC,EACAC,EACwBC,EACeC,GALvCvpB,KAAdkpB,SAAcA,EACAlpB,KAAdmpB,MAAcA,EACAnpB,KAAdopB,UAAcA,EACAppB,KAAdqpB,oBAAcA,EACwBrpB,KAAtCspB,gBAAsCA,EACetpB,KAArDupB,eAAqDA,EAtBrDvpB,KAAAwpB,wBAAgE,KApDhE,MAuDErkB,QAAFC,eAAM6jB,EAAN5oB,UAAA,0BAAE,WACE,GAAMopB,GAASzpB,KAAKspB,eACpB,OAAOG,GAASA,EAAOC,mBAAqB1pB,KAAKwpB,6BAGnD,SAAuBnkB,GACjBrF,KAAKspB,gBACPtpB,KAAKspB,gBAAgBI,mBAAqBrkB,EAE1CrF,KAAKwpB,wBAA0BnkB,mCAmBnC4jB,EAAF5oB,UAAAspB,kBAAE,SAAqBC,EAA6BC,GAEhD,MAAO7pB,MAAK8pB,QAAQF,EAAWC,IAUjCZ,EAAF5oB,UAAA0pB,iBAAE,SAAiB7nB,EAA4B2nB,GAE3C,MAAO7pB,MAAK8pB,QAAQ5nB,EAAU2nB,IAShCZ,EAAF5oB,UAAA2pB,KAAE,SAAKC,EAAiB7C,EAAqByC,OAA7C,KAAAzC,IAAwBA,EAAxB,GAEI,IAAM8C,GAAVC,MAAwBnqB,KAAKupB,eAAmBM,EAO5C,OAHAK,GAAQ/Y,MAAQ8Y,QAApBA,EAA6B7C,OAA7BA,GACI8C,EAAQ/D,oBAAsB8D,EAEvBjqB,KAAK2pB,kBAAkBzC,GAAgBgD,IAMhDjB,EAAF5oB,UAAAwkB,QAAE,WACM7kB,KAAK0pB,oBACP1pB,KAAK0pB,mBAAmB7E,WAOpBoE,EAAV5oB,UAAA+pB,yBAAA,SAAmCC,EACAR,GAC/B,GAAMS,GAAkB,GAAIC,GAAAA,gBAAgBjD,GAAsBuC,EAAO3L,kBACnEsM,EAAmDH,EAAW1K,OAAO2K,EAE3E,OADAE,GAAaC,SAASrC,eAAiByB,EAChCW,EAAaC,UAMdxB,EAAV5oB,UAAAypB,QAAA,SAAqBY,EAA4CC,GAG7D,GAAMd,GAAVM,MAAuBnqB,KAAKupB,eAAmBoB,GACrCN,EAAarqB,KAAK4qB,eAAef,GACjCgB,EAAY7qB,KAAKoqB,yBAAyBC,EAAYR,GACtD1C,EAAc,GAAI9C,IAAyCwG,EAAWR,EAE5E,IAAIK,YAAmB/U,GAAAA,YAAa,CAClC,GAAM8R,GAAS,GAAI7I,GAAAA,eAAe8L,EAAO,MACvCI,UAAWjB,EAAO1Y,KAClBgW,YAARA,GAGMA,GAAYsD,SAAWI,EAAUhD,qBAAqBJ,OACjD,CACL,GAAMsD,GAAW/qB,KAAKgrB,gBAAgBnB,EAAQ1C,GACxCM,EAAS,GAAI8C,GAAAA,gBAAgBG,MAAS5d,GAAWie,GACjDE,EAAaJ,EAAUrD,sBAAyBC,EAGtDN,GAAYsD,SAAWQ,EAAWR,SAkBpC,MAZAzqB,MAAKqpB,oBAAoB6B,QAAQC,EAAAA,YAAYC,SAAShhB,KACpDC,EAAAA,UAAUggB,EAAWgB,cAAcjhB,KAAK0I,EAAAA,KAAK,MAC7C5L,UAAU,SAAAiO,GACNA,EAAMmW,QACRjB,EAAWkB,eAAe9lB,UAAUG,IAAI,yBAExCykB,EAAWkB,eAAe9lB,UAAUC,OAAO,2BAI/C1F,KAAKwrB,iBAAiBrE,EAAa0C,GACnC7pB,KAAK0pB,mBAAqBvC,EACnBnnB,KAAK0pB,oBAINT,EAAV5oB,UAAAmrB,iBAAA,SAA2BrE,EAAkC0C,aAEzD1C,GAAYvB,iBAAiB1e,UAAU,WAEjClD,EAAK0lB,oBAAsBvC,IAC7BnjB,EAAK0lB,mBAAqB,QAI1B1pB,KAAK0pB,oBAGP1pB,KAAK0pB,mBAAmB9D,iBAAiB1e,UAAU,WACjDigB,EAAY7C,kBAAkB6D,UAEhCnoB,KAAK0pB,mBAAmB7E,WAGxBsC,EAAY7C,kBAAkB6D,QAI5B0B,EAAOtE,UAAYsE,EAAOtE,SAAW,GACvC4B,EAAYrB,cAAc5e,UAAU,WAAM,MAAAigB,GAAY7B,cAAcuE,EAAe,YAGjFA,EAAO1D,qBACTnmB,KAAKmpB,MAAMsC,SAAS5B,EAAO1D,oBAAqB0D,EAAO3D,aAQnD+C,EAAV5oB,UAAAuqB,eAAA,SAAyBf,GACrB,GAAM6B,GAAgB,GAAIC,GAAAA,aAC1BD,GAAc9Q,UAAYiP,EAAOjP,SAEjC,IAAIgR,GAAmB5rB,KAAKkpB,SAAStiB,WAAWilB,SAE1CC,EAA6B,QAArBjC,EAAOjP,UACfmR,EAC0B,SAA9BlC,EAAOzD,oBACwB,UAA9ByD,EAAOzD,qBAAmC0F,GACZ,QAA9BjC,EAAOzD,oBAAgC0F,EACpCE,GAAWD,GAAwC,WAA9BlC,EAAOzD,kBAgBlC,OAfI2F,GACFH,EAAiB5N,KAAK,KACbgO,EACTJ,EAAiBK,MAAM,KAEvBL,EAAiBM,qBAGa,QAA5BrC,EAAOxD,iBACTuF,EAAiBO,IAAI,KAErBP,EAAiBQ,OAAO,KAG1BV,EAAcE,iBAAmBA,EAC1B5rB,KAAKkpB,SAASmD,OAAOX,IAQtBzC,EAAV5oB,UAAA2qB,gBACA,SAAMnB,EACA1C,GAEF,GAAMmF,GAAezC,GAAUA,EAAO3L,kBAAoB2L,EAAO3L,iBAAiB6M,SAC5EwB,EAAkB,GAAIC,QAK5B,OAHAD,GAAgBE,IAAIpI,GAAgB8C,GACpCoF,EAAgBE,IAAIzG,GAAoB6D,EAAO1Y,MAExC,GAAIub,GAAAA,eAAeJ,GAAgBtsB,KAAKopB,UAAWmD,mBA3N9DzqB,KAAC6qB,EAAAA,iDAnCD7qB,KAAQ8qB,EAAAA,UAFR9qB,KAAQ+qB,EAAAA,gBAUR/qB,KAAEgrB,EAAAA,WATFhrB,KAAQirB,EAAAA,qBAqCRjrB,KAAamnB,EAAbhmB,aAAAnB,KA2BOoB,EAAAA,WA3BPpB,KA2BmBkrB,EAAAA,aAhDnBlrB,KAA4BmkB,GAA5BhjB,aAAAnB,KAiDOiL,EAAAA,OAjDP/K,MAiDc+mB,SA1EdE,iCCAA,sBAmBAnnB,KAACoL,EAAAA,SAADlL,OACEmL,SACE8f,EAAAA,cACA3f,EAAAA,aACAF,EAAAA,aACAyK,GACAxK,IAEFI,SAAU6Z,GAAsBja,IAChCQ,cAAeyZ,GAAsBJ,IACrCgG,iBAAkB5F,GAAsBJ,IACxCtW,WAAYqY,QA9BdkE,KCmDAC,GAAA,yBAnDA,MAAAA,MAoDaC,GAAoBC,EAAiBjiB,EAAc+hB,qFAWhEppB,GAAAupB,UAAc,GAAIC,KAGlBxpB,EAAAypB,cAA2B,GAAI7jB,GAAAA,QAS/B5F,EAAA0pB,MAAiD,MAWjD1pB,EAAA2pB,WAAsC,GAYtC3pB,EAAAgY,WAAqE,GAAInX,GAAAA,eAlGzE,MA4D6BK,GAA7B0oB,EAAA3pB,GAmBAkB,OAAAC,eAAMwoB,EAANvtB,UAAA,iBAAA,WAAmC,MAAOL,MAAK2tB,gBAC7C,SAAc/S,GACZ,GAAIjM,EAAAA,aAAeiM,GAA2B,QAAdA,GAAqC,SAAdA,EACrD,KAAMiT,IAA6BjT,EAErC5a,MAAK2tB,WAAa/S,mCAStBzV,OAAAC,eAAMwoB,EAANvtB,UAAA,oBAAA,WAAgC,MAAOL,MAAK8tB,mBAC1C,SAAiBzK,GAAcrjB,KAAK8tB,cAAgBxoB,EAAAA,sBAAsB+d,oCAU1EuK,EAAFvtB,UAAA0tB,SAAE,SAASC,GACP,IAAKA,EAASC,GACZ,KAAMC,KAGR,IAAIluB,KAAKutB,UAAUY,IAAIH,EAASC,IAC9B,KAAMG,IAAgCJ,EAASC,GAEjDjuB,MAAKutB,UAAUd,IAAIuB,EAASC,GAAID,IAOlCJ,EAAFvtB,UAAAguB,WAAE,SAAWL,GACThuB,KAAKutB,UAAUe,OAAON,EAASC,KAIjCL,EAAFvtB,UAAAsa,KAAE,SAAKqT,GACChuB,KAAK0K,QAAUsjB,EAASC,IAC1BjuB,KAAK0K,OAASsjB,EAASC,GACvBjuB,KAAK4a,UAAYoT,EAASN,MAAQM,EAASN,MAAQ1tB,KAAK0tB,OAExD1tB,KAAK4a,UAAY5a,KAAKuuB,qBAAqBP,GAG7ChuB,KAAKgc,WAAW3V,MAAMqE,OAAQ1K,KAAK0K,OAAQkQ,UAAW5a,KAAK4a,aAI7DgT,EAAFvtB,UAAAkuB,qBAAE,SAAqBP,GACnB,IAAKA,EAAY,MAAO,EAGxB,IAAMQ,GAAwC,MAAzBR,EAASQ,aAAuBR,EAASQ,aAAexuB,KAAKwuB,aAC9EC,EAAqBC,GAAsBV,EAASN,OAAS1tB,KAAK0tB,MAAOc,GAGzEG,EAAqBF,EAAmB9S,QAAQ3b,KAAK4a,WAAa,CAEtE,OADI+T,IAAsBF,EAAmBjtB,SAAUmtB,EAAqB,GACrEF,EAAmBE,IAG5Bf,EAAFvtB,UAAAse,SAAE,WACE3e,KAAK4uB,oBAGPhB,EAAFvtB,UAAAoe,YAAE,WACEze,KAAKytB,cAAc7iB,QAGrBgjB,EAAFvtB,UAAA8G,YAAE,WACEnH,KAAKytB,cAAc5iB,2BAvGvB/I,KAACyK,EAAAA,UAADvK,OACEC,SAAU,YACVgH,SAAU,UACV7G,QAAS,mDAWXsI,SAAA5I,KAAGuB,EAAAA,MAAHrB,MAAS,mBAMT0rB,QAAA5rB,KAAGuB,EAAAA,MAAHrB,MAAS,kBAGT4Y,YAAA9Y,KAAGuB,EAAAA,MAAHrB,MAAS,sBAcTwsB,eAAA1sB,KAAGuB,EAAAA,MAAHrB,MAAS,yBAMTga,aAAAla,KAAGyB,EAAAA,OAAHvB,MAAU,oBAlGV4rB,GA4D6BP,IC1CvBwB,GAA4BpI,GAAmBO,SAAW,IAC9BL,GAAgBC,eAGrCkI,IASXC,UAAW7Z,EAAAA,QAAQ,aACjBC,EAAAA,MAAM,kBAAmB7M,EAAAA,OAAO8M,UAAW,qBAE3CD,EAAAA,MAAM,oBAAqB7M,EAAAA,OAAO8M,UAAW,sBAC7CE,EAAAA,WAAW,6BAA8BC,EAAAA,QAAQsZ,OAInDG,YAAa9Z,EAAAA,QAAQ,eACnBC,EAAAA,MAAM,kBAAmB7M,EAAAA,OAAO8M,UAAW,oBAC3CD,EAAAA,MAAM,oBAAqB7M,EAAAA,OAAO8M,UAAW,mBAC7CE,EAAAA,WAAW,6BAA8BC,EAAAA,QAAQsZ,OAInDI,aAAc/Z,EAAAA,QAAQ,gBACpBC,EAAAA,MAAM,kBAAmB7M,EAAAA,OAAO8M,UAAW,mBAC3CD,EAAAA,MAAM,oBAAqB7M,EAAAA,OAAO8M,UAAW,oBAC7CE,EAAAA,WAAW,6BAA8BC,EAAAA,QAAQsZ,OAInDK,aAAcha,EAAAA,QAAQ,gBACpBC,EAAAA,MAAM,wCAAyC7M,EAAAA,OAAOke,QAAS,KAC/DrR,EAAAA,MAAM,kCAAmC7M,EAAAA,OAAOke,QAAS,OACzDrR,EAAAA,MAAM,sEACF7M,EAAAA,OAAOke,QAAS,KAEpBlR,EAAAA,WAAW,8CAA+CC,EAAAA,QAAQ,QAClED,EAAAA,WAAW,UAAWC,EAAAA,QAAQsZ,OAUhCM,cAAeja,EAAAA,QAAQ,iBAErBI,EAAAA,WAAW,yCACPC,EAAAA,QAAQsZ,GAA2BO,EAAAA,WACjC9mB,EAAAA,OAAO8M,UAAW,qBAClB9M,EAAAA,OAAO8M,UAAW,sBAGxBE,EAAAA,WAAW,yCACPC,EAAAA,QAAQsZ,GAA2BO,EAAAA,WACjC9mB,EAAAA,OAAO8M,UAAW,kBAClB9M,EAAAA,OAAO8M,UAAW,wBAGxBE,EAAAA,WAAW,uCACPC,EAAAA,QAAQsZ,GAA2BO,EAAAA,WACjC9mB,EAAAA,OAAO8M,UAAW,oBAClB9M,EAAAA,OAAO8M,UAAW,sBAGxBE,EAAAA,WAAW,uCACPC,EAAAA,QAAQsZ,GAA2BO,EAAAA,WACjC9mB,EAAAA,OAAO8M,UAAW,kBAClB9M,EAAAA,OAAO8M,UAAW,yBAExBD,EAAAA,MAAM,yEACF7M,EAAAA,OAAO8M,UAAW,mBACtBD,EAAAA,MAAM,qCACF7M,EAAAA,OAAO8M,UAAW,sBACtBD,EAAAA,MAAM,kCACF7M,EAAAA,OAAO8M,UAAW,uBAIxBia,cAAena,EAAAA,QAAQ,iBACrBI,EAAAA,WAAW,WACTga,EAAAA,MAAM,KAAMC,EAAAA,gBAAiBxa,UAAU,oCCrF7C/U,KAAAiH,QAAoC,GAAI2C,GAAAA,QAGxC5J,KAAAwvB,gBAAoB,SAACvB,GACjB,MAAO,sBAAsBA,GAzBjC,sBAeAnsB,KAAC6qB,EAAAA,WAAD3qB,OAAawb,WAAY,8GAfzBiS,KAkCaC,IAEX7e,QAAS4e,GACTE,OAAQ,GAAIzsB,GAAAA,SAAY,GAAI8pB,GAAAA,SAAYyC,KACxCG,WAAYC,ICTdC,GAAA,yBA7BA,MAAAA,MA8BaC,GAA0B1kB,EAAcykB,mBAmGnD,QAAFE,GAAqBC,EACPC,EACmBrU,EACAsU,GAH/B,GAAFnsB,GAKIC,EALJC,KAAAlE,OAAAA,IAOI,IAPiBgE,EAArBisB,MAAqBA,EAEYjsB,EAAjC6X,MAAiCA,EACA7X,EAAjCmsB,cAAiCA,EAtCjCnsB,EAAAosB,oBAAgC,EAUhCpsB,EAAAqsB,gBAAmC,GAKnCrsB,EAAAssB,4BAA+B,EAS/BtsB,EAAAmrB,cAA+C,SAkBtCtT,EACH,KAAM0U,YAGRvsB,GAAKwsB,sBAAwB/oB,EAAAA,MAAMoU,EAAMG,WAAYH,EAAM4R,cAAewC,EAAMhpB,SAC3EC,UAAU,WACLlD,EAAKysB,aACPzsB,EAAK0sB,yBAIF1sB,EAAKysB,aAAezsB,EAAK2sB,YAA0C,WAA5B3sB,EAAK2sB,WAAWlQ,UAC1Dzc,EAAKssB,4BAA6B,EAClCtsB,EAAK4sB,8BAA8BjQ,UAAW,SAAUF,QAASzc,EAAKqsB,mBAGxEH,EAAkBnvB,mBA5B5B,MArCmCmE,GAAnC8qB,EAAA/rB,GAsCAkB,OAAAC,eAAM4qB,EAAN3vB,UAAA,oBAAA,WAAgC,MAAOL,MAAK8tB,mBAC1C,SAAiBzK,GAAKrjB,KAAK8tB,cAAgBxoB,EAAAA,sBAAsB+d,oCA8BjE2M,EAAF3vB,UAAAse,SAAE,YACO3e,KAAKiuB,IAAMjuB,KAAKmwB,gBACnBnwB,KAAKiuB,GAAKjuB,KAAKmwB,cAAcva,MAI/B5V,KAAK0wB,wBACL1wB,KAAK4wB,8BACAnQ,QAASzgB,KAAKywB,YAAc,SAAWzwB,KAAKqwB,kBAEjDrwB,KAAK6b,MAAMkS,SAAS/tB,OAGtBgwB,EAAF3vB,UAAA8G,YAAE,WACEnH,KAAK6b,MAAMwS,WAAWruB,MACtBA,KAAKwwB,sBAAsBppB,eAO7B4oB,EAAF3vB,UAAAwwB,yBAAE,SAAyBC,GAEnB9wB,KAAK+wB,eAAiBD,IAE1B9wB,KAAKowB,mBAAqBU,EAErB9wB,KAAKywB,cACRzwB,KAAK0wB,wBACD1wB,KAAKowB,mBACPpwB,KAAK4wB,8BAA8BjQ,UAAW3gB,KAAKqwB,gBAAiB5P,QAAS,SAE7EzgB,KAAK4wB,8BAA8BjQ,UAAW,OAAQF,QAASzgB,KAAKqwB,qBAU1EL,EAAF3vB,UAAAuwB,6BAAE,SAA6BI,GAC3BhxB,KAAK2wB,WAAaK,EAIdhxB,KAAKswB,6BACPtwB,KAAK2wB,YAAclQ,QAASuQ,EAAUvQ,WAK1CuP,EAAF3vB,UAAAsI,aAAE,WACE,IAAI3I,KAAK+wB,cAAT,CAEA/wB,KAAK6b,MAAMlB,KAAK3a,MAGgB,SAA5BA,KAAK2wB,WAAWlQ,SAAkD,WAA5BzgB,KAAK2wB,WAAWlQ,UACxDzgB,KAAKswB,4BAA6B,EAKpC,IAAMU,GAAsChxB,KAAKywB,aAC5C9P,UAAW3gB,KAAKqwB,gBAAiB5P,QAAS,WAC1CE,UAAW,SAAUF,QAASzgB,KAAKqwB,gBACxCrwB,MAAK4wB,6BAA6BI,GAElChxB,KAAKowB,oBAAqB,IAI5BJ,EAAF3vB,UAAAowB,UAAE,WACE,MAAOzwB,MAAK6b,MAAMnR,QAAU1K,KAAKiuB,KACH,QAAzBjuB,KAAK6b,MAAMjB,WAAgD,SAAzB5a,KAAK6b,MAAMjB,YAIpDoV,EAAF3vB,UAAA4wB,wBAAE,WACE,OAAUjxB,KAAKywB,YAAc,UAAY,IAAKzwB,KAAKqwB,iBAIrDL,EAAF3vB,UAAA6wB,mBAAE,WACE,GAAMvQ,GAAY3gB,KAAK2wB,WAAWhQ,SAClC,QAAQA,EAAeA,EAA3B,OAA6C,IAAM3gB,KAAK2wB,WAAWlQ,SAajEuP,EAAF3vB,UAAAqwB,sBAAE,WACE1wB,KAAKqwB,gBAAkBrwB,KAAKywB,YACxBzwB,KAAK6b,MAAMjB,UACV5a,KAAK0tB,OAAS1tB,KAAK6b,MAAM6R,OAGhCsC,EAAF3vB,UAAA0wB,YAAE,WACE,MAAO/wB,MAAK6b,MAAM/S,UAAY9I,KAAK8I,UASrCknB,EAAF3vB,UAAA8wB,sBAAE,WACE,MAAKnxB,MAAKywB,YAEqB,OAAxBzwB,KAAK6b,MAAMjB,UAAqB,YAAc,aAFrB,qBArNpC9Y,KAACC,EAAAA,UAADC,OAAAC,SAAA,oBACEgH,SAAU,gBACV/G,SAAU,qiCACVC,QAAF,guCACEQ,MACFiK,UAAA,iBACMwkB,eAAN,iCACIC,cAAJ,iCACIC,eAAgB,kCAChBC,mBAAJ,0BACIC,mCAAJ,iBAEAnvB,cAAAC,EAAAA,kBAAAC,KACAC,gBAAAC,EAAAA,wBAAAC,OACEN,QAAF,YACEgV,YACF0X,GAAAC,UACAD,GAAAE,YACIF,GAAkBG,aAClBH,GAAkBI,aAClBJ,GAAkBK,cAClBL,GAAkBO,4FA1DtBvtB,KAAQ8rB,GAAR3qB,aAAAnB,KAAAoB,EAAAA,aAZApB,KAAE8W,EAAAA,aAAF3V,aAAAnB,KAAAoB,EAAAA,cAHA8sB,EAAA7sB,4FA0GAuqB,QAAA5rB,KAAAuB,EAAAA,QAGAmrB,eAAA1sB,KAAAuB,EAAAA,SAMA2sB,mCC5HA,sBAeAluB,KAACoL,EAAAA,SAADlL,OACEmL,SAAUC,EAAAA,cACVK,SAAUmgB,GAASoC,IACnBniB,cAAe+f,GAASoC,IACxBpf,WAAY8e,QAnBd+B,oBCeE,QAAFzZ,GAAc9V,GACd,MAAI+B,GAAJC,KAAAlE,KAAUkC,IAAVlC,KAhBA,MAckCkF,GAAlC8S,EAAA/T,kBAHAnC,KAACyK,EAAAA,UAADvK,OACEC,SAAU,yDAJZH,KAAmB6T,EAAAA,eARnBqC,GAckC0Z,EAAAA,yCCKlC1xB,KAAAiH,QAAoC,GAAI2C,GAAAA,QAGxC5J,KAAA2xB,cAA0B,WAtB1B,sBAaA7vB,KAAC6qB,EAAAA,WAAD3qB,OAAawb,WAAY,8GAbzBvF,mBjC6DE,QAAFrD,GACWqb,EACC2B,EACAC,EACR3B,GAHOlwB,KAAXiwB,MAAWA,EACCjwB,KAAZ4xB,cAAYA,EACA5xB,KAAZ6xB,SAAYA,EAERD,EAAcE,QAAQD,EAASpxB,eAAe,GAC9CT,KAAK+xB,kBAAoB9B,EAAMhpB,QAAQC,UAAU,WAAM,MAAAgpB,GAAkBnvB,iBAR7E,MAWE6T,GAAFvU,UAAA8G,YAAE,WACEnH,KAAK+xB,kBAAkB3qB,cACvBpH,KAAK4xB,cAAcI,eAAehyB,KAAK6xB,SAASpxB,gBAIlDmU,EAAFvU,UAAA4xB,aAAE,WACE,MAAOjyB,MAAKkyB,gBAAiBla,IAAe,KAAOhY,KAAKkyB,OAI1Dtd,EAAFvU,UAAA8xB,eAAE,WACE,MAAOnyB,MAAKkyB,gBAAiBla,IAAehY,KAAKkyB,MAAQ,MAI3Dtd,EAAFvU,UAAA+xB,gBAAE,WACE,MAAOpyB,MAAK6xB,SAASpxB,eAIvBmU,EAAFvU,UAAAgyB,gBAAE,WACE,OACE1rB,MAAO3G,KAAK2G,MACZ+D,OAAQ1K,KAAK0K,OACbqK,SAAU/U,KAAK+U,WAInBH,EAAFvU,UAAA2gB,MAAE,WACEhhB,KAAKoyB,kBAAkBpR,wBA3E3Blf,KAACC,EAAAA,UAADC,OAAAC,SAAA,kBACEC,SAAU,y8CACVC,QAAF,4nBACEQ,MACFC,MAAA,kBACM2N,KAAN,OAEAlO,cAAAC,EAAAA,kBAAAC,KACAC,gBAAAC,EAAAA,wBAAAC,+EAZAZ,KAAQiP,EAAAA,aAbRjP,KAAQmJ,EAAAA;4BAGR2J,EAAAzR,8DA8BA0R,gBAAA/S,KAAAuB,EAAAA,QAGAsD,QAAA7E,KAAGuB,EAAAA,QAGHyR,WAAAhT,KAAAuB,EAAAA,QAGAqH,SAAA5I,KAAAuB,EAAAA,QAGA0R,WAAAjT,KAAGuB,EAAAA,SAMHuR,KC1CaI,IAKXC,yBAA0BC,EAAAA,QAAQ,kBAChCC,EAAAA,MAAM,WAAY7M,EAAAA,OAAO8M,UAAW,2BAA4BC,WAAY,YAC5EF,EAAAA,MAAM,UAAW7M,EAAAA,OAAO8M,UAAW,OAAQC,WAAY,aACvDF,EAAAA,MAAM,OAAQ7M,EAAAA,OAAO8M,UAAW,0BAA2BC,WAAY,YACvEC,EAAAA,WAAW,SAAUC,EAAAA,QAAQ,2CAI/BC,uBAAwBN,EAAAA,QAAQ,kBAC9BC,EAAAA,MAAM,WAAY7M,EAAAA,OAAOC,OAAQ,MAAO8M,WAAY,YACpDF,EAAAA,MAAM,OAAQ7M,EAAAA,OAAOC,OAAQ,MAAO8M,WAAY,YAChDF,EAAAA,MAAM,UAAW7M,EAAAA,OAAOC,OAAQ,IAAK8M,WAAY,aACjDC,EAAAA,WAAW,gBAAiBC,EAAAA,QAAQ,0DCJtC,QAAFE,GAAqBC,GAAA1V,KAArB0V,YAAqBA,EA9BrB,sBAuBA5T,KAACyK,EAAAA,UAADvK,OACEC,SAAU,sEAhBZH,KAA0B6T,EAAAA,iCAoB1BC,OAAA9T,KAAGuB,EAAAA,MAAHrB,MAAS,qBA5BTyT,oBCoDE,QAAFI,GAAoDC,EAClBC,GADhC,GAAF/R,GAEIC,EAFJC,KAAAlE,KAEU8V,IAFV9V,WACkCgE,GAAlC+R,mBAAkCA,IAHlC,MAF6B7Q,GAA7B2Q,EAAA5R,GAUE4R,EAAFxV,UAAA2V,aAAE,SAAaC,EAA6BC,GACxC,GAAMC,GAAqBnW,KAAK+V,mBAAmBC,aAAaC,EAASC,GAKnEE,KAAsBH,GAAWA,EAAQI,SAAWrW,KAAKsW,WAE/D,OAAOH,IAAsBC,kBA3BjCtU,KAACC,EAAAA,UAADC,OAAAC,SAAA,WACEC,SAAU,uDACV0O,YAAFC,QAAA0F,GAAAzF,YAAA+E,IACExT,cAAFC,EAAAA,kBAAAC,KACE0G,SAAF,UACEzG,gBAAFC,EAAAA,wBAAAC,2KAbAmT,EAAA1S,6DAmBA0S,cAlDAW,GAAA,SAAAvS,gBA0EA,GAAAD,GAAA,OAAAC,GAAAA,EAAAyD,MAAA1H,KAAAyW,YAAAzW,qEAWA,mEAKA0W,EAAA1W,KAAA2W,OAAAlV,WAAA,OAAA,OAaG,UAbHgF,QAAA,SAAAmP,GACA,GAAAgB,GAAAF,EAAAjM,KAAA,SAAAoM,GAAA,MAAAA,GAAAjB,OAAAA,GAEAgB,KACA5S,EAAA8S,eAAAlB,GAAAgB,EAAiClB,eAKjC1V,KAAA+W,OAAA9P,QAAAmD,KAAAC,EAAAA,UAAArK,KAAAgX,aAAA9P,UAAA,WAAA,MAAAlD,GAAAiT,iFAMAjX,KAAA+E,cAAAsB,QAGAmQ,EAAAvT,aACAnB,KAAAyK,EAAAA,UAAAvK,+IAjCA2U,SAAA7U,KAAA0P,EAAAA,gBAAexP,MAAfyT,MAGA1Q,gBAAAjD,KAAAyB,EAAAA,UAMAiT,iBArFAU,GAAA,SAAAjT,gBAiIA,MAAA,QAAAA,GAAAA,EAAAyD,MAAA1H,KAAAyW,YAAAzW,KAHA,uHAdAkC,SAAA,ipCACEC,QAAF,8pDACEC,QAAF,iBACEO,MACFC,MAAe,yBACfuU,mBAAA,aACA5G,KAAA,WAEA6G,YAAapC,GAAbC,0BACArE,YAAAC,QAAA2F,GAAA1F,YAAAoG,IACA7U,cAAAC,EAAAA,kBAAAC,KACAC,gBAAAC,EAAAA,wBAAAC,WAGAwU,GACAV,IACAa,GAAA,SAAApT,+CAoBA,kCAAAD,gBACAqT,EAAApU,aAEAnB,KAAAC,EAAAA,UAAAC,OAAAC,SAAA,qDACAC,SAAA,+tFArBAE,QAAA,iBACEO,MACFC,MAAA,uBACAuU,mBAAA,WACA5G,KAAA,WAEE6G,YAAFpC,GAAAQ,wBACE5E,YAAFC,QAAA2F,GAAA1F,YAAAuG,IACAhV,cAAAC,EAAAA,kBAAAC,KACAC,gBAAAC,EAAAA,wBAAAC,WAIA2U,EAAAC,eAAA,WAAA,QACAxV,KAAAkB,EAAAA,eAAAC,aAAAnB,KAAmCoB,EAAAA,aACnCpB,KAAAmJ,EAAAA,uGClJA,MAsBoC/F,GAApCqS,EAAAtT,kBATAnC,KAACyK,EAAAA,UAADvK,OACEC,SAAU,yBACVU,MACEiK,UAAW,kBACX4K,SAAU,QAEZpV,QAAS,QACTwO,YAAaC,QAAS4G,EAAAA,WAAY3G,YAAa0F,SApBjDe,GAsBoCG,EAAAA,2FAtBpC,MAkCwCxS,GAAxCyS,EAAA1T,kBATAnC,KAACyK,EAAAA,UAADvK,OACEC,SAAU,6BACVU,MACEiK,UAAW,sBACX4K,SAAU,QAEZpV,QAAS,QACTwO,YAAaC,QAAS4G,EAAAA,WAAY3G,YAAa0F,SAhCjDmB,GAkCwCC,EAAAA,gDClCxC,sBAuBA9V,KAACoL,EAAAA,SAADlL,OACEmL,SACEE,GACAD,EAAAA,aACAE,EAAAA,aACAuK,GACAC,EAAAA,iBACAC,GACAxK,IAEFE,SACEJ,GACA6J,GACAG,GACAxB,GACAmC,GACAxB,GACAe,GACAI,GACA/C,GACAa,IAEF5H,cACEqJ,GACAG,GACAxB,GACAmC,GACAxB,GACAe,GACAI,GACA/C,GACAa,IAEF7E,WAAYqH,GAAgB1B,QAxD9B2B,oBCwCE,QAAFC,GAAwB9G,EACAvQ,EACAH,EACS4P,GAH/B,GAAFvM,GAIIC,EAJJC,KAAAlE,KAIUqR,EAAUvQ,EAAoBH,EAAa4P,IAJrDvQ,WAAwBgE,GAAxBqN,SAAwBA,EACArN,EAAxBlD,mBAAwBA,EACAkD,EAAxBrD,YAAwBA,IACxB,MATiCuE,GAAjCiT,EAAAlU,kBAZAnC,KAACC,EAAAA,UAADC,OAAAC,SAAA,8BACEgH,SAAU,WACV/G,SAAUkW,EAAAA,mBACVjW,QAAF,w4CACEQ,MACFC,MAAA,aAEAP,cAAAC,EAAAA,kBAAAC,KACAC,gBAAAC,EAAAA,wBAAAC,mGAhBAZ,KAAEiP,EAAAA,aAHFjP,SAAEgL,GAAF7J,aAAAnB,KAAAmL,EAAAA,UAAAjL,MAAA,aAgCAmW,8BChBE,QAAFE,GAA0CnW,GAAxC,GAAF8B,GACIC,EADJC,KAAAlE,KACUkC,IADVlC,WAA0CgE,GAA1C9B,SAA0CA,IA3B1C,MAyBgCgD,GAAhCmT,EAAApU,kBAJAnC,KAACyK,EAAAA,UAADvK,OACEC,SAAU,eACV2O,YAAaC,QAASyH,EAAAA,WAAYxH,YAAauH,4CAfjDvW,KAAsC6T,EAAAA,eARtC0C,GAyBgCC,EAAAA,2BAiB9B,QAAFC,GAA0CrW,GAAxC,GAAF8B,GACIC,EADJC,KAAAlE,KACUkC,IADVlC,WAA0CgE,GAA1C9B,SAA0CA,IA1C1C,MAwCsCgD,GAAtCqT,EAAAtU,kBAJAnC,KAACyK,EAAAA,UAADvK,OACEC,SAAU,qBACV2O,YAAaC,QAAS2H,EAAAA,iBAAkB1H,YAAayH,4CA9BvDzW,KAAsC6T,EAAAA,eARtC4C,GAwCsCC,EAAAA,iCAiBpC,QAAFC,GAA0CvW,GAAxC,GAAF8B,GACIC,EADJC,KAAAlE,KACUkC,IADVlC,WAA0CgE,GAA1C9B,SAA0CA,IAzD1C,MAuDsCgD,GAAtCuT,EAAAxU,kBAJAnC,KAACyK,EAAAA,UAADvK,OACEC,SAAU,qBACV2O,YAAaC,QAAS6H,EAAAA,iBAAkB5H,YAAa2H,4CA7CvD3W,KAAsC6T,EAAAA,eARtC8C,GAuDsCC,EAAAA,6FAvDtC,MAsEkCxT,GAAlCyT,EAAA1U,kBAJAnC,KAACyK,EAAAA,UAADvK,OACEC,SAAU,iBACV2O,YAAaC,QAAS+H,EAAAA,aAAc9H,YAAa6H,0BAInD/C,OAAA9T,KAAGuB,EAAAA,MAAHrB,MAAS,mBAxET2W,GAsEkCC,EAAAA,6BAchC,QAAFC,GAAcC,EACAnX,GADZ,GAAFqC,GAEIC,EAFJC,KAAAlE,KAEU8Y,EAAWnX,IAFrB3B,WAGI2B,GAAWlB,cAAcgF,UAAUG,IAAI,cAAckT,EAAUC,wBAvFnE,MAmFmC7T,GAAnC2T,EAAA5U,kBAPAnC,KAACyK,EAAAA,UAADvK,OACEC,SAAU,uCACVU,MACEC,MAAS,kBACT2N,KAAQ,wDApEZzO,KAAE8W,EAAAA,eAJF9W,KAAmBiP,EAAAA,cARnB8H,GAmFmCG,EAAAA,8BAiBjC,QAAFC,GAAcH,EACAnX,GADZ,GAAFqC,GAEIC,EAFJC,KAAAlE,KAEU8Y,EAAWnX,IAFrB3B,WAGI2B,GAAWlB,cAAcgF,UAAUG,IAAI,cAAckT,EAAUC,wBAvGnE,MAmGmC7T,GAAnC+T,EAAAhV,kBAPAnC,KAACyK,EAAAA,UAADvK,OACEC,SAAU,uCACVU,MACEC,MAAS,kBACT2N,KAAQ,oDApFZzO,KAAE8W,EAAAA,eAJF9W,KAAmBiP,EAAAA,cARnBkI,GAmGmCC,EAAAA,8BAiBjC,QAAFC,GAAcL,EACAnX,GADZ,GAAFqC,GAEIC,EAFJC,KAAAlE,KAEU8Y,EAAWnX,IAFrB3B,WAGI2B,GAAWlB,cAAcgF,UAAUG,IAAI,cAAckT,EAAUC,wBAvHnE,MAmH6B7T,GAA7BiU,EAAAlV,kBAPAnC,KAACyK,EAAAA,UAADvK,OACEC,SAAU,yBACVU,MACEC,MAAS,WACT2N,KAAQ,oDApGZzO,KAAE8W,EAAAA,eAJF9W,KAAmBiP,EAAAA,cARnBoI,GAmH6BC,EAAAA,wBCjF3B,QAAFC,GAAcnX,EAA4BmP,GAC1C,MAAIpN,GAAJC,KAAAlE,KAAUkC,EAAUmP,IAApBrR,KAnCA,MAgCqCkF,GAArCmU,EAAApV,kBALAnC,KAACyK,EAAAA,UAADvK,OACEC,SAAU,oBACV2O,YAAaC,QAASyI,EAAAA,gBAAiBxI,YAAauI,IACpDjX,QAAS,oEAlBXN,KAAmB6T,EAAAA,cAAnB7T,KAAEwP,EAAAA,mBAZF+H,GAgCqCC,EAAAA,gCAkBnC,QAAFC,GAAcrX,EAA4BmP,GAC1C,MAAIpN,GAAJC,KAAAlE,KAAUkC,EAAUmP,IAApBrR,KAnDA,MAgDqCkF,GAArCqU,EAAAtV,kBALAnC,KAACyK,EAAAA,UAADvK,OACEC,SAAU,oBACV2O,YAAaC,QAAS2I,EAAAA,gBAAiB1I,YAAayI,IACpDnX,QAAS,oEAlCXN,KAAmB6T,EAAAA,cAAnB7T,KAAEwP,EAAAA,mBAZFiI,GAgDqCC,EAAAA,gCAmBnC,QAAFC,GAAcvX,EAA4BmP,GAC1C,MAAIpN,GAAJC,KAAAlE,KAAUkC,EAAUmP,IAApBrR,KApEA,MAiEkCkF,GAAlCuU,EAAAxV,kBALAnC,KAACyK,EAAAA,UAADvK,OACEC,SAAU,cACV2O,YAAaC,QAAS6I,EAAAA,UAAW5I,YAAa2I,IAC9CrX,QAAS,4BAA6B,+DAnDxCN,KAAmB6T,EAAAA,cAAnB7T,KAAEwP,EAAAA,mBAZFmI,GAiEkCC,EAAAA,sFAmBlC,MACkCxU,GAAlCyU,EAAA1V,kBAZAnC,KAACC,EAAAA,UAADC,OAAAC,SAAA,qCACEC,SAAU0X,EAAAA,iBACVjX,MACFC,MAAA,iBACM2N,KAAN,OAEA/N,gBAAiBC,EAAAA,wBAAjBC,OACAL,cAAAC,EAAAA,kBAAAC,KACE0G,SAAF,mBAGA0Q,+CAgBA,MAAA,QAAA1V,GAAAA,EAAAyD,MAAA1H,KAAAyW,YAAAzW,KAHA,+HATA2C,MACAC,MAAA,iBACA2N,KAAA,OAEE/N,gBAAFC,EAAAA,wBAAAC,OACAL,cAAAC,EAAAA,kBAAAC,KACA0G,SAAU,mBAGV4Q,GACAC,EAAAA,yFAYA,cAK4BC,EAA5B9W,uHAZAsN,KAAA,OAEE/N,gBAAFC,EAAAA,wBAAAC,OACEL,cAAFC,EAAAA,kBAAAC,KACE0G,SAAF,aAGA8Q,GACAC,EAAAA,QChFMC,IAEJ9B,GAGAI,GACAc,GACAV,GACAN,GACAoB,GACAhB,GACAc,GAGAV,GACAM,GACAF,GAGAU,GACAI,GACAF,gCApDF,sBAuDA/X,KAACoL,EAAAA,SAADlL,OACEmL,SAAU+M,EAAAA,eAAgB9M,EAAAA,aAAcC,IACxCI,QAASwM,GACTpM,aAAcoM,OA1DhBE,KC+BAC,GAAA,SAAAnW,GA2IE,QAAFmW,GAAcvG,OAAd,KAAAA,IAAcA,KAAZ,IAAF7P,GACIC,EADJC,KAAAlE,OAAAA,WAtIAgE,GAAAqW,YAAiC,GAAItG,GAAAA,oBAGrC/P,EAAAsW,QAA6B,GAAIvG,GAAAA,gBAAwB,IAiEzD/P,EAAAuW,oBAAM,SAACpJ,EAASqJ,GACZ,GAAMnV,GAAa8L,EAAKqJ,EACxB,OAAOC,GAAAA,eAAepV,GAASmL,OAAOnL,GAASA,GAYnDrB,EAAA0W,SAAkD,SAACvJ,EAAWwJ,GAC1D,GAAMjQ,GAASiQ,EAAKjQ,OACdkQ,EAAYD,EAAKC,SACvB,OAAKlQ,IAAuB,IAAbkQ,EAERzJ,EAAKwJ,KAAK,SAACE,EAAGC,GACnB,GAAIC,GAAS/W,EAAKuW,oBAAoBM,EAAGnQ,GACrCsQ,EAAShX,EAAKuW,oBAAoBO,EAAGpQ,GAMrCuQ,EAAmB,CAcvB,OAbc,OAAVF,GAA4B,MAAVC,EAEhBD,EAASC,EACXC,EAAmB,EACVF,EAASC,IAClBC,GAAoB,GAEH,MAAVF,EACTE,EAAmB,EACA,MAAVD,IACTC,GAAoB,GAGfA,GAAiC,OAAbL,EAAqB,GAAK,KAxBdzJ,GAsC7CnN,EAAAkX,gBAA4D,SAAC/J,EAASlC,GAElE,GAAMkM,GAAc,SAACC,EAAaC,GAAQ,MAAAD,GAAcjK,EAAKkK,IACvDC,EAAUnW,OAAOoW,KAAKpK,GAAMqK,OAAOL,EAAa,IAAIM,cAGpDC,EAAoBzM,EAAOO,OAAOiM,aAExC,QAA8C,GAAvCH,EAAQK,QAAQD,IAKvB1X,EAAKiQ,MAAQ,GAAIF,GAAAA,gBAAqBF,GACtC7P,EAAK4X,8BA7KT,MA+B2C1W,GAA3CkV,EAAAnW,GAyBEkB,OAAFC,eAAMgV,EAAN/Z,UAAA,YAAE,WAAa,MAAOL,MAAKiU,MAAM5O,WAC/B,SAAS8L,GAAanR,KAAKiU,MAAMrJ,KAAKuG,oCAMtChM,OAAFC,eAAMgV,EAAN/Z,UAAA,cAAE,WAAuB,MAAOL,MAAKsa,QAAQjV,WAC3C,SAAW4J,GAAkBjP,KAAKsa,QAAQ1P,KAAKqE,oCAM/C9J,OAAFC,eAAMgV,EAAN/Z,UAAA,YAAE,WAA6B,MAAOL,MAAK6b,WACzC,SAASlB,GACP3a,KAAK6b,MAAQlB,EACb3a,KAAK4b,6DAcPzW,OAAFC,eAAMgV,EAAN/Z,UAAA,iBAAE,WAAuC,MAAOL,MAAK8b,gBACnD,SAAcC,GACZ/b,KAAK8b,WAAaC,EAClB/b,KAAK4b,6DA2FPxB,EAAF/Z,UAAAub,0BAAE,WAAA,GAAF5X,GAAAhE,KAOUgc,EAAoChc,KAAK6b,MAC3CpU,EAAAA,MAAYzH,KAAK6b,MAAMG,WAAYhc,KAAK6b,MAAMI,aAC9C9R,EAAAA,GAAa,MACX+R,EAAyClc,KAAK8b,WAChDrU,EAAAA,MAAiBzH,KAAK8b,WAAWK,KAAMnc,KAAK8b,WAAWG,aACvD9R,EAAAA,GAAa,KAEbnK,MAAKoc,4BACPpc,KAAKoc,2BAA2BhV,aAGlC,IAAMiV,GAAarc,KAAKiU,MAElBqI,EAAeC,EAAAA,cAAcF,EAAYrc,KAAKsa,SACjDlQ,KAAKzC,EAAAA,IAAI,SAAC6U,GAAjB,GAAkBrL,GAAlBqL,EAAA,EAA4B,OAAAxY,GAAKyY,YAAYtL,MAEnCuL,EAAcH,EAAAA,cAAcD,EAAcN,GAC7C5R,KAAKzC,EAAAA,IAAI,SAAC6U,GAAjB,GAAkBrL,GAAlBqL,EAAA,EAA4B,OAAAxY,GAAK2Y,WAAWxL,KAElBoL,GAAAA,cAAcG,EAAaR,GAC9C9R,KAAKzC,EAAAA,IAAI,SAAC6U,GAAjB,GAAkBrL,GAAlBqL,EAAA,EAA4B,OAAAxY,GAAK4Y,UAAUzL,MAEzBjK,UAAU,SAAAiK,GAAQ,MAAAnN,GAAKqW,YAAYzP,KAAKuG,MAQxDiJ,EAAF/Z,UAAAoc,YAAE,SAAYtL,GAAZ,GAAFnN,GAAAhE,IASI,OALAA,MAAKsc,aACAtc,KAAKiP,OAAgBkC,EAAKlC,OAAO,SAAA4N,GAAO,MAAA7Y,GAAKkX,gBAAgB2B,EAAK7Y,EAAKiL,UAAzDkC,EAEfnR,KAAK+b,WAAa/b,KAAK8c,iBAAiB9c,KAAKsc,aAAa9a,QAEvDxB,KAAKsc,cAQdlC,EAAF/Z,UAAAsc,WAAE,SAAWxL,GAET,MAAKnR,MAAK2a,KAEH3a,KAAK0a,SAASvJ,EAAKpC,QAAS/O,KAAK2a,MAFfxJ,GAS3BiJ,EAAF/Z,UAAAuc,UAAE,SAAUzL,GACR,IAAKnR,KAAK+b,UAAa,MAAO5K,EAE9B,IAAM4L,GAAa/c,KAAK+b,UAAUiB,UAAYhd,KAAK+b,UAAUkB,QAC7D,OAAO9L,GAAKpC,QAAQmO,OAAOH,EAAY/c,KAAK+b,UAAUkB,WAQxD7C,EAAF/Z,UAAAyc,iBAAE,SAAiBK,GAAjB,GAAFnZ,GAAAhE,IACIsG,SAAQC,UAAUC,KAAK,WACrB,GAAKxC,EAAK+X,YAEV/X,EAAK+X,UAAUva,OAAS2b,EAGpBnZ,EAAK+X,UAAUiB,UAAY,GAAG,CAChC,GAAMI,GAAgBrX,KAAKsX,KAAKrZ,EAAK+X,UAAUva,OAASwC,EAAK+X,UAAUkB,UAAY,GAAK,CACxFjZ,GAAK+X,UAAUiB,UAAYjX,KAAKC,IAAIhC,EAAK+X,UAAUiB,UAAWI,OASpEhD,EAAF/Z,UAAA8T,QAAE,WAAY,MAAOnU,MAAKqa,aAMxBD,EAAF/Z,UAAAkU,WAAE,aA1RF6F,GA+B2C5F,EAAAA,YCV9B8I,GACX,GAAIC,GAAAA,eAAqC,uBACvCC,WAAY,OACZC,QAASC,mBA2BX,QAAF5P,GACYnN,EACA8I,EACiCkU,GAFjC3d,KAAZW,YAAYA,EACAX,KAAZyJ,QAAYA,EACiCzJ,KAA7C2d,kBAA6CA,EAtD7C,MA6DE7P,GAAFzN,UAAAwB,eAAE,SAAeiI,GAAf,GAAF9F,GAAAhE,IACIA,MAAK8K,OAEgC,mBAA1B8S,uBACT5d,KAAKyJ,QAAQO,kBAAkB,WAC7B4T,sBAAsB,WAAM,MAAA5Z,GAAK6Z,WAAW/T,OAG9C9J,KAAK6d,WAAW/T,IAKpBgE,EAAFzN,UAAAyK,KAAE,WACE9K,KAAKW,YAAYF,cAAc6H,MAAM+M,WAAa,WAIpDvH,EAAFzN,UAAA0K,KAAE,WACE/K,KAAKW,YAAYF,cAAc6H,MAAM+M,WAAa,UAO5CvH,EAAVzN,UAAAwd,WAAA,SAAqB/T,GACjB,GAAMgU,GAAY9d,KAAK2d,kBAAkB7T,GACnCiU,EAAsB/d,KAAKW,YAAYF,aAE7Csd,GAAOzV,MAAM0V,KAAOF,EAAUE,KAC9BD,EAAOzV,MAAM2V,MAAQH,EAAUG,sBAhDnCnc,KAACyK,EAAAA,UAADvK,OACEC,SAAU,cACVU,MACEC,MAAS,uDAvCbd,KAAmBiP,EAAAA,aAAnBjP,KAAuDkJ,EAAAA,SA8CvDlJ,SAAAgL,GAAA7J,aAAAnB,KAAKiL,EAAAA,OAAL/K,MAAYsb,SAtDZxP,oBCgBE,QAAFJ,GAAcgI,EAA+BwI,GAC7C,MAAIja,GAAJC,KAAAlE,KAAU0V,EAAawI,IAAvBle,KAjBA,MAeiCkF,GAAjCwI,EAAAzJ,kBAHAnC,KAACyK,EAAAA,UAADvK,OACEC,SAAU,yEALZH,KAAmB6T,EAAAA,cAAnB7T,KAAgCkO,EAAAA,oBARhCtC,GAeiCyQ,EAAAA,yBCF/B,QAAFvQ,GAAqB1L,GAAAlC,KAArBkC,SAAqBA,EAbrB,sBAWAJ,KAACyK,EAAAA,UAADvK,OAAYC,SAAU,0DAHtBH,KAAmB6T,EAAAA,eARnB/H,KC+BAwQ,GAAA,yBA/BA,MAAAA,MAgCaC,GAAmBhT,EAAc+S,mBAyD5C,QAAFzQ,GAAsB2Q,GAApB,GAAFta,GACIC,EADJC,KAAAlE,OAAAA,WAAsBgE,GAAtBsa,kBAAsBA,EAjCtBta,EAAAua,UAAsC,GAGtCva,EAAAwa,eAAkD,KAQlDxa,EAAA8D,aAA0B,GAAI8B,GAAAA,QAG9B5F,EAAA4D,eAA4B,GAAIgC,GAAAA,QAMhC5F,EAAA4C,SAA4B,KAM5B5C,EAAA8C,OAA0B,KAK1B9C,EAAA6C,UAAa,IA/Bb,MAb4B3B,GAA5ByI,EAAA1J,GAmBEkB,OAAFC,eAAMuI,EAANtN,UAAA,eAAE,WACE,MAAOL,MAAKwe,gDA8Bd7Q,EAAFtN,UAAAoe,YAAE,SAAYxX,GACNA,EAAQyX,eAAe,cACzB1e,KAAK8H,aAAa8C,OAGhB3D,EAAQyX,eAAe,aACzB1e,KAAK4H,eAAegD,QAIxB+C,EAAFtN,UAAA8G,YAAE,WACEnH,KAAK4H,eAAeiD,WACpB7K,KAAK8H,aAAa+C,YAGpB8C,EAAFtN,UAAAse,SAAE,WACE3e,KAAKwe,eAAiB,GAAII,GAAAA,eACtB5e,KAAK6e,kBAAoB7e,KAAK8e,iBAAkB9e,KAAKse,mCA5E7Dxc,KAACC,EAAAA,UAADC,OAAAC,SAAA,UACEC,SAAU,uDACVE,QAAF,YACEI,gBAAFC,EAAAA,wBAAAC,OACEL,cAAFC,EAAAA,kBAAAC,KACE0G,SAAF,4EAnBA0E,EAAAxK,wIAyBA2b,mBAAAhd,KAAAsB,EAAAA,UAAApB,MAAgB2T,EAAAA,eAKhB4I,YAAAzc,KAAAuB,EAAAA,MAAGrB,MAAH,YAMA2L,OCvCaoR,IAIXC,aAAc9J,EAAAA,QAAQ,gBAEpBC,EAAAA,MAAM,wDAAyD7M,EAAAA,OAAO8M,UAAW,UACjFD,EAAAA,MAAM,OAAQ7M,EAAAA,OAAO8M,UAAW,8BAChCD,EAAAA,MAAM,QAAS7M,EAAAA,OAAO8M,UAAW,6BACjCE,EAAAA,WAAW,yDACPC,EAAAA,QAAQ,yCACZD,EAAAA,WAAW,8BACThN,EAAAA,OAAO8M,UAAW,6BAClBG,EAAAA,QAAQ,0CAEVD,EAAAA,WAAW,+BACThN,EAAAA,OAAO8M,UAAW,4BAClBG,EAAAA,QAAQ,4DCiCZ,QAAFtH,GACIgR,EACAf,EAC8CgB,GAHhD,GAAFlb,GAIMC,EAJNC,KAAAlE,KAIYif,EAA0Bf,IAJtCle,WAGkDgE,GAAlDkb,MAAkDA,EAPlDlb,EAAAmb,cAA0B7a,EAAAA,aAAaC,MAEvCP,EAAAob,YAAwB9a,EAAAA,aAAaC,QAjErC,MA6DsCW,GAAtC+I,EAAAhK,GAcEgK,EAAF5N,UAAAse,SAAE,WAAA,GAAF3a,GAAAhE,IACIiE,GAAJ5D,UAAUse,SAAVza,KAAAlE,MAEIA,KAAKmf,cAAgBnf,KAAKkf,MAAMG,iBAC7BjV,KAAKkV,EAAAA,UAAUtf,KAAKkf,MAAMK,kBAAkBvf,KAAKkf,MAAMM,aACvDtY,UAAU,SAACuY,GACNA,IAAgBzb,EAAK0b,eACvB1b,EAAK2b,OAAO3b,EAAKkb,MAAMU,YAI7B5f,KAAKof,YAAcpf,KAAKkf,MAAMW,oBAAoB3Y,UAAU,WAC1DlD,EAAK8b,YAKT7R,EAAF5N,UAAA8G,YAAE,WACElD,EAAJ5D,UAAU8G,YAAVjD,KAAAlE,MACIA,KAAKmf,cAAc/X,cACnBpH,KAAKof,YAAYhY,8BArCrBtF,KAACyK,EAAAA,UAADvK,OACEC,SAAU,2DAtCZH,KAAEie,EAAAA,2BACFje,KAAEkO,EAAAA,mBA6FFlO,KAAakM,GAAb/K,aAAAnB,KA7CKiL,EAAAA,OA6CL/K,MA7CYge,EAAAA,WAAW,WAAM,MAAAhS,YAtE7BC,GA6DsCgS,EAAAA,+BAoGpC,QAAFjS,GAAsBrN,EACY6I,GADZxJ,KAAtBW,YAAsBA,EACYX,KAAlCwJ,KAAkCA,EA7ClCxJ,KAAAkgB,aAA0D,GAAIrb,GAAAA,aAG9D7E,KAAAqf,iBAA+D,GAAIxa,GAAAA,aAGnE7E,KAAA6f,oBAAkE,GAAIhb,GAAAA,aAGtE7E,KAAAmgB,YAAuD,GAAItb,GAAAA,cAAmB,GAsB9E,MAZAM,QAAAC,eAAM4I,EAAN3N,UAAA,gBAAA,SAAeuG,GAET5G,KAAKwf,UADH5Y,EAAW,EACkC,OAA9B5G,KAAKogB,sBAAiC,OAAS,QACvDxZ,EAAW,EAC2B,OAA9B5G,KAAKogB,sBAAiC,QAAU,OAEhD,0CAOvBjb,OAAAC,eAAM4I,EAAN3N,UAAA,cAAA,SAAayG,GACT,GAAc,MAAVA,EAAJ,CAEA,GAAMuZ,GAAMrgB,KAAKogB,qBAEfpgB,MAAKsgB,QADK,OAAPD,GAAgBvZ,GAAU,GAAc,OAAPuZ,GAAgBvZ,EAAS,EAC9C,OAEA,0CAYnBkH,EAAF3N,UAAAse,SAAE,WACwB,UAAlB3e,KAAKwf,WAAyBxf,KAAKsgB,UACrCtgB,KAAKwf,UAA4B,QAAhBxf,KAAKsgB,QAAoB,qBAAuB,wBAIrEtS,EAAF3N,UAAAkgB,uBAAE,SAAuBC,GACrB,GAAMf,GAAczf,KAAKuf,kBAAkBiB,EAAEC,QAC7CzgB,MAAKqf,iBAAiBhZ,KAAKoZ,GACvBA,GACFzf,KAAKkgB,aAAa7Z,KAAKrG,KAAKW,YAAYF,cAAciI,eAI1DsF,EAAF3N,UAAAqgB,wBAAE,SAAwBF,GAElBxgB,KAAKuf,kBAAkBiB,EAAEC,UAAYzgB,KAAKuf,kBAAkBvf,KAAKwf,YACnExf,KAAKmgB,YAAY9Z,OAGfrG,KAAKuf,kBAAkBiB,EAAEG,aAAe3gB,KAAKuf,kBAAkBvf,KAAKwf,YACtExf,KAAK6f,oBAAoBxZ,QAK7B2H,EAAF3N,UAAA+f,oBAAE,WACE,MAAOpgB,MAAKwJ,MAA4B,QAApBxJ,KAAKwJ,KAAKnE,MAAkB,MAAQ,OAI1D2I,EAAF3N,UAAAkf,kBAAE,SAAkB3Y,GAChB,MAAmB,UAAZA,GACS,sBAAZA,GACY,uBAAZA,kBAnGR9E,KAACC,EAAAA,UAADC,OAAAC,SAAA,eACEC,SAAU,wOACVC,QAAF,wHACEE,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,OACE0U,YAAa2H,GAAfC,cACErc,MACFC,MAAe,oIAlFfoL,EAAA7K,kFAyFA0c,sBAAA/d,KAAAyB,EAAAA,SAGA4c,cAAAre,KAAAyB,EAAAA,SAGAqd,cAAA9e,KAAAsB,EAAAA,UAAApB,MAAA6e,EAAAA,uBAGAjB,WAAA9d,KAAAuB,EAAAA,MAAArB,MAAA,aAGA4E,WAAA9E,KAAAuB,EAAAA,QAGAyD,SAAAhF,KAAAuB,EAAAA,SAgBA2K,KCvIA8S,GAAA,yBAbA,MAAAA,MAcaC,GAA+B1V,EAAcyV,mBAcxD,QAAF/S,GAAqBpM,GAAnB,GAAFqC,GACIC,EADJC,KAAAlE,OAAAA,WAAqBgE,GAArBrC,WAAqBA,IA5BrB,MA2BwCuD,GAAxC6I,EAAA9J,GAME8J,EAAF1N,UAAA2gB,MAAE,WACEhhB,KAAK2B,WAAWlB,cAAcugB,SAGhCjT,EAAF1N,UAAA4gB,cAAE,WACE,MAAOjhB,MAAK2B,WAAWlB,cAAcygB,YAGvCnT,EAAF1N,UAAAP,eAAE,WACE,MAAOE,MAAK2B,WAAWlB,cAAcG,4BAtBzCkB,KAACyK,EAAAA,UAADvK,OACEC,SAAU,uBACVG,QAAS,YACTO,MACE+J,2BAA4B,oDAhBhC5K,KAAmBiP,EAAAA,cARnBhD,GA2BwCgT,InCuBxCI,GAAA,yBAlDA,MAAAA,MAmDaC,GAAyBtd,EAAmBqd,mBA+EvD,QAAF/gB,GAAsBO,EACAG,EACA4I,EACYF,GAHhC,GAAFxF,GAIIC,EAJJC,KAAAlE,OAAAA,WAAsBgE,GAAtBrD,YAAsBA,EACAqD,EAAtBlD,mBAAsBA,EACAkD,EAAtB0F,eAAsBA,EACY1F,EAAlCwF,KAAkCA,EAlDlCxF,EAAAqd,YAAgC,EAGhCrd,EAAAsd,gBAA4B,EAG5Btd,EAAAud,uBAAkC,EAGlCvd,EAAAwd,eAA2Bld,EAAAA,aAAaC,MAGxCP,EAAAnD,yBAA4B,EAG5BmD,EAAA9C,qBAAwB,EAGxB8C,EAAA/C,sBAAyB,EAWzB+C,EAAAU,eAAmC,EAanCV,EAAAV,mBAA0C,GAAIuB,GAAAA,aAG9Cb,EAAAR,aAAoC,GAAIqB,GAAAA,eAAxC,MAtDkCK,GAAlC9E,EAAA6D,GA0CAkB,OAAAC,eAAMhF,EAANC,UAAA,qBAAA,WAAgC,MAAOL,MAAK0E,oBAC1C,SAAkBW,GAChBA,EAAQE,EAAAA,qBAAqBF,GAC7BrF,KAAKuhB,sBAAwBvhB,KAAK0E,gBAAkBW,EACpDrF,KAAK0E,eAAiBW,EACtBrF,KAAKqhB,YAAchc,mCAgBrBjF,EAAFC,UAAAwF,sBAAE,WAEM7F,KAAKyhB,gBAAkBzhB,KAAKuB,eAAeC,SAC7CxB,KAAK0hB,oBACL1hB,KAAKyhB,eAAiBzhB,KAAKuB,eAAeC,OAC1CxB,KAAKc,mBAAmBC,gBAKtBf,KAAKuhB,wBACPvhB,KAAK2hB,eAAe3hB,KAAK0E,gBACzB1E,KAAKgB,0BACLhB,KAAKqB,4BACLrB,KAAKuhB,uBAAwB,EAC7BvhB,KAAKc,mBAAmBC,gBAKtBf,KAAK4hB,yBACP5hB,KAAK6hB,2BACL7hB,KAAK4hB,wBAAyB,EAC9B5hB,KAAKc,mBAAmBC,iBAI5BX,EAAFC,UAAAyhB,eAAE,SAAeta,GACb,OAAQA,EAAMua,SACZ,IAAKC,GAAAA,YACHhiB,KAAKiiB,eACL,MACF,KAAKC,GAAAA,WACHliB,KAAKmiB,mBACL,MACF,KAAKC,GAAAA,KACHpiB,KAAKqiB,iBACL7a,EAAM6E,gBACN,MACF,KAAKiW,GAAAA,IACHtiB,KAAKuiB,gBACL/a,EAAM6E,gBACN,MACF,KAAKmW,GAAAA,MACL,IAAKC,GAAAA,MACHziB,KAAKsD,mBAAmB+C,KAAKrG,KAAK+I,YAClCvB,EAAM6E,mBAQZjM,EAAFC,UAAA0G,mBAAE,WAAA,GAAF/C,GAAAhE,KACUiK,EAAYjK,KAAKwJ,KAAOxJ,KAAKwJ,KAAKU,OAASC,EAAAA,GAAa,MACxDuY,EAAS1iB,KAAK0J,eAAeQ,OAAO,KACpCyY,EAAU,WACd3e,EAAK0d,oBACL1d,EAAK3C,4BAK0B,oBAA1Buc,uBAAwCA,sBAAsB+E,GAAWA,IAChF3iB,KAAKwhB,eAAiB/Z,EAAAA,MAAMwC,EAAWyY,GAAQxb,UAAUyb,IAG3DviB,EAAFC,UAAA8G,YAAE,WACEnH,KAAKwhB,eAAepa,eAMtBhH,EAAFC,UAAAuiB,kBAAE,WACE5iB,KAAK0hB,oBACL1hB,KAAKqB,4BACLrB,KAAKc,mBAAmBC,gBAM1BX,EAAFC,UAAAqhB,kBAAE,WACE1hB,KAAKM,0BACLN,KAAKgB,0BACLhB,KAAK6hB,4BAIP1c,OAAFC,eAAMhF,EAANC,UAAA,kBASE,WAA2B,MAAOL,MAAKqhB,iBATvC,SAAehc,GACRrF,KAAK6iB,cAAcxd,IAAUrF,KAAKqhB,aAAehc,IAEtDrF,KAAKqhB,YAAchc,EACnBrF,KAAKwD,aAAa6C,KAAKhB,GACvBrF,KAAK8iB,aAAazd,qCAUpBjF,EAAFC,UAAAwiB,cAAE,SAAclc,GACZ,IAAK3G,KAAKuB,eAAkB,OAAO,CAEnC,IAAMmF,GAAM1G,KAAKuB,eAAiBvB,KAAKuB,eAAeE,UAAUkF,GAAS,IACzE,SAASD,IAAQA,EAAIoC,UAOvB1I,EAAFC,UAAAyiB,aAAE,SAAarX,GAKX,GAJIzL,KAAKa,yBACPb,KAAK2hB,eAAelW,GAGlBzL,KAAKuB,gBAAkBvB,KAAKuB,eAAeC,OAAQ,CACrDxB,KAAKuB,eAAeE,UAAUgK,GAAUuV,OAKxC,IAAM+B,GAAc/iB,KAAKoB,kBAAkBX,cACrC4f,EAAMrgB,KAAKogB,qBAGf2C,GAAYC,WADH,OAAP3C,EACuB,EAEA0C,EAAYriB,YAAcqiB,EAAYniB,cASrER,EAAFC,UAAA4iB,WAAE,SAAWC,GACT,GAAIljB,KAAKuB,eAGP,IAAK,GAFC4hB,GAA6BnjB,KAAKuB,eAAeE,UAE9CuG,EAAIhI,KAAK+I,WAAama,EAAQlb,EAAImb,EAAK3hB,QAAUwG,GAAK,EAAGA,GAAKkb,EACrE,GAAIljB,KAAK6iB,cAAc7a,GAErB,YADAhI,KAAK+I,WAAaf,IAQ1B5H,EAAFC,UAAA4hB,cAAE,WACEjiB,KAAKijB,WAAyC,OAA9BjjB,KAAKogB,sBAAiC,GAAK,IAI7DhgB,EAAFC,UAAA8hB,kBAAE,WACEniB,KAAKijB,WAAyC,OAA9BjjB,KAAKogB,uBAAkC,EAAI,IAIrDhgB,EAAVC,UAAAgiB,0BACI,IAAK,GAAIra,GAAI,EAAGA,EAAIhI,KAAKuB,eAAeC,OAAQwG,IAC9C,GAAIhI,KAAK6iB,cAAc7a,GAAI,CACzBhI,KAAK+I,WAAaf,CAClB,SAME5H,EAAVC,UAAAkiB,yBACI,IAAK,GAAIva,GAAIhI,KAAKuB,eAAeC,OAAS,EAAGwG,GAAK,EAAGA,IACnD,GAAIhI,KAAK6iB,cAAc7a,GAAI,CACzBhI,KAAK+I,WAAaf,CAClB,SAMN5H,EAAFC,UAAA+f,oBAAE,WACE,MAAOpgB,MAAKwJ,MAA4B,QAApBxJ,KAAKwJ,KAAKnE,MAAkB,MAAQ,OAI1DjF,EAAFC,UAAAwhB,yBAAE,WACE,GAAM5hB,GAAiBD,KAAKC,eACtBmjB,EAA4C,QAA/BpjB,KAAKogB,uBAAmCngB,EAAiBA,CAE5ED,MAAKQ,SAASC,cAAc6H,MAAM8M,UAAY,eAAegO,EAAjE,aAIEje,OAAFC,eAAMhF,EAANC,UAAA,sBAAE,WAA+B,MAAOL,MAAKshB,qBAC3C,SAAmB+B,GACjBrjB,KAAKshB,gBAAkBvb,KAAKG,IAAI,EAAGH,KAAKC,IAAIhG,KAAKmB,wBAAyBkiB,IAI1ErjB,KAAK4hB,wBAAyB,EAC9B5hB,KAAKgB,2DAWPZ,EAAFC,UAAAijB,cAAE,SAAcC,GACZ,GAAMpjB,GAAaH,KAAKoB,kBAAkBX,cAAcG,WAGxDZ,MAAKC,iBAAgC,UAAbsjB,GAAyB,EAAI,GAAKpjB,EAAa,GASzEC,EAAFC,UAAAshB,eAAE,SAAe6B,GACb,GAAM3jB,GAAgBG,KAAKuB,eAAiBvB,KAAKuB,eAAeE,UAAU+hB,GAAc,IAExF,IAAK3jB,EAAL,CAGA,GAEIF,GAAwBC,EAFtBO,EAAaH,KAAKoB,kBAAkBX,cAAcG,WAGtB,QAA9BZ,KAAKogB,uBACPzgB,EAAiBE,EAAcohB,gBAC/BrhB,EAAgBD,EAAiBE,EAAcC,mBAE/CF,EAAgBI,KAAKQ,SAASC,cAAcG,YAAcf,EAAcohB;qFACxEthB,EAAiBC,EAAgBC,EAAcC,iBAGjD,IAAMC,GAAmBC,KAAKC,eACxBC,EAAkBF,KAAKC,eAAiBE,CAE1CR,GAAiBI,EAEnBC,KAAKC,gBAAkBF,EAAmBJ,EAxVjB,GAyVhBC,EAAgBM,IAEzBF,KAAKC,gBAAkBL,EAAgBM,EA3Vd,MAuW7BE,EAAFC,UAAAC,wBAAE,WACE,GAAMC,GACFP,KAAKQ,SAASC,cAAcC,YAAcV,KAAKW,YAAYF,cAAcG,WAExEL,KACHP,KAAKC,eAAiB,GAGpBM,IAAcP,KAAKa,yBACrBb,KAAKc,mBAAmBC,eAG1Bf,KAAKa,wBAA0BN,GAYjCH,EAAFC,UAAAW,wBAAE,WAEEhB,KAAKiB,qBAA8C,GAAvBjB,KAAKC,eACjCD,KAAKkB,oBAAsBlB,KAAKC,gBAAkBD,KAAKmB,wBACvDnB,KAAKc,mBAAmBC,gBAU1BX,EAAFC,UAAAc,sBAAE,WAGE,MAFwBnB,MAAKQ,SAASC,cAAcC,YACjCV,KAAKoB,kBAAkBX,cAAcG,aACf,GAI3CR,EAAFC,UAAAgB,0BAAE,WACE,GAAMC,GAAuBtB,KAAKuB,gBAAkBvB,KAAKuB,eAAeC,OACpExB,KAAKuB,eAAeE,UAAUzB,KAAK0B,eAAeC,WAAWlB,cAC7D,IAEJT,MAAK4B,QAAQC,eAAeP,mBA3YhCQ,KAACC,EAAAA,UAADC,OAAAC,SAAA,iBACEC,SAAU,+7BACVC,QAAF,y+DACEC,QAAF,iBACEC,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,OACEC,MACFC,MAAA,iBACMC,qDAAN,0BACIC,6BAAJ,yHAlDAhB,KAAEiB,EAAAA,gBAHFjB,KAAEkB,EAAAA,eAAFC,aAAAnB,KAAAoB,EAAAA,cARA9C,EAAA+C,2GAqEA/B,oBAAAU,KAAAsB,EAAAA,UAAApB,MAAA,sBACAxB,WAAAsB,KAAAsB,EAAAA,UAAApB,MAAA,aACAN,gBAAAI,KAAAuB,EAAAA,QACAC,qBAAAxB,KAAAyB,EAAAA,SAmCAC,eAAA1B,KAAAyB,EAAAA,UAaAnD,OC1FIqD,GAAS,EAGbC,GAAA,yBAzCA,MAAAA,MAqDAC,GAAA,WACE,QAAFA,GAAqBhD,GAAAX,KAArBW,YAAqBA,EAtDrB,MAAAgD,MAwDaC,GAAwBC,EAAWC,EAAmBH,IAAkB,0BA4FnF,QAAFI,GAAcpC,EACQb,GADpB,GAAFkD,GAEIC,EAFJC,KAAAlE,KAEU2B,IAFV3B,WACsBgE,GAAtBlD,mBAAsBA,EA7DtBkD,EAAAG,eAA0C,EAG1CH,EAAAI,sBAA0C,EAG1CJ,EAAAK,kBAA8BC,EAAAA,aAAaC,MAG3CP,EAAAQ,sBAAkCF,EAAAA,aAAaC,MAM/CP,EAAAS,gBAAoC,EAQpCT,EAAAU,eAA0C,KAG1CV,EAAAW,eAAkD,QAmBlDX,EAAAY,oBAAiE,GAAIC,GAAAA,aAIrEb,EAAAc,YAAM,GAAID,GAAAA,aAGVb,EAAAe,cAAyD,GAAIF,GAAAA,aAI7Db,EAAAgB,kBAAM,GAAIH,GAAAA,cAAgC,GAOtCb,EAAKiB,SAAWxB,OARpB,MAjEiCyB,GAAjCnB,EAAAE,GAuBAkB,OAAAC,eAAMrB,EAAN1D,UAAA,qBAAA,WAAiC,MAAOL,MAAKyE,oBAC3C,SAAkBY,GAAkBrF,KAAKyE,eAAiBa,EAAAA,sBAAsBD,oCAKlFF,OAAAC,eAAMrB,EAAN1D,UAAA,qBAAA,WAAuC,MAAOL,MAAK0E,oBACjD,SAAkBW,GAChBrF,KAAKmE,eAAiBoB,EAAAA,qBAAqBF,EAAO,uCAStDF,OAAAC,eAAMrB,EAAN1D,UAAA,uBAAA,WAAwC,MAAOL,MAAKwF,sBAClD,SAAoBH,GAClB,GAAM5E,GAA6BT,KAAKW,YAAYF,aAEpDA,GAAcgF,UAAUC,OAAO,kBAAkB1F,KAAK2F,iBAElDN,GACF5E,EAAcgF,UAAUG,IAAI,kBAAkBP,GAGhDrF,KAAKwF,iBAAmBH,mCAgC1BtB,EAAF1D,UAAAwF,sBAAE,WAAA,GAAF7B,GAAAhE,KAKQ8F,EAAgB9F,KAAKmE,eACrB4B,KAAKC,IAAIhG,KAAKiG,MAAMzE,OAAS,EAAGuE,KAAKG,IAAIlG,KAAKmE,gBAAkB,EAAG,GAIvE,IAAInE,KAAK0E,gBAAkBoB,GAAwC,MAAvB9F,KAAK0E,eAAwB,CACvE,GAAMyB,GAAiBnG,KAAKoG,mBAAmBN,EAC/C9F,MAAKgF,kBAAkBqB,KAAKF,GAG5BG,QAAQC,UAAUC,KAAK,WAAM,MAAAxC,GAAKY,oBAAoByB,KAAKP,KAI7D9F,KAAKiG,MAAMQ,QAAQ,SAACC,EAAaC,GAC/BD,EAAIE,SAAWD,EAAQb,EACvBY,EAAIG,SAAWF,IAAUb,EAIE,MAAvB9B,EAAKU,gBAA0C,GAAhBgC,EAAIE,UAAkBF,EAAII,SAC3DJ,EAAII,OAAShB,EAAgB9B,EAAKU,kBAIlC1E,KAAK0E,iBAAmBoB,IAC1B9F,KAAK0E,eAAiBoB,EACtB9F,KAAKc,mBAAmBC,iBAI5BgD,EAAF1D,UAAA0G,mBAAE,WAAA,GAAF/C,GAAAhE,IACIA,MAAKgH,wBAILhH,KAAKqE,kBAAoBrE,KAAKiG,MAAMgB,QAAQC,UAAU,WACpDlD,EAAKgD,wBACLhD,EAAKlD,mBAAmBC,kBAI5BgD,EAAF1D,UAAA8G,YAAE,WACEnH,KAAKqE,kBAAkB+C,cACvBpH,KAAKwE,sBAAsB4C,eAI7BrD,EAAF1D,UAAAgH,cAAE,WACMrH,KAAKsH,YACPtH,KAAKsH,WAAWjG,6BAIpB0C,EAAF1D,UAAAkH,cAAE,SAAcZ,GACZ3G,KAAK8E,YAAYuB,KAAKrG,KAAKoG,mBAAmBO,KAGxC5C,EAAV1D,UAAA+F,mBAAA,SAA6BO,GACzB,GAAMa,GAAQ,GAAI9D,GAKlB,OAJA8D,GAAMb,MAAQA,EACV3G,KAAKiG,OAASjG,KAAKiG,MAAMzE,SAC3BgG,EAAMd,IAAM1G,KAAKiG,MAAMxE,UAAUkF,IAE5Ba,GASDzD,EAAV1D,UAAA2G,2CACQhH,MAAKwE,uBACPxE,KAAKwE,sBAAsB4C,cAG7BpH,KAAKwE,sBAAwBiD,EAAAA,MAAjCC,UAAA,GACW1H,KAAKiG,MAAM0B,IAAI,SAAAjB,GAAO,MAAAA,GAAIkB,iBADrCC,OAEW7H,KAAKiG,MAAM0B,IAAI,SAAAjB,GAAO,MAAAA,GAAIoB,iBAAeZ,UAAU,WACxDlD,EAAKlD,mBAAmBC,kBAK5BgD,EAAF1D,UAAA0H,eAAE,SAAeC,GACb,MAAO,iBAAiBhI,KAAKiF,SAAjC,IAA6C+C,GAI3CjE,EAAF1D,UAAA4H,iBAAE,SAAiBD,GACf,MAAO,mBAAmBhI,KAAKiF,SAAnC,IAA+C+C,GAO7CjE,EAAF1D,UAAA6H,yBAAE,SAAyBC,GACvB,GAAKnI,KAAKyE,gBAAmBzE,KAAKoE,sBAAlC,CAEA,GAAMgE,GAAuBpI,KAAKqI,gBAAgB5H,aAElD2H,GAAQE,MAAMC,OAASvI,KAAKoE,sBAAwB,KAIhDpE,KAAKqI,gBAAgB5H,cAAc+H,eACrCJ,EAAQE,MAAMC,OAASJ,EAAY,QAKvCpE,EAAF1D,UAAAoI,4BAAE,WACEzI,KAAKoE,sBAAwBpE,KAAKqI,gBAAgB5H,cAAciI,aAChE1I,KAAKqI,gBAAgB5H,cAAc6H,MAAMC,OAAS,GAClDvI,KAAK+E,cAAcsB,QAIrBtC,EAAF1D,UAAAsI,aAAE,SAAajC,EAAakC,EAAyBC,GAC5CnC,EAAIoC,WACP9I,KAAK0B,cAAgBkH,EAAUG,WAAaF,IAKhD9E,EAAF1D,UAAA2I,aAAE,SAAatC,EAAamC,GACxB,MAAInC,GAAIoC,SACC,KAEF9I,KAAK0B,gBAAkBmH,EAAM,GAAK,kBA1O7C/G,KAACC,EAAAA,UAADC,OAAAC,SAAA,gBACEgH,SAAU,cACV/G,SAAU,2wCACVC,QAAF,gsCACEE,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,OACEN,QAAF,QAAA,iBACEO,MACFC,MAAA,gBACMsG,uCAAN,gBACIC,wCAAJ,sHA5DApF,EAAEZ,wHAoEFmE,aAAAxF,KAAAsB,EAAAA,UAAApB,MAAA,eAEAoH,gBAAAtH,KAAAuB,EAAAA,QAEA3B,gBAAAI,KAAAuB,EAAAA,QAeAsB,iBAAA7C,KAAAuB,EAAAA,QAMAsC,kBAAA7D,KAAAuB,EAAAA,QAQAuB,sBAAA9C,KAAQyB,EAAAA,SAGRuB,cAAAhD,KAAAyB,EAAAA,SAgBAwB,gBAAAjD,KAAAyB,EAAAA,SAGAyB,oBAAGlD,KAAMyB,EAAAA,UAOTQ,OC5FAsF,GAAA,WACE,QAAFA,GAAqB1I,GAAAX,KAArBW,YAAqBA,EApDrB,MAAA0I,MAsDaC,GAAsBxF,EAAmBD,EAAWwF,GAAe,2BAgD9E,QAAFE,GAAc5H,EACoB6H,EACZC,EACA3I,EACA4I,GAJpB,GAAF1F,GAKIC,EALJC,KAAAlE,KAKU2B,IALV3B,WACkCgE,GAAlCwF,KAAkCA,EACZxF,EAAtByF,QAAsBA,EACAzF,EAAtBlD,mBAAsBA,EACAkD,EAAtB0F,eAAsBA,EA/BtB1F,EAAA2F,WAAgC,GAAIC,GAAAA,UAYpC,MAhB+B1E,GAA/BqE,EAAAtF,GAiBAkB,OAAAC,eAAMmE,EAANlJ,UAAA,uBAAA,WAAwC,MAAOL,MAAKwF,sBAClD,SAAoBH,GAClB,GAAM5E,GAA6BT,KAAKW,YAAYF,aAEpDA,GAAcgF,UAAUC,OAAO,kBAAkB1F,KAAK2F,iBAElDN,GACF5E,EAAcgF,UAAUG,IAAI,kBAAkBP,GAGhDrF,KAAKwF,iBAAmBH,mCAgB1BkE,EAAFlJ,UAAAwJ,iBAAE,SAAiBC,GAGf9J,KAAK+J,qBAAuBD,EAC5B9J,KAAKc,mBAAmBC,gBAG1BwI,EAAFlJ,UAAA0G,mBAAE,WAAA,GAAF/C,GAAAhE,IACIA,MAAKyJ,QAAQO,kBAAkB,WAC7B,GAAMC,GAAYjG,EAAKwF,KAAOxF,EAAKwF,KAAKU,OAASC,EAAAA,GAAa,KAE9D,OAAO1C,GAAAA,MAAMwC,EAAWjG,EAAK0F,eAAeQ,OAAO,KAC9CE,KAAKC,EAAAA,UAAUrG,EAAK2F,aACpBzC,UAAU,WAAM,MAAAlD,GAAKsG,oBAK9Bf,EAAFlJ,UAAAwF,sBAAE,WACE,GAAI7F,KAAK+J,mBAAoB,CAC3B,GAAMQ,GAAYvK,KAAKwK,UAAUC,KAAK,SAAA/D,GAAO,MAAAA,GAAIgE,QAEjD1K,MAAK2K,mBAAqBJ,EAAYA,EAAU5J,YAAc,KAC9DX,KAAKsK,eACLtK,KAAK+J,oBAAqB,IAI9BR,EAAFlJ,UAAA8G,YAAE,WACEnH,KAAK2J,WAAWiB,OAChB5K,KAAK2J,WAAWkB,YAIlBtB,EAAFlJ,UAAAiK,aAAE,WACMtK,KAAK2K,oBACP3K,KAAK4B,QAAQkJ,OACb9K,KAAK4B,QAAQC,eAAe7B,KAAK2K,mBAAmBlK,gBAEpDT,KAAK4B,QAAQmJ,uBA7FnBjJ,KAACC,EAAAA,UAADC,OAAAC,SAAA,oBACEgH,SAAU,0BACV7G,QAAF,QAAA,iBACEF,SAAU,6HACVC,QAAS,g+BACTQ,MAAFC,MAAA,mBACEP,cAAFC,EAAAA,kBAAAC,KACEC,gBAAgBC,EAAAA,wBAAlBC,0HAjDAZ,KAAEkJ,EAAAA,SAXFlJ,KAAQmJ,EAAAA,oBAeRnJ,KAAEiB,EAAAA,iBAbFwG,EAAApG,wJAuEAwC,kBAAA7D,KAAAuB,EAAAA,SAOAkG,OAvFA2B,GAAA,qCAgKAC,GAAAC,EAAAtH,EAAAuH,EAAAH,6CAoBA,GAAAlH,GAAAC,EAAAC,KAAAlE,OAAAA,IAmDA,OAlBAgE,GAAAsH,WAAAA,EAAEtH,EAAFrD,YAAAA,oEAVAqD,EAAAuH,eAA+BC,mBAA/B7K,EAAAF,eAkBIuD,EAAKyH,SAATC,SAAAD,IAAA,EACAE,IAEA3H,EAAA4H,cAEAC,qBAAAF,EAAAE,qBACAC,YAAAH,EAAAI,gBACQC,UAARL,EAAAK,YAGAhI,EAzCA,0DA2CAiI,2EAzCAjM,KAAAkM,UAAA7G,EACQrF,KAAKsL,WAAbzB,iBAAA7J,KAAAW,eAGAwL,YAAA,EACAC,cAAA,gJAaAD,YAAA,EACAC,cAAA,uIA+BA5E,EAAA6E,kBAGAC,EAAArJ,aACAnB,KAAAyK,EAAAA,UAAAvK,+CA/EAiH,SAAA,aACE7G,QAAF,WAAA,gBAAA,YACEO,MACFC,MAAA,eACM4J,uBAAN,sBACIC,kBAAJ,WACIC,2BAAJ,WACIC,+BAAJ,SACIC,UAAJ,8FAxGA9K,KAAakJ,EAAAA,SArDblJ,KAAE+K,EAAAA,WAIF/K,SAAEgL,GAAF7J,aAAAnB,KAAAoB,EAAAA,WAAApB,KAAAiL,EAAAA,OAAA/K,MAAAgL,QAdAlL,SAAQgL,GAAR7J,aAAAnB,KAAAmL,EAAAA,UAAAjL,MAAA,iBAkNAsK,EAAAnJ,yCA5BAmJ,mCC9LA,sBAwBAxK,KAACoL,EAAAA,SAADlL,OACEmL,SACEC,EAAAA,aACAC,GACAC,EAAAA,aACAC,GACAC,EAAAA,iBAGFC,SACEJ,GACAtJ,GACA2J,GACAC,GACApE,GACA+C,GACAsB,IAEFC,cACE9J,GACA2J,GACAC,GACAG,GACAC,GACAxE,GACA+C,GACA0B,GACAC,GACA7N,GACAwN,QArDJM,KC0BAC,GAAA,WACE,QAAFA,GAAqBxN,GAAAX,KAArBW,YAAqBA,EA3BrB,MAAAwN,MA6BaC,GAAuBvK,EAAWsK,gCA7B/C,sBA+BArM,KAACyK,EAAAA,UAADvK,OACEC,SAAU,kBACVgH,SAAU,gBACVtG,MAAOC,MAAS,uBAlClByL,KAoCAC,GAAA,SAAArK,GAuBE,QAAFqK,GACI3M,EACQ4M,EACUC,GAHpB,GAAFxK,GAIIC,EAJJC,KAAAlE,KAIU2B,IAJV3B,WAEYgE,GAAZuK,UAAYA,EAKRvK,EAAKyK,UAAYD,IATrB,MAJgCtJ,GAAhCoJ,EAAArK,GAgBEqK,EAAFjO,UAAAqO,gBAAE,WAAA,GAAF1K,GAAAhE,IACS2O,GAAAA,aAAgB3O,KAAKuO,UAAUK,YAIpC5O,KAAK6O,0BACL7O,KAAK8O,aAAa7H,QAAQC,UAAU,WAAM,MAAAlD,GAAK6K,8BAMzCP,EAAVjO,UAAAwO,6CACI,IAAK7O,KAAK8O,aAAatN,OAAvB,IAM2BuN,MAAM7K,KAAKlE,KAAKW,YAAYF,cAAcuO,YAClEC,OAAO,SAAAC,GAAQ,QAAEA,EAAKzJ,WAAayJ,EAAKzJ,UAAU0J,SAAS,sBAC3DF,OAAO,SAAAC,GAAQ,MAAAA,GAAKE,YAAcpL,EAAKyK,UAAYzK,EAAKyK,UAAUY,aAAe,KACjFC,KAAK,SAAAJ,GAAQ,MAAAA,GAAKK,YAAYC,UAG/BC,sBAxDN3N,KAACC,EAAAA,UAADC,OAAAC,SAAA,cACEgH,SAAU,aACV/G,SAAU,8EACVC,QAAF,yiBACEC,QAAF,SACEO,MACFC,MAAA,cACM8M,oCAAN,2BACIC,iCAAJ,6BAEAnN,gBAAAC,EAAAA,wBAAAC,OACAL,cAAAC,EAAAA,kBAAAC,mFAnCAT,SAAEgL,GAAF7J,aAAAnB,KAAAiL,EAAAA,OAAA/K,MAAA4N,EAAAA,eAgDAtB,EAAAnL,mEALAmL,mCCzDA,sBAaAxM,KAACoL,EAAAA,SAADlL,OACEmL,SAAUE,IACVI,SAAUa,GAAYD,GAAehB,IACrCQ,cAAeS,GAAYD,QAhB7BwB,mBCqBE,QAAFC,GAAqBC,GAAA/P,KAArB+P,cAAqBA,EArBrB,sBAiBAjO,KAACyK,EAAAA,UAADvK,OACEC,SAAU,8DARZH,KAAEkO,EAAAA,oBAVFF,KC2BaG,GAAwB7E,EAAcC,EAAc6E,EAAAA,cACpDC,GAA8B/E,EAAcC,EAAc+E,EAAAA,mCAoBrE,QAAFC,GAAwB1P,EACA2P,EACa7E,GAFnC,GAAFzH,GAGIC,EAHJC,KAAAlE,KAGUW,EAAa2P,IAHvBtQ,WAAwBgE,GAAxBrD,YAAwBA,EACAqD,EAAxBsM,MAAwBA,EAHxBtM,EAAAuM,KAAwC,WAOpCvM,EAAKyH,SAAW+E,OAAO/E,IAAa,IArDxC,MA6CoCvG,GAApCmL,EAAApM,kBAZAnC,KAACyK,EAAAA,UAADvK,OACEC,SAAU,gBACVgH,SAAU,cACV7G,QAAS,WAAY,YACrBO,MACE8N,uBAAwB,aACxBC,oBAAqB,qCACrBC,cAAe,OACf/N,MAAS,iBAEXgO,YAAaC,QAASX,EAAAA,YAAaY,YAAaT,4CA/BlDvO,KAAEiP,EAAAA,aAOFjP,KAAEkP,EAAAA,UA+BFlP,SAAAgL,GAAA7J,aAAAnB,KAAemL,EAAAA,UAAfjL,MAAyB,mCAJzBuO,OAAAzO,KAAGuB,EAAAA,SA9CHgN,GA6CoCJ,+EA7CpC,MAmEuC/K,GAAvC+L,EAAAhN,kBAPAnC,KAACyK,EAAAA,UAADvK,OACEC,SAAU,mBACVG,QACE,4BAEFwO,YAAaC,QAASK,EAAAA,eAAgBJ,YAAaG,0BAGrDE,OAAArP,KAAGuB,EAAAA,MAAHrB,MAAS,kBApETiP,GAmEuCC,EAAAA,+BA4BrC,QAAFE,GAAwBzQ,EACA2P,EACAe,EACa5F,GAHnC,GAAFzH,GAIIC,EAJJC,KAAAlE,KAIUW,EAAa2P,EAAOe,IAJ9BrR,WAAwBgE,GAAxBrD,YAAwBA,EACAqD,EAAxBsM,MAAwBA,EACAtM,EAAxBqN,SAAwBA,EAIpBrN,EAAKyH,SAAW+E,OAAO/E,IAAa,IArGxC,MAwF0CvG,GAA1CkM,EAAAnN,GAmBEmN,EAAF/Q,UAAA0G,mBAAE,WACE9C,EAAJ5D,UAAU0G,mBAAV7C,KAAAlE,OAGEoR,EAAF/Q,UAAA8G,YAAE,WACElD,EAAJ5D,UAAU8G,YAAVjD,KAAAlE,sBAtCA8B,KAACyK,EAAAA,UAADvK,OACEC,SAAU,uBACVgH,SAAU,oBACVtG,MACE8N,uBAAwB,aACxBE,cAAe,OACf/N,MAAS,wBAEXR,QAAS,WAAY,YACrBwO,YACGC,QAAST,EAAAA,kBAAmBU,YAAaM,IACzCP,QAASX,EAAAA,YAAaY,YAAaM,4CAzExCtP,KAAEiP,EAAAA,aAOFjP,KAAEkP,EAAAA,UALFlP,KAAEwP,EAAAA,kBAoFFxP,SAAAgL,GAAA7J,aAAAnB,KAAemL,EAAAA,UAAfjL,MAAyB,mCAPzBkN,OAAApN,KAAGuB,EAAAA,MAAHrB,MAAS,uBAETuP,aAAAzP,KAAG0P,EAAAA,gBAAHxP,MAAmB8N,OA7FnBsB,GAwF0CjB,+ECxF1C,MAkB2CjL,GAA3CuM,EAAAxN,kBAJAnC,KAACyK,EAAAA,UAADvK,OACEC,SAAU,uBACV2O,YAAaC,QAASa,EAAAA,mBAAoBZ,YAAaW,0BAKzDE,QAAA7P,KAAGuB,EAAAA,MAAHrB,MAAS,wBAGT4P,SAAA9P,KAAGuB,EAAAA,MAAHrB,MAAS,+BAxBTyP,GAkB2CC,EAAAA,+FCa3C,MAFgCxM,GAAhC2M,EAAA5N,kBAdAnC,KAACC,EAAAA,UAADC,OAAAC,SAAA,WACEgH,SAAU,UACV/G,SAAU,kDACVS,MACFC,MAAA,WACM2N,KAAN,QAEApO,QAAA,mLACAE,cAAAC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,OACEkO,YAAFC,QAAAG,EAAAA,QAAkCF,YAAlCe,sEAMAA,8FCTA7N,GAAA8N,WAA4D,IAtB5D,MAqB0C5M,GAA1C6M,EAAA9N,kBAPAnC,KAACyK,EAAAA,UAADvK,OACEC,SAAU,sBACVU,MACEiK,UAAW,mBAEbgE,YAAaC,QAASmB,EAAAA,kBAAmBlB,YAAaiB,0BAGxDD,YAAAhQ,KAAGuB,EAAAA,MAAHrB,MAAS,iCAtBT+P,GAqB0CC,EAAAA,mBCFpCC,IACJb,GACAH,GACAQ,GACAM,GACAF,GACAxB,GACAP,gCA1BF,sBA6BAhO,KAACoL,EAAAA,SAADlL,OACEmL,SAAU+E,EAAAA,cAAe9E,EAAAA,aAAcC,IACvCI,QAASwE,GACTpE,aAAcoE,OAhChBE,KCgDAC,GAAA,WAEE,QAAFA,GAAqBC,EACAC,EACAC,EACAC,GAHAxS,KAArBqS,kBAAqBA,EACArS,KAArBsS,SAAqBA,EACAtS,KAArBuS,aAAqBA,EACAvS,KAArBwS,YAAqBA,EArDrB,MAuDEJ,GAAF/R,UAAAoS,aAAE,SAAavD,EAASyC,EACTe,EAAkBC,GAD/B,GAAF3O,GAAAhE,KAEU4S,EAAW5S,KAAKqS,kBAAkBnD,EAAMyC,EAY9C,OAXAe,GAAYG,KAAKD,GAEb5S,KAAKuS,aAAaK,IACpB5S,KAAKwS,YAAYtD,GAAM9E,KAAK0I,EAAAA,KAAK,IAAI5L,UAAU,SAAA6L,GAC7CA,EAAStM,QAAQ,SAACuM,EAAOrM,GACvB,GAAIsM,GAA4BN,EAAU5D,OAC1CkE,GAAeJ,KAAKlM,GAASoM,EAASvR,OAAS,GAC/CwC,EAAKyO,aAAaO,EAAOrB,EAAQ,EAAGe,EAAaO,OAIhDP,GAQTN,EAAF/R,UAAA6S,aAAE,SAAaC,GAAb,GAAFnP,GAAAhE,KACQ0S,IAEJ,OADAS,GAAe1M,QAAQ,SAAAyI,GAAQ,MAAAlL,GAAKyO,aAAavD,EAAM,EAAGwD,QACnDA,GAOTN,EAAF/R,UAAA+S,qBAAE,SAAqBC,EAAYC,GAAjC,GAAFtP,GAAAhE,KACQuT,KACAC,IAeJ,OAdAA,GAAc,IAAK,EAEnBH,EAAM5M,QAAQ,SAACyI,GAEb,IAAK,GADDuE,IAAS,EACJzL,EAAI,EAAGA,GAAKhE,EAAKsO,SAASpD,GAAOlH,IACxCyL,EAASA,GAAUD,EAAcxL,EAE/ByL,IACFF,EAAQV,KAAK3D,GAEXlL,EAAKuO,aAAarD,KACpBsE,EAAcxP,EAAKsO,SAASpD,GAAQ,GAAKoE,EAAYI,WAAWxE,MAG7DqE,GAxGXnB,KAoHAuB,GAAA,SAAA1P,GAaE,QAAF0P,GAAsBL,EACAM,EACRC,OAAd,KAAAA,IAAcA,KAFZ,IAAF7P,GAGIC,EAHJC,KAAAlE,OAAAA,WAAsBgE,GAAtBsP,YAAsBA,EACAtP,EAAtB4P,cAAsBA,EAbtB5P,EAAA8P,eAAmB,GAAIC,GAAAA,oBAEvB/P,EAAAgQ,cAAkB,GAAID,GAAAA,oBAclB/P,EAAKiQ,MAAQ,GAAIF,GAAAA,gBAAqBF,KArI1C,MAoHiD3O,GAAjDyO,EAAA1P,GAMEkB,OAAFC,eAAMuO,EAANtT,UAAA,YAAE,WAAa,MAAOL,MAAKiU,MAAM5O,WAC/B,SAASA,GACPrF,KAAKiU,MAAMrJ,KAAKvF,GAChBrF,KAAK8T,eAAelJ,KAAK5K,KAAK4T,cAAcV,aAAalT,KAAKmR,OAC9DnR,KAAKsT,YAAYY,UAAYlU,KAAK8T,eAAezO,uCAUnDsO,EAAFtT,UAAA8T,QAAE,SAAQC,GAAR,GAAFpQ,GAAAhE,KACUiH,GACJmN,EAAiBC,WACjBrU,KAAKsT,YAAYgB,eAAuB,SACxCtU,KAAK8T,eAEP,OAAOrM,GAAAA,MAAXC,UAAA,GAAoBT,GAASmD,KAAKzC,EAAAA,IAAI,WAGhC,MAFA3D,GAAKgQ,cAAcpJ,KACjB5G,EAAK4P,cAAcR,qBAAqBpP,EAAK8P,eAAezO,MAAOrB,EAAKsP,cACnEtP,EAAKgQ,cAAc3O,UAI9BsO,EAAFtT,UAAAkU,WAAE,aArJFZ,GAoHiDa,EAAAA,YCjGjDC,GAAA,SAAAxQ,oEACAD,GAAAiQ,MAAU,GAAIF,GAAAA,sBApBd,MAmBgD7O,GAAhDuP,EAAAxQ,GAMEkB,OAAFC,eAAMqP,EAANpU,UAAA,YAAE,WAAa,MAAOL,MAAKiU,MAAM5O,WAC/B,SAASA,GAAcrF,KAAKiU,MAAMrJ,KAAKvF,oCAEvCoP,EAAFpU,UAAA8T,QAAE,SAAQC,GAAR,GAAFpQ,GAAAhE,IACI,OAAOyH,GAAAA,MAAXC,UAAA,IAAqB0M,EAAiBC,WAAYrU,KAAKiU,QAChD7J,KAAKzC,EAAAA,IAAI,WACR,MAAO3D,GAAKmN,SAIlBsD,EAAFpU,UAAAkU,WAAE,aAnCFE,GAmBgDD,EAAAA,YCRnCE,GAAU,GAAIC,GAAAA,QAAQ,4RC4CO,+BAGD,sqFC9CtB,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QACjF,QAAS,SAAU,izCCOmB;yKnB2ET,6BAGD,mCAGOjV,2BAGR,oCAUUA,mCAMF,khFClEV"}