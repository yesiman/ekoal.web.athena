{
  "version": 3,
  "file": "ngx-filter-pipe.umd.js",
  "sources": [
    "ng://ngx-filter-pipe/out/src/app/shared/ngx-filter-pipe/ngx-filter.module.ts",
    "ng://ngx-filter-pipe/out/src/app/shared/ngx-filter-pipe/ngx-filter.pipe.ts"
  ],
  "sourcesContent": [
    "/**\n * Created by vadimdez on 28/11/2016.\n */\nimport { NgModule } from '@angular/core';\nimport { FilterPipe } from './ngx-filter.pipe';\n\n@NgModule({\n  declarations: [FilterPipe],\n  providers: [FilterPipe],\n  exports: [FilterPipe]\n})\n\nexport class FilterPipeModule {}\n",
    "/**\n * Created by vadimdez on 28/06/16.\n */\nimport { Pipe, Injectable, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'filterBy',\n  pure: false\n})\n\n@Injectable()\nexport class FilterPipe implements PipeTransform {\n\n  private filterByString(filter) {\n    if (filter) {\n      filter = filter.toLowerCase();\n    }\n    return value => {\n      return !filter || (value ? ('' + value).toLowerCase().indexOf(filter) !== -1 : false);\n    }\n  }\n\n  private filterByBoolean(filter) {\n    return value => {\n      return Boolean(value) === filter;\n    }\n  }\n\n  private filterByObject(filter) {\n    return value => {\n      for (let key in filter) {\n\n        if (key === '$or') {\n          if (!this.filterByOr(filter.$or)(this.getValue(value))) {\n            return false;\n          }\n          continue;\n        }\n\n        let walker = value;\n        let found = false;\n        do {\n          if (walker.hasOwnProperty(key) || Object.getOwnPropertyDescriptor(walker, key)) {\n            found = true;\n            break;\n          }\n        } while (walker = Object.getPrototypeOf(walker));\n\n        if (!found) {\n          return false;\n        }\n\n        let val = this.getValue(value[key]);\n        const filterType = typeof filter[key];\n        let isMatching;\n\n        if (filterType === 'boolean') {\n          isMatching = this.filterByBoolean(filter[key])(val);\n        } else if (filterType === 'string') {\n          isMatching = this.filterByString(filter[key])(val);\n        } else if (filterType === 'object') {\n          isMatching = this.filterByObject(filter[key])(val);\n        } else {\n          isMatching = this.filterDefault(filter[key])(val);\n        }\n\n        if (!isMatching) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n  }\n\n  /**\n   * Filter value by $or\n   */\n  private filterByOr(filter: any[]): (value: any) => boolean {\n    return (value: any) => {\n      let hasMatch = false;\n      const length = filter.length;\n\n      const arrayComparison = (i) => {\n        return value.indexOf(filter[i]) !== -1;\n      };\n      const otherComparison = (i) => {\n        return value === filter[i];\n      };\n      const comparison = Array.isArray(value) ? arrayComparison : otherComparison;\n\n      for (let i = 0; i < length; i++) {\n        if (comparison(i)) {\n          hasMatch = true;\n          break;\n        }\n      }\n\n      return hasMatch;\n    };\n  }\n\n  /**\n   * Checks function's value if type is function otherwise same value\n   */\n  private getValue(value: any): any {\n    return typeof value === 'function' ? value() : value;\n  }\n\n  /**\n   * Defatul filterDefault function\n   */\n  private filterDefault(filter: any): (value: any) => boolean {\n    return (value: any) => {\n      return filter === undefined || filter == value;\n    }\n  }\n\n  private isNumber(value) {\n    return !isNaN(parseInt(value, 10)) && isFinite(value);\n  }\n\n  transform(array: any[], filter: any): any {\n    const type = typeof filter;\n\n    if (!array) {\n      return array;\n    }\n\n    if (type === 'boolean') {\n      return array.filter(this.filterByBoolean(filter));\n    }\n\n    if (type === 'string') {\n      if (this.isNumber(filter)) {\n        return array.filter(this.filterDefault(filter));\n      }\n\n      return array.filter(this.filterByString(filter));\n    }\n\n    if (type === 'object') {\n      return array.filter(this.filterByObject(filter));\n    }\n\n    if (type === 'function') {\n      return array.filter(filter);\n    }\n\n    return array.filter(this.filterDefault(filter));\n  }\n}\n"
  ],
  "names": [
    "Pipe"
  ],
  "mappings": "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"
}
