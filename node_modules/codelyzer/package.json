{
  "_args": [
    [
      {
        "raw": "codelyzer@4.3.0",
        "scope": null,
        "escapedName": "codelyzer",
        "name": "codelyzer",
        "rawSpec": "4.3.0",
        "spec": "4.3.0",
        "type": "version"
      },
      "/Users/yesi/_dev/__current/ekoal.web.athena"
    ]
  ],
  "_from": "codelyzer@4.3.0",
  "_id": "codelyzer@4.3.0",
  "_inCache": true,
  "_location": "/codelyzer",
  "_nodeVersion": "9.3.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/codelyzer_4.3.0_1524255836854_0.3057614174505716"
  },
  "_npmUser": {
    "name": "mgechev",
    "email": "mgechev@gmail.com"
  },
  "_npmVersion": "5.8.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "codelyzer@4.3.0",
    "scope": null,
    "escapedName": "codelyzer",
    "name": "codelyzer",
    "rawSpec": "4.3.0",
    "spec": "4.3.0",
    "type": "version"
  },
  "_requiredBy": [
    "#DEV:/"
  ],
  "_resolved": "https://registry.npmjs.org/codelyzer/-/codelyzer-4.3.0.tgz",
  "_shasum": "6bf3ba68efd9d655a451ecaa14a2852001a43dfb",
  "_shrinkwrap": null,
  "_spec": "codelyzer@4.3.0",
  "_where": "/Users/yesi/_dev/__current/ekoal.web.athena",
  "author": {
    "name": "Minko Gechev",
    "email": "mgechev@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/mgechev/codelyzer/issues"
  },
  "contributors": [
    {
      "name": "Minko Gechev",
      "email": "mgechev@gmail.com"
    },
    {
      "name": "Preslav Semov",
      "email": "preslavsemov@gmail.com"
    },
    {
      "name": "William Koza",
      "email": "william.koza@gmail.com"
    },
    {
      "name": "Eugenio Romano",
      "email": "eugenioromanodeveloper@gmail.com"
    }
  ],
  "dependencies": {
    "app-root-path": "^2.0.1",
    "css-selector-tokenizer": "^0.7.0",
    "cssauron": "^1.4.0",
    "semver-dsl": "^1.0.1",
    "source-map": "^0.5.7",
    "sprintf-js": "^1.0.3"
  },
  "description": "Linting for Angular applications, following angular.io/styleguide.",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "integrity": "sha512-RLMrtLwrBS0dfo2/KTP+2NHofCpzcuh0bEp/A/naqvQonbUL4AW/qWQdbpn8dMNudtpmzEx9eS8KEpGdVPg1BA==",
    "shasum": "6bf3ba68efd9d655a451ecaa14a2852001a43dfb",
    "tarball": "https://registry.npmjs.org/codelyzer/-/codelyzer-4.3.0.tgz",
    "fileCount": 148,
    "unpackedSize": 421608,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJa2kxeCRA9TVsSAnZWagAAIPgQAI5ZWxLdEmw3LgjQg826\nncCBeDgtF0zpY9TBHUFz0slb/IqRiRvqWiK1MNloV2KVMfeehu2ife2pCXpl\npCMhqj5/Xj/yhG1hNSqChnNkNPn2S+rYTXMBkzqLI/+WMN0ZpOLXvb6c8OV9\nzzf20n74myiNfr7hD24sDws3j0HNTrSL5pg9hUDoTgbIzeNQCyf64KOF0a3y\nj6jw5IN0AFzYIxyuLgnDiuVaX2zgMwXb058tJWeDt6OVijyFKxPfVjf3SZ2x\nn+TdpMOlLzFLAwB41t/F7mOSYk+zHLhrjP0Aj85Gh/C6SMca8Wn1UEJ1fqkD\nH5ZwR6ppzvLN7qQjR2hV6TY+8XgMeGtH7Jar1pJ8/DH3bp1kSb8C29b8XZC7\nTnzGyuF42r0aydffBGN0qvhdyY9cWim5aGE0ri6ojfxi4C8ojWAnqPoy4EWw\nyRxuZabhvrBM0ia4fcGFtINmhPffUHMtgltQQpZa+DVEX2W9EvzMj2CgN3Sn\nWKtY6WXFCngeYa62azmKEqXL+Xt/lOTmPOTbZvd6GuKRjEuK+jgtFi0Vr69U\nnF4nNETK2yed5AP9OB6kYzW3KTvePKJUJ/zWxlCKe4ed60DW0hrPbEihRI+r\nVt42IuAkL63FX7Q+iChtUGG6BK3Qc+4FpA3P0rH/HOvwttZ9wHKmaxnw1t8h\nDGoi\r\n=w/7V\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "homepage": "https://github.com/mgechev/codelyzer#readme",
  "keywords": [
    "Angular",
    "style guide",
    "styleguide",
    "nglint",
    "codelyzer",
    "lint",
    "tslint"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "mgechev",
      "email": "mgechev@gmail.com"
    }
  ],
  "name": "codelyzer",
  "optionalDependencies": {},
  "peerDependencies": {
    "@angular/compiler": ">=2.3.1 <7.0.0 || >6.0.0-beta <7.0.0",
    "@angular/core": ">=2.3.1 <7.0.0 || >6.0.0-beta <7.0.0",
    "tslint": "^5.0.0"
  },
  "readme": "[![npm version](https://badge.fury.io/js/codelyzer.svg)](https://badge.fury.io/js/codelyzer)\n[![Downloads](https://img.shields.io/npm/dt/codelyzer.svg)](https://img.shields.io/npm/dt/codelyzer.svg)\n[![Build Status](https://travis-ci.org/mgechev/codelyzer.svg?branch=master)](https://travis-ci.org/mgechev/codelyzer)\n[![Build status](https://ci.appveyor.com/api/projects/status/7xj7qs0a0h0ald53?svg=true)](https://ci.appveyor.com/project/mgechev/codelyzer)\n[![Gitter Chat](https://camo.githubusercontent.com/da2edb525cde1455a622c58c0effc3a90b9a181c/68747470733a2f2f6261646765732e6769747465722e696d2f4a6f696e253230436861742e737667)](https://gitter.im/mgechev/codelyzer)\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/mgechev/codelyzer/master/assets/logo.png\" alt=\"\" width=\"200\">\n</p>\n\n# codelyzer\n\nA set of tslint rules for static code analysis of Angular TypeScript projects.\n\nYou can run the static code analyzer over web apps, NativeScript, Ionic, etc.\n\n[![](http://s32.postimg.org/vo1xrbgw5/codelyzer.png)](https://youtu.be/bci-Z6nURgE)\n\n## How to use?\n\n### Angular CLI\n\n[Angular CLI](https://cli.angular.io) has support for codelyzer. In order to validate your code with CLI and the custom Angular specific rules just use:\n\n```shell\nng new codelyzer\nng lint\n```\n\nNote that by default all components are aligned with the style guide so you won't see any errors in the console.\n\n### Angular Seed\n\nAnother project which has out of the box integration with codelyzer is [angular-seed](https://github.com/mgechev/angular-seed). In order to run the linter you should:\n\n```shell\n# Skip if you've already cloned Angular Seed\ngit clone https://github.com/mgechev/angular-seed\n\n# Skip if you've already installed all the dependencies of Angular Seed\ncd angular-seed && npm i\n\n# Run all the tslint and codelyzer rules\nnpm run lint\n```\n\nNote that by default all components are aligned with the style guide so you won't see any errors in the console.\n\n### Custom Setup\n\n#### Preset\n\nYou can use the [`tslint-angular`](https://github.com/mgechev/tslint-angular) preset. All you need is:\n\n```shell\nnpm i tslint-angular\n```\n\nAfter that create a `tslint.json` file with the following configuration:\n\n```json\n{\n  \"extends\": [\"tslint-angular\"]\n}\n```\n\nRun the linter with:\n\n```bash\n./node_modules/.bin/tslint -c tslint.json\n```\n\nTSLint will now complain that there are rules which require type checking. In order to fix this, use thw `-p` config option:\n\n```bash\n./node_modules/.bin/tslint -p tsconfig.json -c tslint.json\n```\n\n#### Custom Installation\n\nYou can easily use codelyzer with your custom setup:\n\n```shell\nnpm i codelyzer@~4.2.0 tslint@^5.0.0 @angular/core@~5.2.0 @angular/compiler@~5.2.0\n```\n\nA. Using codelyzer package in PATH\n\nCreate the following `tslint.json` file like:\n\n```json\n{\n  \"extends\": [\"codelyzer\"],\n  \"rules\": {\n    \"angular-whitespace\": [true, \"check-interpolation\", \"check-semicolon\"],\n    \"banana-in-box\": true,\n    \"templates-no-negated-async\": true,\n    \"directive-selector\": [true, \"attribute\", \"sg\", \"camelCase\"],\n    \"component-selector\": [true, \"element\", \"sg\", \"kebab-case\"],\n    \"max-inline-declarations\": true,\n    \"prefer-output-readonly\": true,\n    \"no-conflicting-life-cycle-hooks\": true,\n    \"enforce-component-selector\": true,\n    \"use-input-property-decorator\": true,\n    \"use-output-property-decorator\": true,\n    \"use-host-property-decorator\": true,\n    \"use-view-encapsulation\": true,\n    \"no-attribute-parameter-decorator\": true,\n    \"no-output-named-after-standard-event\": true,\n    \"no-input-rename\": true,\n    \"no-output-rename\": true,\n    \"no-output-on-prefix\": true,\n    \"no-forward-ref\": true,\n    \"no-unused-css\": true,\n    \"use-life-cycle-interface\": true,\n    \"contextual-life-cycle\": true,\n    \"trackBy-function\": true,\n    \"use-pipe-transform-interface\": true,\n    \"component-class-suffix\": true,\n    \"directive-class-suffix\": true,\n    \"pipe-impure\": true,\n    \"i18n\": [true, \"check-id\", \"check-text\"],\n    \"template-cyclomatic-complexity\": [true, 5],\n    \"template-conditional-complexity\": [true, 4]\n  }\n}\n```\n\nTo run TSLint with this setup you can use one of the following alternatives:\n\n1. Install codelyzer globally `npm install -g codelyzer`\n\n2. Run TSLint from a package.json script by adding a script like `tslint .` to your package.json, similar to:\n\n```json\n\"scripts\": {\n  ...\n  \"lint\": \"tslint .\",\n  ...\n},\n```\n\nThen run `npm run lint`\n\nB. Using codelyzer from node_modules directory\n\nNow create the following `tslint.json` file where your `node_modules` directory is:\n\n```json\n{\n  \"rulesDirectory\": [\"node_modules/codelyzer\"],\n  \"rules\": {\n    \"angular-whitespace\": [true, \"check-interpolation\", \"check-semicolon\"],\n    \"banana-in-box\": true,\n    \"templates-no-negated-async\": true,\n    \"directive-selector\": [true, \"attribute\", \"sg\", \"camelCase\"],\n    \"component-selector\": [true, \"element\", \"sg\", \"kebab-case\"],\n    \"max-inline-declarations\": true,\n    \"prefer-output-readonly\": true,\n    \"no-conflicting-life-cycle-hooks\": true,\n    \"enforce-component-selector\": true,\n    \"use-input-property-decorator\": true,\n    \"use-output-property-decorator\": true,\n    \"use-host-property-decorator\": true,\n    \"use-view-encapsulation\": true,\n    \"no-attribute-parameter-decorator\": true,\n    \"no-output-named-after-standard-event\": true,\n    \"no-input-rename\": true,\n    \"no-output-rename\": true,\n    \"no-output-on-prefix\": true,\n    \"no-forward-ref\": true,\n    \"no-unused-css\": true,\n    \"use-life-cycle-interface\": true,\n    \"contextual-life-cycle\": true,\n    \"trackBy-function\": true,\n    \"use-pipe-transform-interface\": true,\n    \"component-class-suffix\": true,\n    \"directive-class-suffix\": true,\n    \"pipe-impure\": true,\n    \"i18n\": [true, \"check-id\", \"check-text\"],\n    \"template-cyclomatic-complexity\": [true, 5],\n    \"template-conditional-complexity\": [true, 4]\n  }\n}\n```\n\nNext you can create a component file in the same directory with name `component.ts` and the following content:\n\n```ts\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'codelyzer',\n  template: `\n    <h1>Hello {{ name }}!</h1>\n  `\n})\nclass Codelyzer {\n  name: string = 'World';\n\n  ngOnInit() {\n    console.log('Initialized');\n  }\n}\n```\n\nAs last step you can execute all the rules against your code with tslint:\n\n```shell\n./node_modules/.bin/tslint -c tslint.json component.ts\n```\n\nYou should see the following output:\n\n```text\ncomponent.ts[4, 13]: The selector of the component \"Codelyzer\" should have prefix \"sg\" (https://goo.gl/cix8BY)\ncomponent.ts[12, 3]: Implement lifecycle hook interface OnInit for method ngOnInit in class Codelyzer (https://goo.gl/w1Nwk3)\ncomponent.ts[9, 7]: The name of the class Codelyzer should end with the suffix Component (https://goo.gl/5X1TE7)\n```\n\n### Editor Configuration\n\n**Note that you need to have tslint plugin install on your editor**.\n\nCodelyzer should work out of the box with Atom but for VSCode you will have to open `Code > Preferences > User Settings`, and enter the following config:\n\n```json\n{\n  \"tslint.rulesDirectory\": \"./node_modules/codelyzer\",\n  \"typescript.tsdk\": \"node_modules/typescript/lib\"\n}\n```\n\nNow you should have the following result:\n\n![VSCode Codelyzer](http://gifyu.com/images/cd.gif)\n\nEnjoy!\n\n## Changelog\n\nYou can find it [here](https://github.com/mgechev/codelyzer/blob/master/CHANGELOG.md).\n\n## Recommended configuration\n\nBelow you can find a recommended configuration which is based on the [Angular Style Guide](https://angular.io/styleguide).\n\n```js\n{\n  // The rule have the following arguments:\n  // [ENABLED, \"attribute\" | \"element\", \"selectorPrefix\" | [\"listOfPrefixes\"], \"camelCase\" | \"kebab-case\"]\n  \"directive-selector\": [true, \"attribute\", [\"dir-prefix1\", \"dir-prefix2\"], \"camelCase\"],\n  \"component-selector\": [true, \"element\", [\"cmp-prefix1\", \"cmp-prefix2\"], \"kebab-case\"],\n\n  \"angular-whitespace\": [true, \"check-interpolation\", \"check-semicolon\"],\n\n  \"use-input-property-decorator\": true,\n  \"use-output-property-decorator\": true,\n  \"use-host-property-decorator\": true,\n  \"no-attribute-parameter-decorator\": true,\n  \"no-input-rename\": true,\n  \"no-output-on-prefix\": true,\n  \"no-output-rename\": true,\n  \"no-forward-ref\": true,\n  \"use-life-cycle-interface\": true,\n  \"use-pipe-transform-interface\": true,\n  \"no-output-named-after-standard-event\": true,\n  \"max-inline-declarations\": true,\n  \"prefer-output-readonly\": true,\n  \"no-conflicting-life-cycle-hooks\": true,\n  \"enforce-component-selector\": true,\n\n  // [ENABLED, \"SUFFIX\"]\n  // Where \"SUFFIX\" is your custom suffix, for instance \"Page\" for Ionic 2 components.\n  \"component-class-suffix\": [true, \"Component\"],\n  \"directive-class-suffix\": [true, \"Directive\"]\n}\n```\n\n## Rules Status\n\n| Rule          | Status        |\n| ------------- |:-------------:|\n| `banana-in-box`      | Stable |\n| `contextual-life-cycle`      | Stable      |\n| `decorator-not-allowed` | Stable      |\n| `pipe-impure` | Stable |\n| `templates-no-negated-async` | Stable |\n| `no-attribute-parameter-decorator` | Stable |\n| `no-forward-ref` | Stable |\n| `no-input-prefix` | Stable |\n| `no-input-rename` | Stable |\n| `no-output-on-prefix` | Stable |\n| `no-output-rename` | Stable |\n| `use-life-cycle-interface` | Stable |\n| `use-pipe-decorator` | Stable |\n| `use-pipe-transform-interface` | Stable |\n| `use-view-encapsulation` | Stable |\n| `component-class-suffix` | Stable |\n| `component-selector` | Stable |\n| `directive-class-suffix` | Stable |\n| `directive-selector` | Stable |\n| `use-host-property-decorator` | Stable |\n| `use-input-property-decorator` | Stable |\n| `use-output-property-decorator` | Stable |\n| `trackBy-function` | Stable |\n| `import-destructuring-spacing` | Stable |\n| `no-output-named-after-standard-event` | Stable |\n| `max-inline-declarations` | Stable |\n| `prefer-output-readonly` | Stable |\n| `no-conflicting-life-cycle-hooks` | Stable |\n| `enforce-component-selector` | Stable |\n| `i18n` | *Experimental* |\n| `no-unused-css` | *Experimental* |\n| `angular-whitespace` | *Experimental* |\n| `template-cyclomatic-complexity` | *Experimental* |\n| `template-conditional-complexity` | *Experimental* |\n| `pipe-naming` | *Deprecated* |\n\n## Disable a rule that validates Template or Styles\n\nLint rules can be disabled by adding a marker in TypeScript files. More information [here](https://palantir.github.io/tslint/usage/rule-flags/).\n\nTo disable rules that validate templates or styles you'd need to add a marker in the TypeScript file referencing them.\n\n```ts\nimport { Component } from '@angular/core';\n\n/* tslint:disable:trackBy-function */\n@Component({\n  selector: 'codelyzer',\n  templateUrl: './codelyzer.component.html'\n})\nclass Codelyzer { }\n```\n\n## Advanced configuration\n\nCodelyzer supports any template and style language by custom hooks. If you're using Sass for instance, you can allow codelyzer to analyze your styles by creating a file `.codelyzer.js` in the root of your project (where the `node_modules` directory is). In the configuration file can implement custom pre-processing and template resolution logic:\n\n```js\n// Demo of transforming Sass styles\nvar sass = require('node-sass');\n\nmodule.exports = {\n  // Definition of custom interpolation strings\n  interpolation: ['{{', '}}'],\n\n  // You can transform the urls of your external styles and templates\n  resolveUrl(url, decorator) {\n    return url;\n  },\n\n  // Transformation of the templates. This hooks is quite useful\n  // if you're using any other templating language, for instance\n  // jade, markdown, haml, etc.\n  //\n  // NOTE that this method WILL NOT throw an error in case of invalid template.\n  //\n  transformTemplate(code, url, decorator) {\n    return { code: code, url: url };\n  },\n\n  // Transformation of styles. This hook is useful is you're using\n  // any other style language, for instance Sass, Less, etc.\n  //\n  // NOTE that this method WILL NOT throw an error in case of invalid style.\n  //\n  transformStyle(code, url, decorator) {\n    var result = { code: code, url: url };\n    if (url && /\\.scss$/.test(url)) {\n      var transformed = sass.renderSync({ data: code, sourceMap: true, outFile: '/dev/null' });\n      result.source = code;\n      result.code = transformed.css.toString();\n      result.map = transformed.map.toString();\n    }\n    return result;\n  },\n\n  // Custom predefined directives in case you get error for\n  // missing property and you are using a template reference\n  predefinedDirectives: [{ selector: 'form', exportAs: 'ngForm' }],\n\n  // None = 0b000, Error = 0b001, Info = 0b011, Debug = 0b111\n  logLevel: 0b111\n};\n```\n\n## Contributors\n\n[<img alt=\"mgechev\" src=\"https://avatars1.githubusercontent.com/u/455023?v=4&s=117\" width=\"117\">](https://github.com/mgechev) |[<img alt=\"wKoza\" src=\"https://avatars2.githubusercontent.com/u/11403260?v=4&s=117\" width=\"117\">](https://github.com/wKoza) |[<img alt=\"preslavsh\" src=\"https://avatars2.githubusercontent.com/u/6237138?v=4&s=117\" width=\"117\">](https://github.com/preslavsh) |[<img alt=\"rokerkony\" src=\"https://avatars3.githubusercontent.com/u/156132?v=4&s=117\" width=\"117\">](https://github.com/rokerkony) |[<img alt=\"GregOnNet\" src=\"https://avatars3.githubusercontent.com/u/444278?v=4&s=117\" width=\"117\">](https://github.com/GregOnNet) |[<img alt=\"alan-agius4\" src=\"https://avatars3.githubusercontent.com/u/17563226?v=4&s=117\" width=\"117\">](https://github.com/alan-agius4) |\n:---: |:---: |:---: |:---: |:---: |:---: |\n[mgechev](https://github.com/mgechev) |[wKoza](https://github.com/wKoza) |[preslavsh](https://github.com/preslavsh) |[rokerkony](https://github.com/rokerkony) |[GregOnNet](https://github.com/GregOnNet) |[alan-agius4](https://github.com/alan-agius4) |\n\n[<img alt=\"csvn\" src=\"https://avatars2.githubusercontent.com/u/8770194?v=4&s=117\" width=\"117\">](https://github.com/csvn) |[<img alt=\"eppsilon\" src=\"https://avatars1.githubusercontent.com/u/5643?v=4&s=117\" width=\"117\">](https://github.com/eppsilon) |[<img alt=\"rafaelss95\" src=\"https://avatars0.githubusercontent.com/u/11965907?v=4&s=117\" width=\"117\">](https://github.com/rafaelss95) |[<img alt=\"ghsyeung\" src=\"https://avatars0.githubusercontent.com/u/1243185?v=4&s=117\" width=\"117\">](https://github.com/ghsyeung) |[<img alt=\"Kobzol\" src=\"https://avatars0.githubusercontent.com/u/4539057?v=4&s=117\" width=\"117\">](https://github.com/Kobzol) |[<img alt=\"lazarljubenovic\" src=\"https://avatars3.githubusercontent.com/u/7661457?v=4&s=117\" width=\"117\">](https://github.com/lazarljubenovic) |\n:---: |:---: |:---: |:---: |:---: |:---: |\n[csvn](https://github.com/csvn) |[eppsilon](https://github.com/eppsilon) |[rafaelss95](https://github.com/rafaelss95) |[ghsyeung](https://github.com/ghsyeung) |[Kobzol](https://github.com/Kobzol) |[lazarljubenovic](https://github.com/lazarljubenovic) |\n\n[<img alt=\"sagittarius-rev\" src=\"https://avatars0.githubusercontent.com/u/23564517?v=4&s=117\" width=\"117\">](https://github.com/sagittarius-rev) |[<img alt=\"connor4312\" src=\"https://avatars0.githubusercontent.com/u/2230985?v=4&s=117\" width=\"117\">](https://github.com/connor4312) |[<img alt=\"Foxandxss\" src=\"https://avatars2.githubusercontent.com/u/1087957?v=4&s=117\" width=\"117\">](https://github.com/Foxandxss) |[<img alt=\"gbilodeau\" src=\"https://avatars2.githubusercontent.com/u/532543?v=4&s=117\" width=\"117\">](https://github.com/gbilodeau) |[<img alt=\"NagRock\" src=\"https://avatars2.githubusercontent.com/u/5803314?v=4&s=117\" width=\"117\">](https://github.com/NagRock) |[<img alt=\"Hotell\" src=\"https://avatars0.githubusercontent.com/u/1223799?v=4&s=117\" width=\"117\">](https://github.com/Hotell) |\n:---: |:---: |:---: |:---: |:---: |:---: |\n[sagittarius-rev](https://github.com/sagittarius-rev) |[connor4312](https://github.com/connor4312) |[Foxandxss](https://github.com/Foxandxss) |[gbilodeau](https://github.com/gbilodeau) |[NagRock](https://github.com/NagRock) |[Hotell](https://github.com/Hotell) |\n\n[<img alt=\"Martin-Wegner\" src=\"https://avatars1.githubusercontent.com/u/8995517?v=4&s=117\" width=\"117\">](https://github.com/Martin-Wegner) |[<img alt=\"comfroels\" src=\"https://avatars2.githubusercontent.com/u/4616177?v=4&s=117\" width=\"117\">](https://github.com/comfroels) |[<img alt=\"plantain-00\" src=\"https://avatars0.githubusercontent.com/u/7639395?v=4&s=117\" width=\"117\">](https://github.com/plantain-00) |[<img alt=\"nexus-uw\" src=\"https://avatars2.githubusercontent.com/u/3188890?v=4&s=117\" width=\"117\">](https://github.com/nexus-uw) |[<img alt=\"muhammadghazali\" src=\"https://avatars3.githubusercontent.com/u/863947?v=4&s=117\" width=\"117\">](https://github.com/muhammadghazali) |[<img alt=\"alisd23\" src=\"https://avatars2.githubusercontent.com/u/5804010?v=4&s=117\" width=\"117\">](https://github.com/alisd23) |\n:---: |:---: |:---: |:---: |:---: |:---: |\n[Martin-Wegner](https://github.com/Martin-Wegner) |[comfroels](https://github.com/comfroels) |[plantain-00](https://github.com/plantain-00) |[nexus-uw](https://github.com/nexus-uw) |[muhammadghazali](https://github.com/muhammadghazali) |[alisd23](https://github.com/alisd23) |\n\n[<img alt=\"eromano\" src=\"https://avatars1.githubusercontent.com/u/1030050?v=4&s=117\" width=\"117\">](https://github.com/eromano) |[<img alt=\"Manduro\" src=\"https://avatars0.githubusercontent.com/u/2545042?v=4&s=117\" width=\"117\">](https://github.com/Manduro) |[<img alt=\"karol-depka\" src=\"https://avatars1.githubusercontent.com/u/958486?v=4&s=117\" width=\"117\">](https://github.com/karol-depka) |[<img alt=\"kevinphelps\" src=\"https://avatars1.githubusercontent.com/u/7399499?v=4&s=117\" width=\"117\">](https://github.com/kevinphelps) |[<img alt=\"leosvelperez\" src=\"https://avatars3.githubusercontent.com/u/12051310?v=4&s=117\" width=\"117\">](https://github.com/leosvelperez) |[<img alt=\"Gillespie59\" src=\"https://avatars2.githubusercontent.com/u/555768?v=4&s=117\" width=\"117\">](https://github.com/Gillespie59) |\n:---: |:---: |:---: |:---: |:---: |:---: |\n[eromano](https://github.com/eromano) |[Manduro](https://github.com/Manduro) |[karol-depka](https://github.com/karol-depka) |[kevinphelps](https://github.com/kevinphelps) |[leosvelperez](https://github.com/leosvelperez) |[Gillespie59](https://github.com/Gillespie59) |\n\n[<img alt=\"rwlogel\" src=\"https://avatars2.githubusercontent.com/u/3373178?v=4&s=117\" width=\"117\">](https://github.com/rwlogel) |[<img alt=\"rtfpessoa\" src=\"https://avatars0.githubusercontent.com/u/902384?v=4&s=117\" width=\"117\">](https://github.com/rtfpessoa) |[<img alt=\"scttcper\" src=\"https://avatars3.githubusercontent.com/u/1400464?v=4&s=117\" width=\"117\">](https://github.com/scttcper) |[<img alt=\"lacolaco\" src=\"https://avatars3.githubusercontent.com/u/1529180?v=4&s=117\" width=\"117\">](https://github.com/lacolaco) |[<img alt=\"tmair\" src=\"https://avatars2.githubusercontent.com/u/1596276?v=4&s=117\" width=\"117\">](https://github.com/tmair) |[<img alt=\"cexbrayat\" src=\"https://avatars3.githubusercontent.com/u/411874?v=4&s=117\" width=\"117\">](https://github.com/cexbrayat) |\n:---: |:---: |:---: |:---: |:---: |:---: |\n[rwlogel](https://github.com/rwlogel) |[rtfpessoa](https://github.com/rtfpessoa) |[scttcper](https://github.com/scttcper) |[lacolaco](https://github.com/lacolaco) |[tmair](https://github.com/tmair) |[cexbrayat](https://github.com/cexbrayat) |\n\n[<img alt=\"reduckted\" src=\"https://avatars0.githubusercontent.com/u/10321525?v=4&s=117\" width=\"117\">](https://github.com/reduckted) |\n:---: |\n[reduckted](https://github.com/reduckted) |\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/mgechev/codelyzer.git"
  },
  "version": "4.3.0"
}
