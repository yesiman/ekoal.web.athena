{"version":3,"sources":["webpack:///./node_modules/rxjs-compat/_esm5/operators/startWith.js","webpack:///./src/app/pages/form-controls/autocomplete/autocomplete.component.html","webpack:///./src/app/pages/form-controls/autocomplete/autocomplete.component.ts","webpack:///./src/app/pages/form-controls/checkbox/checkbox.component.html","webpack:///./src/app/pages/form-controls/checkbox/checkbox.component.ts","webpack:///./src/app/pages/form-controls/datepicker/datepicker.component.html","webpack:///./src/app/pages/form-controls/datepicker/datepicker.component.scss","webpack:///./src/app/pages/form-controls/datepicker/datepicker.component.ts","webpack:///./src/app/pages/form-controls/form-controls.module.ts","webpack:///./src/app/pages/form-controls/form-field/form-field.component.html","webpack:///./src/app/pages/form-controls/form-field/form-field.component.ts","webpack:///./src/app/pages/form-controls/input/input.component.html","webpack:///./src/app/pages/form-controls/input/input.component.ts","webpack:///./src/app/pages/form-controls/radio-button/radio-button.component.html","webpack:///./src/app/pages/form-controls/radio-button/radio-button.component.scss","webpack:///./src/app/pages/form-controls/radio-button/radio-button.component.ts","webpack:///./src/app/pages/form-controls/select/select.component.html","webpack:///./src/app/pages/form-controls/select/select.component.ts","webpack:///./src/app/pages/form-controls/slide-toggle/slide-toggle.component.html","webpack:///./src/app/pages/form-controls/slide-toggle/slide-toggle.component.ts","webpack:///./src/app/pages/form-controls/slider/slider.component.html","webpack:///./src/app/pages/form-controls/slider/slider.component.scss","webpack:///./src/app/pages/form-controls/slider/slider.component.ts"],"names":[],"mappings":"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","file":"app-pages-form-controls-form-controls-module.js","sourcesContent":["export { startWith } from 'rxjs/operators';\n//# sourceMappingURL=startWith.js.map","module.exports = \"<div fxLayout=\\\"column\\\" fxLayout.gt-sm=\\\"row wrap\\\"> \\r\\n    <div fxFlex=\\\"50\\\" class=\\\"flex-p\\\"> \\r\\n        <mat-card>\\r\\n            <mat-card-header fxLayoutAlign=\\\"center\\\">                \\r\\n                <mat-card-subtitle><h2>Simple autocomplete</h2></mat-card-subtitle>\\r\\n            </mat-card-header>\\r\\n            <mat-card-content fxLayoutAlign=\\\"center\\\">\\r\\n                <form>\\r\\n                    <mat-form-field>\\r\\n                        <input type=\\\"text\\\" placeholder=\\\"Pick one\\\" aria-label=\\\"Number\\\" matInput [formControl]=\\\"myControl\\\" [matAutocomplete]=\\\"auto\\\">\\r\\n                        <mat-autocomplete #auto=\\\"matAutocomplete\\\">\\r\\n                            <mat-option *ngFor=\\\"let option of options\\\" [value]=\\\"option\\\">\\r\\n                                {{ option }}\\r\\n                            </mat-option>\\r\\n                        </mat-autocomplete>\\r\\n                    </mat-form-field>\\r\\n                </form>\\r\\n            </mat-card-content>\\r\\n        </mat-card>\\r\\n    </div>   \\r\\n    <div fxFlex=\\\"50\\\" class=\\\"flex-p\\\"> \\r\\n        <mat-card>\\r\\n            <mat-card-header fxLayoutAlign=\\\"center\\\">                \\r\\n                <mat-card-subtitle><h2>Filter autocomplete</h2></mat-card-subtitle>\\r\\n            </mat-card-header>\\r\\n            <mat-card-content fxLayoutAlign=\\\"center\\\">\\r\\n                <form>\\r\\n                    <mat-form-field>\\r\\n                        <input type=\\\"text\\\" placeholder=\\\"Pick one\\\" aria-label=\\\"Number\\\" matInput [formControl]=\\\"filteredControl\\\" [matAutocomplete]=\\\"auto\\\">\\r\\n                        <mat-autocomplete #auto=\\\"matAutocomplete\\\">\\r\\n                            <mat-option *ngFor=\\\"let option of filteredOptions | async\\\" [value]=\\\"option\\\">\\r\\n                              {{ option }}\\r\\n                            </mat-option>\\r\\n                        </mat-autocomplete>\\r\\n                    </mat-form-field>\\r\\n                </form>\\r\\n            </mat-card-content>\\r\\n        </mat-card>\\r\\n    </div>           \\r\\n</div>\"","import { Component } from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { startWith } from 'rxjs/operators/startWith';\r\nimport { map } from 'rxjs/operators/map';\r\nimport { AppSettings } from '../../../app.settings';\r\nimport { Settings } from '../../../app.settings.model';\r\n\r\n@Component({\r\n  selector: 'app-autocomplete',\r\n  templateUrl: './autocomplete.component.html'\r\n})\r\nexport class AutocompleteComponent {\r\n  myControl: FormControl = new FormControl();\r\n  options = [\r\n    'One',\r\n    'Two',\r\n    'Three'\r\n  ];\r\n  filteredControl: FormControl = new FormControl();\r\n  filteredOptions: Observable<string[]>;\r\n  public settings: Settings;\r\n  constructor(public appSettings:AppSettings) {\r\n    this.settings = this.appSettings.settings; \r\n  }\r\n\r\n  ngOnInit() {\r\n    this.filteredOptions = this.filteredControl.valueChanges\r\n      .pipe(\r\n        startWith(''),\r\n        map(val => this.filter(val))\r\n      );\r\n  }\r\n\r\n  filter(val): string[] {\r\n    return this.options.filter(option => option.toLowerCase().indexOf(val.toLowerCase()) === 0);\r\n  }\r\n}","module.exports = \"<div fxLayout=\\\"column\\\">\\r\\n    <div class=\\\"flex-p\\\">\\r\\n        <mat-card>\\r\\n            <mat-card-header>                \\r\\n                <mat-card-subtitle><h2>Checkbox configuration</h2></mat-card-subtitle>\\r\\n            </mat-card-header>\\r\\n            <mat-card-content>\\r\\n                <section class=\\\"py-1\\\">\\r\\n                    <mat-checkbox [(ngModel)]=\\\"checked\\\">Checked</mat-checkbox>\\r\\n                    <mat-checkbox [(ngModel)]=\\\"indeterminate\\\">Indeterminate</mat-checkbox>\\r\\n                </section>\\r\\n                <section class=\\\"py-1\\\">\\r\\n                    <label>Label position:</label>\\r\\n                    <mat-radio-group [(ngModel)]=\\\"labelPosition\\\">\\r\\n                        <mat-radio-button value=\\\"after\\\">After</mat-radio-button>\\r\\n                        <mat-radio-button value=\\\"before\\\">Before</mat-radio-button>\\r\\n                    </mat-radio-group>\\r\\n                </section>\\r\\n                <section class=\\\"py-1\\\">\\r\\n                    <mat-checkbox [(ngModel)]=\\\"disabled\\\">Disabled</mat-checkbox>\\r\\n                </section>\\r\\n                <hr>\\r\\n                <h2 class=\\\"py-1\\\">Result</h2>\\r\\n                <section class=\\\"py-1\\\">\\r\\n                    <mat-checkbox\\r\\n                        [(ngModel)]=\\\"checked\\\"\\r\\n                        [(indeterminate)]=\\\"indeterminate\\\"\\r\\n                        [labelPosition]=\\\"labelPosition\\\"\\r\\n                        [disabled]=\\\"disabled\\\">\\r\\n                      I'm a checkbox\\r\\n                    </mat-checkbox>\\r\\n                </section>               \\r\\n            </mat-card-content>\\r\\n        </mat-card>\\r\\n    </div> \\r\\n</div>\"","import { Component } from '@angular/core';\r\nimport { AppSettings } from '../../../app.settings';\r\nimport { Settings } from '../../../app.settings.model';\r\n\r\n@Component({\r\n  selector: 'app-checkbox',\r\n  templateUrl: './checkbox.component.html'\r\n})\r\nexport class CheckboxComponent {\r\n  checked = false;\r\n  indeterminate = false;\r\n  labelPosition = 'after';\r\n  disabled = false;\r\n  public settings: Settings;\r\n  constructor(public appSettings:AppSettings) {\r\n    this.settings = this.appSettings.settings; \r\n  }\r\n}","module.exports = \"<div fxLayout=\\\"column\\\" fxLayout.gt-sm=\\\"row wrap\\\"> \\r\\n    <div fxFlex=\\\"50\\\" class=\\\"flex-p\\\"> \\r\\n        <mat-card>\\r\\n            <mat-card-header fxLayoutAlign=\\\"center\\\">                \\r\\n                <mat-card-subtitle><h2>Basic datepicker</h2></mat-card-subtitle>\\r\\n            </mat-card-header>\\r\\n            <mat-card-content fxLayoutAlign=\\\"center\\\">\\r\\n                <mat-form-field>\\r\\n                    <input matInput [matDatepicker]=\\\"picker1\\\" placeholder=\\\"Choose a date\\\">\\r\\n                    <mat-datepicker-toggle matSuffix [for]=\\\"picker1\\\"></mat-datepicker-toggle>\\r\\n                    <mat-datepicker #picker1></mat-datepicker>\\r\\n                </mat-form-field>\\r\\n            </mat-card-content>\\r\\n        </mat-card>\\r\\n    </div>   \\r\\n    <div fxFlex=\\\"50\\\" class=\\\"flex-p\\\"> \\r\\n        <mat-card>\\r\\n            <mat-card-header fxLayoutAlign=\\\"center\\\">                \\r\\n                <mat-card-subtitle><h2>Datepicker start date</h2></mat-card-subtitle>\\r\\n            </mat-card-header>\\r\\n            <mat-card-content fxLayoutAlign=\\\"center\\\">\\r\\n                <mat-form-field>\\r\\n                    <input matInput [matDatepicker]=\\\"picker2\\\" placeholder=\\\"Choose a date\\\">\\r\\n                    <mat-datepicker-toggle matSuffix [for]=\\\"picker2\\\"></mat-datepicker-toggle>\\r\\n                    <mat-datepicker #picker2 startView=\\\"year\\\" [startAt]=\\\"startDate\\\"></mat-datepicker>\\r\\n                </mat-form-field>\\r\\n            </mat-card-content>\\r\\n        </mat-card>\\r\\n    </div>\\r\\n    <div fxFlex=\\\"50\\\" class=\\\"flex-p\\\"> \\r\\n        <mat-card>\\r\\n            <mat-card-header fxLayoutAlign=\\\"center\\\">                \\r\\n                <mat-card-subtitle><h2>Datepicker with min & max validation</h2></mat-card-subtitle>\\r\\n            </mat-card-header>\\r\\n            <mat-card-content fxLayoutAlign=\\\"center\\\">\\r\\n                <mat-form-field class=\\\"example-full-width\\\">\\r\\n                    <input matInput [min]=\\\"minDate\\\" [max]=\\\"maxDate\\\" [matDatepicker]=\\\"picker3\\\" placeholder=\\\"Choose a date\\\">\\r\\n                    <mat-datepicker-toggle matSuffix [for]=\\\"picker3\\\"></mat-datepicker-toggle>\\r\\n                    <mat-datepicker #picker3></mat-datepicker>\\r\\n                </mat-form-field>\\r\\n            </mat-card-content>\\r\\n        </mat-card>\\r\\n    </div>  \\r\\n    <div fxFlex=\\\"50\\\" class=\\\"flex-p\\\"> \\r\\n        <mat-card>\\r\\n            <mat-card-header fxLayoutAlign=\\\"center\\\">                \\r\\n                <mat-card-subtitle><h2>Datepicker with filter validation</h2></mat-card-subtitle>\\r\\n            </mat-card-header>\\r\\n            <mat-card-content fxLayoutAlign=\\\"center\\\">\\r\\n                <mat-form-field class=\\\"example-full-width\\\">\\r\\n                    <input matInput [matDatepickerFilter]=\\\"myFilter\\\" [matDatepicker]=\\\"picker4\\\" placeholder=\\\"Choose a date\\\">\\r\\n                    <mat-datepicker-toggle matSuffix [for]=\\\"picker4\\\"></mat-datepicker-toggle>\\r\\n                    <mat-datepicker #picker4></mat-datepicker>\\r\\n                </mat-form-field>\\r\\n            </mat-card-content>\\r\\n        </mat-card>\\r\\n    </div> \\r\\n    <div fxFlex=\\\"50\\\" class=\\\"flex-p\\\"> \\r\\n        <mat-card>\\r\\n            <mat-card-header fxLayoutAlign=\\\"center\\\">                \\r\\n                <mat-card-subtitle><h2>Datepicker input and change events</h2></mat-card-subtitle>\\r\\n            </mat-card-header>\\r\\n            <mat-card-content fxLayout=\\\"column\\\" fxLayoutAlign=\\\"center center\\\">\\r\\n                <mat-form-field>\\r\\n                    <input matInput [matDatepicker]=\\\"picker5\\\" placeholder=\\\"Input & change events\\\"\\r\\n                          (dateInput)=\\\"addEvent('input', $event)\\\" (dateChange)=\\\"addEvent('change', $event)\\\">\\r\\n                    <mat-datepicker-toggle matSuffix [for]=\\\"picker5\\\"></mat-datepicker-toggle>\\r\\n                    <mat-datepicker #picker5></mat-datepicker>\\r\\n                </mat-form-field>                \\r\\n                <div class=\\\"w-100 mat-elevation-z4 p-1 events-list\\\" perfectScrollbar> \\r\\n                    <div *ngFor=\\\"let e of events\\\">{{e}}</div>\\r\\n                </div>\\r\\n            </mat-card-content>\\r\\n        </mat-card>\\r\\n    </div>\\r\\n    <div fxFlex=\\\"50\\\" class=\\\"flex-p\\\"> \\r\\n        <mat-card>\\r\\n            <mat-card-header fxLayoutAlign=\\\"center\\\">                \\r\\n                <mat-card-subtitle><h2>Disabled datepicker</h2></mat-card-subtitle>\\r\\n            </mat-card-header>\\r\\n            <mat-card-content fxLayout=\\\"column\\\" fxLayoutAlign=\\\"center center\\\">             \\r\\n                <mat-form-field>\\r\\n                    <input matInput [matDatepicker]=\\\"dp1\\\" placeholder=\\\"Completely disabled\\\" disabled>\\r\\n                    <mat-datepicker-toggle matSuffix [for]=\\\"dp1\\\"></mat-datepicker-toggle>\\r\\n                    <mat-datepicker #dp1></mat-datepicker>\\r\\n                </mat-form-field>\\r\\n                <mat-form-field>\\r\\n                    <input matInput [matDatepicker]=\\\"dp2\\\" placeholder=\\\"Popup disabled\\\">\\r\\n                    <mat-datepicker-toggle matSuffix [for]=\\\"dp2\\\" disabled></mat-datepicker-toggle>\\r\\n                    <mat-datepicker #dp2></mat-datepicker>\\r\\n                </mat-form-field>\\r\\n                <mat-form-field>\\r\\n                    <input matInput [matDatepicker]=\\\"dp3\\\" placeholder=\\\"Input disabled\\\" disabled>\\r\\n                    <mat-datepicker-toggle matSuffix [for]=\\\"dp3\\\"></mat-datepicker-toggle>\\r\\n                    <mat-datepicker #dp3 disabled=\\\"false\\\"></mat-datepicker>\\r\\n                </mat-form-field>\\r\\n            </mat-card-content>\\r\\n        </mat-card>\\r\\n    </div> \\r\\n    <div fxFlex=\\\"50\\\" class=\\\"flex-p\\\"> \\r\\n        <mat-card>\\r\\n            <mat-card-header fxLayoutAlign=\\\"center\\\">                \\r\\n                <mat-card-subtitle><h2>Datepicker touch UI</h2></mat-card-subtitle>\\r\\n            </mat-card-header>\\r\\n            <mat-card-content fxLayoutAlign=\\\"center\\\">\\r\\n                <mat-form-field>\\r\\n                    <input matInput [matDatepicker]=\\\"picker6\\\" placeholder=\\\"Choose a date\\\">\\r\\n                    <mat-datepicker-toggle matSuffix [for]=\\\"picker6\\\"></mat-datepicker-toggle>\\r\\n                    <mat-datepicker touchUi=\\\"true\\\" #picker6></mat-datepicker>\\r\\n                </mat-form-field>\\r\\n            </mat-card-content>\\r\\n        </mat-card>\\r\\n    </div> \\r\\n    <div fxFlex=\\\"50\\\" class=\\\"flex-p\\\"> \\r\\n        <mat-card>\\r\\n            <mat-card-header fxLayoutAlign=\\\"center\\\">                \\r\\n                <mat-card-subtitle><h2>Datepicker open method</h2></mat-card-subtitle>\\r\\n            </mat-card-header>\\r\\n            <mat-card-content fxLayoutAlign=\\\"center center\\\">\\r\\n                <mat-form-field>\\r\\n                    <input matInput [matDatepicker]=\\\"picker7\\\" placeholder=\\\"Choose a date\\\">\\r\\n                    <mat-datepicker #picker7></mat-datepicker>\\r\\n                </mat-form-field>\\r\\n                <button mat-raised-button (click)=\\\"picker7.open()\\\">Open</button>\\r\\n            </mat-card-content>\\r\\n        </mat-card>\\r\\n    </div>                                 \\r\\n</div>\"","module.exports = \".events-list {\\n  height: 97px; }\\n\"","import { Component } from '@angular/core';\r\nimport { MatDatepickerInputEvent } from '@angular/material/datepicker';\r\nimport { AppSettings } from '../../../app.settings';\r\nimport { Settings } from '../../../app.settings.model';\r\n\r\n@Component({\r\n  selector: 'app-datepicker',\r\n  templateUrl: './datepicker.component.html',\r\n  styleUrls: ['./datepicker.component.scss']\r\n})\r\nexport class DatepickerComponent {  \r\n  public settings: Settings;\r\n  constructor(public appSettings:AppSettings) {\r\n    this.settings = this.appSettings.settings; \r\n  }\r\n\r\n  //Datepicker start date\r\n  startDate = new Date(1990, 0, 1);\r\n\r\n  //Datepicker with min & max validation\r\n  minDate = new Date(2010, 0, 1);\r\n  maxDate = new Date(2020, 0, 1);\r\n\r\n  //Datepicker with filter validation\r\n  myFilter = (d: Date): boolean => {\r\n    const day = d.getDay();\r\n    return day !== 0 && day !== 6;\r\n  }\r\n\r\n  //Datepicker input and change events\r\n  events: string[] = [];\r\n  addEvent(type: string, event: MatDatepickerInputEvent<Date>) {\r\n    this.events.push(`${type}: ${event.value}`);\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RouterModule } from '@angular/router';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { PerfectScrollbarModule } from 'ngx-perfect-scrollbar';\r\nimport { SharedModule } from '../../shared/shared.module';\r\nimport { AutocompleteComponent } from './autocomplete/autocomplete.component';\r\nimport { CheckboxComponent } from './checkbox/checkbox.component';\r\nimport { DatepickerComponent } from './datepicker/datepicker.component';\r\nimport { FormFieldComponent } from './form-field/form-field.component';\r\nimport { InputComponent } from './input/input.component';\r\nimport { RadioButtonComponent } from './radio-button/radio-button.component';\r\nimport { SelectComponent } from './select/select.component';\r\nimport { SliderComponent } from './slider/slider.component';\r\nimport { SlideToggleComponent } from './slide-toggle/slide-toggle.component';\r\n\r\nexport const routes = [\r\n  { path: '', redirectTo: 'autocomplete', pathMatch: 'full'},\r\n  { path: 'autocomplete', component: AutocompleteComponent, data: { breadcrumb: 'Autocomplete' } },\r\n  { path: 'checkbox', component: CheckboxComponent, data: { breadcrumb: 'Checkbox' } },\r\n  { path: 'datepicker', component: DatepickerComponent, data: { breadcrumb: 'Datepicker' } },\r\n  { path: 'form-field', component: FormFieldComponent, data: { breadcrumb: 'Form Field' } },\r\n  { path: 'input', component: InputComponent, data: { breadcrumb: 'Input' } },\r\n  { path: 'radio-button', component: RadioButtonComponent, data: { breadcrumb: 'Radio Button' } },\r\n  { path: 'select', component: SelectComponent, data: { breadcrumb: 'Select' } },\r\n  { path: 'slider', component: SliderComponent, data: { breadcrumb: 'Slider' } },\r\n  { path: 'slide-toggle', component: SlideToggleComponent, data: { breadcrumb: 'Slide Toggle' } }\r\n];\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    RouterModule.forChild(routes),\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    PerfectScrollbarModule,\r\n    SharedModule\r\n  ],\r\n  declarations: [\r\n    AutocompleteComponent, \r\n    CheckboxComponent, \r\n    DatepickerComponent, \r\n    FormFieldComponent, \r\n    InputComponent, \r\n    RadioButtonComponent, \r\n    SelectComponent, \r\n    SliderComponent, \r\n    SlideToggleComponent\r\n  ]\r\n})\r\nexport class FormControlsModule { }","module.exports = \"<div fxLayout=\\\"column\\\">\\r\\n    <div class=\\\"flex-p\\\">\\r\\n        <mat-card>\\r\\n            <mat-card-header fxLayoutAlign=\\\"center\\\">                \\r\\n                <mat-card-subtitle><h2>Simple form field</h2></mat-card-subtitle>\\r\\n            </mat-card-header>\\r\\n            <mat-card-content fxLayout=\\\"column\\\" fxLayoutAlign=\\\"center\\\">\\r\\n                <mat-form-field>\\r\\n                    <input matInput placeholder=\\\"Input\\\">\\r\\n                </mat-form-field>\\r\\n                <mat-form-field>\\r\\n                    <textarea matInput placeholder=\\\"Textarea\\\"></textarea>\\r\\n                </mat-form-field>\\r\\n                <mat-form-field>\\r\\n                    <mat-select placeholder=\\\"Select\\\">\\r\\n                        <mat-option value=\\\"option\\\">Option</mat-option>\\r\\n                    </mat-select>\\r\\n                </mat-form-field>                               \\r\\n            </mat-card-content>\\r\\n        </mat-card>\\r\\n    </div>\\r\\n    <div class=\\\"flex-p\\\">\\r\\n        <mat-card>\\r\\n            <mat-card-header fxLayoutAlign=\\\"center\\\">                \\r\\n                <mat-card-subtitle><h2>Form field with placeholder</h2></mat-card-subtitle>\\r\\n            </mat-card-header>\\r\\n            <mat-card-content fxLayout=\\\"column\\\" fxLayoutAlign=\\\"center\\\">\\r\\n                <form [formGroup]=\\\"options\\\">\\r\\n                    <mat-checkbox formControlName=\\\"hideRequired\\\">Hide required marker</mat-checkbox>\\r\\n                    <div class=\\\"py-1\\\">\\r\\n                        <label>Float label: </label>\\r\\n                        <mat-radio-group formControlName=\\\"floatLabel\\\">\\r\\n                            <mat-radio-button value=\\\"auto\\\">Auto</mat-radio-button>\\r\\n                            <mat-radio-button value=\\\"always\\\">Always</mat-radio-button>\\r\\n                            <mat-radio-button value=\\\"never\\\">Never</mat-radio-button>\\r\\n                        </mat-radio-group>\\r\\n                    </div>\\r\\n                </form>\\r\\n                <mat-form-field [hideRequiredMarker]=\\\"options.value.hideRequired\\\"\\r\\n                                [floatLabel]=\\\"options.value.floatLabel\\\">\\r\\n                    <input matInput placeholder=\\\"Simple placeholder\\\" required>\\r\\n                </mat-form-field>\\r\\n                <mat-form-field [hideRequiredMarker]=\\\"options.value.hideRequired\\\"\\r\\n                                [floatLabel]=\\\"options.value.floatLabel\\\">\\r\\n                    <mat-select required>\\r\\n                        <mat-option>-- None --</mat-option>\\r\\n                        <mat-option value=\\\"option\\\">Option</mat-option>\\r\\n                    </mat-select>\\r\\n                    <mat-placeholder><mat-icon>favorite</mat-icon> <b> Fancy</b> <i> placeholder</i></mat-placeholder>\\r\\n                </mat-form-field>               \\r\\n            </mat-card-content>\\r\\n        </mat-card>\\r\\n    </div> \\r\\n    <div class=\\\"flex-p\\\">\\r\\n        <mat-card>\\r\\n            <mat-card-header fxLayoutAlign=\\\"center\\\">                \\r\\n                <mat-card-subtitle><h2>Form field with hints</h2></mat-card-subtitle>\\r\\n            </mat-card-header>\\r\\n            <mat-card-content fxLayout=\\\"column\\\" fxLayoutAlign=\\\"center\\\">\\r\\n                <mat-form-field hintLabel=\\\"Max 10 characters\\\">\\r\\n                    <input matInput #input maxlength=\\\"10\\\" placeholder=\\\"Enter some input\\\">\\r\\n                    <mat-hint align=\\\"end\\\">{{input.value?.length || 0}}/10</mat-hint>\\r\\n                </mat-form-field>\\r\\n                <mat-form-field>\\r\\n                    <mat-select placeholder=\\\"Select me\\\">\\r\\n                      <mat-option value=\\\"option\\\">Option</mat-option>\\r\\n                    </mat-select>\\r\\n                    <mat-hint align=\\\"end\\\">Here's the dropdown arrow ^</mat-hint>\\r\\n                </mat-form-field>                            \\r\\n            </mat-card-content>\\r\\n        </mat-card>\\r\\n    </div> \\r\\n    <div class=\\\"flex-p\\\">\\r\\n        <mat-card>\\r\\n            <mat-card-header fxLayoutAlign=\\\"center\\\">                \\r\\n                <mat-card-subtitle><h2>Form field with error messages</h2></mat-card-subtitle>\\r\\n            </mat-card-header>\\r\\n            <mat-card-content fxLayout=\\\"column\\\" fxLayoutAlign=\\\"center\\\">\\r\\n                <mat-form-field>\\r\\n                    <input matInput placeholder=\\\"Enter your email\\\" [formControl]=\\\"email\\\" required>\\r\\n                    <mat-error *ngIf=\\\"email.invalid\\\">{{getErrorMessage()}}</mat-error>\\r\\n                </mat-form-field>                           \\r\\n            </mat-card-content>\\r\\n        </mat-card>\\r\\n    </div> \\r\\n    <div class=\\\"flex-p\\\">\\r\\n        <mat-card>\\r\\n            <mat-card-header fxLayoutAlign=\\\"center\\\">                \\r\\n                <mat-card-subtitle><h2>Form field with prefix & suffix</h2></mat-card-subtitle>\\r\\n            </mat-card-header>\\r\\n            <mat-card-content fxLayout=\\\"column\\\" fxLayoutAlign=\\\"center\\\">\\r\\n                <mat-form-field>\\r\\n                    <input matInput placeholder=\\\"Enter your password\\\" [type]=\\\"hide ? 'password' : 'text'\\\">\\r\\n                    <mat-icon matSuffix (click)=\\\"hide = !hide\\\">{{hide ? 'visibility' : 'visibility_off'}}</mat-icon>\\r\\n                </mat-form-field>\\r\\n                <mat-form-field>\\r\\n                    <input matInput placeholder=\\\"Amount\\\" type=\\\"number\\\" [style.text-align]=\\\"'right'\\\">\\r\\n                    <span matPrefix>$&nbsp;</span>\\r\\n                    <span matSuffix>.00</span>\\r\\n                </mat-form-field>                        \\r\\n            </mat-card-content>\\r\\n        </mat-card>\\r\\n    </div>\\r\\n    <div class=\\\"flex-p\\\">\\r\\n        <mat-card>\\r\\n            <mat-card-header fxLayoutAlign=\\\"center\\\">                \\r\\n                <mat-card-subtitle><h2>Form field theming</h2></mat-card-subtitle>\\r\\n            </mat-card-header>\\r\\n            <mat-card-content>\\r\\n                <form [formGroup]=\\\"themingForm\\\" [style.fontSize.px]=\\\"getFontSize()\\\" fxLayout=\\\"column\\\" fxLayoutAlign=\\\"center\\\">\\r\\n                    <mat-form-field [color]=\\\"themingForm.value.color\\\">\\r\\n                        <mat-select placeholder=\\\"Color\\\" formControlName=\\\"color\\\">\\r\\n                            <mat-option value=\\\"primary\\\">Primary</mat-option>\\r\\n                            <mat-option value=\\\"accent\\\">Accent</mat-option>\\r\\n                            <mat-option value=\\\"warn\\\">Warn</mat-option>\\r\\n                        </mat-select>\\r\\n                    </mat-form-field>\\r\\n                    <mat-form-field [color]=\\\"themingForm.value.color\\\">\\r\\n                        <input matInput type=\\\"number\\\" placeholder=\\\"Font size (px)\\\" formControlName=\\\"fontSize\\\" min=\\\"10\\\">\\r\\n                        <mat-error *ngIf=\\\"themingForm.get('fontSize')?.invalid\\\">Min size: 10px</mat-error>\\r\\n                    </mat-form-field>\\r\\n                </form>     \\r\\n            </mat-card-content>\\r\\n        </mat-card>\\r\\n    </div>  \\r\\n</div>\"","import { Component } from '@angular/core';\r\nimport { FormBuilder, FormGroup, FormControl, Validators } from '@angular/forms';\r\nimport { AppSettings } from '../../../app.settings';\r\nimport { Settings } from '../../../app.settings.model';\r\n\r\n@Component({\r\n  selector: 'app-form-field',\r\n  templateUrl: './form-field.component.html'\r\n})\r\nexport class FormFieldComponent {\r\n  options: FormGroup;\r\n  email = new FormControl('', [Validators.required, Validators.email]);\r\n  hide:boolean = true;\r\n  themingForm: FormGroup;\r\n  public settings: Settings;\r\n  constructor(public appSettings:AppSettings, public formBuilder:FormBuilder) {\r\n    this.settings = this.appSettings.settings;     \r\n  }\r\n\r\n  ngOnInit(){\r\n    this.options = this.formBuilder.group({\r\n      hideRequired: false,\r\n      floatLabel: 'auto',\r\n    });\r\n    this.themingForm = this.formBuilder.group({\r\n      'color': 'primary',\r\n      'fontSize': [16, Validators.min(10)],\r\n    });\r\n  }\r\n  \r\n  getErrorMessage() {\r\n    return this.email.hasError('required') ? 'You must enter a value' :\r\n        this.email.hasError('email') ? 'Not a valid email' :\r\n            '';\r\n  }\r\n\r\n  getFontSize() {\r\n    return Math.max(10, this.themingForm.value.fontSize);\r\n  }\r\n\r\n}","module.exports = \"<div fxLayout=\\\"column\\\">\\r\\n    <div class=\\\"flex-p\\\">\\r\\n        <mat-card>\\r\\n            <mat-card-header fxLayoutAlign=\\\"center\\\">                \\r\\n                <mat-card-subtitle><h2>Basic Inputs</h2></mat-card-subtitle>\\r\\n            </mat-card-header>\\r\\n            <mat-card-content>\\r\\n                <form fxLayout=\\\"column\\\" fxLayoutAlign=\\\"center\\\">\\r\\n                    <mat-form-field>\\r\\n                        <input matInput placeholder=\\\"Favorite food\\\" value=\\\"Sushi\\\">\\r\\n                    </mat-form-field>\\r\\n                    <mat-form-field>\\r\\n                        <textarea matInput placeholder=\\\"Leave a comment\\\"></textarea>\\r\\n                    </mat-form-field>\\r\\n                </form>                              \\r\\n            </mat-card-content>\\r\\n        </mat-card>\\r\\n    </div>\\r\\n    <div class=\\\"flex-p\\\">\\r\\n        <mat-card>\\r\\n            <mat-card-header fxLayoutAlign=\\\"center\\\">                \\r\\n                <mat-card-subtitle><h2>Input with a custom ErrorStateMatcher</h2></mat-card-subtitle>\\r\\n            </mat-card-header>\\r\\n            <mat-card-content>\\r\\n                <form fxLayout=\\\"column\\\" fxLayoutAlign=\\\"center\\\">\\r\\n                    <mat-form-field>\\r\\n                        <input matInput placeholder=\\\"Email\\\" [formControl]=\\\"emailFormControl\\\" [errorStateMatcher]=\\\"matcher\\\">\\r\\n                        <mat-hint>Errors appear instantly!</mat-hint>\\r\\n                        <mat-error *ngIf=\\\"emailFormControl.hasError('email') && !emailFormControl.hasError('required')\\\">Please enter a valid email address</mat-error>\\r\\n                        <mat-error *ngIf=\\\"emailFormControl.hasError('required')\\\">Email is <strong>required</strong></mat-error>\\r\\n                    </mat-form-field>\\r\\n                </form>                              \\r\\n            </mat-card-content>\\r\\n        </mat-card>\\r\\n    </div>\\r\\n    <div class=\\\"flex-p\\\">\\r\\n        <mat-card>\\r\\n            <mat-card-header fxLayoutAlign=\\\"center\\\">                \\r\\n                <mat-card-subtitle><h2>Auto-resizing textarea</h2></mat-card-subtitle>\\r\\n            </mat-card-header>\\r\\n            <mat-card-content fxLayout=\\\"column\\\" fxLayoutAlign=\\\"center\\\">\\r\\n                <mat-form-field>\\r\\n                    <textarea matInput \\r\\n                              placeholder=\\\"Autosize textarea\\\" \\r\\n                              matTextareaAutosize \\r\\n                              matAutosizeMinRows=\\\"2\\\"\\r\\n                              matAutosizeMaxRows=\\\"5\\\"></textarea>\\r\\n                </mat-form-field>                       \\r\\n            </mat-card-content>\\r\\n        </mat-card>\\r\\n    </div>\\r\\n    <div class=\\\"flex-p\\\">\\r\\n        <mat-card>\\r\\n            <mat-card-header fxLayoutAlign=\\\"center\\\">                \\r\\n                <mat-card-subtitle><h2>Input with a clear button</h2></mat-card-subtitle>\\r\\n            </mat-card-header>\\r\\n            <mat-card-content fxLayout=\\\"column\\\" fxLayoutAlign=\\\"center\\\">\\r\\n                <mat-form-field>\\r\\n                    <input matInput type=\\\"text\\\" placeholder=\\\"Clearable input\\\" [(ngModel)]=\\\"value\\\"/>\\r\\n                    <button mat-button *ngIf=\\\"value\\\" matSuffix mat-icon-button aria-label=\\\"Clear\\\" (click)=\\\"value=''\\\">\\r\\n                        <mat-icon>close</mat-icon>\\r\\n                    </button>\\r\\n                </mat-form-field>                       \\r\\n            </mat-card-content>\\r\\n        </mat-card>\\r\\n    </div>\\r\\n    <div class=\\\"flex-p\\\">\\r\\n        <mat-card>\\r\\n            <mat-card-header fxLayoutAlign=\\\"center\\\">                \\r\\n                <mat-card-subtitle><h2>Inputs in a form</h2></mat-card-subtitle>\\r\\n            </mat-card-header>\\r\\n            <mat-card-content>\\r\\n                <form fxLayout=\\\"column\\\" fxLayoutAlign=\\\"center\\\">\\r\\n                  \\r\\n                    <mat-form-field>\\r\\n                        <input matInput placeholder=\\\"Company (disabled)\\\" disabled value=\\\"Google\\\">\\r\\n                    </mat-form-field>\\r\\n\\r\\n                    <table cellspacing=\\\"0\\\" class=\\\"w-100\\\">\\r\\n                        <tr>\\r\\n                            <td>\\r\\n                                <mat-form-field class=\\\"w-100\\\">\\r\\n                                    <input matInput placeholder=\\\"First name\\\">\\r\\n                                </mat-form-field>\\r\\n                            </td>\\r\\n                            <td>\\r\\n                                <mat-form-field class=\\\"w-100\\\">\\r\\n                                    <input matInput placeholder=\\\"Long Last Name That Will Be Truncated\\\">\\r\\n                                </mat-form-field>\\r\\n                            </td>\\r\\n                        </tr>\\r\\n                    </table>\\r\\n                    \\r\\n                    <mat-form-field class=\\\"w-100\\\">\\r\\n                        <textarea matInput placeholder=\\\"Address\\\">1600 Amphitheatre Pkwy</textarea>\\r\\n                    </mat-form-field>\\r\\n\\r\\n                    <mat-form-field class=\\\"w-100\\\">\\r\\n                        <textarea matInput placeholder=\\\"Address 2\\\"></textarea>\\r\\n                    </mat-form-field>                   \\r\\n\\r\\n                    <table cellspacing=\\\"0\\\" class=\\\"w-100\\\">\\r\\n                        <tr>\\r\\n                            <td>\\r\\n                                <mat-form-field class=\\\"w-100\\\">\\r\\n                                    <input matInput placeholder=\\\"City\\\">\\r\\n                                </mat-form-field>\\r\\n                            </td>\\r\\n                            <td>\\r\\n                                <mat-form-field class=\\\"w-100\\\">\\r\\n                                    <input matInput placeholder=\\\"State\\\">\\r\\n                                </mat-form-field>\\r\\n                            </td>\\r\\n                            <td>\\r\\n                                <mat-form-field class=\\\"w-100\\\">\\r\\n                                    <input matInput #postalCode maxlength=\\\"5\\\" placeholder=\\\"Postal Code\\\" value=\\\"94043\\\">\\r\\n                                    <mat-hint align=\\\"end\\\">{{postalCode.value.length}} / 5</mat-hint>\\r\\n                                </mat-form-field>\\r\\n                            </td>\\r\\n                        </tr>\\r\\n                    </table>\\r\\n\\r\\n                </form>\\r\\n            </mat-card-content>\\r\\n        </mat-card>\\r\\n    </div>\\r\\n</div>\\r\\n\"","import { Component } from '@angular/core';\r\nimport { FormControl, FormGroupDirective, NgForm, Validators } from '@angular/forms';\r\nimport { ErrorStateMatcher } from '@angular/material/core';\r\nimport { AppSettings } from '../../../app.settings';\r\nimport { Settings } from '../../../app.settings.model';\r\n\r\n@Component({\r\n  selector: 'app-input',\r\n  templateUrl: './input.component.html'\r\n})\r\nexport class InputComponent {\r\n  public settings: Settings;\r\n  constructor(public appSettings:AppSettings) {\r\n    this.settings = this.appSettings.settings;     \r\n  }\r\n\r\n  //Input with a custom ErrorStateMatcher\r\n  emailFormControl = new FormControl('', [\r\n    Validators.required,\r\n    Validators.email,\r\n  ]);\r\n  matcher = new MyErrorStateMatcher();\r\n\r\n  //Input with a clear button\r\n  value = 'Clear me';\r\n}\r\n\r\n\r\n/** Error when invalid control is dirty, touched, or submitted. */\r\nexport class MyErrorStateMatcher implements ErrorStateMatcher {\r\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\r\n    const isSubmitted = form && form.submitted;\r\n    return !!(control && control.invalid && (control.dirty || control.touched || isSubmitted));\r\n  }\r\n}","module.exports = \"<div fxLayout=\\\"column\\\">\\r\\n    <div class=\\\"flex-p\\\">\\r\\n        <mat-card>\\r\\n            <mat-card-header>                \\r\\n                <mat-card-subtitle><h2>Basic radios</h2></mat-card-subtitle>\\r\\n            </mat-card-header>\\r\\n            <mat-card-content>\\r\\n                <mat-radio-group>\\r\\n                    <mat-radio-button value=\\\"1\\\">Option 1</mat-radio-button>\\r\\n                    <mat-radio-button value=\\\"2\\\">Option 2</mat-radio-button>\\r\\n                </mat-radio-group>   \\r\\n            </mat-card-content>\\r\\n        </mat-card>\\r\\n    </div> \\r\\n    <div class=\\\"flex-p\\\">\\r\\n        <mat-card>\\r\\n            <mat-card-header>                \\r\\n                <mat-card-subtitle><h2>Radios with ngModel</h2></mat-card-subtitle>\\r\\n            </mat-card-header>\\r\\n            <mat-card-content>\\r\\n                <mat-radio-group [(ngModel)]=\\\"favoriteSeason\\\" fxLayout=\\\"column\\\" fxLayoutAlign=\\\"center\\\">\\r\\n                    <mat-radio-button *ngFor=\\\"let season of seasons\\\" [value]=\\\"season\\\" class=\\\"season-item\\\">\\r\\n                      {{season}}\\r\\n                    </mat-radio-button>\\r\\n                </mat-radio-group>\\r\\n                <div class=\\\"py-1\\\">Your favorite season is: <b> {{favoriteSeason}} </b></div>\\r\\n            </mat-card-content>\\r\\n        </mat-card>\\r\\n    </div> \\r\\n</div>\"","module.exports = \".season-item {\\n  margin-bottom: 6px; }\\n\"","import { Component } from '@angular/core';\r\nimport { AppSettings } from '../../../app.settings';\r\nimport { Settings } from '../../../app.settings.model';\r\n\r\n@Component({\r\n  selector: 'app-radio-button',\r\n  templateUrl: './radio-button.component.html',\r\n  styleUrls: ['./radio-button.component.scss']\r\n})\r\nexport class RadioButtonComponent {\r\n  public settings: Settings;\r\n  constructor(public appSettings:AppSettings) {\r\n    this.settings = this.appSettings.settings;     \r\n  }\r\n\r\n  favoriteSeason: string;\r\n  seasons = [\r\n    'Winter',\r\n    'Spring',\r\n    'Summer',\r\n    'Autumn',\r\n  ];\r\n}","module.exports = \"<div fxLayout=\\\"column\\\">\\r\\n    <div class=\\\"flex-p\\\">\\r\\n        <mat-card>\\r\\n            <mat-card-header>                \\r\\n                <mat-card-subtitle><h2>Basic select</h2></mat-card-subtitle>\\r\\n            </mat-card-header>\\r\\n            <mat-card-content >\\r\\n                <mat-form-field>\\r\\n                    <mat-select placeholder=\\\"Favorite food\\\" [(ngModel)]=\\\"selectedValue\\\" name=\\\"food\\\">\\r\\n                        <mat-option *ngFor=\\\"let food of foods\\\" [value]=\\\"food.value\\\">\\r\\n                            {{food.viewValue}}\\r\\n                        </mat-option>\\r\\n                    </mat-select>\\r\\n                </mat-form-field>\\r\\n                <p class=\\\"py-1\\\"> Selected value: <b>{{selectedValue}}</b> </p>\\r\\n            </mat-card-content>\\r\\n        </mat-card>\\r\\n    </div> \\r\\n    <div class=\\\"flex-p\\\">\\r\\n        <mat-card>\\r\\n            <mat-card-header>                \\r\\n                <mat-card-subtitle><h2>Select with option groups</h2></mat-card-subtitle>\\r\\n            </mat-card-header>\\r\\n            <mat-card-content >\\r\\n                <mat-form-field>\\r\\n                    <mat-select placeholder=\\\"Pokemon\\\" [formControl]=\\\"pokemonControl\\\">\\r\\n                        <mat-option>-- None --</mat-option>\\r\\n                        <mat-optgroup *ngFor=\\\"let group of pokemonGroups\\\" [label]=\\\"group.name\\\" [disabled]=\\\"group.disabled\\\">\\r\\n                            <mat-option *ngFor=\\\"let pokemon of group.pokemon\\\" [value]=\\\"pokemon.value\\\">\\r\\n                                {{ pokemon.viewValue }}\\r\\n                            </mat-option>\\r\\n                        </mat-optgroup>\\r\\n                    </mat-select>\\r\\n                </mat-form-field>\\r\\n            </mat-card-content>\\r\\n        </mat-card>\\r\\n    </div> \\r\\n    <div class=\\\"flex-p\\\">\\r\\n        <mat-card>\\r\\n            <mat-card-header>                \\r\\n                <mat-card-subtitle><h2>Select with multiple selection</h2></mat-card-subtitle>\\r\\n            </mat-card-header>\\r\\n            <mat-card-content >\\r\\n                <mat-form-field>\\r\\n                    <mat-select placeholder=\\\"Toppings\\\" [formControl]=\\\"toppings\\\" multiple>\\r\\n                        <mat-option *ngFor=\\\"let topping of toppingList\\\" [value]=\\\"topping\\\">{{topping}}</mat-option>\\r\\n                    </mat-select>\\r\\n                </mat-form-field>\\r\\n            </mat-card-content>\\r\\n        </mat-card>\\r\\n    </div> \\r\\n    <div class=\\\"flex-p\\\">\\r\\n        <mat-card>\\r\\n            <mat-card-header>                \\r\\n                <mat-card-subtitle><h2>Select with custom trigger text</h2></mat-card-subtitle>\\r\\n            </mat-card-header>\\r\\n            <mat-card-content >\\r\\n                <mat-form-field>\\r\\n                    <mat-select placeholder=\\\"Toppings\\\" [formControl]=\\\"toppings2\\\" multiple>\\r\\n                        <mat-select-trigger>\\r\\n                          {{toppings2.value ? toppings2.value[0] : ''}}\\r\\n                          <small *ngIf=\\\"toppings2.value?.length > 1\\\">\\r\\n                            (+{{toppings2.value.length - 1}} others)\\r\\n                          </small>\\r\\n                        </mat-select-trigger>\\r\\n                        <mat-option *ngFor=\\\"let topping of toppingList2\\\" [value]=\\\"topping\\\">{{topping}}</mat-option>\\r\\n                    </mat-select>\\r\\n                </mat-form-field>\\r\\n            </mat-card-content>\\r\\n        </mat-card>\\r\\n    </div> \\r\\n</div>\"","import { Component } from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\nimport { AppSettings } from '../../../app.settings';\r\nimport { Settings } from '../../../app.settings.model';\r\n\r\n@Component({\r\n  selector: 'app-select',\r\n  templateUrl: './select.component.html'\r\n})\r\nexport class SelectComponent {\r\n  public settings: Settings;\r\n  constructor(public appSettings:AppSettings) {\r\n    this.settings = this.appSettings.settings;     \r\n  }\r\n\r\n  //Basic select\r\n  selectedValue: string;\r\n  foods = [\r\n    {value: 'steak-0', viewValue: 'Steak'},\r\n    {value: 'pizza-1', viewValue: 'Pizza'},\r\n    {value: 'tacos-2', viewValue: 'Tacos'}\r\n  ];\r\n\r\n  //Select with option groups\r\n  pokemonControl = new FormControl();\r\n  pokemonGroups = [\r\n    {\r\n      name: 'Grass',\r\n      pokemon: [\r\n        { value: 'bulbasaur-0', viewValue: 'Bulbasaur' },\r\n        { value: 'oddish-1', viewValue: 'Oddish' },\r\n        { value: 'bellsprout-2', viewValue: 'Bellsprout' }\r\n      ]\r\n    },\r\n    {\r\n      name: 'Water',\r\n      pokemon: [\r\n        { value: 'squirtle-3', viewValue: 'Squirtle' },\r\n        { value: 'psyduck-4', viewValue: 'Psyduck' },\r\n        { value: 'horsea-5', viewValue: 'Horsea' }\r\n      ]\r\n    },\r\n    {\r\n      name: 'Fire',\r\n      disabled: true,\r\n      pokemon: [\r\n        { value: 'charmander-6', viewValue: 'Charmander' },\r\n        { value: 'vulpix-7', viewValue: 'Vulpix' },\r\n        { value: 'flareon-8', viewValue: 'Flareon' }\r\n      ]\r\n    },\r\n    {\r\n      name: 'Psychic',\r\n      pokemon: [\r\n        { value: 'mew-9', viewValue: 'Mew' },\r\n        { value: 'mewtwo-10', viewValue: 'Mewtwo' },\r\n      ]\r\n    }\r\n  ];\r\n\r\n  //Select with multiple selection\r\n  toppings = new FormControl();\r\n  toppingList = ['Extra cheese', 'Mushroom', 'Onion', 'Pepperoni', 'Sausage', 'Tomato'];\r\n\r\n  //Select with custom trigger text\r\n  toppings2 = new FormControl();\r\n  toppingList2 = ['Extra cheese', 'Mushroom', 'Onion', 'Pepperoni', 'Sausage', 'Tomato'];\r\n\r\n}","module.exports = \"<div fxLayout=\\\"column\\\">\\r\\n    <div class=\\\"flex-p\\\">\\r\\n        <mat-card>\\r\\n            <mat-card-header>                \\r\\n                <mat-card-subtitle><h2>Slide-toggle configuration</h2></mat-card-subtitle>\\r\\n            </mat-card-header>\\r\\n            <mat-card-content>\\r\\n                <section class=\\\"py-1\\\">\\r\\n                    <label>Color:</label>\\r\\n                    <mat-radio-group [(ngModel)]=\\\"color\\\">\\r\\n                        <mat-radio-button value=\\\"primary\\\">Primary</mat-radio-button>\\r\\n                        <mat-radio-button value=\\\"accent\\\">Accent</mat-radio-button>\\r\\n                        <mat-radio-button value=\\\"warn\\\">Warn</mat-radio-button>\\r\\n                    </mat-radio-group>\\r\\n                </section>\\r\\n\\r\\n                <section class=\\\"py-1\\\">\\r\\n                    <mat-checkbox [(ngModel)]=\\\"checked\\\">Checked</mat-checkbox>\\r\\n                </section>\\r\\n\\r\\n                <section class=\\\"py-1\\\">\\r\\n                    <mat-checkbox [(ngModel)]=\\\"disabled\\\">Disabled</mat-checkbox>\\r\\n                </section>\\r\\n\\r\\n                <hr>\\r\\n\\r\\n                <h2 class=\\\"py-1\\\">Result</h2>\\r\\n\\r\\n                <mat-slide-toggle\\r\\n                    [color]=\\\"color\\\"\\r\\n                    [checked]=\\\"checked\\\"\\r\\n                    [disabled]=\\\"disabled\\\">\\r\\n                  Slide me!\\r\\n                </mat-slide-toggle>\\r\\n                            \\r\\n            </mat-card-content>\\r\\n        </mat-card>\\r\\n    </div> \\r\\n</div>\"","import { Component } from '@angular/core';\r\nimport { AppSettings } from '../../../app.settings';\r\nimport { Settings } from '../../../app.settings.model';\r\n\r\n@Component({\r\n  selector: 'app-slide-toggle',\r\n  templateUrl: './slide-toggle.component.html'\r\n})\r\nexport class SlideToggleComponent {\r\n  public settings: Settings;\r\n  constructor(public appSettings:AppSettings) {\r\n    this.settings = this.appSettings.settings;     \r\n  }\r\n\r\n  color = 'accent';\r\n  checked = false;\r\n  disabled = false;\r\n\r\n}","module.exports = \"<div fxLayout=\\\"column\\\">\\r\\n    <div class=\\\"flex-p\\\">\\r\\n        <mat-card>\\r\\n            <mat-card-header>                \\r\\n                <mat-card-subtitle><h2>Slider configuration</h2></mat-card-subtitle>\\r\\n            </mat-card-header>\\r\\n            <mat-card-content>\\r\\n                <section class=\\\"py-1\\\">\\r\\n                    <mat-form-field>\\r\\n                        <input matInput type=\\\"number\\\" placeholder=\\\"Value\\\" [(ngModel)]=\\\"value\\\">\\r\\n                    </mat-form-field>\\r\\n                    <mat-form-field>\\r\\n                        <input matInput type=\\\"number\\\" placeholder=\\\"Min value\\\" [(ngModel)]=\\\"min\\\">\\r\\n                    </mat-form-field>\\r\\n                    <mat-form-field>\\r\\n                        <input matInput type=\\\"number\\\" placeholder=\\\"Max value\\\" [(ngModel)]=\\\"max\\\">\\r\\n                    </mat-form-field>\\r\\n                    <mat-form-field>\\r\\n                        <input matInput type=\\\"number\\\" placeholder=\\\"Step size\\\" [(ngModel)]=\\\"step\\\">\\r\\n                    </mat-form-field>\\r\\n                </section>\\r\\n\\r\\n                <section class=\\\"py-1\\\">\\r\\n                    <mat-checkbox [(ngModel)]=\\\"showTicks\\\">Show ticks</mat-checkbox>\\r\\n                    <mat-checkbox [(ngModel)]=\\\"autoTicks\\\" *ngIf=\\\"showTicks\\\">Auto ticks</mat-checkbox>\\r\\n                    <mat-form-field *ngIf=\\\"showTicks && !autoTicks\\\">\\r\\n                        <input matInput type=\\\"number\\\" placeholder=\\\"Tick interval\\\" [(ngModel)]=\\\"tickInterval\\\">\\r\\n                    </mat-form-field>\\r\\n                </section>\\r\\n\\r\\n                <section class=\\\"py-1\\\">\\r\\n                    <mat-checkbox [(ngModel)]=\\\"thumbLabel\\\">Show thumb label</mat-checkbox>\\r\\n                </section>\\r\\n\\r\\n                <section class=\\\"py-1\\\">\\r\\n                    <mat-checkbox [(ngModel)]=\\\"vertical\\\">Vertical</mat-checkbox>\\r\\n                    <mat-checkbox [(ngModel)]=\\\"invert\\\">Inverted</mat-checkbox>\\r\\n                </section>\\r\\n\\r\\n                <section class=\\\"py-1\\\">\\r\\n                    <mat-checkbox [(ngModel)]=\\\"disabled\\\">Disabled</mat-checkbox>\\r\\n                </section>\\r\\n\\r\\n                <hr>\\r\\n\\r\\n                <h2 class=\\\"py-1\\\">Result</h2>\\r\\n\\r\\n                <mat-slider class=\\\"custom-slider\\\"\\r\\n                    [disabled]=\\\"disabled\\\"\\r\\n                    [invert]=\\\"invert\\\"\\r\\n                    [max]=\\\"max\\\"\\r\\n                    [min]=\\\"min\\\"\\r\\n                    [step]=\\\"step\\\"\\r\\n                    [thumbLabel]=\\\"thumbLabel\\\"\\r\\n                    [tickInterval]=\\\"tickInterval\\\"\\r\\n                    [(ngModel)]=\\\"value\\\"\\r\\n                    [vertical]=\\\"vertical\\\">\\r\\n                </mat-slider>\\r\\n                            \\r\\n            </mat-card-content>\\r\\n        </mat-card>\\r\\n    </div> \\r\\n</div>\"","module.exports = \".custom-slider {\\n  width: 250px; }\\n\"","import { Component } from '@angular/core';\r\nimport { AppSettings } from '../../../app.settings';\r\nimport { Settings } from '../../../app.settings.model';\r\n\r\n@Component({\r\n  selector: 'app-slider',\r\n  templateUrl: './slider.component.html',\r\n  styleUrls: ['./slider.component.scss']\r\n})\r\nexport class SliderComponent {\r\n  public settings: Settings;\r\n  constructor(public appSettings:AppSettings) {\r\n    this.settings = this.appSettings.settings;     \r\n  }\r\n\r\n\r\n  autoTicks = false;\r\n  disabled = false;\r\n  invert = false;\r\n  max = 100;\r\n  min = 0;\r\n  showTicks = false;\r\n  step = 1;\r\n  thumbLabel = false;\r\n  value = 0;\r\n  vertical = false;\r\n\r\n  get tickInterval(): number | 'auto' {\r\n    return this.showTicks ? (this.autoTicks ? 'auto' : this._tickInterval) : 0;\r\n  }\r\n  set tickInterval(v) {\r\n    this._tickInterval = Number(v);\r\n  }\r\n  private _tickInterval = 1;\r\n\r\n}\r\n"],"sourceRoot":""}