(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@ngxs/store'), require('rxjs/operators')) :
    typeof define === 'function' && define.amd ? define('@ngxs/logger-plugin', ['exports', '@angular/core', '@ngxs/store', 'rxjs/operators'], factory) :
    (factory((global.ngxs = global.ngxs || {}, global.ngxs['logger-plugin'] = {}),global.ng.core,global['ngxs-store'],global.Rx.Observable.prototype));
}(this, (function (exports,core,store,operators) { 'use strict';

    var NGXS_LOGGER_PLUGIN_OPTIONS = new core.InjectionToken('NGXS_LOGGER_PLUGIN_OPTIONS');
    var repeat = function (str, times) { return new Array(times + 1).join(str); };
    var pad = function (num, maxLength) { return repeat('0', maxLength - num.toString().length) + num; };
    var NgxsLoggerPlugin = (function () {
        function NgxsLoggerPlugin(_options) {
            this._options = _options;
        }
        NgxsLoggerPlugin.prototype.handle = function (state, event, next) {
            var _this = this;
            if (this._options.disabled) {
                return next(state, event);
            }
            var options = this._options || {};
            var logger = options.logger || console;
            var actionName = store.getActionTypeFromInstance(event);
            var time = new Date();
            // tslint:disable-next-line
            var formattedTime = " @ " + pad(time.getHours(), 2) + ":" + pad(time.getMinutes(), 2) + ":" + pad(time.getSeconds(), 2) + "." + pad(time.getMilliseconds(), 3);
            var message = "action " + actionName + formattedTime;
            var startMessage = options.collapsed ? logger.groupCollapsed : logger.group;
            try {
                startMessage.call(logger, message);
            }
            catch (e) {
                console.log(message);
            }
            if (typeof event.payload !== 'undefined') {
                this.log('payload', 'color: #9E9E9E; font-weight: bold', event.payload);
            }
            this.log('prev state', 'color: #9E9E9E; font-weight: bold', state);
            return next(state, event).pipe(operators.tap(function (nextState) {
                _this.log('next state', 'color: #4CAF50; font-weight: bold', nextState);
                try {
                    logger.groupEnd();
                }
                catch (e) {
                    logger.log('—— log end ——');
                }
            }));
        };
        NgxsLoggerPlugin.prototype.log = function (title, color, payload) {
            var options = this._options || {};
            var logger = options.logger || console;
            if (this.isIE()) {
                logger.log(title, payload);
            }
            else {
                logger.log('%c ' + title, color, payload);
            }
        };
        NgxsLoggerPlugin.prototype.isIE = function () {
            var ua = typeof window !== 'undefined' && window.navigator.userAgent ? window.navigator.userAgent : '';
            var ms_ie = false;
            var old_ie = ua.indexOf('MSIE ');
            var new_ie = ua.indexOf('Trident/');
            if (old_ie > -1 || new_ie > -1) {
                ms_ie = true;
            }
            return ms_ie;
        };
        return NgxsLoggerPlugin;
    }());
    NgxsLoggerPlugin.decorators = [
        { type: core.Injectable },
    ];
    /** @nocollapse */
    NgxsLoggerPlugin.ctorParameters = function () {
        return [
            { type: undefined, decorators: [{ type: core.Inject, args: [NGXS_LOGGER_PLUGIN_OPTIONS,] },] },
        ];
    };
    var USER_OPTIONS = new core.InjectionToken('LOGGER_USER_OPTIONS');
    function loggerOptionsFactory(options) {
        var defaultLoggerOptions = {
            logger: console,
            collapsed: false,
            disabled: false
        };
        return Object.assign({}, defaultLoggerOptions, options);
    }
    var NgxsLoggerPluginModule = (function () {
        function NgxsLoggerPluginModule() {
        }
        NgxsLoggerPluginModule.forRoot = function (options) {
            return {
                ngModule: NgxsLoggerPluginModule,
                providers: [
                    {
                        provide: store.NGXS_PLUGINS,
                        useClass: NgxsLoggerPlugin,
                        multi: true
                    },
                    {
                        provide: USER_OPTIONS,
                        useValue: options
                    },
                    {
                        provide: NGXS_LOGGER_PLUGIN_OPTIONS,
                        useFactory: loggerOptionsFactory,
                        deps: [USER_OPTIONS]
                    }
                ]
            };
        };
        return NgxsLoggerPluginModule;
    }());
    NgxsLoggerPluginModule.decorators = [
        { type: core.NgModule },
    ];

    exports.ɵa = USER_OPTIONS;
    exports.ɵb = loggerOptionsFactory;
    exports.ɵd = NGXS_LOGGER_PLUGIN_OPTIONS;
    exports.NgxsLoggerPluginModule = NgxsLoggerPluginModule;
    exports.NgxsLoggerPlugin = NgxsLoggerPlugin;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ngxs-logger-plugin.umd.js.map
