{"version":3,"file":"ng-scrollreveal.umd.min.js","sources":["../../tmp/services/ngs-reveal-config.ts","../../tmp/services/window.service.ts","../../tmp/services/ngs-reveal.service.ts","../../tmp/directives/ngs-reveal-common.directive.ts","../../tmp/directives/ngs-reveal.directive.ts","../../tmp/directives/ngs-reveal-set.directive.ts","../../tmp/ngs-reveal.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\n/**\n * Configuration service for the NgScrollReveal directives.\n * You can inject this service, typically in your root component, and customize the values of its properties in\n * order to provide default values for all the ngsReveal directives used in the application.\n */\n\nexport class NgsRevealConfig {\n    // 'bottom', 'left', 'top', 'right'\n    origin?: 'bottom' | 'left' | 'top' | 'right' = 'bottom';\n\n    // Can be any valid CSS distance, e.g. '5rem', '10%', '20vw', etc.\n    distance?= '20px';\n\n    // Time in milliseconds.\n    duration?= 500;\n    delay?= 0;\n\n    // Starting angles in degrees, will transition from these values to 0 in all axes.\n    rotate?= { x: 0, y: 0, z: 0 };\n\n    // Starting opacity value, before transitioning to the computed opacity.\n    opacity?= 0;\n\n    // Starting scale value, will transition from this value to 1\n    scale?= 0.9;\n\n    // Accepts any valid CSS easing, e.g. 'ease', 'ease-in-out', 'linear', etc.\n    easing?= 'cubic-bezier(0.6, 0.2, 0.1, 1)';\n\n    // `<html>` is the default reveal container. You can pass either:\n    // DOM Node, e.g. document.querySelector('.fooContainer')\n    // Selector, e.g. '.fooContainer'\n    container?: Element | string;\n\n    // true/false to control reveal animations on mobile.\n    mobile?= true;\n\n    // true:  reveals occur every time elements become visible\n    // false: reveals occur once as elements become visible\n    reset?= false;\n\n    // 'always' — delay for all reveal animations\n    // 'once'   — delay only the first time reveals occur\n    // 'onload' - delay only for animations triggered by first load\n    useDelay?: 'always' | 'once' | 'onload' = 'always';\n\n    // Change when an element is considered in the viewport. The default value\n    // of 0.20 means 20% of an element must be visible for its reveal to occur.\n    viewFactor?= 0.2;\n\n    // Pixel values that alter the container boundaries.\n    // e.g. Set `{ top: 48 }`, if you have a 48px tall fixed toolbar.\n    // --\n    // Visual Aid: https://scrollrevealjs.org/assets/viewoffset.png\n    viewOffset?= { top: 0, right: 0, bottom: 0, left: 0 };\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable } from '@angular/core';\n\n/**\n * Service to interact with the window object.\n */\n\nexport class WindowService {\n\n  get nativeWindow(): any {\n    return _window();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n];\n}\n\nfunction _window(): any {\n  // Return the global native browser window object\n  return typeof window !== 'undefined' ? window : undefined;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable, ElementRef } from '@angular/core';\nimport { NgsRevealConfig } from './ngs-reveal-config';\nimport { WindowService } from './window.service';\n\n\n/**\n * Marker interface to indicate that an object (typically `window`) has `scrollreveal` property.\n */\nexport interface NgsHasScrollreveal {\n  scrollReveal: scrollReveal.ScrollRevealObject;\n}\n\n/**\n * Service to inject in directives to use ScrollReveal JS.\n * It delegates the work to SR, when DOM manipulation is possible (i.e app is not running in a web worker for e.g).\n * If not possible, most methods simply do nothing, as DOM elements are not available anyway.\n */\n\nexport class NgsRevealService {\n\n  // the Magic Maker !\n  // this objet is added to window scope when linking the scrollreveal.js library\n  private sr: scrollReveal.ScrollRevealObject;\n\n  // Window Object\n  private window: Window & NgsHasScrollreveal;\n\n\n  constructor(private config: NgsRevealConfig, private windowService: WindowService) {\n    this.window = windowService.nativeWindow;\n\n    if (this.window) {// universal support\n      // init the scrollReveal library with injected config\n      let srConfig: scrollReveal.ScrollRevealObjectOptions = Object.assign({}, config || {});\n      this.sr = ScrollReveal(srConfig);\n    }\n  }\n\n  /**\n   * Method to reveal a single DOM element.\n   * @param elementRef  a reference to the element to reveal\n   * @param config      (optional) custom configuration to use when revealing this element\n   */\n  reveal(elementRef: ElementRef, config?: NgsRevealConfig): scrollReveal.ScrollRevealObject {\n    if (!this.window) {// universal support\n      return null;\n    }\n    return elementRef.nativeElement ? // can be null, if app is running in a web worker for i.e\n      this.sr.reveal(elementRef.nativeElement, config) : this.sr;\n  }\n\n  /**\n   * Method to reveal a set of DOM elements.\n   * @param parentElementRef  the parent DOM element encaspulating the child elements to reveal\n   * @param selector          a list of CSS selectors (comma-separated) that identifies child elements to reveal\n   * @param interval          (optional) interval in milliseconds, to animate child elemnts sequentially\n   * @param config            (optional) custom configuration to use when revealing this set of elements\n   */\n  revealSet(parentElementRef: ElementRef, selector: string, interval?: number, config?: NgsRevealConfig): scrollReveal.ScrollRevealObject {\n    if (!this.window) {// universal support\n      return null;\n    }\n    return parentElementRef.nativeElement ? // can be null, if app is running in a web worker for i.e\n      this.sr.reveal(selector, config, interval) : this.sr;\n  }\n\n  /**\n   * Method to synchronize and consider newly added child elements (for e.g when child elements were added asynchronously to parent DOM) .\n   */\n  sync(): void {\n    if (this.window) {// universal support\n      this.sr.sync();\n    }\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n{type: NgsRevealConfig, },\n{type: WindowService, },\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgsRevealConfig } from '../services/ngs-reveal-config';\nimport { NgsRevealService } from '../services/ngs-reveal.service';\n\n/**\n * Base directive class shared by the concrete ScrollReveal directives.\n */\nexport abstract class AbstractNgsRevealDirective {\n\n    config: NgsRevealConfig;\n\n    constructor(protected ngsRevealService: NgsRevealService) { }\n\n    protected _initConfig(value: string | NgsRevealConfig): void {\n        if (value && typeof value === 'string') {\n            this.config = JSON.parse(value);\n        } else if (value && typeof value === 'object') {\n            this.config = value;\n        }\n    }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, HostBinding, OnInit, ElementRef, Input } from '@angular/core';\nimport { NgsRevealConfig } from '../services/ngs-reveal-config';\nimport { NgsRevealService } from '../services/ngs-reveal.service';\nimport { AbstractNgsRevealDirective } from './ngs-reveal-common.directive';\n\n/**\n * Directive to add 'ScrollReveal' functionality to a <b>single DOM element</b> in the page.\n */\n\nexport class NgsRevealDirective extends AbstractNgsRevealDirective implements OnInit {\n\n    \n    visibility = 'hidden';\n\n    /**\n     * Custom configuration to use when revealing this element\n     */\n    \n    set _config(value: string | NgsRevealConfig) {\n        this._initConfig(value);\n    }\n\n    constructor(private elementRef: ElementRef, ngsRevealService: NgsRevealService) {\n        super(ngsRevealService);\n    }\n\n    ngOnInit() {\n        this.ngsRevealService.reveal(this.elementRef, this.config);\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: '[ngsReveal]'\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n{type: ElementRef, },\n{type: NgsRevealService, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'visibility': [{ type: HostBinding, args: ['style.visibility', ] },],\n'_config': [{ type: Input, args: ['ngsReveal', ] },],\n};\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, OnInit, OnChanges, SimpleChange, ElementRef, Input } from '@angular/core';\nimport { NgsRevealConfig } from '../services/ngs-reveal-config';\nimport { NgsRevealService } from '../services/ngs-reveal.service';\nimport { AbstractNgsRevealDirective } from './ngs-reveal-common.directive';\n\n\n/**\n * Directive to add 'ScrollReveal' functionality to a <b>set of DOM elements</b> (identify via the `[ngsSelector]` attribute) in the page.\n * This directive is meant to be placed on the <b>parent node</b> that contains the child elements to reveal.\n * You can optionally add the `[ngsInterval]` attribute to reveal items sequentially, following the given interval(in milliseconds).\n * You can optionally add the `[ngsSync]` attribute to reveal new child elements that may have been added in the parent node asynchronously.\n *\n */\n\nexport class NgsRevealSetDirective extends AbstractNgsRevealDirective implements OnInit, OnChanges {\n\n    /**\n     * Custom configuration to use when revealing this set of elements\n     */\n    \n    set _config(value: string | NgsRevealConfig) {\n        this._initConfig(value);\n    }\n\n    /**\n     * CSS selector to identify child elements to reveal\n     */\n    \n    ngsSelector: string;\n\n    /**\n     * Sequence interval (in milliseconds) to the reveal child elements sequentially\n     */\n    \n    ngsInterval: number;\n\n    /**\n     * Boolean indicating when the set should be synced, to reveal asynchronously added child elements\n     */\n    \n    ngsSync: boolean;\n\n    constructor(private elementRef: ElementRef, ngsRevealService: NgsRevealService) {\n        super(ngsRevealService);\n    }\n\n    ngOnInit() {\n        if (!this.ngsSelector && console) {\n            let item: string = this.elementRef.nativeElement ? this.elementRef.nativeElement.className : '';\n            console.error(`[ng-scrollreveal] You must set \"[ngsSelector]\" attribute on item '${item}' when using \"ngsRevealSet\"`);\n            return;\n        }\n        this.ngsRevealService.revealSet(this.elementRef, this.ngsSelector, this.ngsInterval, this.config);\n    }\n\n    ngOnChanges(changes: { [propertyName: string]: SimpleChange }) {\n\n        let ngsSyncProp = 'ngsSync';\n        if (ngsSyncProp in changes\n            && !changes[ngsSyncProp].isFirstChange()\n            && !changes[ngsSyncProp].currentValue()) {\n            this.ngsRevealService.sync();\n        }\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: '[ngsRevealSet]'\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n{type: ElementRef, },\n{type: NgsRevealService, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_config': [{ type: Input, args: ['ngsRevealSet', ] },],\n'ngsSelector': [{ type: Input },],\n'ngsInterval': [{ type: Input },],\n'ngsSync': [{ type: Input },],\n};\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { WindowService, NgsRevealService, NgsRevealConfig } from './services/index';\nimport { NgsRevealDirective, NgsRevealSetDirective } from './directives/index';\n\nexport { WindowService, NgsRevealService, NgsRevealConfig } from './services/index';\n\nexport { NgsRevealDirective, NgsRevealSetDirective } from './directives/index';\n\n/**\n * Main module of the library\n */\n\nexport class NgsRevealModule {\n\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: NgsRevealModule,\n      providers: [WindowService, NgsRevealService, NgsRevealConfig]\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule\n  ],\n  exports: [NgsRevealDirective, NgsRevealSetDirective],\n  declarations: [NgsRevealDirective, NgsRevealSetDirective]\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["this","x","y","z","top","right","bottom","left","NgsRevealConfig","type","Injectable","Object","WindowService","window","undefined","config","windowService","nativeWindow","srConfig","assign","sr","ScrollReveal","NgsRevealService","elementRef","nativeElement","reveal","parentElementRef","selector","interval","sync","ngsRevealService","AbstractNgsRevealDirective","value","JSON","parse","_super","__extends","NgsRevealDirective","_initConfig","Directive","args","ElementRef","visibility","HostBinding","_config","Input","NgsRevealSetDirective","ngsSelector","console","revealSet","ngsInterval","item","className","error","changes","isFirstChange","currentValue","ngsSync","NgsRevealModule","ngModule","providers","NgModule","imports","CommonModule","exports","declarations"],"mappings":"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"}