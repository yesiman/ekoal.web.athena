{
  "version": 3,
  "file": "state-context-factory.js",
  "sources": [
    "ng://@ngxs/store/packages/store/src/state-context-factory.ts"
  ],
  "sourcesContent": [
    "import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { StateContext } from './symbols';\nimport { MappedStore } from './internals';\nimport { setValue, getValue } from './utils';\nimport { InternalStateOperations } from './state-operations';\n\n/**\n * State Context factory class\n * @ignore\n */\n@Injectable()\nexport class StateContextFactory {\n  constructor(\n    private _internalStateOperations: InternalStateOperations\n  ) {}\n\n  /**\n   * Create the state context\n   */\n  createStateContext(metadata: MappedStore): StateContext<any> {\n    const root = this._internalStateOperations.getRootStateOperations();\n    return {\n      getState(): any {\n        const state = root.getState();\n        return getValue(state, metadata.depth);\n      },\n      patchState(val: any): any {\n        const isArray = Array.isArray(val);\n        const isPrimitive = typeof val !== 'object';\n\n        if (isArray) {\n          throw new Error('Patching arrays is not supported.');\n        } else if (isPrimitive) {\n          throw new Error('Patching primitives is not supported.');\n        }\n\n        const state = root.getState();\n        const local = getValue(state, metadata.depth);\n        const clone = { ...local };\n\n        for (const k in val) {\n          clone[k] = val[k];\n        }\n\n        const newState = setValue(state, metadata.depth, clone);\n        root.setState(newState);\n        return newState;\n      },\n      setState(val: any): any {\n        let state = root.getState();\n        state = setValue(state, metadata.depth, val);\n        root.setState(state);\n        return state;\n      },\n      dispatch(actions: any | any[]): Observable<any> {\n        return root.dispatch(actions);\n      }\n    };\n  }\n}\n"
  ],
  "names": [],
  "mappings": "AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAK3C,OAAO,EAAE,QAAQ,EAAE,QAAQ,EAAE,MAAM,SAAS,CAAC;AAC7C,OAAO,EAAE,uBAAuB,EAAE,MAAM,oBAAoB,CAAC;;;;;AAO7D,MAAM;IACJ,YACU,wBAAiD;QAAjD,6BAAwB,GAAxB,wBAAwB,CAAyB;KACvD;;;;IAKJ,kBAAkB,CAAC,QAAqB;QACtC,MAAM,IAAI,GAAG,IAAI,CAAC,wBAAwB,CAAC,sBAAsB,EAAE,CAAC;QACpE,MAAM,CAAC;YACL,QAAQ;gBACN,MAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;gBAC9B,MAAM,CAAC,QAAQ,CAAC,KAAK,EAAE,QAAQ,CAAC,KAAK,CAAC,CAAC;aACxC;YACD,UAAU,CAAC,GAAQ;gBACjB,MAAM,OAAO,GAAG,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;gBACnC,MAAM,WAAW,GAAG,OAAO,GAAG,KAAK,QAAQ,CAAC;gBAE5C,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;oBACZ,MAAM,IAAI,KAAK,CAAC,mCAAmC,CAAC,CAAC;iBACtD;gBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC;oBACvB,MAAM,IAAI,KAAK,CAAC,uCAAuC,CAAC,CAAC;iBAC1D;gBAED,MAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;gBAC9B,MAAM,KAAK,GAAG,QAAQ,CAAC,KAAK,EAAE,QAAQ,CAAC,KAAK,CAAC,CAAC;gBAC9C,MAAM,KAAK,qBAAQ,KAAK,CAAE,CAAC;gBAE3B,GAAG,CAAC,CAAC,MAAM,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC;oBACpB,KAAK,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;iBACnB;gBAED,MAAM,QAAQ,GAAG,QAAQ,CAAC,KAAK,EAAE,QAAQ,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;gBACxD,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;gBACxB,MAAM,CAAC,QAAQ,CAAC;aACjB;YACD,QAAQ,CAAC,GAAQ;gBACf,IAAI,KAAK,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;gBAC5B,KAAK,GAAG,QAAQ,CAAC,KAAK,EAAE,QAAQ,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;gBAC7C,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;gBACrB,MAAM,CAAC,KAAK,CAAC;aACd;YACD,QAAQ,CAAC,OAAoB;gBAC3B,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;aAC/B;SACF,CAAC;KACH;;;YAhDF,UAAU;;;;YANF,uBAAuB"
}
